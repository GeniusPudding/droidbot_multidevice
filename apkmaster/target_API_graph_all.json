{
    "java": {
        "lang": {
            "Object": {
                "getClass": "Ljava/lang/Object;->getClass"
            },
            "Class": {
                "desiredAssertionStatus": "Ljava/lang/Class;->desiredAssertionStatus",
                "equals": "Ljava/lang/Class;->equals",
                "isAnnotation": "Ljava/lang/Class;->isAnnotation",
                "isAnnotationPresent": "Ljava/lang/Class;->isAnnotationPresent",
                "isAnonymousClass": "Ljava/lang/Class;->isAnonymousClass",
                "isArray": "Ljava/lang/Class;->isArray",
                "isAssignableFrom": "Ljava/lang/Class;->isAssignableFrom",
                "isEnum": "Ljava/lang/Class;->isEnum",
                "isInstance": "Ljava/lang/Class;->isInstance",
                "isInterface": "Ljava/lang/Class;->isInterface",
                "isLocalClass": "Ljava/lang/Class;->isLocalClass",
                "isMemberClass": "Ljava/lang/Class;->isMemberClass",
                "isPrimitive": "Ljava/lang/Class;->isPrimitive",
                "isSynthetic": "Ljava/lang/Class;->isSynthetic",
                "getModifiers": "Ljava/lang/Class;->getModifiers",
                "hashCode": "Ljava/lang/Class;->hashCode",
                "getResourceAsStream": "Ljava/lang/Class;->getResourceAsStream",
                "asSubclass": "Ljava/lang/Class;->asSubclass",
                "forName": "Ljava/lang/Class;->forName",
                "getClass": "Ljava/lang/Class;->getClass",
                "getComponentType": "Ljava/lang/Class;->getComponentType",
                "getDeclaringClass": "Ljava/lang/Class;->getDeclaringClass",
                "getEnclosingClass": "Ljava/lang/Class;->getEnclosingClass",
                "getSuperclass": "Ljava/lang/Class;->getSuperclass",
                "getClassLoader": "Ljava/lang/Class;->getClassLoader",
                "getClasses": "Ljava/lang/Class;->getClasses",
                "getDeclaredClasses": "Ljava/lang/Class;->getDeclaredClasses",
                "getInterfaces": "Ljava/lang/Class;->getInterfaces",
                "cast": "Ljava/lang/Class;->cast",
                "newInstance": "Ljava/lang/Class;->newInstance",
                "getEnumConstants": "Ljava/lang/Class;->getEnumConstants",
                "getSigners": "Ljava/lang/Class;->getSigners",
                "getPackage": "Ljava/lang/Class;->getPackage",
                "getCanonicalName": "Ljava/lang/Class;->getCanonicalName",
                "getName": "Ljava/lang/Class;->getName",
                "getSimpleName": "Ljava/lang/Class;->getSimpleName",
                "toString": "Ljava/lang/Class;->toString",
                "getAnnotation": "Ljava/lang/Class;->getAnnotation",
                "getAnnotations": "Ljava/lang/Class;->getAnnotations",
                "getDeclaredAnnotations": "Ljava/lang/Class;->getDeclaredAnnotations",
                "getConstructor": "Ljava/lang/Class;->getConstructor",
                "getDeclaredConstructor": "Ljava/lang/Class;->getDeclaredConstructor",
                "getEnclosingConstructor": "Ljava/lang/Class;->getEnclosingConstructor",
                "getConstructors": "Ljava/lang/Class;->getConstructors",
                "getDeclaredConstructors": "Ljava/lang/Class;->getDeclaredConstructors",
                "getDeclaredField": "Ljava/lang/Class;->getDeclaredField",
                "getField": "Ljava/lang/Class;->getField",
                "getDeclaredFields": "Ljava/lang/Class;->getDeclaredFields",
                "getFields": "Ljava/lang/Class;->getFields",
                "getDeclaredMethod": "Ljava/lang/Class;->getDeclaredMethod",
                "getEnclosingMethod": "Ljava/lang/Class;->getEnclosingMethod",
                "getMethod": "Ljava/lang/Class;->getMethod",
                "getDeclaredMethods": "Ljava/lang/Class;->getDeclaredMethods",
                "getMethods": "Ljava/lang/Class;->getMethods",
                "getGenericSuperclass": "Ljava/lang/Class;->getGenericSuperclass",
                "getTypeParameters": "Ljava/lang/Class;->getTypeParameters",
                "getGenericInterfaces": "Ljava/lang/Class;->getGenericInterfaces",
                "getResource": "Ljava/lang/Class;->getResource",
                "getProtectionDomain": "Ljava/lang/Class;->getProtectionDomain",
                "notify": "Ljava/lang/Class;->notify",
                "notifyAll": "Ljava/lang/Class;->notifyAll",
                "wait": "Ljava/lang/Class;->wait"
            },
            "reflect": {
                "Constructor": {
                    "equals": "Ljava/lang/reflect/Constructor;->equals",
                    "isAccessible": "Ljava/lang/reflect/Constructor;->isAccessible",
                    "isAnnotationPresent": "Ljava/lang/reflect/Constructor;->isAnnotationPresent",
                    "isSynthetic": "Ljava/lang/reflect/Constructor;->isSynthetic",
                    "isVarArgs": "Ljava/lang/reflect/Constructor;->isVarArgs",
                    "getModifiers": "Ljava/lang/reflect/Constructor;->getModifiers",
                    "hashCode": "Ljava/lang/reflect/Constructor;->hashCode",
                    "getClass": "Ljava/lang/reflect/Constructor;->getClass",
                    "getDeclaringClass": "Ljava/lang/reflect/Constructor;->getDeclaringClass",
                    "getExceptionTypes": "Ljava/lang/reflect/Constructor;->getExceptionTypes",
                    "getParameterTypes": "Ljava/lang/reflect/Constructor;->getParameterTypes",
                    "newInstance": "Ljava/lang/reflect/Constructor;->newInstance",
                    "getName": "Ljava/lang/reflect/Constructor;->getName",
                    "toGenericString": "Ljava/lang/reflect/Constructor;->toGenericString",
                    "toString": "Ljava/lang/reflect/Constructor;->toString",
                    "getAnnotation": "Ljava/lang/reflect/Constructor;->getAnnotation",
                    "getAnnotations": "Ljava/lang/reflect/Constructor;->getAnnotations",
                    "getDeclaredAnnotations": "Ljava/lang/reflect/Constructor;->getDeclaredAnnotations",
                    "getParameterAnnotations": "Ljava/lang/reflect/Constructor;->getParameterAnnotations",
                    "getTypeParameters": "Ljava/lang/reflect/Constructor;->getTypeParameters",
                    "getGenericExceptionTypes": "Ljava/lang/reflect/Constructor;->getGenericExceptionTypes",
                    "getGenericParameterTypes": "Ljava/lang/reflect/Constructor;->getGenericParameterTypes",
                    "notify": "Ljava/lang/reflect/Constructor;->notify",
                    "notifyAll": "Ljava/lang/reflect/Constructor;->notifyAll",
                    "setAccessible": "Ljava/lang/reflect/Constructor;->setAccessible",
                    "wait": "Ljava/lang/reflect/Constructor;->wait"
                },
                "Field": {
                    "equals": "Ljava/lang/reflect/Field;->equals",
                    "getBoolean": "Ljava/lang/reflect/Field;->getBoolean",
                    "isAccessible": "Ljava/lang/reflect/Field;->isAccessible",
                    "isAnnotationPresent": "Ljava/lang/reflect/Field;->isAnnotationPresent",
                    "isEnumConstant": "Ljava/lang/reflect/Field;->isEnumConstant",
                    "isSynthetic": "Ljava/lang/reflect/Field;->isSynthetic",
                    "getByte": "Ljava/lang/reflect/Field;->getByte",
                    "getChar": "Ljava/lang/reflect/Field;->getChar",
                    "getDouble": "Ljava/lang/reflect/Field;->getDouble",
                    "getFloat": "Ljava/lang/reflect/Field;->getFloat",
                    "getInt": "Ljava/lang/reflect/Field;->getInt",
                    "getModifiers": "Ljava/lang/reflect/Field;->getModifiers",
                    "hashCode": "Ljava/lang/reflect/Field;->hashCode",
                    "getClass": "Ljava/lang/reflect/Field;->getClass",
                    "getDeclaringClass": "Ljava/lang/reflect/Field;->getDeclaringClass",
                    "getType": "Ljava/lang/reflect/Field;->getType",
                    "get": "Ljava/lang/reflect/Field;->get",
                    "getName": "Ljava/lang/reflect/Field;->getName",
                    "toGenericString": "Ljava/lang/reflect/Field;->toGenericString",
                    "toString": "Ljava/lang/reflect/Field;->toString",
                    "getAnnotation": "Ljava/lang/reflect/Field;->getAnnotation",
                    "getAnnotations": "Ljava/lang/reflect/Field;->getAnnotations",
                    "getDeclaredAnnotations": "Ljava/lang/reflect/Field;->getDeclaredAnnotations",
                    "getGenericType": "Ljava/lang/reflect/Field;->getGenericType",
                    "getLong": "Ljava/lang/reflect/Field;->getLong",
                    "getShort": "Ljava/lang/reflect/Field;->getShort",
                    "notify": "Ljava/lang/reflect/Field;->notify",
                    "notifyAll": "Ljava/lang/reflect/Field;->notifyAll",
                    "set": "Ljava/lang/reflect/Field;->set",
                    "setAccessible": "Ljava/lang/reflect/Field;->setAccessible",
                    "setBoolean": "Ljava/lang/reflect/Field;->setBoolean",
                    "setByte": "Ljava/lang/reflect/Field;->setByte",
                    "setChar": "Ljava/lang/reflect/Field;->setChar",
                    "setDouble": "Ljava/lang/reflect/Field;->setDouble",
                    "setFloat": "Ljava/lang/reflect/Field;->setFloat",
                    "setInt": "Ljava/lang/reflect/Field;->setInt",
                    "setLong": "Ljava/lang/reflect/Field;->setLong",
                    "setShort": "Ljava/lang/reflect/Field;->setShort",
                    "wait": "Ljava/lang/reflect/Field;->wait"
                },
                "Method": {
                    "equals": "Ljava/lang/reflect/Method;->equals",
                    "isAccessible": "Ljava/lang/reflect/Method;->isAccessible",
                    "isAnnotationPresent": "Ljava/lang/reflect/Method;->isAnnotationPresent",
                    "isBridge": "Ljava/lang/reflect/Method;->isBridge",
                    "isSynthetic": "Ljava/lang/reflect/Method;->isSynthetic",
                    "isVarArgs": "Ljava/lang/reflect/Method;->isVarArgs",
                    "getModifiers": "Ljava/lang/reflect/Method;->getModifiers",
                    "hashCode": "Ljava/lang/reflect/Method;->hashCode",
                    "getClass": "Ljava/lang/reflect/Method;->getClass",
                    "getDeclaringClass": "Ljava/lang/reflect/Method;->getDeclaringClass",
                    "getReturnType": "Ljava/lang/reflect/Method;->getReturnType",
                    "getExceptionTypes": "Ljava/lang/reflect/Method;->getExceptionTypes",
                    "getParameterTypes": "Ljava/lang/reflect/Method;->getParameterTypes",
                    "getDefaultValue": "Ljava/lang/reflect/Method;->getDefaultValue",
                    "invoke": "Ljava/lang/reflect/Method;->invoke",
                    "getName": "Ljava/lang/reflect/Method;->getName",
                    "toGenericString": "Ljava/lang/reflect/Method;->toGenericString",
                    "toString": "Ljava/lang/reflect/Method;->toString",
                    "getAnnotation": "Ljava/lang/reflect/Method;->getAnnotation",
                    "getAnnotations": "Ljava/lang/reflect/Method;->getAnnotations",
                    "getDeclaredAnnotations": "Ljava/lang/reflect/Method;->getDeclaredAnnotations",
                    "getParameterAnnotations": "Ljava/lang/reflect/Method;->getParameterAnnotations",
                    "getGenericReturnType": "Ljava/lang/reflect/Method;->getGenericReturnType",
                    "getTypeParameters": "Ljava/lang/reflect/Method;->getTypeParameters",
                    "getGenericExceptionTypes": "Ljava/lang/reflect/Method;->getGenericExceptionTypes",
                    "getGenericParameterTypes": "Ljava/lang/reflect/Method;->getGenericParameterTypes",
                    "notify": "Ljava/lang/reflect/Method;->notify",
                    "notifyAll": "Ljava/lang/reflect/Method;->notifyAll",
                    "setAccessible": "Ljava/lang/reflect/Method;->setAccessible",
                    "wait": "Ljava/lang/reflect/Method;->wait"
                }
            },
            "String": {
                "contains": "Ljava/lang/String;->contains",
                "replace": "Ljava/lang/String;->replace"
            },
            "AbstractStringBuilder": {
                "lastIndexOf": "Ljava/lang/AbstractStringBuilder;->lastIndexOf"
            },
            "ref": {
                "Reference": {
                    "<init>": "Ljava/lang/ref/Reference;-><init>"
                }
            },
            "Process": {
                "destroy": "Ljava/lang/Process;->destroy",
                "getInputStream": "Ljava/lang/Process;->getInputStream",
                "getOutputStream": "Ljava/lang/Process;->getOutputStream",
                "waitFor": "Ljava/lang/Process;->waitFor"
            },
            "ClassLoader": {
                "getParent": "Ljava/lang/ClassLoader;->getParent",
                "loadClass": "Ljava/lang/ClassLoader;->loadClass"
            },
            "Character": {
                "$init": "Ljava/lang/Character;->$init",
                "toTitleCase": "Ljava/lang/Character;->toTitleCase"
            },
            "ProcessBuilder": {
                "start": "Ljava/lang/ProcessBuilder;->start",
                "redirectErrorStream": "Ljava/lang/ProcessBuilder;->redirectErrorStream",
                "$init": "Ljava/lang/ProcessBuilder;->$init"
            },
            "Runtime": {
                "String\")": "Ljava/lang/Runtime;->String\")"
            },
            "StringBuffer": {
                "substring": "Ljava/lang/StringBuffer;->substring",
                "ensureCapacity": "Ljava/lang/StringBuffer;->ensureCapacity"
            },
            "Integer": {
                "byteValue": "Ljava/lang/Integer;->byteValue"
            },
            "System": {
                "exit": "Ljava/lang/System;->exit",
                "loadLibrary": "Ljava/lang/System;->loadLibrary"
            }
        },
        "beans": {
            "PropertyChangeEvent": {
                "getOldValue": "Ljava/beans/PropertyChangeEvent;->getOldValue"
            }
        },
        "io": {
            "DataOutputStream": {
                "<init>": "Ljava/io/DataOutputStream;-><init>",
                "writeBytes": "Ljava/io/DataOutputStream;->writeBytes"
            },
            "File": {
                "createNewFile": "Ljava/io/File;->createNewFile",
                "mkdirs": "Ljava/io/File;->mkdirs",
                "<init>": "Ljava/io/File;-><init>",
                "exists": "Ljava/io/File;->exists"
            },
            "ObjectOutputStream": {
                "writeObject": "Ljava/io/ObjectOutputStream;->writeObject",
                "writeShort": "Ljava/io/ObjectOutputStream;->writeShort"
            },
            "OutputStreamWriter": {
                "write": "Ljava/io/OutputStreamWriter;->write",
                "close": "Ljava/io/OutputStreamWriter;->close",
                "flush": "Ljava/io/OutputStreamWriter;->flush"
            },
            "BufferedWriter": {
                "close": "Ljava/io/BufferedWriter;->close",
                "write": "Ljava/io/BufferedWriter;->write"
            },
            "LineNumberReader": {
                "readLine": "Ljava/io/LineNumberReader;->readLine",
                "$init": "Ljava/io/LineNumberReader;->$init",
                "close": "Ljava/io/LineNumberReader;->close"
            },
            "Reader": {
                "markSupported": "Ljava/io/Reader;->markSupported"
            },
            "ByteArrayOutputStream": {
                "reset": "Ljava/io/ByteArrayOutputStream;->reset"
            },
            "FileWriter": {
                "close": "Ljava/io/FileWriter;->close"
            },
            "BufferedReader": {
                "ready": "Ljava/io/BufferedReader;->ready"
            },
            "FileReader": {
                "read": "Ljava/io/FileReader;->read"
            },
            "StringReader": {
                "close": "Ljava/io/StringReader;->close"
            },
            "UnsupportedEncodingException": {
                "initCause": "Ljava/io/UnsupportedEncodingException;->initCause"
            },
            "BufferedInputStream": {
                "mark": "Ljava/io/BufferedInputStream;->mark",
                "reset": "Ljava/io/BufferedInputStream;->reset"
            },
            "DataInputStream": {
                "readLine": "Ljava/io/DataInputStream;->readLine"
            },
            "OutputStream": {
                "write": "Ljava/io/OutputStream;->write"
            },
            "FileOutputStream": {
                "write": "Ljava/io/FileOutputStream;->write",
                "writeBytes": "Ljava/io/FileOutputStream;->writeBytes"
            },
            "Writer": {
                "write": "Ljava/io/Writer;->write"
            }
        },
        "net": {
            "DatagramSocket": {
                "<init>": "Ljava/net/DatagramSocket;-><init>"
            },
            "HttpURLConnection": {
                "connect": "Ljava/net/HttpURLConnection;->connect",
                "<init>": "Ljava/net/HttpURLConnection;-><init>",
                "getFollowRedirects": "Ljava/net/HttpURLConnection;->getFollowRedirects",
                "getInstanceFollowRedirects": "Ljava/net/HttpURLConnection;->getInstanceFollowRedirects",
                "getResponseCode": "Ljava/net/HttpURLConnection;->getResponseCode",
                "getErrorStream": "Ljava/net/HttpURLConnection;->getErrorStream",
                "getHeaderField": "Ljava/net/HttpURLConnection;->getHeaderField",
                "getHeaderFieldKey": "Ljava/net/HttpURLConnection;->getHeaderFieldKey",
                "getRequestMethod": "Ljava/net/HttpURLConnection;->getRequestMethod",
                "getResponseMessage": "Ljava/net/HttpURLConnection;->getResponseMessage",
                "getPermission": "Ljava/net/HttpURLConnection;->getPermission",
                "getHeaderFieldDate": "Ljava/net/HttpURLConnection;->getHeaderFieldDate",
                "setRequestMethod" : "Ljava/net/HttpURLConnection;->setRequestMethod"
            },
            "MulticastSocket": {
                "<init>": "Ljava/net/MulticastSocket;-><init>"
            },
            "NetworkInterface": {
                "<init>": "Ljava/net/NetworkInterface;-><init>",
                "getInetAddresses": "Ljava/net/NetworkInterface;->getInetAddresses",
                "getDisplayName": "Ljava/net/NetworkInterface;->getDisplayName",
                "getByName": "Ljava/net/NetworkInterface;->getByName"
            },
            "ServerSocket": {
                "bind": "Ljava/net/ServerSocket;->bind",
                "<init>": "Ljava/net/ServerSocket;-><init>"
            },
            "Socket": {
                "<init>": "Ljava/net/Socket;-><init>",
                "connect": "Ljava/net/Socket;->connect"
            },
            "URLConnection": {
                "getInputStream": "Ljava/net/URLConnection;->getInputStream",
                "connect": "Ljava/net/URLConnection;->connect",
                "setDoInput": "Ljava/net/URLConnection;->setDoInput",
                "getHeaderField": "Ljava/net/URLConnection;->getHeaderField",
                "getOutputStream": "Ljava/net/URLConnection;->getOutputStream",
                "setRequestProperty": "Ljava/net/URLConnection;->setRequestProperty"
            },
            "URL": {
                "openStream": "Ljava/net/URL;->openStream",
                "getContent": "Ljava/net/URL;->getContent",
                "openConnection": "Ljava/net/URL;->openConnection",
                "getDefaultPort": "Ljava/net/URL;->getDefaultPort",
                "set": "Ljava/net/URL;->set",
                "<init>": "Ljava/net/URL;-><init>"
            },
            "HttpCookie": {
                "getDiscard": "Ljava/net/HttpCookie;->getDiscard",
                "getSecure": "Ljava/net/HttpCookie;->getSecure",
                "isHttpOnly": "Ljava/net/HttpCookie;->isHttpOnly",
                "getVersion": "Ljava/net/HttpCookie;->getVersion",
                "getComment": "Ljava/net/HttpCookie;->getComment",
                "getCommentURL": "Ljava/net/HttpCookie;->getCommentURL",
                "getDomain": "Ljava/net/HttpCookie;->getDomain",
                "getName": "Ljava/net/HttpCookie;->getName",
                "getPath": "Ljava/net/HttpCookie;->getPath",
                "getPortlist": "Ljava/net/HttpCookie;->getPortlist",
                "getValue": "Ljava/net/HttpCookie;->getValue",
                "getMaxAge": "Ljava/net/HttpCookie;->getMaxAge"
            },
            "HttpRetryException": {
                "getLocation": "Ljava/net/HttpRetryException;->getLocation",
                "getReason": "Ljava/net/HttpRetryException;->getReason"
            },
            "SocketException": {
                "printStackTrace": "Ljava/net/SocketException;->printStackTrace"
            },
            "URLClassLoader": {
                "$init": "Ljava/net/URLClassLoader;->$init",
                "loadClass": "Ljava/net/URLClassLoader;->loadClass"
            },
            "Proxy": {
                "$init": "Ljava/net/Proxy;->$init"
            },
            "SocketTimeoutException": {
                "printStackTrace": "Ljava/net/SocketTimeoutException;->printStackTrace"
            }
        },
        "nio": {
            "CharToByteBufferAdapter": {
                "get": "Ljava/nio/CharToByteBufferAdapter;->get"
            },
            "IntToByteBufferAdapter": {
                "protectedArrayOffset": "Ljava/nio/IntToByteBufferAdapter;->protectedArrayOffset"
            },
            "charset": {
                "isOverflow": "Ljava/nio/charset;->isOverflow",
                "$init": "Ljava/nio/charset;->$init",
                "isError": "Ljava/nio/charset;->isError",
                "toString": "Ljava/nio/charset;->toString"
            },
            "channels": {
                "lock": "Ljava/nio/channels;->lock",
                "release": "Ljava/nio/channels;->release"
            }
        },
        "security": {
            "spec": {
                "ECParameterSpec": {
                    "<init>": "Ljava/security/spec/ECParameterSpec;-><init>"
                },
                "$init": "Ljava/security/spec;->$init"
            },
            "InvalidAlgorithmParameterException": {
                "printStackTrace": "Ljava/security/InvalidAlgorithmParameterException;->printStackTrace"
            },
            "DigestInputStream": {
                "$init": "Ljava/security/DigestInputStream;->$init",
                "read": "Ljava/security/DigestInputStream;->read",
                "getMessageDigest": "Ljava/security/DigestInputStream;->getMessageDigest"
            },
            "cert": {
                "printStackTrace": "Ljava/security/cert;->printStackTrace",
                "getPublicKey": "Ljava/security/cert;->getPublicKey"
            },
            "SecureRandom": {
                "setSeed": "Ljava/security/SecureRandom;->setSeed"
            },
            "InvalidKeyException": {
                "printStackTrace": "Ljava/security/InvalidKeyException;->printStackTrace"
            },
            "Security": {
                "setProperty": "Ljava/security/Security;->setProperty"
            },
            "MessageDigest": {
                "getInstance": "Ljava/security/MessageDigest;->getInstance"
            }
        },
        "text": {
            "DecimalFormat": {
                "getDecimalFormatSymbols": "Ljava/text/DecimalFormat;->getDecimalFormatSymbols",
                "setCurrency": "Ljava/text/DecimalFormat;->setCurrency"
            },
            "DateFormat": {
                "getInstance": "Ljava/text/DateFormat;->getInstance"
            },
            "SimpleDateFormat": {
                "applyPattern": "Ljava/text/SimpleDateFormat;->applyPattern",
                "applyLocalizedPattern": "Ljava/text/SimpleDateFormat;->applyLocalizedPattern"
            }
        },
        "util": {
            "Collections$SingletonMap$1$1": {
                "next": "Ljava/util/Collections$SingletonMap$1$1;->next"
            },
            "TreeMap$BoundedMap": {
                "access$400": "Ljava/util/TreeMap$BoundedMap;->access$400"
            },
            "UUID": {
                "getLeastSignificantBits": "Ljava/util/UUID;->getLeastSignificantBits"
            },
            "Hashtable": {
                "keys": "Ljava/util/Hashtable;->keys"
            },
            "concurrent": {
                "getActiveCount": "Ljava/util/concurrent;->getActiveCount",
                "done": "Ljava/util/concurrent;->done",
                "getTaskCount": "Ljava/util/concurrent;->getTaskCount",
                "getCompletedTaskCount": "Ljava/util/concurrent;->getCompletedTaskCount"
            },
            "zip": {
                "$init": "Ljava/util/zip;->$init",
                "finish": "Ljava/util/zip;->finish",
                "setCompressedSize": "Ljava/util/zip;->setCompressedSize",
                "finished": "Ljava/util/zip;->finished",
                "getValue": "Ljava/util/zip;->getValue",
                "flush": "Ljava/util/zip;->flush",
                "update": "Ljava/util/zip;->update",
                "reset": "Ljava/util/zip;->reset"
            },
            "jar": {
                "putValue": "Ljava/util/jar;->putValue",
                "putAll": "Ljava/util/jar;->putAll",
                "getName": "Ljava/util/jar;->getName",
                "read": "Ljava/util/jar;->read",
                "entries": "Ljava/util/jar;->entries",
                "close": "Ljava/util/jar;->close",
                "$init": "Ljava/util/jar;->$init"
            },
            "WeakHashMap": {
                "size": "Ljava/util/WeakHashMap;->size",
                "keySet": "Ljava/util/WeakHashMap;->keySet"
            },
            "Properties": {
                "store": "Ljava/util/Properties;->store",
                "put": "Ljava/util/Properties;->put"
            },
            "Date": {
                "toLocaleString": "Ljava/util/Date;->toLocaleString"
            },
            "Locale": {
                "getCountry": "Ljava/util/Locale;->getCountry"
            },
            "Calendar": {
                "getTimeZone": "Ljava/util/Calendar;->getTimeZone"
            }
        },
        "math": {
            "BigInteger": {
                "divideAndRemainder": "Ljava/math/BigInteger;->divideAndRemainder"
            }
        }
    },
    "android": {
        "content": {
            "Context": {
                "startService": "Landroid/content/Context;->startService",
                "bindService": "Landroid/content/Context;->bindService",
                "clearWallpaper": "Landroid/content/Context;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/content/Context;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/content/Context;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/content/Context;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/content/Context;->setWallpaper",
                "startActivity": "Landroid/content/Context;->startActivity",
                "fileList": "Landroid/content/Context;->fileList",
                "sendBroadcast": "Landroid/content/Context;->sendBroadcast",
                "registerReceiver": "Landroid/content/Context;->registerReceiver",
                "startActivities": "Landroid/content/Context;->startActivities"
            },
            "AbstractThreadedSyncAdapter$ISyncAdapterImpl": {
                "onTransact": "Landroid/content/AbstractThreadedSyncAdapter$ISyncAdapterImpl;->onTransact",
                "initialize": "Landroid/content/AbstractThreadedSyncAdapter$ISyncAdapterImpl;->initialize",
                "startSync": "Landroid/content/AbstractThreadedSyncAdapter$ISyncAdapterImpl;->startSync"
            },
            "BroadcastReceiver": {
                "abortBroadcast": "Landroid/content/BroadcastReceiver;->abortBroadcast"
            },
            "ContentProviderClient": {
                "query": "Landroid/content/ContentProviderClient;->query"
            },
            "ContentResolver": {
                "getCurrentSync": "Landroid/content/ContentResolver;->getCurrentSync",
                "getSyncStatus": "Landroid/content/ContentResolver;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/content/ContentResolver;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/content/ContentResolver;->getSyncAutomatically",
                "isSyncActive": "Landroid/content/ContentResolver;->isSyncActive",
                "isSyncPending": "Landroid/content/ContentResolver;->isSyncPending",
                "getIsSyncable": "Landroid/content/ContentResolver;->getIsSyncable",
                "getCurrentSyncs": "Landroid/content/ContentResolver;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/content/ContentResolver;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/content/ContentResolver;->addPeriodicSync",
                "removePeriodicSync": "Landroid/content/ContentResolver;->removePeriodicSync",
                "setIsSyncable": "Landroid/content/ContentResolver;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/content/ContentResolver;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/content/ContentResolver;->setSyncAutomatically",
                "delete": "Landroid/content/ContentResolver;->delete",
                "query": "Landroid/content/ContentResolver;->query",
                "insert": "Landroid/content/ContentResolver;->insert",
                "update": "Landroid/content/ContentResolver;->update"
            },
            "ContentService": {
                "main": "Landroid/content/ContentService;->main",
                "getSyncManager": "Landroid/content/ContentService;->getSyncManager",
                "getSyncStatus": "Landroid/content/ContentService;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/content/ContentService;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/content/ContentService;->getSyncAutomatically",
                "isSyncActive": "Landroid/content/ContentService;->isSyncActive",
                "isSyncPending": "Landroid/content/ContentService;->isSyncPending",
                "onTransact": "Landroid/content/ContentService;->onTransact",
                "getIsSyncable": "Landroid/content/ContentService;->getIsSyncable",
                "getCurrentSyncs": "Landroid/content/ContentService;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/content/ContentService;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/content/ContentService;->addPeriodicSync",
                "dump": "Landroid/content/ContentService;->dump",
                "<init>": "Landroid/content/ContentService;-><init>",
                "removePeriodicSync": "Landroid/content/ContentService;->removePeriodicSync",
                "setIsSyncable": "Landroid/content/ContentService;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/content/ContentService;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/content/ContentService;->setSyncAutomatically",
                "registerContentObserver": "Landroid/content/ContentService;->registerContentObserver"
            },
            "ContextWrapper": {
                "clearWallpaper": "Landroid/content/ContextWrapper;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/content/ContextWrapper;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/content/ContextWrapper;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/content/ContextWrapper;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/content/ContextWrapper;->setWallpaper",
                "startActivity": "Landroid/content/ContextWrapper;->startActivity",
                "sendOrderedBroadcast": "Landroid/content/ContextWrapper;->sendOrderedBroadcast",
                "createPackageContext": "Landroid/content/ContextWrapper;->createPackageContext",
                "sendBroadcastAsUser": "Landroid/content/ContextWrapper;->sendBroadcastAsUser",
                "sendStickyOrderedBroadcastAsUser": "Landroid/content/ContextWrapper;->sendStickyOrderedBroadcastAsUser",
                "sendOrderedBroadcastAsUser": "Landroid/content/ContextWrapper;->sendOrderedBroadcastAsUser",
                "sendStickyBroadcastAsUser": "Landroid/content/ContextWrapper;->sendStickyBroadcastAsUser",
                "sendBroadcast": "Landroid/content/ContextWrapper;->sendBroadcast"
            },
            "CursorEntityIterator": {
                "getEntityAndIncrementCursor": "Landroid/content/CursorEntityIterator;->getEntityAndIncrementCursor",
                "next": "Landroid/content/CursorEntityIterator;->next"
            },
            "IContentService$Stub$Proxy": {
                "getSyncStatus": "Landroid/content/IContentService$Stub$Proxy;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/content/IContentService$Stub$Proxy;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/content/IContentService$Stub$Proxy;->getSyncAutomatically",
                "isSyncActive": "Landroid/content/IContentService$Stub$Proxy;->isSyncActive",
                "isSyncPending": "Landroid/content/IContentService$Stub$Proxy;->isSyncPending",
                "getIsSyncable": "Landroid/content/IContentService$Stub$Proxy;->getIsSyncable",
                "getCurrentSyncs": "Landroid/content/IContentService$Stub$Proxy;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/content/IContentService$Stub$Proxy;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/content/IContentService$Stub$Proxy;->addPeriodicSync",
                "removePeriodicSync": "Landroid/content/IContentService$Stub$Proxy;->removePeriodicSync",
                "setIsSyncable": "Landroid/content/IContentService$Stub$Proxy;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/content/IContentService$Stub$Proxy;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/content/IContentService$Stub$Proxy;->setSyncAutomatically"
            },
            "IContentService$Stub": {
                "getSyncStatus": "Landroid/content/IContentService$Stub;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/content/IContentService$Stub;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/content/IContentService$Stub;->getSyncAutomatically",
                "isSyncActive": "Landroid/content/IContentService$Stub;->isSyncActive",
                "isSyncPending": "Landroid/content/IContentService$Stub;->isSyncPending",
                "onTransact": "Landroid/content/IContentService$Stub;->onTransact",
                "getIsSyncable": "Landroid/content/IContentService$Stub;->getIsSyncable",
                "getCurrentSyncs": "Landroid/content/IContentService$Stub;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/content/IContentService$Stub;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/content/IContentService$Stub;->addPeriodicSync",
                "removePeriodicSync": "Landroid/content/IContentService$Stub;->removePeriodicSync",
                "setIsSyncable": "Landroid/content/IContentService$Stub;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/content/IContentService$Stub;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/content/IContentService$Stub;->setSyncAutomatically"
            },
            "IContentService": {
                "getSyncStatus": "Landroid/content/IContentService;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/content/IContentService;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/content/IContentService;->getSyncAutomatically",
                "isSyncActive": "Landroid/content/IContentService;->isSyncActive",
                "isSyncPending": "Landroid/content/IContentService;->isSyncPending",
                "getIsSyncable": "Landroid/content/IContentService;->getIsSyncable",
                "getCurrentSyncs": "Landroid/content/IContentService;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/content/IContentService;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/content/IContentService;->addPeriodicSync",
                "removePeriodicSync": "Landroid/content/IContentService;->removePeriodicSync",
                "setIsSyncable": "Landroid/content/IContentService;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/content/IContentService;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/content/IContentService;->setSyncAutomatically"
            },
            "ISyncAdapter$Stub$Proxy": {
                "initialize": "Landroid/content/ISyncAdapter$Stub$Proxy;->initialize",
                "startSync": "Landroid/content/ISyncAdapter$Stub$Proxy;->startSync"
            },
            "ISyncAdapter$Stub": {
                "onTransact": "Landroid/content/ISyncAdapter$Stub;->onTransact",
                "initialize": "Landroid/content/ISyncAdapter$Stub;->initialize",
                "startSync": "Landroid/content/ISyncAdapter$Stub;->startSync"
            },
            "ISyncAdapter": {
                "initialize": "Landroid/content/ISyncAdapter;->initialize",
                "startSync": "Landroid/content/ISyncAdapter;->startSync"
            },
            "ISyncContext$Stub$Proxy": {
                "onFinished": "Landroid/content/ISyncContext$Stub$Proxy;->onFinished"
            },
            "ISyncStatusObserver$Stub$Proxy": {
                "onStatusChanged": "Landroid/content/ISyncStatusObserver$Stub$Proxy;->onStatusChanged"
            },
            "pm": {
                "ComponentInfo": {
                    "getApplicationInfo": "Landroid/content/pm/ComponentInfo;->getApplicationInfo"
                },
                "IPackageManager$Stub$Proxy": {
                    "setInstallLocation": "Landroid/content/pm/IPackageManager$Stub$Proxy;->setInstallLocation",
                    "getPackageGids": "Landroid/content/pm/IPackageManager$Stub$Proxy;->getPackageGids",
                    "freeStorageAndNotify": "Landroid/content/pm/IPackageManager$Stub$Proxy;->freeStorageAndNotify",
                    "freeStorage": "Landroid/content/pm/IPackageManager$Stub$Proxy;->freeStorage",
                    "getPackageSizeInfo": "Landroid/content/pm/IPackageManager$Stub$Proxy;->getPackageSizeInfo"
                },
                "IPackageManager$Stub": {
                    "onTransact": "Landroid/content/pm/IPackageManager$Stub;->onTransact",
                    "setInstallLocation": "Landroid/content/pm/IPackageManager$Stub;->setInstallLocation",
                    "getPackageGids": "Landroid/content/pm/IPackageManager$Stub;->getPackageGids",
                    "freeStorageAndNotify": "Landroid/content/pm/IPackageManager$Stub;->freeStorageAndNotify",
                    "freeStorage": "Landroid/content/pm/IPackageManager$Stub;->freeStorage",
                    "getPackageSizeInfo": "Landroid/content/pm/IPackageManager$Stub;->getPackageSizeInfo"
                },
                "IPackageManager": {
                    "setInstallLocation": "Landroid/content/pm/IPackageManager;->setInstallLocation",
                    "getPackageGids": "Landroid/content/pm/IPackageManager;->getPackageGids",
                    "freeStorageAndNotify": "Landroid/content/pm/IPackageManager;->freeStorageAndNotify",
                    "freeStorage": "Landroid/content/pm/IPackageManager;->freeStorage",
                    "getPackageSizeInfo": "Landroid/content/pm/IPackageManager;->getPackageSizeInfo"
                },
                "PackageParser$Service": {
                    "setPackageName": "Landroid/content/pm/PackageParser$Service;->setPackageName"
                },
                "ShortcutManager": {
                    "isRateLimitingActive": "Landroid/content/pm/ShortcutManager;->isRateLimitingActive",
                    "isRequestPinShortcutSupported": "Landroid/content/pm/ShortcutManager;->isRequestPinShortcutSupported",
                    "getIconMaxHeight": "Landroid/content/pm/ShortcutManager;->getIconMaxHeight",
                    "getIconMaxWidth": "Landroid/content/pm/ShortcutManager;->getIconMaxWidth",
                    "getDynamicShortcuts": "Landroid/content/pm/ShortcutManager;->getDynamicShortcuts",
                    "getManifestShortcuts": "Landroid/content/pm/ShortcutManager;->getManifestShortcuts",
                    "getPinnedShortcuts": "Landroid/content/pm/ShortcutManager;->getPinnedShortcuts",
                    "getShortcuts": "Landroid/content/pm/ShortcutManager;->getShortcuts"
                },
                "$init": "Landroid/content/pm;->$init",
                "getPackageArchiveInfo": "Landroid/content/pm;->getPackageArchiveInfo",
                "setComponentEnabledSetting": "Landroid/content/pm;->setComponentEnabledSetting",
                "PackageManager": {
                    "getInstalledApplications": "Landroid/content/pm/PackageManager;->getInstalledApplications",
                    "getInstalledPackages": "Landroid/content/pm/PackageManager;->getInstalledPackages",
                    "queryIntentActivities": "Landroid/content/pm/PackageManager;->queryIntentActivities",
                    "queryIntentServices": "Landroid/content/pm/PackageManager;->queryIntentServices",
                    "queryBroadcastReceivers": "Landroid/content/pm/PackageManager;->queryBroadcastReceivers",
                    "queryContentProviders": "Landroid/content/pm/PackageManager;->queryContentProviders"
                }
            },
            "SyncManager$1": {
                "onReceive": "Landroid/content/SyncManager$1;->onReceive"
            },
            "SyncManager$2": {
                "onReceive": "Landroid/content/SyncManager$2;->onReceive"
            },
            "SyncManager$3": {
                "onReceive": "Landroid/content/SyncManager$3;->onReceive"
            },
            "SyncManager$4": {
                "onReceive": "Landroid/content/SyncManager$4;->onReceive"
            },
            "SyncManager$6": {
                "onReceive": "Landroid/content/SyncManager$6;->onReceive"
            },
            "SyncManager$7": {
                "onSyncRequest": "Landroid/content/SyncManager$7;->onSyncRequest"
            },
            "SyncManager$8": {
                "onServiceChanged": "Landroid/content/SyncManager$8;->onServiceChanged"
            },
            "SyncManager$9": {
                "onStatusChanged": "Landroid/content/SyncManager$9;->onStatusChanged"
            },
            "SyncManager$ActiveSyncContext": {
                "binderDied": "Landroid/content/SyncManager$ActiveSyncContext;->binderDied",
                "close": "Landroid/content/SyncManager$ActiveSyncContext;->close",
                "<init>": "Landroid/content/SyncManager$ActiveSyncContext;-><init>",
                "onFinished": "Landroid/content/SyncManager$ActiveSyncContext;->onFinished",
                "onServiceConnected": "Landroid/content/SyncManager$ActiveSyncContext;->onServiceConnected",
                "onServiceDisconnected": "Landroid/content/SyncManager$ActiveSyncContext;->onServiceDisconnected"
            },
            "SyncManager$SyncAlarmIntentReceiver": {
                "onReceive": "Landroid/content/SyncManager$SyncAlarmIntentReceiver;->onReceive"
            },
            "SyncManager$SyncHandler": {
                "dispatchSyncOperation": "Landroid/content/SyncManager$SyncHandler;->dispatchSyncOperation",
                "maybeStartNextSyncLocked": "Landroid/content/SyncManager$SyncHandler;->maybeStartNextSyncLocked",
                "scheduleReadyPeriodicSyncs": "Landroid/content/SyncManager$SyncHandler;->scheduleReadyPeriodicSyncs",
                "cancelActiveSyncLocked": "Landroid/content/SyncManager$SyncHandler;->cancelActiveSyncLocked",
                "closeActiveSyncContext": "Landroid/content/SyncManager$SyncHandler;->closeActiveSyncContext",
                "installHandleTooManyDeletesNotification": "Landroid/content/SyncManager$SyncHandler;->installHandleTooManyDeletesNotification",
                "onBootCompleted": "Landroid/content/SyncManager$SyncHandler;->onBootCompleted",
                "runBoundToSyncAdapter": "Landroid/content/SyncManager$SyncHandler;->runBoundToSyncAdapter",
                "runSyncFinishedOrCanceledLocked": "Landroid/content/SyncManager$SyncHandler;->runSyncFinishedOrCanceledLocked"
            },
            "SyncManager": {
                "readDataConnectionState": "Landroid/content/SyncManager;->readDataConnectionState",
                "cancelActiveSync": "Landroid/content/SyncManager;->cancelActiveSync",
                "<init>": "Landroid/content/SyncManager;-><init>",
                "maybeRescheduleSync": "Landroid/content/SyncManager;->maybeRescheduleSync",
                "onAccountsUpdated": "Landroid/content/SyncManager;->onAccountsUpdated",
                "onUserRemoved": "Landroid/content/SyncManager;->onUserRemoved",
                "scheduleLocalSync": "Landroid/content/SyncManager;->scheduleLocalSync",
                "scheduleSync": "Landroid/content/SyncManager;->scheduleSync",
                "scheduleSyncOperation": "Landroid/content/SyncManager;->scheduleSyncOperation",
                "sendCancelSyncsMessage": "Landroid/content/SyncManager;->sendCancelSyncsMessage",
                "sendCheckAlarmsMessage": "Landroid/content/SyncManager;->sendCheckAlarmsMessage",
                "sendSyncAlarmMessage": "Landroid/content/SyncManager;->sendSyncAlarmMessage",
                "sendSyncFinishedOrCanceledMessage": "Landroid/content/SyncManager;->sendSyncFinishedOrCanceledMessage"
            },
            "ClipboardManager": {
                "getPrimaryClip": "Landroid/content/ClipboardManager;->getPrimaryClip",
                "getPrimaryClipDescription": "Landroid/content/ClipboardManager;->getPrimaryClipDescription",
                "getText": "Landroid/content/ClipboardManager;->getText"
            },
            "RestrictionsManager": {
                "getApplicationRestrictions": "Landroid/content/RestrictionsManager;->getApplicationRestrictions",
                "getManifestRestrictions": "Landroid/content/RestrictionsManager;->getManifestRestrictions"
            },
            "MutableContextWrapper": {
                "clearWallpaper": "Landroid/content/MutableContextWrapper;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/content/MutableContextWrapper;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/content/MutableContextWrapper;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/content/MutableContextWrapper;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/content/MutableContextWrapper;->setWallpaper"
            },
            "res": {
                "setToDefaults": "Landroid/content/res;->setToDefaults"
            },
            "IntentFilter": {
                "setPriority": "Landroid/content/IntentFilter;->setPriority",
                "addAction": "Landroid/content/IntentFilter;->addAction"
            },
            "Intent": {
                "setAction": "Landroid/content/Intent;->setAction",
                "setClassName": "Landroid/content/Intent;->setClassName",
                "setComponent": "Landroid/content/Intent;->setComponent"
            },
            "SharedPreferences$Editor": {
                "putBoolean": "Landroid/content/SharedPreferences$Editor;->putBoolean",
                "putFloat": "Landroid/content/SharedPreferences$Editor;->putFloat",
                "putInt": "Landroid/content/SharedPreferences$Editor;->putInt",
                "putLong": "Landroid/content/SharedPreferences$Editor;->putLong",
                "putString": "Landroid/content/SharedPreferences$Editor;->putString"
            },
            "SharedPreferences": {
                "getDefaultSharedPreferences": "Landroid/content/SharedPreferences;->getDefaultSharedPreferences"
            }
        },
        "accessibilityservice": {
            "AccessibilityService": {
                "startService": "Landroid/accessibilityservice/AccessibilityService;->startService",
                "bindService": "Landroid/accessibilityservice/AccessibilityService;->bindService",
                "setWallpaper": "Landroid/accessibilityservice/AccessibilityService;->setWallpaper",
                "clearWallpaper": "Landroid/accessibilityservice/AccessibilityService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/accessibilityservice/AccessibilityService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/accessibilityservice/AccessibilityService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/accessibilityservice/AccessibilityService;->sendStickyOrderedBroadcast"
            },
            "UiTestAutomationBridge": {
                "disconnect": "Landroid/accessibilityservice/UiTestAutomationBridge;->disconnect"
            }
        },
        "accounts": {
            "AccountAuthenticatorActivity": {
                "startService": "Landroid/accounts/AccountAuthenticatorActivity;->startService",
                "clearWallpaper": "Landroid/accounts/AccountAuthenticatorActivity;->clearWallpaper",
                "sendBroadcast": "Landroid/accounts/AccountAuthenticatorActivity;->sendBroadcast",
                "sendOrderedBroadcast": "Landroid/accounts/AccountAuthenticatorActivity;->sendOrderedBroadcast",
                "setRequestedOrientation": "Landroid/accounts/AccountAuthenticatorActivity;->setRequestedOrientation",
                "setWallpaper": "Landroid/accounts/AccountAuthenticatorActivity;->setWallpaper",
                "removeStickyBroadcast": "Landroid/accounts/AccountAuthenticatorActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/accounts/AccountAuthenticatorActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/accounts/AccountAuthenticatorActivity;->sendStickyOrderedBroadcast"
            },
            "AccountManager$10": {
                "start": "Landroid/accounts/AccountManager$10;->start",
                "doWork": "Landroid/accounts/AccountManager$10;->doWork"
            },
            "AccountManager$13": {
                "onReceive": "Landroid/accounts/AccountManager$13;->onReceive"
            },
            "AccountManager$1": {
                "start": "Landroid/accounts/AccountManager$1;->start",
                "startTask": "Landroid/accounts/AccountManager$1;->startTask"
            },
            "AccountManager$2": {
                "start": "Landroid/accounts/AccountManager$2;->start",
                "doWork": "Landroid/accounts/AccountManager$2;->doWork",
                "startTask": "Landroid/accounts/AccountManager$2;->startTask"
            },
            "AccountManager$3": {
                "start": "Landroid/accounts/AccountManager$3;->start",
                "doWork": "Landroid/accounts/AccountManager$3;->doWork",
                "startTask": "Landroid/accounts/AccountManager$3;->startTask"
            },
            "AccountManager$4": {
                "start": "Landroid/accounts/AccountManager$4;->start",
                "doWork": "Landroid/accounts/AccountManager$4;->doWork",
                "startTask": "Landroid/accounts/AccountManager$4;->startTask"
            },
            "AccountManager$5": {
                "start": "Landroid/accounts/AccountManager$5;->start",
                "doWork": "Landroid/accounts/AccountManager$5;->doWork"
            },
            "AccountManager$6": {
                "start": "Landroid/accounts/AccountManager$6;->start",
                "doWork": "Landroid/accounts/AccountManager$6;->doWork"
            },
            "AccountManager$7": {
                "start": "Landroid/accounts/AccountManager$7;->start",
                "doWork": "Landroid/accounts/AccountManager$7;->doWork"
            },
            "AccountManager$8": {
                "start": "Landroid/accounts/AccountManager$8;->start",
                "doWork": "Landroid/accounts/AccountManager$8;->doWork"
            },
            "AccountManager$9": {
                "start": "Landroid/accounts/AccountManager$9;->start",
                "doWork": "Landroid/accounts/AccountManager$9;->doWork"
            },
            "AccountManager$AmsTask$Response": {
                "onResult": "Landroid/accounts/AccountManager$AmsTask$Response;->onResult"
            },
            "AccountManager$AmsTask": {
                "start": "Landroid/accounts/AccountManager$AmsTask;->start",
                "doWork": "Landroid/accounts/AccountManager$AmsTask;->doWork"
            },
            "AccountManager$BaseFutureTask": {
                "doWork": "Landroid/accounts/AccountManager$BaseFutureTask;->doWork",
                "startTask": "Landroid/accounts/AccountManager$BaseFutureTask;->startTask"
            },
            "AccountManager$Future2Task": {
                "start": "Landroid/accounts/AccountManager$Future2Task;->start",
                "startTask": "Landroid/accounts/AccountManager$Future2Task;->startTask"
            },
            "AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1": {
                "onResult": "Landroid/accounts/AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1;->onResult"
            },
            "AccountManager$GetAuthTokenByTypeAndFeaturesTask$1": {
                "run": "Landroid/accounts/AccountManager$GetAuthTokenByTypeAndFeaturesTask$1;->run"
            },
            "AccountManager$GetAuthTokenByTypeAndFeaturesTask": {
                "start": "Landroid/accounts/AccountManager$GetAuthTokenByTypeAndFeaturesTask;->start",
                "doWork": "Landroid/accounts/AccountManager$GetAuthTokenByTypeAndFeaturesTask;->doWork",
                "run": "Landroid/accounts/AccountManager$GetAuthTokenByTypeAndFeaturesTask;->run"
            },
            "AccountManager": {
                "getAccounts": "Landroid/accounts/AccountManager;->getAccounts",
                "getAccountsByType": "Landroid/accounts/AccountManager;->getAccountsByType",
                "addAccount": "Landroid/accounts/AccountManager;->addAccount",
                "confirmCredentials": "Landroid/accounts/AccountManager;->confirmCredentials",
                "editProperties": "Landroid/accounts/AccountManager;->editProperties",
                "getAccountsByTypeAndFeatures": "Landroid/accounts/AccountManager;->getAccountsByTypeAndFeatures",
                "getAuthToken": "Landroid/accounts/AccountManager;->getAuthToken",
                "getAuthTokenByFeatures": "Landroid/accounts/AccountManager;->getAuthTokenByFeatures",
                "getAuthTokenLabel": "Landroid/accounts/AccountManager;->getAuthTokenLabel",
                "hasFeatures": "Landroid/accounts/AccountManager;->hasFeatures",
                "removeAccount": "Landroid/accounts/AccountManager;->removeAccount",
                "updateCredentials": "Landroid/accounts/AccountManager;->updateCredentials",
                "addAccountExplicitly": "Landroid/accounts/AccountManager;->addAccountExplicitly",
                "blockingGetAuthToken": "Landroid/accounts/AccountManager;->blockingGetAuthToken",
                "getPassword": "Landroid/accounts/AccountManager;->getPassword",
                "getUserData": "Landroid/accounts/AccountManager;->getUserData",
                "peekAuthToken": "Landroid/accounts/AccountManager;->peekAuthToken",
                "addOnAccountsUpdatedListener": "Landroid/accounts/AccountManager;->addOnAccountsUpdatedListener",
                "clearPassword": "Landroid/accounts/AccountManager;->clearPassword",
                "invalidateAuthToken": "Landroid/accounts/AccountManager;->invalidateAuthToken",
                "setAuthToken": "Landroid/accounts/AccountManager;->setAuthToken",
                "setPassword": "Landroid/accounts/AccountManager;->setPassword",
                "setUserData": "Landroid/accounts/AccountManager;->setUserData",
                "get": "Landroid/accounts/AccountManager;->get",
                "isCredentialsUpdateSuggested": "Landroid/accounts/AccountManager;->isCredentialsUpdateSuggested",
                "getAccountsByTypeForPackage": "Landroid/accounts/AccountManager;->getAccountsByTypeForPackage",
                "getAuthenticatorTypes": "Landroid/accounts/AccountManager;->getAuthenticatorTypes",
                "getAccountVisibility": "Landroid/accounts/AccountManager;->getAccountVisibility",
                "getPreviousName": "Landroid/accounts/AccountManager;->getPreviousName",
                "java": {
                    "lang": {
                        "Integer>getAccountsAndVisibilityForPackage": "Landroid/accounts/AccountManager/java/lang;->Integer>getAccountsAndVisibilityForPackage",
                        "Integer>getPackagesAndVisibilityForAccount": "Landroid/accounts/AccountManager/java/lang;->Integer>getPackagesAndVisibilityForAccount"
                    }
                }
            },
            "AccountManagerService": {
                "getAccounts": "Landroid/accounts/AccountManagerService;->getAccounts",
                "access$1100": "Landroid/accounts/AccountManagerService;->access$1100",
                "addAccount": "Landroid/accounts/AccountManagerService;->addAccount",
                "onTransact": "Landroid/accounts/AccountManagerService;->onTransact",
                "getPassword": "Landroid/accounts/AccountManagerService;->getPassword",
                "getUserData": "Landroid/accounts/AccountManagerService;->getUserData",
                "peekAuthToken": "Landroid/accounts/AccountManagerService;->peekAuthToken",
                "addAcount": "Landroid/accounts/AccountManagerService;->addAcount",
                "checkAuthenticateAccountsPermission": "Landroid/accounts/AccountManagerService;->checkAuthenticateAccountsPermission",
                "checkManageAccountsOrUseCredentialsPermissions": "Landroid/accounts/AccountManagerService;->checkManageAccountsOrUseCredentialsPermissions",
                "checkManageAccountsPermission": "Landroid/accounts/AccountManagerService;->checkManageAccountsPermission",
                "checkReadAccountsPermission": "Landroid/accounts/AccountManagerService;->checkReadAccountsPermission",
                "clearPassword": "Landroid/accounts/AccountManagerService;->clearPassword",
                "confirmCredentials": "Landroid/accounts/AccountManagerService;->confirmCredentials",
                "createNoCredentialsPermissionNotification": "Landroid/accounts/AccountManagerService;->createNoCredentialsPermissionNotification",
                "editProperties": "Landroid/accounts/AccountManagerService;->editProperties",
                "getAccountsByFeatures": "Landroid/accounts/AccountManagerService;->getAccountsByFeatures",
                "getAuthToken": "Landroid/accounts/AccountManagerService;->getAuthToken",
                "hasFeatures": "Landroid/accounts/AccountManagerService;->hasFeatures",
                "installNotification": "Landroid/accounts/AccountManagerService;->installNotification",
                "invalidateAuthToken": "Landroid/accounts/AccountManagerService;->invalidateAuthToken",
                "removeAccount": "Landroid/accounts/AccountManagerService;->removeAccount",
                "setAuthToken": "Landroid/accounts/AccountManagerService;->setAuthToken",
                "setPassword": "Landroid/accounts/AccountManagerService;->setPassword",
                "setUserData": "Landroid/accounts/AccountManagerService;->setUserData",
                "updateCredentials": "Landroid/accounts/AccountManagerService;->updateCredentials",
                "confirmCredentialsAsUser": "Landroid/accounts/AccountManagerService;->confirmCredentialsAsUser",
                "getAccountsAsUser": "Landroid/accounts/AccountManagerService;->getAccountsAsUser"
            },
            "ChooseTypeAndAccountActivity": {
                "onCreate": "Landroid/accounts/ChooseTypeAndAccountActivity;->onCreate",
                "runAddAccountForAuthenticator": "Landroid/accounts/ChooseTypeAndAccountActivity;->runAddAccountForAuthenticator",
                "run": "Landroid/accounts/ChooseTypeAndAccountActivity;->run"
            },
            "GrantCredentialsPermissionActivity": {
                "onCreate": "Landroid/accounts/GrantCredentialsPermissionActivity;->onCreate"
            },
            "IAccountManager$Stub$Proxy": {
                "getAccounts": "Landroid/accounts/IAccountManager$Stub$Proxy;->getAccounts",
                "addAccount": "Landroid/accounts/IAccountManager$Stub$Proxy;->addAccount",
                "getPassword": "Landroid/accounts/IAccountManager$Stub$Proxy;->getPassword",
                "getUserData": "Landroid/accounts/IAccountManager$Stub$Proxy;->getUserData",
                "peekAuthToken": "Landroid/accounts/IAccountManager$Stub$Proxy;->peekAuthToken",
                "addAcount": "Landroid/accounts/IAccountManager$Stub$Proxy;->addAcount",
                "clearPassword": "Landroid/accounts/IAccountManager$Stub$Proxy;->clearPassword",
                "confirmCredentials": "Landroid/accounts/IAccountManager$Stub$Proxy;->confirmCredentials",
                "editProperties": "Landroid/accounts/IAccountManager$Stub$Proxy;->editProperties",
                "getAccountsByFeatures": "Landroid/accounts/IAccountManager$Stub$Proxy;->getAccountsByFeatures",
                "getAuthToken": "Landroid/accounts/IAccountManager$Stub$Proxy;->getAuthToken",
                "hasFeatures": "Landroid/accounts/IAccountManager$Stub$Proxy;->hasFeatures",
                "invalidateAuthToken": "Landroid/accounts/IAccountManager$Stub$Proxy;->invalidateAuthToken",
                "removeAccount": "Landroid/accounts/IAccountManager$Stub$Proxy;->removeAccount",
                "setAuthToken": "Landroid/accounts/IAccountManager$Stub$Proxy;->setAuthToken",
                "setPassword": "Landroid/accounts/IAccountManager$Stub$Proxy;->setPassword",
                "setUserData": "Landroid/accounts/IAccountManager$Stub$Proxy;->setUserData",
                "updateCredentials": "Landroid/accounts/IAccountManager$Stub$Proxy;->updateCredentials"
            },
            "IAccountManager$Stub": {
                "getAccounts": "Landroid/accounts/IAccountManager$Stub;->getAccounts",
                "addAccount": "Landroid/accounts/IAccountManager$Stub;->addAccount",
                "onTransact": "Landroid/accounts/IAccountManager$Stub;->onTransact",
                "getPassword": "Landroid/accounts/IAccountManager$Stub;->getPassword",
                "getUserData": "Landroid/accounts/IAccountManager$Stub;->getUserData",
                "peekAuthToken": "Landroid/accounts/IAccountManager$Stub;->peekAuthToken",
                "addAcount": "Landroid/accounts/IAccountManager$Stub;->addAcount",
                "clearPassword": "Landroid/accounts/IAccountManager$Stub;->clearPassword",
                "confirmCredentials": "Landroid/accounts/IAccountManager$Stub;->confirmCredentials",
                "editProperties": "Landroid/accounts/IAccountManager$Stub;->editProperties",
                "getAccountsByFeatures": "Landroid/accounts/IAccountManager$Stub;->getAccountsByFeatures",
                "getAuthToken": "Landroid/accounts/IAccountManager$Stub;->getAuthToken",
                "hasFeatures": "Landroid/accounts/IAccountManager$Stub;->hasFeatures",
                "invalidateAuthToken": "Landroid/accounts/IAccountManager$Stub;->invalidateAuthToken",
                "removeAccount": "Landroid/accounts/IAccountManager$Stub;->removeAccount",
                "setAuthToken": "Landroid/accounts/IAccountManager$Stub;->setAuthToken",
                "setPassword": "Landroid/accounts/IAccountManager$Stub;->setPassword",
                "setUserData": "Landroid/accounts/IAccountManager$Stub;->setUserData",
                "updateCredentials": "Landroid/accounts/IAccountManager$Stub;->updateCredentials"
            },
            "IAccountManager": {
                "getAccounts": "Landroid/accounts/IAccountManager;->getAccounts",
                "addAccount": "Landroid/accounts/IAccountManager;->addAccount",
                "getPassword": "Landroid/accounts/IAccountManager;->getPassword",
                "getUserData": "Landroid/accounts/IAccountManager;->getUserData",
                "peekAuthToken": "Landroid/accounts/IAccountManager;->peekAuthToken",
                "addAcount": "Landroid/accounts/IAccountManager;->addAcount",
                "clearPassword": "Landroid/accounts/IAccountManager;->clearPassword",
                "confirmCredentials": "Landroid/accounts/IAccountManager;->confirmCredentials",
                "editProperties": "Landroid/accounts/IAccountManager;->editProperties",
                "getAccountsByFeatures": "Landroid/accounts/IAccountManager;->getAccountsByFeatures",
                "getAuthToken": "Landroid/accounts/IAccountManager;->getAuthToken",
                "hasFeatures": "Landroid/accounts/IAccountManager;->hasFeatures",
                "invalidateAuthToken": "Landroid/accounts/IAccountManager;->invalidateAuthToken",
                "removeAccount": "Landroid/accounts/IAccountManager;->removeAccount",
                "setAuthToken": "Landroid/accounts/IAccountManager;->setAuthToken",
                "setPassword": "Landroid/accounts/IAccountManager;->setPassword",
                "setUserData": "Landroid/accounts/IAccountManager;->setUserData",
                "updateCredentials": "Landroid/accounts/IAccountManager;->updateCredentials",
                "getAuthenticatorTypes": "Landroid/accounts/IAccountManager;->getAuthenticatorTypes"
            },
            "IAccountManagerResponse$Stub$Proxy": {
                "onResult": "Landroid/accounts/IAccountManagerResponse$Stub$Proxy;->onResult"
            },
            "AbstractAccountAuthenticator$Transport": {
                "addAccount": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->addAccount",
                "addAccountFromCredentials": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->addAccountFromCredentials",
                "confirmCredentials": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->confirmCredentials",
                "editProperties": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->editProperties",
                "getAccountCredentialsForCloning": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->getAccountCredentialsForCloning",
                "getAccountRemovalAllowed": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->getAccountRemovalAllowed",
                "getAuthToken": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->getAuthToken",
                "getAuthTokenLabel": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->getAuthTokenLabel",
                "hasFeatures": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->hasFeatures",
                "updateCredentials": "Landroid/accounts/AbstractAccountAuthenticator$Transport;->updateCredentials"
            }
        },
        "animation": {
            "ObjectAnimator": {
                "setProperty": "Landroid/animation/ObjectAnimator;->setProperty"
            },
            "ValueAnimator": {
                "setDurationScale": "Landroid/animation/ValueAnimator;->setDurationScale"
            }
        },
        "app": {
            "Activity": {
                "startNextMatchingActivity": "Landroid/app/Activity;->startNextMatchingActivity",
                "finish": "Landroid/app/Activity;->finish",
                "startSearch": "Landroid/app/Activity;->startSearch",
                "clearWallpaper": "Landroid/app/Activity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/Activity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/Activity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/Activity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/Activity;->setWallpaper",
                "getIntent": "Landroid/app/Activity;->getIntent",
                "setResult": "Landroid/app/Activity;->setResult",
                "onActivityResult": "Landroid/app/Activity;->onActivityResult",
                "startActivity": "Landroid/app/Activity;->startActivity",
                "startActivities": "Landroid/app/Activity;->startActivities",
                "startActivityForResult": "Landroid/app/Activity;->startActivityForResult",
                "startActivityFromChild": "Landroid/app/Activity;->startActivityFromChild",
                "startActivityFromFragment": "Landroid/app/Activity;->startActivityFromFragment",
                "startActivityIfNeeded": "Landroid/app/Activity;->startActivityIfNeeded",
                "startService": "Landroid/app/Activity;->startService",
                "bindService": "Landroid/app/Activity;->bindService",
                "sendBroadcast": "Landroid/app/Activity;->sendBroadcast",
                "sendBroadcastAsUser": "Landroid/app/Activity;->sendBroadcastAsUser",
                "sendOrderedBroadcast": "Landroid/app/Activity;->sendOrderedBroadcast",
                "sendOrderedBroadcastAsUser": "Landroid/app/Activity;->sendOrderedBroadcastAsUser",
                "sendStickyBroadcastAsUser": "Landroid/app/Activity;->sendStickyBroadcastAsUser",
                "sendStickyOrderedBroadcastAsUser": "Landroid/app/Activity;->sendStickyOrderedBroadcastAsUser",
                "findViewById": "Landroid/app/Activity;->findViewById"
            },
            "ActivityGroup": {
                "finish": "Landroid/app/ActivityGroup;->finish",
                "finishActivity": "Landroid/app/ActivityGroup;->finishActivity",
                "finishFromChild": "Landroid/app/ActivityGroup;->finishFromChild",
                "clearWallpaper": "Landroid/app/ActivityGroup;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/ActivityGroup;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/ActivityGroup;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/ActivityGroup;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/ActivityGroup;->setWallpaper"
            },
            "ActivityManager": {
                "clearApplicationUserData": "Landroid/app/ActivityManager;->clearApplicationUserData",
                "getRecentTasks": "Landroid/app/ActivityManager;->getRecentTasks",
                "getRunningTasks": "Landroid/app/ActivityManager;->getRunningTasks",
                "killBackgroundProcesses": "Landroid/app/ActivityManager;->killBackgroundProcesses",
                "moveTaskToFront": "Landroid/app/ActivityManager;->moveTaskToFront",
                "restartPackage": "Landroid/app/ActivityManager;->restartPackage",
                "getRunningAppProcesses": "Landroid/app/ActivityManager;->getRunningAppProcesses",
                "forceStopPackage": "Landroid/app/ActivityManager;->forceStopPackage"
            },
            "ActivityManagerNative": {
                "startService": "Landroid/app/ActivityManagerNative;->startService",
                "registerReceiver": "Landroid/app/ActivityManagerNative;->registerReceiver",
                "bindBackupAgent": "Landroid/app/ActivityManagerNative;->bindBackupAgent",
                "handleApplicationWtf": "Landroid/app/ActivityManagerNative;->handleApplicationWtf",
                "onTransact": "Landroid/app/ActivityManagerNative;->onTransact",
                "shutdown": "Landroid/app/ActivityManagerNative;->shutdown",
                "startNextMatchingActivity": "Landroid/app/ActivityManagerNative;->startNextMatchingActivity",
                "startActivityWithConfig": "Landroid/app/ActivityManagerNative;->startActivityWithConfig",
                "getRecentTasks": "Landroid/app/ActivityManagerNative;->getRecentTasks",
                "getTasks": "Landroid/app/ActivityManagerNative;->getTasks",
                "broadcastStickyIntent": "Landroid/app/ActivityManagerNative;->broadcastStickyIntent",
                "finishReceiver": "Landroid/app/ActivityManagerNative;->finishReceiver",
                "goingToSleep": "Landroid/app/ActivityManagerNative;->goingToSleep",
                "handleApplicationCrash": "Landroid/app/ActivityManagerNative;->handleApplicationCrash",
                "killAllBackgroundProcesses": "Landroid/app/ActivityManagerNative;->killAllBackgroundProcesses",
                "killApplicationWithUid": "Landroid/app/ActivityManagerNative;->killApplicationWithUid",
                "killBackgroundProcesses": "Landroid/app/ActivityManagerNative;->killBackgroundProcesses",
                "moveTaskBackwards": "Landroid/app/ActivityManagerNative;->moveTaskBackwards",
                "moveTaskToBack": "Landroid/app/ActivityManagerNative;->moveTaskToBack",
                "moveTaskToFront": "Landroid/app/ActivityManagerNative;->moveTaskToFront",
                "resumeAppSwitches": "Landroid/app/ActivityManagerNative;->resumeAppSwitches",
                "setAlwaysFinish": "Landroid/app/ActivityManagerNative;->setAlwaysFinish",
                "setDebugApp": "Landroid/app/ActivityManagerNative;->setDebugApp",
                "setLockScreenShown": "Landroid/app/ActivityManagerNative;->setLockScreenShown",
                "setProcessLimit": "Landroid/app/ActivityManagerNative;->setProcessLimit",
                "startRunning": "Landroid/app/ActivityManagerNative;->startRunning",
                "unbroadcastIntent": "Landroid/app/ActivityManagerNative;->unbroadcastIntent",
                "updateConfiguration": "Landroid/app/ActivityManagerNative;->updateConfiguration",
                "updatePersistentConfiguration": "Landroid/app/ActivityManagerNative;->updatePersistentConfiguration",
                "wakingUp": "Landroid/app/ActivityManagerNative;->wakingUp"
            },
            "admin": {
                "DevicePolicyManager": {
                    "isAdminActive": "Lapp/admin/DevicePolicyManager;->isAdminActive",
                    "lockNow": "Lapp/admin/DevicePolicyManager;->lockNow",
                    "resetPassword": "Lapp/admin/DevicePolicyManager;->resetPassword"
                }
            },
            "AlarmManager": {
                "setTimeZone": "Landroid/app/AlarmManager;->setTimeZone",
                "getNextAlarmClock": "Landroid/app/AlarmManager;->getNextAlarmClock"
            },
            "Application": {
                "bindService": "Landroid/app/Application;->bindService",
                "clearWallpaper": "Landroid/app/Application;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/Application;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/Application;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/Application;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/Application;->setWallpaper",
                "onCreate": "Landroid/app/Application;->onCreate",
                "$init": "Landroid/app/Application;->$init",
                "attachBaseContext": "Landroid/app/Application;->attachBaseContext",
                "getDir": "Landroid/app/Application;->getDir"
            },
            "ApplicationPackageManager$ResourceName": {
                "toString": "Landroid/app/ApplicationPackageManager$ResourceName;->toString"
            },
            "ApplicationPackageManager": {
                "getDrawable": "Landroid/app/ApplicationPackageManager;->getDrawable",
                "getPackageGids": "Landroid/app/ApplicationPackageManager;->getPackageGids",
                "freeStorageAndNotify": "Landroid/app/ApplicationPackageManager;->freeStorageAndNotify",
                "freeStorage": "Landroid/app/ApplicationPackageManager;->freeStorage",
                "getPackageSizeInfo": "Landroid/app/ApplicationPackageManager;->getPackageSizeInfo",
                "getInstalledPackages": "Landroid/app/ApplicationPackageManager;->getInstalledPackages",
                "installPackage": "Landroid/app/ApplicationPackageManager;->installPackage",
                "getInstalledApplications": "Landroid/app/ApplicationPackageManager;->getInstalledApplications",
                "deletePackage": "Landroid/app/ApplicationPackageManager;->deletePackage",
                "setComponentEnabledSetting": "Landroid/app/ApplicationPackageManager;->setComponentEnabledSetting"
            },
            "backup": {
                "BackupAgentHelper": {
                    "setWallpaper": "Landroid/app/backup/BackupAgentHelper;->setWallpaper",
                    "unregisterReceiver": "Landroid/app/backup/BackupAgentHelper;->unregisterReceiver",
                    "clearWallpaper": "Landroid/app/backup/BackupAgentHelper;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/app/backup/BackupAgentHelper;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/app/backup/BackupAgentHelper;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/app/backup/BackupAgentHelper;->sendStickyOrderedBroadcast"
                },
                "IBackupManager$Stub$Proxy": {
                    "selectBackupTransport": "Landroid/app/backup/IBackupManager$Stub$Proxy;->selectBackupTransport",
                    "clearBackupData": "Landroid/app/backup/IBackupManager$Stub$Proxy;->clearBackupData",
                    "restoreAtInstall": "Landroid/app/backup/IBackupManager$Stub$Proxy;->restoreAtInstall",
                    "setAutoRestore": "Landroid/app/backup/IBackupManager$Stub$Proxy;->setAutoRestore",
                    "setBackupEnabled": "Landroid/app/backup/IBackupManager$Stub$Proxy;->setBackupEnabled",
                    "setBackupProvisioned": "Landroid/app/backup/IBackupManager$Stub$Proxy;->setBackupProvisioned"
                },
                "IBackupManager$Stub": {
                    "onTransact": "Landroid/app/backup/IBackupManager$Stub;->onTransact",
                    "selectBackupTransport": "Landroid/app/backup/IBackupManager$Stub;->selectBackupTransport",
                    "clearBackupData": "Landroid/app/backup/IBackupManager$Stub;->clearBackupData",
                    "restoreAtInstall": "Landroid/app/backup/IBackupManager$Stub;->restoreAtInstall",
                    "setAutoRestore": "Landroid/app/backup/IBackupManager$Stub;->setAutoRestore",
                    "setBackupEnabled": "Landroid/app/backup/IBackupManager$Stub;->setBackupEnabled"
                },
                "IBackupManager": {
                    "selectBackupTransport": "Landroid/app/backup/IBackupManager;->selectBackupTransport",
                    "clearBackupData": "Landroid/app/backup/IBackupManager;->clearBackupData",
                    "restoreAtInstall": "Landroid/app/backup/IBackupManager;->restoreAtInstall",
                    "setAutoRestore": "Landroid/app/backup/IBackupManager;->setAutoRestore",
                    "setBackupEnabled": "Landroid/app/backup/IBackupManager;->setBackupEnabled",
                    "getConfigurationIntent": "Landroid/app/backup/IBackupManager;->getConfigurationIntent",
                    "isBackupEnabled": "Landroid/app/backup/IBackupManager;->isBackupEnabled",
                    "getCurrentTransport": "Landroid/app/backup/IBackupManager;->getCurrentTransport",
                    "getDestinationString": "Landroid/app/backup/IBackupManager;->getDestinationString"
                },
                "IRestoreObserver$Stub$Proxy": {
                    "restoreFinished": "Landroid/app/backup/IRestoreObserver$Stub$Proxy;->restoreFinished"
                },
                "BackupAgent": {
                    "clearWallpaper": "Landroid/app/backup/BackupAgent;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/app/backup/BackupAgent;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/app/backup/BackupAgent;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/app/backup/BackupAgent;->sendStickyOrderedBroadcast",
                    "setWallpaper": "Landroid/app/backup/BackupAgent;->setWallpaper"
                }
            },
            "ContextImpl$ApplicationContentResolver": {
                "getCurrentSync": "Landroid/app/ContextImpl$ApplicationContentResolver;->getCurrentSync",
                "getSyncStatus": "Landroid/app/ContextImpl$ApplicationContentResolver;->getSyncStatus",
                "getMasterSyncAutomatically": "Landroid/app/ContextImpl$ApplicationContentResolver;->getMasterSyncAutomatically",
                "getSyncAutomatically": "Landroid/app/ContextImpl$ApplicationContentResolver;->getSyncAutomatically",
                "isSyncActive": "Landroid/app/ContextImpl$ApplicationContentResolver;->isSyncActive",
                "isSyncPending": "Landroid/app/ContextImpl$ApplicationContentResolver;->isSyncPending",
                "getIsSyncable": "Landroid/app/ContextImpl$ApplicationContentResolver;->getIsSyncable",
                "getCurrentSyncs": "Landroid/app/ContextImpl$ApplicationContentResolver;->getCurrentSyncs",
                "getPeriodicSyncs": "Landroid/app/ContextImpl$ApplicationContentResolver;->getPeriodicSyncs",
                "addPeriodicSync": "Landroid/app/ContextImpl$ApplicationContentResolver;->addPeriodicSync",
                "removePeriodicSync": "Landroid/app/ContextImpl$ApplicationContentResolver;->removePeriodicSync",
                "setIsSyncable": "Landroid/app/ContextImpl$ApplicationContentResolver;->setIsSyncable",
                "setMasterSyncAutomatically": "Landroid/app/ContextImpl$ApplicationContentResolver;->setMasterSyncAutomatically",
                "setSyncAutomatically": "Landroid/app/ContextImpl$ApplicationContentResolver;->setSyncAutomatically"
            },
            "ContextImpl": {
                "clearWallpaper": "Landroid/app/ContextImpl;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/ContextImpl;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/ContextImpl;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/ContextImpl;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/ContextImpl;->setWallpaper"
            },
            "DialogFragment": {
                "setShowsDialog": "Landroid/app/DialogFragment;->setShowsDialog"
            },
            "Dialog": {
                "setFeatureDrawableAlpha": "Landroid/app/Dialog;->setFeatureDrawableAlpha",
                "dispatchKeyEvent": "Landroid/app/Dialog;->dispatchKeyEvent",
                "setOnKeyListener": "Landroid/app/Dialog;->setOnKeyListener"
            },
            "DownloadManager": {
                "getUriForDownloadedFile": "Landroid/app/DownloadManager;->getUriForDownloadedFile",
                "addCompletedDownload": "Landroid/app/DownloadManager;->addCompletedDownload",
                "enqueue": "Landroid/app/DownloadManager;->enqueue",
                "getDownloadUri": "Landroid/app/DownloadManager;->getDownloadUri",
                "getMaxBytesOverMobile": "Landroid/app/DownloadManager;->getMaxBytesOverMobile",
                "getRecommendedMaxBytesOverMobile": "Landroid/app/DownloadManager;->getRecommendedMaxBytesOverMobile",
                "getMimeTypeForDownloadedFile": "Landroid/app/DownloadManager;->getMimeTypeForDownloadedFile",
                "getWhereClauseForIds": "Landroid/app/DownloadManager;->getWhereClauseForIds",
                "getWhereArgsForIds": "Landroid/app/DownloadManager;->getWhereArgsForIds"
            },
            "ExpandableListActivity": {
                "setSelectedChild": "Landroid/app/ExpandableListActivity;->setSelectedChild",
                "onContentChanged": "Landroid/app/ExpandableListActivity;->onContentChanged",
                "clearWallpaper": "Landroid/app/ExpandableListActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/ExpandableListActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/ExpandableListActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/ExpandableListActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/ExpandableListActivity;->setWallpaper"
            },
            "IActivityManager": {
                "registerReceiver": "Landroid/app/IActivityManager;->registerReceiver",
                "bindBackupAgent": "Landroid/app/IActivityManager;->bindBackupAgent",
                "handleApplicationWtf": "Landroid/app/IActivityManager;->handleApplicationWtf",
                "shutdown": "Landroid/app/IActivityManager;->shutdown",
                "getRecentTasks": "Landroid/app/IActivityManager;->getRecentTasks",
                "getTasks": "Landroid/app/IActivityManager;->getTasks",
                "goingToSleep": "Landroid/app/IActivityManager;->goingToSleep",
                "handleApplicationCrash": "Landroid/app/IActivityManager;->handleApplicationCrash",
                "killAllBackgroundProcesses": "Landroid/app/IActivityManager;->killAllBackgroundProcesses",
                "killApplicationWithUid": "Landroid/app/IActivityManager;->killApplicationWithUid",
                "killBackgroundProcesses": "Landroid/app/IActivityManager;->killBackgroundProcesses",
                "moveTaskBackwards": "Landroid/app/IActivityManager;->moveTaskBackwards",
                "moveTaskToBack": "Landroid/app/IActivityManager;->moveTaskToBack",
                "moveTaskToFront": "Landroid/app/IActivityManager;->moveTaskToFront",
                "resumeAppSwitches": "Landroid/app/IActivityManager;->resumeAppSwitches",
                "setAlwaysFinish": "Landroid/app/IActivityManager;->setAlwaysFinish",
                "setDebugApp": "Landroid/app/IActivityManager;->setDebugApp",
                "setLockScreenShown": "Landroid/app/IActivityManager;->setLockScreenShown",
                "setProcessLimit": "Landroid/app/IActivityManager;->setProcessLimit",
                "startRunning": "Landroid/app/IActivityManager;->startRunning",
                "unbroadcastIntent": "Landroid/app/IActivityManager;->unbroadcastIntent",
                "updateConfiguration": "Landroid/app/IActivityManager;->updateConfiguration",
                "updatePersistentConfiguration": "Landroid/app/IActivityManager;->updatePersistentConfiguration",
                "wakingUp": "Landroid/app/IActivityManager;->wakingUp"
            },
            "IAlarmManager$Stub$Proxy": {
                "setTimeZone": "Landroid/app/IAlarmManager$Stub$Proxy;->setTimeZone"
            },
            "IAlarmManager$Stub": {
                "onTransact": "Landroid/app/IAlarmManager$Stub;->onTransact",
                "setTimeZone": "Landroid/app/IAlarmManager$Stub;->setTimeZone"
            },
            "IAlarmManager": {
                "setTimeZone": "Landroid/app/IAlarmManager;->setTimeZone"
            },
            "INotificationManager$Stub$Proxy": {
                "enqueueNotification": "Landroid/app/INotificationManager$Stub$Proxy;->enqueueNotification",
                "enqueueNotificationWithTag": "Landroid/app/INotificationManager$Stub$Proxy;->enqueueNotificationWithTag"
            },
            "INotificationManager$Stub": {
                "onTransact": "Landroid/app/INotificationManager$Stub;->onTransact",
                "enqueueNotification": "Landroid/app/INotificationManager$Stub;->enqueueNotification",
                "enqueueNotificationWithTag": "Landroid/app/INotificationManager$Stub;->enqueueNotificationWithTag"
            },
            "INotificationManager": {
                "enqueueNotification": "Landroid/app/INotificationManager;->enqueueNotification",
                "enqueueNotificationWithTag": "Landroid/app/INotificationManager;->enqueueNotificationWithTag"
            },
            "IWallpaperManager$Stub$Proxy": {
                "setWallpaper": "Landroid/app/IWallpaperManager$Stub$Proxy;->setWallpaper",
                "setDimensionHints": "Landroid/app/IWallpaperManager$Stub$Proxy;->setDimensionHints",
                "setWallpaperComponent": "Landroid/app/IWallpaperManager$Stub$Proxy;->setWallpaperComponent"
            },
            "IWallpaperManager$Stub": {
                "setWallpaper": "Landroid/app/IWallpaperManager$Stub;->setWallpaper",
                "onTransact": "Landroid/app/IWallpaperManager$Stub;->onTransact",
                "setDimensionHints": "Landroid/app/IWallpaperManager$Stub;->setDimensionHints"
            },
            "IWallpaperManager": {
                "setWallpaper": "Landroid/app/IWallpaperManager;->setWallpaper",
                "setDimensionHints": "Landroid/app/IWallpaperManager;->setDimensionHints",
                "getWallpaperInfo": "Landroid/app/IWallpaperManager;->getWallpaperInfo",
                "getWallpaper": "Landroid/app/IWallpaperManager;->getWallpaper",
                "getHeightHint": "Landroid/app/IWallpaperManager;->getHeightHint",
                "getWidthHint": "Landroid/app/IWallpaperManager;->getWidthHint"
            },
            "KeyguardManager$KeyguardLock": {
                "disableKeyguard": "Landroid/app/KeyguardManager$KeyguardLock;->disableKeyguard",
                "reenableKeyguard": "Landroid/app/KeyguardManager$KeyguardLock;->reenableKeyguard"
            },
            "KeyguardManager": {
                "exitKeyguardSecurely": "Landroid/app/KeyguardManager;->exitKeyguardSecurely",
                "isDeviceLocked": "Landroid/app/KeyguardManager;->isDeviceLocked",
                "isDeviceSecure": "Landroid/app/KeyguardManager;->isDeviceSecure",
                "isKeyguardLocked": "Landroid/app/KeyguardManager;->isKeyguardLocked",
                "isKeyguardSecure": "Landroid/app/KeyguardManager;->isKeyguardSecure"
            },
            "Notification$Style": {
                "setBuilder": "Landroid/app/Notification$Style;->setBuilder"
            },
            "NotificationManager": {
                "notify": "Landroid/app/NotificationManager;->notify"
            },
            "StatusBarManager": {
                "collapse": "Landroid/app/StatusBarManager;->collapse",
                "expand": "Landroid/app/StatusBarManager;->expand"
            },
            "WallpaperManager": {
                "clear": "Landroid/app/WallpaperManager;->clear",
                "setBitmap": "Landroid/app/WallpaperManager;->setBitmap",
                "setResource": "Landroid/app/WallpaperManager;->setResource",
                "setStream": "Landroid/app/WallpaperManager;->setStream",
                "suggestDesiredDimensions": "Landroid/app/WallpaperManager;->suggestDesiredDimensions",
                "getIWallpaperManager": "Landroid/app/WallpaperManager;->getIWallpaperManager",
                "getWallpaperColors": "Landroid/app/WallpaperManager;->getWallpaperColors",
                "getWallpaperInfo": "Landroid/app/WallpaperManager;->getWallpaperInfo",
                "getInstance": "Landroid/app/WallpaperManager;->getInstance",
                "getCropAndSetWallpaperIntent": "Landroid/app/WallpaperManager;->getCropAndSetWallpaperIntent",
                "getBuiltInDrawable": "Landroid/app/WallpaperManager;->getBuiltInDrawable",
                "getDrawable": "Landroid/app/WallpaperManager;->getDrawable",
                "getFastDrawable": "Landroid/app/WallpaperManager;->getFastDrawable",
                "getWallpaperFile": "Landroid/app/WallpaperManager;->getWallpaperFile",
                "isSetWallpaperAllowed": "Landroid/app/WallpaperManager;->isSetWallpaperAllowed",
                "isWallpaperSupported": "Landroid/app/WallpaperManager;->isWallpaperSupported",
                "getDesiredMinimumHeight": "Landroid/app/WallpaperManager;->getDesiredMinimumHeight",
                "getDesiredMinimumWidth": "Landroid/app/WallpaperManager;->getDesiredMinimumWidth",
                "getWallpaperId": "Landroid/app/WallpaperManager;->getWallpaperId"
            },
            "ISearchManager": {
                "getSearchableInfo": "Landroid/app/ISearchManager;->getSearchableInfo",
                "getDefaultSearchableForWebSearch": "Landroid/app/ISearchManager;->getDefaultSearchableForWebSearch",
                "isVisible": "Landroid/app/ISearchManager;->isVisible",
                "getSearchablesInGlobalSearch": "Landroid/app/ISearchManager;->getSearchablesInGlobalSearch",
                "getSearchablesForWebSearch": "Landroid/app/ISearchManager;->getSearchablesForWebSearch"
            },
            "SearchManager": {
                "getSearchableInfo": "Landroid/app/SearchManager;->getSearchableInfo",
                "getSuggestions": "Landroid/app/SearchManager;->getSuggestions",
                "getDefaultSearchableForWebSearch": "Landroid/app/SearchManager;->getDefaultSearchableForWebSearch",
                "isDefaultSearchable": "Landroid/app/SearchManager;->isDefaultSearchable",
                "isVisible": "Landroid/app/SearchManager;->isVisible",
                "getSearchablesInGlobalSearch": "Landroid/app/SearchManager;->getSearchablesInGlobalSearch",
                "getSearchablesForWebSearch": "Landroid/app/SearchManager;->getSearchablesForWebSearch"
            },
            "role": {
                "RoleManager": {
                    "isRoleAvailable": "Landroid/app/role/RoleManager;->isRoleAvailable",
                    "isRoleHeld": "Landroid/app/role/RoleManager;->isRoleHeld"
                }
            },
            "AliasActivity": {
                "clearWallpaper": "Landroid/app/AliasActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/AliasActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/AliasActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/AliasActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/AliasActivity;->setWallpaper"
            },
            "IntentService": {
                "clearWallpaper": "Landroid/app/IntentService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/IntentService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/IntentService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/IntentService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/IntentService;->setWallpaper"
            },
            "LauncherActivity": {
                "clearWallpaper": "Landroid/app/LauncherActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/LauncherActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/LauncherActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/LauncherActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/LauncherActivity;->setWallpaper"
            },
            "ListActivity": {
                "clearWallpaper": "Landroid/app/ListActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/ListActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/ListActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/ListActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/ListActivity;->setWallpaper"
            },
            "NativeActivity": {
                "clearWallpaper": "Landroid/app/NativeActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/NativeActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/NativeActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/NativeActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/NativeActivity;->setWallpaper"
            },
            "Service": {
                "clearWallpaper": "Landroid/app/Service;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/Service;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/Service;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/Service;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/Service;->setWallpaper",
                "onStartCommand": "Landroid/app/Service;->onStartCommand",
                "onConfigurationChanged": "Landroid/app/Service;->onConfigurationChanged",
                "onStart": "Landroid/app/Service;->onStart",
                "onLowMemory": "Landroid/app/Service;->onLowMemory"
            },
            "TabActivity": {
                "clearWallpaper": "Landroid/app/TabActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/app/TabActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/app/TabActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/app/TabActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/app/TabActivity;->setWallpaper"
            },
            "Instrumentation": {
                "callActivityOnSaveInstanceState": "Landroid/app/Instrumentation;->callActivityOnSaveInstanceState",
                "callActivityOnPostCreate": "Landroid/app/Instrumentation;->callActivityOnPostCreate",
                "onException": "Landroid/app/Instrumentation;->onException",
                "callActivityOnNewIntent": "Landroid/app/Instrumentation;->callActivityOnNewIntent",
                "callActivityOnStart": "Landroid/app/Instrumentation;->callActivityOnStart",
                "callActivityOnUserLeaving": "Landroid/app/Instrumentation;->callActivityOnUserLeaving",
                "callActivityOnRestoreInstanceState": "Landroid/app/Instrumentation;->callActivityOnRestoreInstanceState"
            },
            "AlertDialog": {
                "$init": "Landroid/app/AlertDialog;->$init",
                "onCreate": "Landroid/app/AlertDialog;->onCreate"
            },
            "PendingIntent": {
                "getActivity": "Landroid/app/PendingIntent;->getActivity",
                "getBroadcast": "Landroid/app/PendingIntent;->getBroadcast",
                "getService": "Landroid/app/PendingIntent;->getService"
            }
        },
        "bluetooth": {
            "AtCommandHandler": {
                "handleActionCommand": "Landroid/bluetooth/AtCommandHandler;->handleActionCommand",
                "handleBasicCommand": "Landroid/bluetooth/AtCommandHandler;->handleBasicCommand",
                "handleReadCommand": "Landroid/bluetooth/AtCommandHandler;->handleReadCommand",
                "handleSetCommand": "Landroid/bluetooth/AtCommandHandler;->handleSetCommand",
                "handleTestCommand": "Landroid/bluetooth/AtCommandHandler;->handleTestCommand"
            },
            "AtParser": {
                "process": "Landroid/bluetooth/AtParser;->process"
            },
            "BluetoothA2dp": {
                "allowIncomingConnect": "Landroid/bluetooth/BluetoothA2dp;->allowIncomingConnect",
                "connect": "Landroid/bluetooth/BluetoothA2dp;->connect",
                "disconnect": "Landroid/bluetooth/BluetoothA2dp;->disconnect",
                "isA2dpPlaying": "Landroid/bluetooth/BluetoothA2dp;->isA2dpPlaying",
                "isEnabled": "Landroid/bluetooth/BluetoothA2dp;->isEnabled",
                "resumeSink": "Landroid/bluetooth/BluetoothA2dp;->resumeSink",
                "setPriority": "Landroid/bluetooth/BluetoothA2dp;->setPriority",
                "shouldSendVolumeKeys": "Landroid/bluetooth/BluetoothA2dp;->shouldSendVolumeKeys",
                "suspendSink": "Landroid/bluetooth/BluetoothA2dp;->suspendSink",
                "getConnectionState": "Landroid/bluetooth/BluetoothA2dp;->getConnectionState",
                "getPriority": "Landroid/bluetooth/BluetoothA2dp;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothA2dp;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothA2dp;->getDevicesMatchingConnectionStates"
            },
            "BluetoothAdapter": {
                "createNewRfcommSocketAndRecord": "Landroid/bluetooth/BluetoothAdapter;->createNewRfcommSocketAndRecord",
                "listenUsingEncryptedRfcommOn": "Landroid/bluetooth/BluetoothAdapter;->listenUsingEncryptedRfcommOn",
                "listenUsingEncryptedRfcommWithServiceRecord": "Landroid/bluetooth/BluetoothAdapter;->listenUsingEncryptedRfcommWithServiceRecord",
                "listenUsingInsecureRfcommOn": "Landroid/bluetooth/BluetoothAdapter;->listenUsingInsecureRfcommOn",
                "listenUsingInsecureRfcommWithServiceRecord": "Landroid/bluetooth/BluetoothAdapter;->listenUsingInsecureRfcommWithServiceRecord",
                "listenUsingRfcommOn": "Landroid/bluetooth/BluetoothAdapter;->listenUsingRfcommOn",
                "listenUsingRfcommWithServiceRecord": "Landroid/bluetooth/BluetoothAdapter;->listenUsingRfcommWithServiceRecord",
                "listenUsingScoOn": "Landroid/bluetooth/BluetoothAdapter;->listenUsingScoOn",
                "getUuids": "Landroid/bluetooth/BluetoothAdapter;->getUuids",
                "readOutOfBandData": "Landroid/bluetooth/BluetoothAdapter;->readOutOfBandData",
                "cancelDiscovery": "Landroid/bluetooth/BluetoothAdapter;->cancelDiscovery",
                "changeApplicationBluetoothState": "Landroid/bluetooth/BluetoothAdapter;->changeApplicationBluetoothState",
                "disable": "Landroid/bluetooth/BluetoothAdapter;->disable",
                "enable": "Landroid/bluetooth/BluetoothAdapter;->enable",
                "enableNoAutoConnect": "Landroid/bluetooth/BluetoothAdapter;->enableNoAutoConnect",
                "isDiscovering": "Landroid/bluetooth/BluetoothAdapter;->isDiscovering",
                "isEnabled": "Landroid/bluetooth/BluetoothAdapter;->isEnabled",
                "setName": "Landroid/bluetooth/BluetoothAdapter;->setName",
                "setScanMode": "Landroid/bluetooth/BluetoothAdapter;->setScanMode",
                "startDiscovery": "Landroid/bluetooth/BluetoothAdapter;->startDiscovery",
                "getConnectionState": "Landroid/bluetooth/BluetoothAdapter;->getConnectionState",
                "getDiscoverableTimeout": "Landroid/bluetooth/BluetoothAdapter;->getDiscoverableTimeout",
                "getProfileConnectionState": "Landroid/bluetooth/BluetoothAdapter;->getProfileConnectionState",
                "getScanMode": "Landroid/bluetooth/BluetoothAdapter;->getScanMode",
                "getState": "Landroid/bluetooth/BluetoothAdapter;->getState",
                "getAddress": "Landroid/bluetooth/BluetoothAdapter;->getAddress",
                "getName": "Landroid/bluetooth/BluetoothAdapter;->getName",
                "getBondedDevices": "Landroid/bluetooth/BluetoothAdapter;->getBondedDevices",
                "setDiscoverableTimeout": "Landroid/bluetooth/BluetoothAdapter;->setDiscoverableTimeout"
            },
            "BluetoothDevice": {
                "getBluetoothClass": "Landroid/bluetooth/BluetoothDevice;->getBluetoothClass",
                "createInsecureRfcommSocket": "Landroid/bluetooth/BluetoothDevice;->createInsecureRfcommSocket",
                "createInsecureRfcommSocketToServiceRecord": "Landroid/bluetooth/BluetoothDevice;->createInsecureRfcommSocketToServiceRecord",
                "createRfcommSocket": "Landroid/bluetooth/BluetoothDevice;->createRfcommSocket",
                "createRfcommSocketToServiceRecord": "Landroid/bluetooth/BluetoothDevice;->createRfcommSocketToServiceRecord",
                "createScoSocket": "Landroid/bluetooth/BluetoothDevice;->createScoSocket",
                "getUuids": "Landroid/bluetooth/BluetoothDevice;->getUuids",
                "cancelBondProcess": "Landroid/bluetooth/BluetoothDevice;->cancelBondProcess",
                "cancelPairingUserInput": "Landroid/bluetooth/BluetoothDevice;->cancelPairingUserInput",
                "createBond": "Landroid/bluetooth/BluetoothDevice;->createBond",
                "createBondOutOfBand": "Landroid/bluetooth/BluetoothDevice;->createBondOutOfBand",
                "fetchUuidsWithSdp": "Landroid/bluetooth/BluetoothDevice;->fetchUuidsWithSdp",
                "getTrustState": "Landroid/bluetooth/BluetoothDevice;->getTrustState",
                "removeBond": "Landroid/bluetooth/BluetoothDevice;->removeBond",
                "setAlias": "Landroid/bluetooth/BluetoothDevice;->setAlias",
                "setDeviceOutOfBandData": "Landroid/bluetooth/BluetoothDevice;->setDeviceOutOfBandData",
                "setPairingConfirmation": "Landroid/bluetooth/BluetoothDevice;->setPairingConfirmation",
                "setPasskey": "Landroid/bluetooth/BluetoothDevice;->setPasskey",
                "setPin": "Landroid/bluetooth/BluetoothDevice;->setPin",
                "setRemoteOutOfBandData": "Landroid/bluetooth/BluetoothDevice;->setRemoteOutOfBandData",
                "setTrust": "Landroid/bluetooth/BluetoothDevice;->setTrust",
                "getBondState": "Landroid/bluetooth/BluetoothDevice;->getBondState",
                "getServiceChannel": "Landroid/bluetooth/BluetoothDevice;->getServiceChannel",
                "getAlias": "Landroid/bluetooth/BluetoothDevice;->getAlias",
                "getAliasName": "Landroid/bluetooth/BluetoothDevice;->getAliasName",
                "getName": "Landroid/bluetooth/BluetoothDevice;->getName"
            },
            "BluetoothDeviceProfileState$1": {
                "onReceive": "Landroid/bluetooth/BluetoothDeviceProfileState$1;->onReceive"
            },
            "BluetoothDeviceProfileState$BondedDevice": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$BondedDevice;->processMessage",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$BondedDevice;->exit"
            },
            "BluetoothDeviceProfileState$IncomingA2dp": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingA2dp;->processMessage",
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingA2dp;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingA2dp;->exit"
            },
            "BluetoothDeviceProfileState$IncomingHandsfree": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHandsfree;->processMessage",
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHandsfree;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHandsfree;->exit"
            },
            "BluetoothDeviceProfileState$IncomingHid": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHid;->processMessage",
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHid;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$IncomingHid;->exit"
            },
            "BluetoothDeviceProfileState$OutgoingA2dp": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingA2dp;->processMessage",
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingA2dp;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingA2dp;->exit"
            },
            "BluetoothDeviceProfileState$OutgoingHandsfree": {
                "processMessage": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingHandsfree;->processMessage",
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingHandsfree;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingHandsfree;->exit"
            },
            "BluetoothDeviceProfileState$OutgoingHid": {
                "enter": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingHid;->enter",
                "exit": "Landroid/bluetooth/BluetoothDeviceProfileState$OutgoingHid;->exit"
            },
            "BluetoothDeviceProfileState": {
                "handleIncomingConnection": "Landroid/bluetooth/BluetoothDeviceProfileState;->handleIncomingConnection",
                "processCommand": "Landroid/bluetooth/BluetoothDeviceProfileState;->processCommand",
                "cancelCommand": "Landroid/bluetooth/BluetoothDeviceProfileState;->cancelCommand",
                "handleConnectionOfOtherProfiles": "Landroid/bluetooth/BluetoothDeviceProfileState;->handleConnectionOfOtherProfiles",
                "processIncomingConnectCommand": "Landroid/bluetooth/BluetoothDeviceProfileState;->processIncomingConnectCommand",
                "sendConnectionAccessIntent": "Landroid/bluetooth/BluetoothDeviceProfileState;->sendConnectionAccessIntent",
                "sendConnectionAccessRemovalIntent": "Landroid/bluetooth/BluetoothDeviceProfileState;->sendConnectionAccessRemovalIntent"
            },
            "BluetoothHeadset": {
                "acceptIncomingConnect": "Landroid/bluetooth/BluetoothHeadset;->acceptIncomingConnect",
                "cancelConnectThread": "Landroid/bluetooth/BluetoothHeadset;->cancelConnectThread",
                "connect": "Landroid/bluetooth/BluetoothHeadset;->connect",
                "connectHeadsetInternal": "Landroid/bluetooth/BluetoothHeadset;->connectHeadsetInternal",
                "createIncomingConnect": "Landroid/bluetooth/BluetoothHeadset;->createIncomingConnect",
                "disconnect": "Landroid/bluetooth/BluetoothHeadset;->disconnect",
                "disconnectHeadsetInternal": "Landroid/bluetooth/BluetoothHeadset;->disconnectHeadsetInternal",
                "isAudioConnected": "Landroid/bluetooth/BluetoothHeadset;->isAudioConnected",
                "isDisabled": "Landroid/bluetooth/BluetoothHeadset;->isDisabled",
                "isEnabled": "Landroid/bluetooth/BluetoothHeadset;->isEnabled",
                "setAudioState": "Landroid/bluetooth/BluetoothHeadset;->setAudioState",
                "setPriority": "Landroid/bluetooth/BluetoothHeadset;->setPriority",
                "startScoUsingVirtualVoiceCall": "Landroid/bluetooth/BluetoothHeadset;->startScoUsingVirtualVoiceCall",
                "startVoiceRecognition": "Landroid/bluetooth/BluetoothHeadset;->startVoiceRecognition",
                "stopScoUsingVirtualVoiceCall": "Landroid/bluetooth/BluetoothHeadset;->stopScoUsingVirtualVoiceCall",
                "stopVoiceRecognition": "Landroid/bluetooth/BluetoothHeadset;->stopVoiceRecognition",
                "getAudioState": "Landroid/bluetooth/BluetoothHeadset;->getAudioState",
                "getBatteryUsageHint": "Landroid/bluetooth/BluetoothHeadset;->getBatteryUsageHint",
                "getConnectionState": "Landroid/bluetooth/BluetoothHeadset;->getConnectionState",
                "getPriority": "Landroid/bluetooth/BluetoothHeadset;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothHeadset;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothHeadset;->getDevicesMatchingConnectionStates"
            },
            "BluetoothHealth": {
                "getMainChannelFd": "Landroid/bluetooth/BluetoothHealth;->getMainChannelFd",
                "connectChannelToSink": "Landroid/bluetooth/BluetoothHealth;->connectChannelToSink",
                "connectChannelToSource": "Landroid/bluetooth/BluetoothHealth;->connectChannelToSource",
                "disconnectChannel": "Landroid/bluetooth/BluetoothHealth;->disconnectChannel",
                "isEnabled": "Landroid/bluetooth/BluetoothHealth;->isEnabled",
                "registerAppConfiguration": "Landroid/bluetooth/BluetoothHealth;->registerAppConfiguration",
                "registerSinkAppConfiguration": "Landroid/bluetooth/BluetoothHealth;->registerSinkAppConfiguration",
                "unregisterAppConfiguration": "Landroid/bluetooth/BluetoothHealth;->unregisterAppConfiguration",
                "getConnectionState": "Landroid/bluetooth/BluetoothHealth;->getConnectionState",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothHealth;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothHealth;->getDevicesMatchingConnectionStates"
            },
            "BluetoothInputDevice": {
                "connect": "Landroid/bluetooth/BluetoothInputDevice;->connect",
                "disconnect": "Landroid/bluetooth/BluetoothInputDevice;->disconnect",
                "isEnabled": "Landroid/bluetooth/BluetoothInputDevice;->isEnabled",
                "setPriority": "Landroid/bluetooth/BluetoothInputDevice;->setPriority",
                "getConnectionState": "Landroid/bluetooth/BluetoothInputDevice;->getConnectionState",
                "getPriority": "Landroid/bluetooth/BluetoothInputDevice;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothInputDevice;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothInputDevice;->getDevicesMatchingConnectionStates"
            },
            "BluetoothPan": {
                "connect": "Landroid/bluetooth/BluetoothPan;->connect",
                "disconnect": "Landroid/bluetooth/BluetoothPan;->disconnect",
                "isEnabled": "Landroid/bluetooth/BluetoothPan;->isEnabled",
                "isTetheringOn": "Landroid/bluetooth/BluetoothPan;->isTetheringOn",
                "getConnectionState": "Landroid/bluetooth/BluetoothPan;->getConnectionState",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothPan;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothPan;->getDevicesMatchingConnectionStates",
                "setBluetoothTethering": "Landroid/bluetooth/BluetoothPan;->setBluetoothTethering"
            },
            "BluetoothPbap": {
                "getClient": "Landroid/bluetooth/BluetoothPbap;->getClient",
                "disconnect": "Landroid/bluetooth/BluetoothPbap;->disconnect",
                "isConnected": "Landroid/bluetooth/BluetoothPbap;->isConnected",
                "getState": "Landroid/bluetooth/BluetoothPbap;->getState"
            },
            "BluetoothProfileState$PendingCommandState": {
                "exit": "Landroid/bluetooth/BluetoothProfileState$PendingCommandState;->exit"
            },
            "BluetoothProfileState$StableState": {
                "exit": "Landroid/bluetooth/BluetoothProfileState$StableState;->exit"
            },
            "BluetoothServerSocket": {
                "<init>": "Landroid/bluetooth/BluetoothServerSocket;-><init>"
            },
            "BluetoothSocket$SdpHelper": {
                "doSdp": "Landroid/bluetooth/BluetoothSocket$SdpHelper;->doSdp"
            },
            "BluetoothSocket": {
                "connect": "Landroid/bluetooth/BluetoothSocket;->connect",
                "<init>": "Landroid/bluetooth/BluetoothSocket;-><init>",
                "initSocketFromFdNative": "Landroid/bluetooth/BluetoothSocket;->initSocketFromFdNative",
                "initSocketNative": "Landroid/bluetooth/BluetoothSocket;->initSocketNative"
            },
            "BluetoothTetheringDataTracker": {
                "teardown": "Landroid/bluetooth/BluetoothTetheringDataTracker;->teardown"
            },
            "HeadsetBase$1": {
                "run": "Landroid/bluetooth/HeadsetBase$1;->run"
            },
            "HeadsetBase": {
                "acquireWakeLock": "Landroid/bluetooth/HeadsetBase;->acquireWakeLock",
                "finalize": "Landroid/bluetooth/HeadsetBase;->finalize",
                "handleInput": "Landroid/bluetooth/HeadsetBase;->handleInput",
                "releaseWakeLock": "Landroid/bluetooth/HeadsetBase;->releaseWakeLock"
            },
            "IBluetooth$Stub$Proxy": {
                "getMainChannelFd": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getMainChannelFd",
                "getRemoteUuids": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteUuids",
                "getUuids": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getUuids",
                "allowIncomingProfileConnect": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->allowIncomingProfileConnect",
                "cancelBondProcess": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->cancelBondProcess",
                "cancelDiscovery": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->cancelDiscovery",
                "cancelPairingUserInput": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->cancelPairingUserInput",
                "changeApplicationBluetoothState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->changeApplicationBluetoothState",
                "connectChannelToSink": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectChannelToSink",
                "connectChannelToSource": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectChannelToSource",
                "connectHeadset": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectHeadset",
                "connectInputDevice": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectInputDevice",
                "connectPanDevice": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectPanDevice",
                "createBond": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->createBond",
                "createBondOutOfBand": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->createBondOutOfBand",
                "disable": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->disable",
                "disconnectChannel": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->disconnectChannel",
                "disconnectHeadset": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->disconnectHeadset",
                "disconnectInputDevice": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->disconnectInputDevice",
                "disconnectPanDevice": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->disconnectPanDevice",
                "enable": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->enable",
                "enableNoAutoConnect": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->enableNoAutoConnect",
                "fetchRemoteUuids": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->fetchRemoteUuids",
                "getTrustState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getTrustState",
                "isDiscovering": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->isDiscovering",
                "isEnabled": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->isEnabled",
                "isTetheringOn": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->isTetheringOn",
                "notifyIncomingConnection": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->notifyIncomingConnection",
                "registerAppConfiguration": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->registerAppConfiguration",
                "removeBond": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->removeBond",
                "setDeviceOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setDeviceOutOfBandData",
                "setDiscoverableTimeout": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setDiscoverableTimeout",
                "setInputDevicePriority": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setInputDevicePriority",
                "setName": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setName",
                "setPairingConfirmation": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPairingConfirmation",
                "setPasskey": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPasskey",
                "setPin": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPin",
                "setRemoteAlias": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setRemoteAlias",
                "setRemoteOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setRemoteOutOfBandData",
                "setScanMode": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setScanMode",
                "setTrust": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setTrust",
                "startDiscovery": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->startDiscovery",
                "unregisterAppConfiguration": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->unregisterAppConfiguration",
                "readOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->readOutOfBandData",
                "addRfcommServiceRecord": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->addRfcommServiceRecord",
                "getBluetoothState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBluetoothState",
                "getBondState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBondState",
                "getDiscoverableTimeout": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getDiscoverableTimeout",
                "getHealthDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getHealthDeviceConnectionState",
                "getInputDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getInputDeviceConnectionState",
                "getInputDevicePriority": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getInputDevicePriority",
                "getPanDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getPanDeviceConnectionState",
                "getProfileConnectionState": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getProfileConnectionState",
                "getRemoteClass": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteClass",
                "getRemoteServiceChannel": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteServiceChannel",
                "getScanMode": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getScanMode",
                "getAddress": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getAddress",
                "getName": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getName",
                "getRemoteAlias": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteAlias",
                "getRemoteName": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteName",
                "listBonds": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->listBonds",
                "getConnectedHealthDevices": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getConnectedHealthDevices",
                "getConnectedInputDevices": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getConnectedInputDevices",
                "getConnectedPanDevices": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getConnectedPanDevices",
                "getHealthDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getHealthDevicesMatchingConnectionStates",
                "getInputDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getInputDevicesMatchingConnectionStates",
                "getPanDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->getPanDevicesMatchingConnectionStates",
                "removeServiceRecord": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->removeServiceRecord",
                "setBluetoothTethering": "Landroid/bluetooth/IBluetooth$Stub$Proxy;->setBluetoothTethering"
            },
            "IBluetooth$Stub": {
                "getMainChannelFd": "Landroid/bluetooth/IBluetooth$Stub;->getMainChannelFd",
                "getRemoteUuids": "Landroid/bluetooth/IBluetooth$Stub;->getRemoteUuids",
                "getUuids": "Landroid/bluetooth/IBluetooth$Stub;->getUuids",
                "allowIncomingProfileConnect": "Landroid/bluetooth/IBluetooth$Stub;->allowIncomingProfileConnect",
                "cancelBondProcess": "Landroid/bluetooth/IBluetooth$Stub;->cancelBondProcess",
                "cancelDiscovery": "Landroid/bluetooth/IBluetooth$Stub;->cancelDiscovery",
                "cancelPairingUserInput": "Landroid/bluetooth/IBluetooth$Stub;->cancelPairingUserInput",
                "changeApplicationBluetoothState": "Landroid/bluetooth/IBluetooth$Stub;->changeApplicationBluetoothState",
                "connectChannelToSink": "Landroid/bluetooth/IBluetooth$Stub;->connectChannelToSink",
                "connectChannelToSource": "Landroid/bluetooth/IBluetooth$Stub;->connectChannelToSource",
                "connectHeadset": "Landroid/bluetooth/IBluetooth$Stub;->connectHeadset",
                "connectInputDevice": "Landroid/bluetooth/IBluetooth$Stub;->connectInputDevice",
                "connectPanDevice": "Landroid/bluetooth/IBluetooth$Stub;->connectPanDevice",
                "createBond": "Landroid/bluetooth/IBluetooth$Stub;->createBond",
                "createBondOutOfBand": "Landroid/bluetooth/IBluetooth$Stub;->createBondOutOfBand",
                "disable": "Landroid/bluetooth/IBluetooth$Stub;->disable",
                "disconnectChannel": "Landroid/bluetooth/IBluetooth$Stub;->disconnectChannel",
                "disconnectHeadset": "Landroid/bluetooth/IBluetooth$Stub;->disconnectHeadset",
                "disconnectInputDevice": "Landroid/bluetooth/IBluetooth$Stub;->disconnectInputDevice",
                "disconnectPanDevice": "Landroid/bluetooth/IBluetooth$Stub;->disconnectPanDevice",
                "enable": "Landroid/bluetooth/IBluetooth$Stub;->enable",
                "enableNoAutoConnect": "Landroid/bluetooth/IBluetooth$Stub;->enableNoAutoConnect",
                "fetchRemoteUuids": "Landroid/bluetooth/IBluetooth$Stub;->fetchRemoteUuids",
                "getTrustState": "Landroid/bluetooth/IBluetooth$Stub;->getTrustState",
                "isDiscovering": "Landroid/bluetooth/IBluetooth$Stub;->isDiscovering",
                "isEnabled": "Landroid/bluetooth/IBluetooth$Stub;->isEnabled",
                "isTetheringOn": "Landroid/bluetooth/IBluetooth$Stub;->isTetheringOn",
                "notifyIncomingConnection": "Landroid/bluetooth/IBluetooth$Stub;->notifyIncomingConnection",
                "onTransact": "Landroid/bluetooth/IBluetooth$Stub;->onTransact",
                "registerAppConfiguration": "Landroid/bluetooth/IBluetooth$Stub;->registerAppConfiguration",
                "removeBond": "Landroid/bluetooth/IBluetooth$Stub;->removeBond",
                "setDeviceOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub;->setDeviceOutOfBandData",
                "setDiscoverableTimeout": "Landroid/bluetooth/IBluetooth$Stub;->setDiscoverableTimeout",
                "setInputDevicePriority": "Landroid/bluetooth/IBluetooth$Stub;->setInputDevicePriority",
                "setName": "Landroid/bluetooth/IBluetooth$Stub;->setName",
                "setPairingConfirmation": "Landroid/bluetooth/IBluetooth$Stub;->setPairingConfirmation",
                "setPasskey": "Landroid/bluetooth/IBluetooth$Stub;->setPasskey",
                "setPin": "Landroid/bluetooth/IBluetooth$Stub;->setPin",
                "setRemoteAlias": "Landroid/bluetooth/IBluetooth$Stub;->setRemoteAlias",
                "setRemoteOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub;->setRemoteOutOfBandData",
                "setScanMode": "Landroid/bluetooth/IBluetooth$Stub;->setScanMode",
                "setTrust": "Landroid/bluetooth/IBluetooth$Stub;->setTrust",
                "startDiscovery": "Landroid/bluetooth/IBluetooth$Stub;->startDiscovery",
                "unregisterAppConfiguration": "Landroid/bluetooth/IBluetooth$Stub;->unregisterAppConfiguration",
                "readOutOfBandData": "Landroid/bluetooth/IBluetooth$Stub;->readOutOfBandData",
                "addRfcommServiceRecord": "Landroid/bluetooth/IBluetooth$Stub;->addRfcommServiceRecord",
                "getBluetoothState": "Landroid/bluetooth/IBluetooth$Stub;->getBluetoothState",
                "getBondState": "Landroid/bluetooth/IBluetooth$Stub;->getBondState",
                "getDiscoverableTimeout": "Landroid/bluetooth/IBluetooth$Stub;->getDiscoverableTimeout",
                "getHealthDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub;->getHealthDeviceConnectionState",
                "getInputDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub;->getInputDeviceConnectionState",
                "getInputDevicePriority": "Landroid/bluetooth/IBluetooth$Stub;->getInputDevicePriority",
                "getPanDeviceConnectionState": "Landroid/bluetooth/IBluetooth$Stub;->getPanDeviceConnectionState",
                "getProfileConnectionState": "Landroid/bluetooth/IBluetooth$Stub;->getProfileConnectionState",
                "getRemoteClass": "Landroid/bluetooth/IBluetooth$Stub;->getRemoteClass",
                "getRemoteServiceChannel": "Landroid/bluetooth/IBluetooth$Stub;->getRemoteServiceChannel",
                "getScanMode": "Landroid/bluetooth/IBluetooth$Stub;->getScanMode",
                "getAddress": "Landroid/bluetooth/IBluetooth$Stub;->getAddress",
                "getName": "Landroid/bluetooth/IBluetooth$Stub;->getName",
                "getRemoteAlias": "Landroid/bluetooth/IBluetooth$Stub;->getRemoteAlias",
                "getRemoteName": "Landroid/bluetooth/IBluetooth$Stub;->getRemoteName",
                "listBonds": "Landroid/bluetooth/IBluetooth$Stub;->listBonds",
                "getConnectedHealthDevices": "Landroid/bluetooth/IBluetooth$Stub;->getConnectedHealthDevices",
                "getConnectedInputDevices": "Landroid/bluetooth/IBluetooth$Stub;->getConnectedInputDevices",
                "getConnectedPanDevices": "Landroid/bluetooth/IBluetooth$Stub;->getConnectedPanDevices",
                "getHealthDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub;->getHealthDevicesMatchingConnectionStates",
                "getInputDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub;->getInputDevicesMatchingConnectionStates",
                "getPanDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth$Stub;->getPanDevicesMatchingConnectionStates",
                "removeServiceRecord": "Landroid/bluetooth/IBluetooth$Stub;->removeServiceRecord",
                "setBluetoothTethering": "Landroid/bluetooth/IBluetooth$Stub;->setBluetoothTethering"
            },
            "IBluetoothA2dp$Stub$Proxy": {
                "allowIncomingConnect": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->allowIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->connect",
                "connectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->connectSinkInternal",
                "disconnect": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->disconnect",
                "disconnectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->disconnectSinkInternal",
                "isA2dpPlaying": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->isA2dpPlaying",
                "resumeSink": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->resumeSink",
                "setPriority": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setPriority",
                "suspendSink": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->suspendSink",
                "getConnectionState": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getDevicesMatchingConnectionStates"
            },
            "IBluetoothA2dp$Stub": {
                "allowIncomingConnect": "Landroid/bluetooth/IBluetoothA2dp$Stub;->allowIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothA2dp$Stub;->connect",
                "connectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp$Stub;->connectSinkInternal",
                "disconnect": "Landroid/bluetooth/IBluetoothA2dp$Stub;->disconnect",
                "disconnectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp$Stub;->disconnectSinkInternal",
                "isA2dpPlaying": "Landroid/bluetooth/IBluetoothA2dp$Stub;->isA2dpPlaying",
                "onTransact": "Landroid/bluetooth/IBluetoothA2dp$Stub;->onTransact",
                "resumeSink": "Landroid/bluetooth/IBluetoothA2dp$Stub;->resumeSink",
                "setPriority": "Landroid/bluetooth/IBluetoothA2dp$Stub;->setPriority",
                "suspendSink": "Landroid/bluetooth/IBluetoothA2dp$Stub;->suspendSink",
                "getConnectionState": "Landroid/bluetooth/IBluetoothA2dp$Stub;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothA2dp$Stub;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothA2dp$Stub;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothA2dp$Stub;->getDevicesMatchingConnectionStates"
            },
            "IBluetoothA2dp": {
                "allowIncomingConnect": "Landroid/bluetooth/IBluetoothA2dp;->allowIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothA2dp;->connect",
                "connectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp;->connectSinkInternal",
                "disconnect": "Landroid/bluetooth/IBluetoothA2dp;->disconnect",
                "disconnectSinkInternal": "Landroid/bluetooth/IBluetoothA2dp;->disconnectSinkInternal",
                "isA2dpPlaying": "Landroid/bluetooth/IBluetoothA2dp;->isA2dpPlaying",
                "resumeSink": "Landroid/bluetooth/IBluetoothA2dp;->resumeSink",
                "setPriority": "Landroid/bluetooth/IBluetoothA2dp;->setPriority",
                "suspendSink": "Landroid/bluetooth/IBluetoothA2dp;->suspendSink",
                "getConnectionState": "Landroid/bluetooth/IBluetoothA2dp;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothA2dp;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothA2dp;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothA2dp;->getDevicesMatchingConnectionStates"
            },
            "IBluetooth": {
                "getMainChannelFd": "Landroid/bluetooth/IBluetooth;->getMainChannelFd",
                "getRemoteUuids": "Landroid/bluetooth/IBluetooth;->getRemoteUuids",
                "getUuids": "Landroid/bluetooth/IBluetooth;->getUuids",
                "allowIncomingProfileConnect": "Landroid/bluetooth/IBluetooth;->allowIncomingProfileConnect",
                "cancelBondProcess": "Landroid/bluetooth/IBluetooth;->cancelBondProcess",
                "cancelDiscovery": "Landroid/bluetooth/IBluetooth;->cancelDiscovery",
                "cancelPairingUserInput": "Landroid/bluetooth/IBluetooth;->cancelPairingUserInput",
                "changeApplicationBluetoothState": "Landroid/bluetooth/IBluetooth;->changeApplicationBluetoothState",
                "connectChannelToSink": "Landroid/bluetooth/IBluetooth;->connectChannelToSink",
                "connectChannelToSource": "Landroid/bluetooth/IBluetooth;->connectChannelToSource",
                "connectHeadset": "Landroid/bluetooth/IBluetooth;->connectHeadset",
                "connectInputDevice": "Landroid/bluetooth/IBluetooth;->connectInputDevice",
                "connectPanDevice": "Landroid/bluetooth/IBluetooth;->connectPanDevice",
                "createBond": "Landroid/bluetooth/IBluetooth;->createBond",
                "createBondOutOfBand": "Landroid/bluetooth/IBluetooth;->createBondOutOfBand",
                "disable": "Landroid/bluetooth/IBluetooth;->disable",
                "disconnectChannel": "Landroid/bluetooth/IBluetooth;->disconnectChannel",
                "disconnectHeadset": "Landroid/bluetooth/IBluetooth;->disconnectHeadset",
                "disconnectInputDevice": "Landroid/bluetooth/IBluetooth;->disconnectInputDevice",
                "disconnectPanDevice": "Landroid/bluetooth/IBluetooth;->disconnectPanDevice",
                "enable": "Landroid/bluetooth/IBluetooth;->enable",
                "enableNoAutoConnect": "Landroid/bluetooth/IBluetooth;->enableNoAutoConnect",
                "fetchRemoteUuids": "Landroid/bluetooth/IBluetooth;->fetchRemoteUuids",
                "getTrustState": "Landroid/bluetooth/IBluetooth;->getTrustState",
                "isDiscovering": "Landroid/bluetooth/IBluetooth;->isDiscovering",
                "isEnabled": "Landroid/bluetooth/IBluetooth;->isEnabled",
                "isTetheringOn": "Landroid/bluetooth/IBluetooth;->isTetheringOn",
                "notifyIncomingConnection": "Landroid/bluetooth/IBluetooth;->notifyIncomingConnection",
                "registerAppConfiguration": "Landroid/bluetooth/IBluetooth;->registerAppConfiguration",
                "removeBond": "Landroid/bluetooth/IBluetooth;->removeBond",
                "setDeviceOutOfBandData": "Landroid/bluetooth/IBluetooth;->setDeviceOutOfBandData",
                "setDiscoverableTimeout": "Landroid/bluetooth/IBluetooth;->setDiscoverableTimeout",
                "setInputDevicePriority": "Landroid/bluetooth/IBluetooth;->setInputDevicePriority",
                "setName": "Landroid/bluetooth/IBluetooth;->setName",
                "setPairingConfirmation": "Landroid/bluetooth/IBluetooth;->setPairingConfirmation",
                "setPasskey": "Landroid/bluetooth/IBluetooth;->setPasskey",
                "setPin": "Landroid/bluetooth/IBluetooth;->setPin",
                "setRemoteAlias": "Landroid/bluetooth/IBluetooth;->setRemoteAlias",
                "setRemoteOutOfBandData": "Landroid/bluetooth/IBluetooth;->setRemoteOutOfBandData",
                "setScanMode": "Landroid/bluetooth/IBluetooth;->setScanMode",
                "setTrust": "Landroid/bluetooth/IBluetooth;->setTrust",
                "startDiscovery": "Landroid/bluetooth/IBluetooth;->startDiscovery",
                "unregisterAppConfiguration": "Landroid/bluetooth/IBluetooth;->unregisterAppConfiguration",
                "readOutOfBandData": "Landroid/bluetooth/IBluetooth;->readOutOfBandData",
                "addRfcommServiceRecord": "Landroid/bluetooth/IBluetooth;->addRfcommServiceRecord",
                "getBluetoothState": "Landroid/bluetooth/IBluetooth;->getBluetoothState",
                "getBondState": "Landroid/bluetooth/IBluetooth;->getBondState",
                "getDiscoverableTimeout": "Landroid/bluetooth/IBluetooth;->getDiscoverableTimeout",
                "getHealthDeviceConnectionState": "Landroid/bluetooth/IBluetooth;->getHealthDeviceConnectionState",
                "getInputDeviceConnectionState": "Landroid/bluetooth/IBluetooth;->getInputDeviceConnectionState",
                "getInputDevicePriority": "Landroid/bluetooth/IBluetooth;->getInputDevicePriority",
                "getPanDeviceConnectionState": "Landroid/bluetooth/IBluetooth;->getPanDeviceConnectionState",
                "getProfileConnectionState": "Landroid/bluetooth/IBluetooth;->getProfileConnectionState",
                "getRemoteClass": "Landroid/bluetooth/IBluetooth;->getRemoteClass",
                "getRemoteServiceChannel": "Landroid/bluetooth/IBluetooth;->getRemoteServiceChannel",
                "getScanMode": "Landroid/bluetooth/IBluetooth;->getScanMode",
                "getAddress": "Landroid/bluetooth/IBluetooth;->getAddress",
                "getName": "Landroid/bluetooth/IBluetooth;->getName",
                "getRemoteAlias": "Landroid/bluetooth/IBluetooth;->getRemoteAlias",
                "getRemoteName": "Landroid/bluetooth/IBluetooth;->getRemoteName",
                "listBonds": "Landroid/bluetooth/IBluetooth;->listBonds",
                "getConnectedHealthDevices": "Landroid/bluetooth/IBluetooth;->getConnectedHealthDevices",
                "getConnectedInputDevices": "Landroid/bluetooth/IBluetooth;->getConnectedInputDevices",
                "getConnectedPanDevices": "Landroid/bluetooth/IBluetooth;->getConnectedPanDevices",
                "getHealthDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth;->getHealthDevicesMatchingConnectionStates",
                "getInputDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth;->getInputDevicesMatchingConnectionStates",
                "getPanDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetooth;->getPanDevicesMatchingConnectionStates",
                "removeServiceRecord": "Landroid/bluetooth/IBluetooth;->removeServiceRecord",
                "setBluetoothTethering": "Landroid/bluetooth/IBluetooth;->setBluetoothTethering"
            },
            "IBluetoothHeadset$Stub$Proxy": {
                "acceptIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->acceptIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->connect",
                "connectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->connectHeadsetInternal",
                "createIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->createIncomingConnect",
                "disconnect": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->disconnect",
                "disconnectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->disconnectHeadsetInternal",
                "isAudioConnected": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->isAudioConnected",
                "setPriority": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setPriority",
                "startScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->startScoUsingVirtualVoiceCall",
                "startVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->startVoiceRecognition",
                "stopScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->stopScoUsingVirtualVoiceCall",
                "stopVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->stopVoiceRecognition",
                "getBatteryUsageHint": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getBatteryUsageHint",
                "getConnectionState": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getDevicesMatchingConnectionStates"
            },
            "IBluetoothHeadset$Stub": {
                "acceptIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset$Stub;->acceptIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothHeadset$Stub;->connect",
                "connectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset$Stub;->connectHeadsetInternal",
                "createIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset$Stub;->createIncomingConnect",
                "disconnect": "Landroid/bluetooth/IBluetoothHeadset$Stub;->disconnect",
                "disconnectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset$Stub;->disconnectHeadsetInternal",
                "isAudioConnected": "Landroid/bluetooth/IBluetoothHeadset$Stub;->isAudioConnected",
                "onTransact": "Landroid/bluetooth/IBluetoothHeadset$Stub;->onTransact",
                "setPriority": "Landroid/bluetooth/IBluetoothHeadset$Stub;->setPriority",
                "startScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset$Stub;->startScoUsingVirtualVoiceCall",
                "startVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset$Stub;->startVoiceRecognition",
                "stopScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset$Stub;->stopScoUsingVirtualVoiceCall",
                "stopVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset$Stub;->stopVoiceRecognition",
                "getBatteryUsageHint": "Landroid/bluetooth/IBluetoothHeadset$Stub;->getBatteryUsageHint",
                "getConnectionState": "Landroid/bluetooth/IBluetoothHeadset$Stub;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothHeadset$Stub;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothHeadset$Stub;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothHeadset$Stub;->getDevicesMatchingConnectionStates"
            },
            "IBluetoothHeadset": {
                "acceptIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset;->acceptIncomingConnect",
                "connect": "Landroid/bluetooth/IBluetoothHeadset;->connect",
                "connectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset;->connectHeadsetInternal",
                "createIncomingConnect": "Landroid/bluetooth/IBluetoothHeadset;->createIncomingConnect",
                "disconnect": "Landroid/bluetooth/IBluetoothHeadset;->disconnect",
                "disconnectHeadsetInternal": "Landroid/bluetooth/IBluetoothHeadset;->disconnectHeadsetInternal",
                "isAudioConnected": "Landroid/bluetooth/IBluetoothHeadset;->isAudioConnected",
                "setPriority": "Landroid/bluetooth/IBluetoothHeadset;->setPriority",
                "startScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset;->startScoUsingVirtualVoiceCall",
                "startVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset;->startVoiceRecognition",
                "stopScoUsingVirtualVoiceCall": "Landroid/bluetooth/IBluetoothHeadset;->stopScoUsingVirtualVoiceCall",
                "stopVoiceRecognition": "Landroid/bluetooth/IBluetoothHeadset;->stopVoiceRecognition",
                "getBatteryUsageHint": "Landroid/bluetooth/IBluetoothHeadset;->getBatteryUsageHint",
                "getConnectionState": "Landroid/bluetooth/IBluetoothHeadset;->getConnectionState",
                "getPriority": "Landroid/bluetooth/IBluetoothHeadset;->getPriority",
                "getConnectedDevices": "Landroid/bluetooth/IBluetoothHeadset;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/IBluetoothHeadset;->getDevicesMatchingConnectionStates"
            },
            "IBluetoothPbap$Stub$Proxy": {
                "getClient": "Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->getClient",
                "connect": "Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->connect",
                "isConnected": "Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->isConnected",
                "getState": "Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->getState",
                "disconnect": "Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->disconnect"
            },
            "IBluetoothPbap$Stub": {
                "getClient": "Landroid/bluetooth/IBluetoothPbap$Stub;->getClient",
                "connect": "Landroid/bluetooth/IBluetoothPbap$Stub;->connect",
                "isConnected": "Landroid/bluetooth/IBluetoothPbap$Stub;->isConnected",
                "onTransact": "Landroid/bluetooth/IBluetoothPbap$Stub;->onTransact",
                "getState": "Landroid/bluetooth/IBluetoothPbap$Stub;->getState",
                "disconnect": "Landroid/bluetooth/IBluetoothPbap$Stub;->disconnect"
            },
            "IBluetoothPbap": {
                "getClient": "Landroid/bluetooth/IBluetoothPbap;->getClient",
                "connect": "Landroid/bluetooth/IBluetoothPbap;->connect",
                "isConnected": "Landroid/bluetooth/IBluetoothPbap;->isConnected",
                "getState": "Landroid/bluetooth/IBluetoothPbap;->getState",
                "disconnect": "Landroid/bluetooth/IBluetoothPbap;->disconnect"
            },
            "ScoSocket": {
                "connect": "Landroid/bluetooth/ScoSocket;->connect",
                "": "Landroid/bluetooth/ScoSocket;->"
            },
            "BluetoothManager": {
                "getAdapter": "Landroid/bluetooth/BluetoothManager;->getAdapter",
                "getConnectionState": "Landroid/bluetooth/BluetoothManager;->getConnectionState",
                "getConnectedDevices": "Landroid/bluetooth/BluetoothManager;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/bluetooth/BluetoothManager;->getDevicesMatchingConnectionStates"
            }
        },
        "database": {
            "CrossProcessCursorWrapper": {
                "getWindow": "Landroid/database/CrossProcessCursorWrapper;->getWindow"
            },
            "sqlite": {
                "SQLiteGlobal": {
                    "getWALSyncMode": "Landroid/database/sqlite/SQLiteGlobal;->getWALSyncMode"
                },
                "SQLiteStatement": {
                    "executeInsert": "Landroid/database/sqlite/SQLiteStatement;->executeInsert"
                },
                "isOpen": "Landroid/database/sqlite;->isOpen",
                "SQLiteDatabase": {
                    "query": "Landroid/database/sqlite/SQLiteDatabase;->query"
                }
            },
            "Cursor": {
                "getCount": "Landroid/database/Cursor;->getCount",
                "getPosition": "Landroid/database/Cursor;->getPosition",
                "getColumnIndex": "Landroid/database/Cursor;->getColumnIndex",
                "getColumnIndexOrThrow": "Landroid/database/Cursor;->getColumnIndexOrThrow",
                "getColumnName": "Landroid/database/Cursor;->getColumnName",
                "getColumnNames": "Landroid/database/Cursor;->getColumnNames",
                "getColumnCount": "Landroid/database/Cursor;->getColumnCount",
                "getBlob": "Landroid/database/Cursor;->getBlob",
                "getString": "Landroid/database/Cursor;->getString",
                "getShort": "Landroid/database/Cursor;->getShort",
                "getInt": "Landroid/database/Cursor;->getInt",
                "getLong": "Landroid/database/Cursor;->getLong",
                "getFloat": "Landroid/database/Cursor;->getFloat",
                "getDouble": "Landroid/database/Cursor;->getDouble",
                "getType": "Landroid/database/Cursor;->getType",
                "getNotificationUri": "Landroid/database/Cursor;->getNotificationUri",
                "getNotificationUris": "Landroid/database/Cursor;->getNotificationUris",
                "getWantsAllOnMoveCalls": "Landroid/database/Cursor;->getWantsAllOnMoveCalls",
                "getExtras": "Landroid/database/Cursor;->getExtras"
            },
            "CursorWrapper": {
                "getDouble": "Landroid/database/CursorWrapper;->getDouble",
                "getFloat": "Landroid/database/CursorWrapper;->getFloat",
                "getInt": "Landroid/database/CursorWrapper;->getInt",
                "getLong": "Landroid/database/CursorWrapper;->getLong",
                "getShort": "Landroid/database/CursorWrapper;->getShort",
                "getString": "Landroid/database/CursorWrapper;->getString"
            }
        },
        "filterfw": {
            "core": {
                "AsyncRunner$AsyncRunnerTask": {
                    "doInBackground": "Landroid/filterfw/core/AsyncRunner$AsyncRunnerTask;->doInBackground",
                    "onCancelled": "Landroid/filterfw/core/AsyncRunner$AsyncRunnerTask;->onCancelled",
                    "onPostExecute": "Landroid/filterfw/core/AsyncRunner$AsyncRunnerTask;->onPostExecute"
                },
                "AsyncRunner": {
                    "close": "Landroid/filterfw/core/AsyncRunner;->close"
                },
                "FieldPort": {
                    "setFieldFrame": "Landroid/filterfw/core/FieldPort;->setFieldFrame",
                    "transfer": "Landroid/filterfw/core/FieldPort;->transfer"
                },
                "FilterContext": {
                    "tearDown": "Landroid/filterfw/core/FilterContext;->tearDown"
                },
                "FilterFunction": {
                    "execute": "Landroid/filterfw/core/FilterFunction;->execute",
                    "executeWithArgList": "Landroid/filterfw/core/FilterFunction;->executeWithArgList",
                    "close": "Landroid/filterfw/core/FilterFunction;->close",
                    "tearDown": "Landroid/filterfw/core/FilterFunction;->tearDown"
                },
                "FilterGraph": {
                    "closeFilters": "Landroid/filterfw/core/FilterGraph;->closeFilters",
                    "tearDown": "Landroid/filterfw/core/FilterGraph;->tearDown"
                },
                "Filter": {
                    "close": "Landroid/filterfw/core/Filter;->close",
                    "fieldPortValueUpdated": "Landroid/filterfw/core/Filter;->fieldPortValueUpdated",
                    "initProgramInputs": "Landroid/filterfw/core/Filter;->initProgramInputs",
                    "notifyFieldPortValueUpdated": "Landroid/filterfw/core/Filter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterfw/core/Filter;->open",
                    "performClose": "Landroid/filterfw/core/Filter;->performClose",
                    "performOpen": "Landroid/filterfw/core/Filter;->performOpen",
                    "performProcess": "Landroid/filterfw/core/Filter;->performProcess",
                    "performTearDown": "Landroid/filterfw/core/Filter;->performTearDown",
                    "process": "Landroid/filterfw/core/Filter;->process",
                    "transferInputFrames": "Landroid/filterfw/core/Filter;->transferInputFrames",
                    "transferInputPortFrame": "Landroid/filterfw/core/Filter;->transferInputPortFrame"
                },
                "FinalPort": {
                    "setFieldFrame": "Landroid/filterfw/core/FinalPort;->setFieldFrame",
                    "transfer": "Landroid/filterfw/core/FinalPort;->transfer"
                },
                "GraphRunner": {
                    "close": "Landroid/filterfw/core/GraphRunner;->close",
                    "run": "Landroid/filterfw/core/GraphRunner;->run"
                },
                "InputPort": {
                    "transfer": "Landroid/filterfw/core/InputPort;->transfer"
                },
                "SyncRunner": {
                    "performStep": "Landroid/filterfw/core/SyncRunner;->performStep",
                    "step": "Landroid/filterfw/core/SyncRunner;->step",
                    "close": "Landroid/filterfw/core/SyncRunner;->close",
                    "processFilterNode": "Landroid/filterfw/core/SyncRunner;->processFilterNode",
                    "run": "Landroid/filterfw/core/SyncRunner;->run"
                }
            },
            "geometry": {
                "Rectangle": {
                    "fromCenterVerticalAxis": "Landroid/filterfw/geometry/Rectangle;->fromCenterVerticalAxis"
                }
            }
        },
        "filterpacks": {
            "base": {
                "CallbackFilter": {
                    "close": "Landroid/filterpacks/base/CallbackFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/CallbackFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/CallbackFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/CallbackFilter;->open",
                    "performClose": "Landroid/filterpacks/base/CallbackFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/base/CallbackFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/CallbackFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/CallbackFilter;->performTearDown"
                },
                "FrameBranch": {
                    "close": "Landroid/filterpacks/base/FrameBranch;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/FrameBranch;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/FrameBranch;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/FrameBranch;->open",
                    "performClose": "Landroid/filterpacks/base/FrameBranch;->performClose",
                    "performOpen": "Landroid/filterpacks/base/FrameBranch;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/FrameBranch;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/FrameBranch;->performTearDown"
                },
                "FrameFetch": {
                    "close": "Landroid/filterpacks/base/FrameFetch;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/FrameFetch;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/FrameFetch;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/FrameFetch;->open",
                    "performClose": "Landroid/filterpacks/base/FrameFetch;->performClose",
                    "performOpen": "Landroid/filterpacks/base/FrameFetch;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/FrameFetch;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/FrameFetch;->performTearDown"
                },
                "FrameSource": {
                    "close": "Landroid/filterpacks/base/FrameSource;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/FrameSource;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/FrameSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/FrameSource;->open",
                    "performClose": "Landroid/filterpacks/base/FrameSource;->performClose",
                    "performOpen": "Landroid/filterpacks/base/FrameSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/FrameSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/FrameSource;->performTearDown"
                },
                "FrameStore": {
                    "close": "Landroid/filterpacks/base/FrameStore;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/FrameStore;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/FrameStore;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/FrameStore;->open",
                    "performClose": "Landroid/filterpacks/base/FrameStore;->performClose",
                    "performOpen": "Landroid/filterpacks/base/FrameStore;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/FrameStore;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/FrameStore;->performTearDown"
                },
                "GLTextureSource": {
                    "close": "Landroid/filterpacks/base/GLTextureSource;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/GLTextureSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/GLTextureSource;->open",
                    "performClose": "Landroid/filterpacks/base/GLTextureSource;->performClose",
                    "performOpen": "Landroid/filterpacks/base/GLTextureSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/GLTextureSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/GLTextureSource;->performTearDown"
                },
                "GLTextureTarget": {
                    "close": "Landroid/filterpacks/base/GLTextureTarget;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/GLTextureTarget;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/GLTextureTarget;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/GLTextureTarget;->open",
                    "performClose": "Landroid/filterpacks/base/GLTextureTarget;->performClose",
                    "performOpen": "Landroid/filterpacks/base/GLTextureTarget;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/GLTextureTarget;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/GLTextureTarget;->performTearDown"
                },
                "InputStreamSource": {
                    "close": "Landroid/filterpacks/base/InputStreamSource;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/InputStreamSource;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/InputStreamSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/InputStreamSource;->open",
                    "performClose": "Landroid/filterpacks/base/InputStreamSource;->performClose",
                    "performOpen": "Landroid/filterpacks/base/InputStreamSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/InputStreamSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/InputStreamSource;->performTearDown"
                },
                "NullFilter": {
                    "close": "Landroid/filterpacks/base/NullFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/NullFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/NullFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/NullFilter;->open",
                    "performClose": "Landroid/filterpacks/base/NullFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/base/NullFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/NullFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/NullFilter;->performTearDown"
                },
                "ObjectSource": {
                    "close": "Landroid/filterpacks/base/ObjectSource;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/ObjectSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/ObjectSource;->open",
                    "performClose": "Landroid/filterpacks/base/ObjectSource;->performClose",
                    "performOpen": "Landroid/filterpacks/base/ObjectSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/ObjectSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/ObjectSource;->performTearDown"
                },
                "OutputStreamTarget": {
                    "close": "Landroid/filterpacks/base/OutputStreamTarget;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/OutputStreamTarget;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/OutputStreamTarget;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/OutputStreamTarget;->open",
                    "performClose": "Landroid/filterpacks/base/OutputStreamTarget;->performClose",
                    "performOpen": "Landroid/filterpacks/base/OutputStreamTarget;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/OutputStreamTarget;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/OutputStreamTarget;->performTearDown"
                },
                "RetargetFilter": {
                    "close": "Landroid/filterpacks/base/RetargetFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/base/RetargetFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/base/RetargetFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/base/RetargetFilter;->open",
                    "performClose": "Landroid/filterpacks/base/RetargetFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/base/RetargetFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/base/RetargetFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/base/RetargetFilter;->performTearDown"
                }
            },
            "imageproc": {
                "AlphaBlendFilter": {
                    "close": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/AlphaBlendFilter;->performTearDown"
                },
                "AutoFixFilter": {
                    "close": "Landroid/filterpacks/imageproc/AutoFixFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/AutoFixFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/AutoFixFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/AutoFixFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/AutoFixFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/AutoFixFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/AutoFixFilter;->performTearDown"
                },
                "BitmapOverlayFilter": {
                    "close": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/BitmapOverlayFilter;->performTearDown"
                },
                "BitmapSource": {
                    "close": "Landroid/filterpacks/imageproc/BitmapSource;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/BitmapSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/BitmapSource;->open",
                    "performClose": "Landroid/filterpacks/imageproc/BitmapSource;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/BitmapSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/BitmapSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/BitmapSource;->performTearDown"
                },
                "BlackWhiteFilter": {
                    "close": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/BlackWhiteFilter;->performTearDown"
                },
                "BlendFilter": {
                    "close": "Landroid/filterpacks/imageproc/BlendFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/BlendFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/BlendFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/BlendFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/BlendFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/BlendFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/BlendFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/BlendFilter;->performTearDown"
                },
                "BrightnessFilter": {
                    "close": "Landroid/filterpacks/imageproc/BrightnessFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/BrightnessFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/BrightnessFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/BrightnessFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/BrightnessFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/BrightnessFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/BrightnessFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/BrightnessFilter;->performTearDown"
                },
                "ColorTemperatureFilter": {
                    "close": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ColorTemperatureFilter;->performTearDown"
                },
                "ContrastFilter": {
                    "close": "Landroid/filterpacks/imageproc/ContrastFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ContrastFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ContrastFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ContrastFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ContrastFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ContrastFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ContrastFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ContrastFilter;->performTearDown"
                },
                "CropFilter": {
                    "close": "Landroid/filterpacks/imageproc/CropFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/CropFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/CropFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/CropFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/CropFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/CropFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/CropFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/CropFilter;->performTearDown"
                },
                "CropRectFilter": {
                    "close": "Landroid/filterpacks/imageproc/CropRectFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/CropRectFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/CropRectFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/CropRectFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/CropRectFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/CropRectFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/CropRectFilter;->performTearDown"
                },
                "CrossProcessFilter": {
                    "close": "Landroid/filterpacks/imageproc/CrossProcessFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/CrossProcessFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/CrossProcessFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/CrossProcessFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/CrossProcessFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/CrossProcessFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/CrossProcessFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/CrossProcessFilter;->performTearDown"
                },
                "DocumentaryFilter": {
                    "close": "Landroid/filterpacks/imageproc/DocumentaryFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/DocumentaryFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/DocumentaryFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/DocumentaryFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/DocumentaryFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/DocumentaryFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/DocumentaryFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/DocumentaryFilter;->performTearDown"
                },
                "DrawOverlayFilter": {
                    "close": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/DrawOverlayFilter;->performTearDown"
                },
                "DrawRectFilter": {
                    "close": "Landroid/filterpacks/imageproc/DrawRectFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/DrawRectFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/DrawRectFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/DrawRectFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/DrawRectFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/DrawRectFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/DrawRectFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/DrawRectFilter;->performTearDown"
                },
                "DuotoneFilter": {
                    "close": "Landroid/filterpacks/imageproc/DuotoneFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/DuotoneFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/DuotoneFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/DuotoneFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/DuotoneFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/DuotoneFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/DuotoneFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/DuotoneFilter;->performTearDown"
                },
                "FillLightFilter": {
                    "close": "Landroid/filterpacks/imageproc/FillLightFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/FillLightFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/FillLightFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/FillLightFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/FillLightFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/FillLightFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/FillLightFilter;->performTearDown"
                },
                "FisheyeFilter": {
                    "close": "Landroid/filterpacks/imageproc/FisheyeFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/FisheyeFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/FisheyeFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/FisheyeFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/FisheyeFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/FisheyeFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/FisheyeFilter;->performTearDown"
                },
                "FixedRotationFilter": {
                    "close": "Landroid/filterpacks/imageproc/FixedRotationFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/FixedRotationFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/FixedRotationFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/FixedRotationFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/FixedRotationFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/FixedRotationFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/FixedRotationFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/FixedRotationFilter;->performTearDown"
                },
                "FlipFilter": {
                    "close": "Landroid/filterpacks/imageproc/FlipFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/FlipFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/FlipFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/FlipFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/FlipFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/FlipFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/FlipFilter;->performTearDown"
                },
                "GrainFilter": {
                    "close": "Landroid/filterpacks/imageproc/GrainFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/GrainFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/GrainFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/GrainFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/GrainFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/GrainFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/GrainFilter;->performTearDown"
                },
                "ImageCombineFilter": {
                    "close": "Landroid/filterpacks/imageproc/ImageCombineFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageCombineFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageCombineFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ImageCombineFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ImageCombineFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ImageCombineFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ImageCombineFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ImageCombineFilter;->performTearDown"
                },
                "ImageEncoder": {
                    "close": "Landroid/filterpacks/imageproc/ImageEncoder;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageEncoder;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageEncoder;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ImageEncoder;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ImageEncoder;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ImageEncoder;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ImageEncoder;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ImageEncoder;->performTearDown"
                },
                "ImageSlicer": {
                    "close": "Landroid/filterpacks/imageproc/ImageSlicer;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageSlicer;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageSlicer;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ImageSlicer;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ImageSlicer;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ImageSlicer;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ImageSlicer;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ImageSlicer;->performTearDown"
                },
                "ImageStitcher": {
                    "close": "Landroid/filterpacks/imageproc/ImageStitcher;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageStitcher;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ImageStitcher;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ImageStitcher;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ImageStitcher;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ImageStitcher;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ImageStitcher;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ImageStitcher;->performTearDown"
                },
                "Invert": {
                    "close": "Landroid/filterpacks/imageproc/Invert;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/Invert;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/Invert;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/Invert;->open",
                    "performClose": "Landroid/filterpacks/imageproc/Invert;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/Invert;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/Invert;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/Invert;->performTearDown"
                },
                "LomoishFilter": {
                    "close": "Landroid/filterpacks/imageproc/LomoishFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/LomoishFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/LomoishFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/LomoishFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/LomoishFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/LomoishFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/LomoishFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/LomoishFilter;->performTearDown"
                },
                "NegativeFilter": {
                    "close": "Landroid/filterpacks/imageproc/NegativeFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/NegativeFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/NegativeFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/NegativeFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/NegativeFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/NegativeFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/NegativeFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/NegativeFilter;->performTearDown"
                },
                "PosterizeFilter": {
                    "close": "Landroid/filterpacks/imageproc/PosterizeFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/PosterizeFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/PosterizeFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/PosterizeFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/PosterizeFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/PosterizeFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/PosterizeFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/PosterizeFilter;->performTearDown"
                },
                "RedEyeFilter": {
                    "close": "Landroid/filterpacks/imageproc/RedEyeFilter;->close",
                    "initProgram": "Landroid/filterpacks/imageproc/RedEyeFilter;->initProgram",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/RedEyeFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/RedEyeFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/RedEyeFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/RedEyeFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/RedEyeFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/RedEyeFilter;->performTearDown"
                },
                "ResizeFilter": {
                    "close": "Landroid/filterpacks/imageproc/ResizeFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ResizeFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ResizeFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ResizeFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ResizeFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ResizeFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ResizeFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ResizeFilter;->performTearDown"
                },
                "RotateFilter": {
                    "close": "Landroid/filterpacks/imageproc/RotateFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/RotateFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/RotateFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/RotateFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/RotateFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/RotateFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/RotateFilter;->performTearDown"
                },
                "SaturateFilter": {
                    "close": "Landroid/filterpacks/imageproc/SaturateFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/SaturateFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/SaturateFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/SaturateFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/SaturateFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/SaturateFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/SaturateFilter;->performTearDown"
                },
                "SepiaFilter": {
                    "close": "Landroid/filterpacks/imageproc/SepiaFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/SepiaFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/SepiaFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/SepiaFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/SepiaFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/SepiaFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/SepiaFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/SepiaFilter;->performTearDown"
                },
                "SharpenFilter": {
                    "close": "Landroid/filterpacks/imageproc/SharpenFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/SharpenFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/SharpenFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/SharpenFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/SharpenFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/SharpenFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/SharpenFilter;->performTearDown"
                },
                "SimpleImageFilter": {
                    "close": "Landroid/filterpacks/imageproc/SimpleImageFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/SimpleImageFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/SimpleImageFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/SimpleImageFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/SimpleImageFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/SimpleImageFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/SimpleImageFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/SimpleImageFilter;->performTearDown"
                },
                "StraightenFilter": {
                    "close": "Landroid/filterpacks/imageproc/StraightenFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/StraightenFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/StraightenFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/StraightenFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/StraightenFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/StraightenFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/StraightenFilter;->performTearDown"
                },
                "TintFilter": {
                    "close": "Landroid/filterpacks/imageproc/TintFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/TintFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/TintFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/TintFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/TintFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/TintFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/TintFilter;->performTearDown"
                },
                "ToGrayFilter": {
                    "close": "Landroid/filterpacks/imageproc/ToGrayFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToGrayFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToGrayFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ToGrayFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ToGrayFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ToGrayFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ToGrayFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ToGrayFilter;->performTearDown"
                },
                "ToPackedGrayFilter": {
                    "close": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ToPackedGrayFilter;->performTearDown"
                },
                "ToRGBAFilter": {
                    "close": "Landroid/filterpacks/imageproc/ToRGBAFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToRGBAFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToRGBAFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ToRGBAFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ToRGBAFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ToRGBAFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ToRGBAFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ToRGBAFilter;->performTearDown"
                },
                "ToRGBFilter": {
                    "close": "Landroid/filterpacks/imageproc/ToRGBFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToRGBFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/ToRGBFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/ToRGBFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/ToRGBFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/ToRGBFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/ToRGBFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/ToRGBFilter;->performTearDown"
                },
                "VignetteFilter": {
                    "close": "Landroid/filterpacks/imageproc/VignetteFilter;->close",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/imageproc/VignetteFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/imageproc/VignetteFilter;->open",
                    "performClose": "Landroid/filterpacks/imageproc/VignetteFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/imageproc/VignetteFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/imageproc/VignetteFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/imageproc/VignetteFilter;->performTearDown"
                }
            },
            "numeric": {
                "SinWaveFilter": {
                    "close": "Landroid/filterpacks/numeric/SinWaveFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/numeric/SinWaveFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/numeric/SinWaveFilter;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/numeric/SinWaveFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/numeric/SinWaveFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/numeric/SinWaveFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/numeric/SinWaveFilter;->performTearDown"
                }
            },
            "performance": {
                "ThroughputFilter": {
                    "close": "Landroid/filterpacks/performance/ThroughputFilter;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/performance/ThroughputFilter;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/performance/ThroughputFilter;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/performance/ThroughputFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/performance/ThroughputFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/performance/ThroughputFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/performance/ThroughputFilter;->performTearDown"
                }
            },
            "text": {
                "StringLogger": {
                    "close": "Landroid/filterpacks/text/StringLogger;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/text/StringLogger;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/text/StringLogger;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/text/StringLogger;->open",
                    "performClose": "Landroid/filterpacks/text/StringLogger;->performClose",
                    "performOpen": "Landroid/filterpacks/text/StringLogger;->performOpen",
                    "performProcess": "Landroid/filterpacks/text/StringLogger;->performProcess",
                    "performTearDown": "Landroid/filterpacks/text/StringLogger;->performTearDown"
                },
                "StringSource": {
                    "close": "Landroid/filterpacks/text/StringSource;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/text/StringSource;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/text/StringSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/text/StringSource;->open",
                    "performClose": "Landroid/filterpacks/text/StringSource;->performClose",
                    "performOpen": "Landroid/filterpacks/text/StringSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/text/StringSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/text/StringSource;->performTearDown"
                },
                "ToUpperCase": {
                    "close": "Landroid/filterpacks/text/ToUpperCase;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/text/ToUpperCase;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/text/ToUpperCase;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/text/ToUpperCase;->open",
                    "performClose": "Landroid/filterpacks/text/ToUpperCase;->performClose",
                    "performOpen": "Landroid/filterpacks/text/ToUpperCase;->performOpen",
                    "performProcess": "Landroid/filterpacks/text/ToUpperCase;->performProcess",
                    "performTearDown": "Landroid/filterpacks/text/ToUpperCase;->performTearDown"
                }
            },
            "ui": {
                "SurfaceRenderFilter": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/ui/SurfaceRenderFilter;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/ui/SurfaceRenderFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/ui/SurfaceRenderFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/ui/SurfaceRenderFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/ui/SurfaceRenderFilter;->performTearDown"
                },
                "SurfaceTargetFilter": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/ui/SurfaceTargetFilter;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/ui/SurfaceTargetFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/ui/SurfaceTargetFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/ui/SurfaceTargetFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/ui/SurfaceTargetFilter;->performTearDown"
                }
            },
            "videoproc": {
                "BackDropperFilter": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videoproc/BackDropperFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/videoproc/BackDropperFilter;->open",
                    "performClose": "Landroid/filterpacks/videoproc/BackDropperFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/videoproc/BackDropperFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/videoproc/BackDropperFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videoproc/BackDropperFilter;->performTearDown"
                }
            },
            "videosink": {
                "MediaEncoderFilter": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videosink/MediaEncoderFilter;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/videosink/MediaEncoderFilter;->open",
                    "performClose": "Landroid/filterpacks/videosink/MediaEncoderFilter;->performClose",
                    "performOpen": "Landroid/filterpacks/videosink/MediaEncoderFilter;->performOpen",
                    "performProcess": "Landroid/filterpacks/videosink/MediaEncoderFilter;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videosink/MediaEncoderFilter;->performTearDown",
                    "process": "Landroid/filterpacks/videosink/MediaEncoderFilter;->process",
                    "startRecording": "Landroid/filterpacks/videosink/MediaEncoderFilter;->startRecording",
                    "updateMediaRecorderParams": "Landroid/filterpacks/videosink/MediaEncoderFilter;->updateMediaRecorderParams"
                }
            },
            "videosrc": {
                "CameraSource": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videosrc/CameraSource;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/videosrc/CameraSource;->performClose",
                    "performOpen": "Landroid/filterpacks/videosrc/CameraSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/videosrc/CameraSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videosrc/CameraSource;->performTearDown"
                },
                "MediaSource": {
                    "setupMediaPlayer": "Landroid/filterpacks/videosrc/MediaSource;->setupMediaPlayer",
                    "close": "Landroid/filterpacks/videosrc/MediaSource;->close",
                    "fieldPortValueUpdated": "Landroid/filterpacks/videosrc/MediaSource;->fieldPortValueUpdated",
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videosrc/MediaSource;->notifyFieldPortValueUpdated",
                    "open": "Landroid/filterpacks/videosrc/MediaSource;->open",
                    "pauseVideo": "Landroid/filterpacks/videosrc/MediaSource;->pauseVideo",
                    "performClose": "Landroid/filterpacks/videosrc/MediaSource;->performClose",
                    "performOpen": "Landroid/filterpacks/videosrc/MediaSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/videosrc/MediaSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videosrc/MediaSource;->performTearDown",
                    "process": "Landroid/filterpacks/videosrc/MediaSource;->process"
                },
                "SurfaceTextureSource": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videosrc/SurfaceTextureSource;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/videosrc/SurfaceTextureSource;->performClose",
                    "performOpen": "Landroid/filterpacks/videosrc/SurfaceTextureSource;->performOpen",
                    "performProcess": "Landroid/filterpacks/videosrc/SurfaceTextureSource;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videosrc/SurfaceTextureSource;->performTearDown"
                },
                "SurfaceTextureTarget": {
                    "notifyFieldPortValueUpdated": "Landroid/filterpacks/videosrc/SurfaceTextureTarget;->notifyFieldPortValueUpdated",
                    "performClose": "Landroid/filterpacks/videosrc/SurfaceTextureTarget;->performClose",
                    "performOpen": "Landroid/filterpacks/videosrc/SurfaceTextureTarget;->performOpen",
                    "performProcess": "Landroid/filterpacks/videosrc/SurfaceTextureTarget;->performProcess",
                    "performTearDown": "Landroid/filterpacks/videosrc/SurfaceTextureTarget;->performTearDown"
                }
            }
        },
        "graphics": {
            "Matrix": {
                "setPolyToPoly": "Landroid/graphics/Matrix;->setPolyToPoly"
            },
            "Paint": {
                "measureText": "Landroid/graphics/Paint;->measureText"
            },
            "drawable": {
                "$init": "Landroid/graphics/drawable;->$init"
            },
            "NinePatch": {
                "isNinePatchChunk": "Landroid/graphics/NinePatch;->isNinePatchChunk"
            }
        },
        "hardware": {
            "Camera": {
                "open": "Landroid/hardware/Camera;->open",
                "native_setup": "Landroid/hardware/Camera;->native_setup"
            },
            "input": {
                "IInputManager$Stub$Proxy": {
                    "getKeyboardLayoutsForInputDevice": "Landroid/hardware/input/IInputManager$Stub$Proxy;->getKeyboardLayoutsForInputDevice"
                },
                "InputManager": {
                    "setPointerSpeed": "Landroid/hardware/input/InputManager;->setPointerSpeed",
                    "getInputDevice": "Landroid/hardware/input/InputManager;->getInputDevice",
                    "getInputDeviceIds": "Landroid/hardware/input/InputManager;->getInputDeviceIds"
                }
            },
            "ISerialManager$Stub$Proxy": {
                "openSerialPort": "Landroid/hardware/ISerialManager$Stub$Proxy;->openSerialPort",
                "getSerialPorts": "Landroid/hardware/ISerialManager$Stub$Proxy;->getSerialPorts"
            },
            "ISerialManager$Stub": {
                "openSerialPort": "Landroid/hardware/ISerialManager$Stub;->openSerialPort",
                "onTransact": "Landroid/hardware/ISerialManager$Stub;->onTransact",
                "getSerialPorts": "Landroid/hardware/ISerialManager$Stub;->getSerialPorts"
            },
            "ISerialManager": {
                "openSerialPort": "Landroid/hardware/ISerialManager;->openSerialPort",
                "getSerialPorts": "Landroid/hardware/ISerialManager;->getSerialPorts"
            },
            "SerialManager": {
                "openSerialPort": "Landroid/hardware/SerialManager;->openSerialPort",
                "getSerialPorts": "Landroid/hardware/SerialManager;->getSerialPorts"
            },
            "Sensor": {
                "isAdditionalInfoSupported": "Landroid/hardware/Sensor;->isAdditionalInfoSupported",
                "isDirectChannelTypeSupported": "Landroid/hardware/Sensor;->isDirectChannelTypeSupported",
                "isDynamicSensor": "Landroid/hardware/Sensor;->isDynamicSensor",
                "isWakeUpSensor": "Landroid/hardware/Sensor;->isWakeUpSensor",
                "getMaximumRange": "Landroid/hardware/Sensor;->getMaximumRange",
                "getPower": "Landroid/hardware/Sensor;->getPower",
                "getResolution": "Landroid/hardware/Sensor;->getResolution",
                "getFifoMaxEventCount": "Landroid/hardware/Sensor;->getFifoMaxEventCount",
                "getFifoReservedEventCount": "Landroid/hardware/Sensor;->getFifoReservedEventCount",
                "getHandle": "Landroid/hardware/Sensor;->getHandle",
                "getHighestDirectReportRateLevel": "Landroid/hardware/Sensor;->getHighestDirectReportRateLevel",
                "getId": "Landroid/hardware/Sensor;->getId",
                "getLegacyType": "Landroid/hardware/Sensor;->getLegacyType",
                "getMaxDelay": "Landroid/hardware/Sensor;->getMaxDelay",
                "getMinDelay": "Landroid/hardware/Sensor;->getMinDelay",
                "getReportingMode": "Landroid/hardware/Sensor;->getReportingMode",
                "getType": "Landroid/hardware/Sensor;->getType",
                "getVersion": "Landroid/hardware/Sensor;->getVersion",
                "getName": "Landroid/hardware/Sensor;->getName",
                "getStringType": "Landroid/hardware/Sensor;->getStringType",
                "getVendor": "Landroid/hardware/Sensor;->getVendor"
            },
            "SensorManager": {
                "getDefaultSensor": "Landroid/hardware/SensorManager;->getDefaultSensor",
                "getRotationMatrix": "Landroid/hardware/SensorManager;->getRotationMatrix",
                "isDynamicSensorDiscoverySupported": "Landroid/hardware/SensorManager;->isDynamicSensorDiscoverySupported",
                "getAltitude": "Landroid/hardware/SensorManager;->getAltitude",
                "getInclination": "Landroid/hardware/SensorManager;->getInclination",
                "getOrientation": "Landroid/hardware/SensorManager;->getOrientation",
                "getRotation": "Landroid/hardware/SensorManager;->getRotation",
                "getSensors": "Landroid/hardware/SensorManager;->getSensors",
                "getDynamicSensorList": "Landroid/hardware/SensorManager;->getDynamicSensorList",
                "getSensorList": "Landroid/hardware/SensorManager;->getSensorList",
                "getAngleChange": "Landroid/hardware/SensorManager;->getAngleChange",
                "getQuaternionFromVector": "Landroid/hardware/SensorManager;->getQuaternionFromVector",
                "getRotationMatrixFromVector": "Landroid/hardware/SensorManager;->getRotationMatrixFromVector"
            },
            "camera2": {
                "CameraManager": {
                    "getCameraCharacteristics": "Landroid/hardware/camera2/CameraManager;->getCameraCharacteristics",
                    "isConcurrentSessionConfigurationSupported": "Landroid/hardware/camera2/CameraManager;->isConcurrentSessionConfigurationSupported",
                    "getCameraIdList": "Landroid/hardware/camera2/CameraManager;->getCameraIdList",
                    "getConcurrentCameraIds": "Landroid/hardware/camera2/CameraManager;->getConcurrentCameraIds"
                }
            },
            "display": {
                "DisplayManager": {
                    "getDisplay": "Landroid/hardware/display/DisplayManager;->getDisplay",
                    "getDisplays": "Landroid/hardware/display/DisplayManager;->getDisplays"
                }
            },
            "fingerprint": {
                "FingerprintManager": {
                    "isHardwareDetected": "Landroid/hardware/fingerprint/FingerprintManager;->isHardwareDetected"
                }
            },
            "usb": {
                "IUsbManager": {
                    "getCurrentAccessory": "Landroid/hardware/usb/IUsbManager;->getCurrentAccessory",
                    "getDeviceList": "Landroid/hardware/usb/IUsbManager;->getDeviceList"
                },
                "UsbManager": {
                    "getAccessoryList": "Landroid/hardware/usb/UsbManager;->getAccessoryList",
                    "isFunctionEnabled": "Landroid/hardware/usb/UsbManager;->isFunctionEnabled",
                    "isFunctionSupported": "Landroid/hardware/usb/UsbManager;->isFunctionSupported",
                    "android": {
                        "hardware": {
                            "usb": {
                                "UsbDevice>getDeviceList": "Landroid/hardware/usb/UsbManager/android/hardware/usb;->UsbDevice>getDeviceList"
                            }
                        }
                    }
                }
            },
            "location": {
                "ActivityRecognitionHardware": {
                    "disableActivityEvent": "Landroid/hardware/location/ActivityRecognitionHardware;->disableActivityEvent",
                    "enableActivityEvent": "Landroid/hardware/location/ActivityRecognitionHardware;->enableActivityEvent",
                    "flush": "Landroid/hardware/location/ActivityRecognitionHardware;->flush",
                    "getSupportedActivities": "Landroid/hardware/location/ActivityRecognitionHardware;->getSupportedActivities",
                    "isActivitySupported": "Landroid/hardware/location/ActivityRecognitionHardware;->isActivitySupported",
                    "registerSink": "Landroid/hardware/location/ActivityRecognitionHardware;->registerSink",
                    "unregisterSink": "Landroid/hardware/location/ActivityRecognitionHardware;->unregisterSink"
                },
                "ContextHubService": {
                    "findNanoAppOnHub": "Landroid/hardware/location/ContextHubService;->findNanoAppOnHub",
                    "getContextHubHandles": "Landroid/hardware/location/ContextHubService;->getContextHubHandles",
                    "getContextHubInfo": "Landroid/hardware/location/ContextHubService;->getContextHubInfo",
                    "getNanoAppInstanceInfo": "Landroid/hardware/location/ContextHubService;->getNanoAppInstanceInfo",
                    "loadNanoApp": "Landroid/hardware/location/ContextHubService;->loadNanoApp",
                    "registerCallback": "Landroid/hardware/location/ContextHubService;->registerCallback",
                    "sendMessage": "Landroid/hardware/location/ContextHubService;->sendMessage",
                    "unloadNanoApp": "Landroid/hardware/location/ContextHubService;->unloadNanoApp"
                }
            }
        },
        "inputmethodservice": {
            "KeyboardView$SwipeTracker": {
                "getXVelocity": "Landroid/inputmethodservice/KeyboardView$SwipeTracker;->getXVelocity"
            },
            "KeyboardView": {
                "onHoverEvent": "Landroid/inputmethodservice/KeyboardView;->onHoverEvent",
                "onLongPress": "Landroid/inputmethodservice/KeyboardView;->onLongPress",
                "onModifiedTouchEvent": "Landroid/inputmethodservice/KeyboardView;->onModifiedTouchEvent",
                "onTouchEvent": "Landroid/inputmethodservice/KeyboardView;->onTouchEvent",
                "openPopupIfRequired": "Landroid/inputmethodservice/KeyboardView;->openPopupIfRequired",
                "sendAccessibilityEventForUnicodeCharacter": "Landroid/inputmethodservice/KeyboardView;->sendAccessibilityEventForUnicodeCharacter",
                "setKeyboard": "Landroid/inputmethodservice/KeyboardView;->setKeyboard",
                "showPreview": "Landroid/inputmethodservice/KeyboardView;->showPreview",
                "swipeRight": "Landroid/inputmethodservice/KeyboardView;->swipeRight",
                "swipeDown": "Landroid/inputmethodservice/KeyboardView;->swipeDown"
            },
            "AbstractInputMethodService": {
                "clearWallpaper": "Landroid/inputmethodservice/AbstractInputMethodService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/inputmethodservice/AbstractInputMethodService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/inputmethodservice/AbstractInputMethodService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/inputmethodservice/AbstractInputMethodService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/inputmethodservice/AbstractInputMethodService;->setWallpaper"
            },
            "InputMethodService": {
                "clearWallpaper": "Landroid/inputmethodservice/InputMethodService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/inputmethodservice/InputMethodService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/inputmethodservice/InputMethodService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/inputmethodservice/InputMethodService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/inputmethodservice/InputMethodService;->setWallpaper"
            }
        },
        "location": {
            "ILocationListener$Stub$Proxy": {
                "onLocationChanged": "Landroid/location/ILocationListener$Stub$Proxy;->onLocationChanged"
            },
            "ILocationManager$Stub$Proxy": {
                "getLastKnownLocation": "Landroid/location/ILocationManager$Stub$Proxy;->getLastKnownLocation",
                "getProviderInfo": "Landroid/location/ILocationManager$Stub$Proxy;->getProviderInfo",
                "addGpsStatusListener": "Landroid/location/ILocationManager$Stub$Proxy;->addGpsStatusListener",
                "isProviderEnabled": "Landroid/location/ILocationManager$Stub$Proxy;->isProviderEnabled",
                "sendExtraCommand": "Landroid/location/ILocationManager$Stub$Proxy;->sendExtraCommand",
                "getBestProvider": "Landroid/location/ILocationManager$Stub$Proxy;->getBestProvider",
                "getProviders": "Landroid/location/ILocationManager$Stub$Proxy;->getProviders",
                "addProximityAlert": "Landroid/location/ILocationManager$Stub$Proxy;->addProximityAlert",
                "addTestProvider": "Landroid/location/ILocationManager$Stub$Proxy;->addTestProvider",
                "clearTestProviderEnabled": "Landroid/location/ILocationManager$Stub$Proxy;->clearTestProviderEnabled",
                "clearTestProviderLocation": "Landroid/location/ILocationManager$Stub$Proxy;->clearTestProviderLocation",
                "clearTestProviderStatus": "Landroid/location/ILocationManager$Stub$Proxy;->clearTestProviderStatus",
                "removeTestProvider": "Landroid/location/ILocationManager$Stub$Proxy;->removeTestProvider",
                "requestLocationUpdates": "Landroid/location/ILocationManager$Stub$Proxy;->requestLocationUpdates",
                "requestLocationUpdatesPI": "Landroid/location/ILocationManager$Stub$Proxy;->requestLocationUpdatesPI",
                "setTestProviderEnabled": "Landroid/location/ILocationManager$Stub$Proxy;->setTestProviderEnabled",
                "setTestProviderLocation": "Landroid/location/ILocationManager$Stub$Proxy;->setTestProviderLocation",
                "setTestProviderStatus": "Landroid/location/ILocationManager$Stub$Proxy;->setTestProviderStatus"
            },
            "ILocationManager$Stub": {
                "getLastKnownLocation": "Landroid/location/ILocationManager$Stub;->getLastKnownLocation",
                "getProviderInfo": "Landroid/location/ILocationManager$Stub;->getProviderInfo",
                "addGpsStatusListener": "Landroid/location/ILocationManager$Stub;->addGpsStatusListener",
                "isProviderEnabled": "Landroid/location/ILocationManager$Stub;->isProviderEnabled",
                "onTransact": "Landroid/location/ILocationManager$Stub;->onTransact",
                "sendExtraCommand": "Landroid/location/ILocationManager$Stub;->sendExtraCommand",
                "getBestProvider": "Landroid/location/ILocationManager$Stub;->getBestProvider",
                "getProviders": "Landroid/location/ILocationManager$Stub;->getProviders",
                "addProximityAlert": "Landroid/location/ILocationManager$Stub;->addProximityAlert",
                "addTestProvider": "Landroid/location/ILocationManager$Stub;->addTestProvider",
                "clearTestProviderEnabled": "Landroid/location/ILocationManager$Stub;->clearTestProviderEnabled",
                "clearTestProviderLocation": "Landroid/location/ILocationManager$Stub;->clearTestProviderLocation",
                "clearTestProviderStatus": "Landroid/location/ILocationManager$Stub;->clearTestProviderStatus",
                "removeTestProvider": "Landroid/location/ILocationManager$Stub;->removeTestProvider",
                "requestLocationUpdates": "Landroid/location/ILocationManager$Stub;->requestLocationUpdates",
                "requestLocationUpdatesPI": "Landroid/location/ILocationManager$Stub;->requestLocationUpdatesPI",
                "setTestProviderEnabled": "Landroid/location/ILocationManager$Stub;->setTestProviderEnabled",
                "setTestProviderLocation": "Landroid/location/ILocationManager$Stub;->setTestProviderLocation",
                "setTestProviderStatus": "Landroid/location/ILocationManager$Stub;->setTestProviderStatus"
            },
            "ILocationManager": {
                "getLastKnownLocation": "Landroid/location/ILocationManager;->getLastKnownLocation",
                "getProviderInfo": "Landroid/location/ILocationManager;->getProviderInfo",
                "addGpsStatusListener": "Landroid/location/ILocationManager;->addGpsStatusListener",
                "isProviderEnabled": "Landroid/location/ILocationManager;->isProviderEnabled",
                "sendExtraCommand": "Landroid/location/ILocationManager;->sendExtraCommand",
                "getBestProvider": "Landroid/location/ILocationManager;->getBestProvider",
                "getProviders": "Landroid/location/ILocationManager;->getProviders",
                "addProximityAlert": "Landroid/location/ILocationManager;->addProximityAlert",
                "addTestProvider": "Landroid/location/ILocationManager;->addTestProvider",
                "clearTestProviderEnabled": "Landroid/location/ILocationManager;->clearTestProviderEnabled",
                "clearTestProviderLocation": "Landroid/location/ILocationManager;->clearTestProviderLocation",
                "clearTestProviderStatus": "Landroid/location/ILocationManager;->clearTestProviderStatus",
                "removeTestProvider": "Landroid/location/ILocationManager;->removeTestProvider",
                "requestLocationUpdates": "Landroid/location/ILocationManager;->requestLocationUpdates",
                "requestLocationUpdatesPI": "Landroid/location/ILocationManager;->requestLocationUpdatesPI",
                "setTestProviderEnabled": "Landroid/location/ILocationManager;->setTestProviderEnabled",
                "setTestProviderLocation": "Landroid/location/ILocationManager;->setTestProviderLocation",
                "setTestProviderStatus": "Landroid/location/ILocationManager;->setTestProviderStatus",
                "getFromLocation": "Landroid/location/ILocationManager;->getFromLocation",
                "getFromLocationName": "Landroid/location/ILocationManager;->getFromLocationName",
                "getAllProviders": "Landroid/location/ILocationManager;->getAllProviders"
            },
            "Location": {
                "getLatitude": "Landroid/location/Location;->getLatitude",
                "getExtras": "Landroid/location/Location;->getExtras",
                "isFromMockProvider": "Landroid/location/Location;->isFromMockProvider",
                "getAltitude": "Landroid/location/Location;->getAltitude",
                "getElapsedRealtimeUncertaintyNanos": "Landroid/location/Location;->getElapsedRealtimeUncertaintyNanos",
                "getLongitude": "Landroid/location/Location;->getLongitude",
                "getAccuracy": "Landroid/location/Location;->getAccuracy",
                "getBearing": "Landroid/location/Location;->getBearing",
                "getBearingAccuracyDegrees": "Landroid/location/Location;->getBearingAccuracyDegrees",
                "getSpeed": "Landroid/location/Location;->getSpeed",
                "getSpeedAccuracyMetersPerSecond": "Landroid/location/Location;->getSpeedAccuracyMetersPerSecond",
                "getVerticalAccuracyMeters": "Landroid/location/Location;->getVerticalAccuracyMeters",
                "getProvider": "Landroid/location/Location;->getProvider",
                "getElapsedRealtimeNanos": "Landroid/location/Location;->getElapsedRealtimeNanos",
                "getTime": "Landroid/location/Location;->getTime"
            },
            "LocationManager": {
                "getLastKnownLocation": "Landroid/location/LocationManager;->getLastKnownLocation",
                "getProvider": "Landroid/location/LocationManager;->getProvider",
                "addGpsStatusListener": "Landroid/location/LocationManager;->addGpsStatusListener",
                "addNmeaListener": "Landroid/location/LocationManager;->addNmeaListener",
                "isProviderEnabled": "Landroid/location/LocationManager;->isProviderEnabled",
                "sendExtraCommand": "Landroid/location/LocationManager;->sendExtraCommand",
                "getBestProvider": "Landroid/location/LocationManager;->getBestProvider",
                "getProviders": "Landroid/location/LocationManager;->getProviders",
                "addProximityAlert": "Landroid/location/LocationManager;->addProximityAlert",
                "addTestProvider": "Landroid/location/LocationManager;->addTestProvider",
                "clearTestProviderEnabled": "Landroid/location/LocationManager;->clearTestProviderEnabled",
                "clearTestProviderLocation": "Landroid/location/LocationManager;->clearTestProviderLocation",
                "clearTestProviderStatus": "Landroid/location/LocationManager;->clearTestProviderStatus",
                "removeAllGeofences": "Landroid/location/LocationManager;->removeAllGeofences",
                "removeTestProvider": "Landroid/location/LocationManager;->removeTestProvider",
                "_requestLocationUpdates": "Landroid/location/LocationManager;->_requestLocationUpdates",
                "requestLocationUpdates": "Landroid/location/LocationManager;->requestLocationUpdates",
                "requestSingleUpdate": "Landroid/location/LocationManager;->requestSingleUpdate",
                "setTestProviderEnabled": "Landroid/location/LocationManager;->setTestProviderEnabled",
                "setTestProviderLocation": "Landroid/location/LocationManager;->setTestProviderLocation",
                "setTestProviderStatus": "Landroid/location/LocationManager;->setTestProviderStatus",
                "getGnssCapabilities": "Landroid/location/LocationManager;->getGnssCapabilities",
                "getGpsStatus": "Landroid/location/LocationManager;->getGpsStatus",
                "isLocationEnabled": "Landroid/location/LocationManager;->isLocationEnabled",
                "getGnssYearOfHardware": "Landroid/location/LocationManager;->getGnssYearOfHardware",
                "getGnssHardwareModelName": "Landroid/location/LocationManager;->getGnssHardwareModelName",
                "getAllProviders": "Landroid/location/LocationManager;->getAllProviders",
                "getCurrentLocation": "Landroid/location/LocationManager;->getCurrentLocation"
            },
            "GpsSatellite": {
                "getAzimuth": "Landroid/location/GpsSatellite;->getAzimuth",
                "getElevation": "Landroid/location/GpsSatellite;->getElevation",
                "getSnr": "Landroid/location/GpsSatellite;->getSnr",
                "getPrn": "Landroid/location/GpsSatellite;->getPrn"
            },
            "GpsStatus": {
                "getMaxSatellites": "Landroid/location/GpsStatus;->getMaxSatellites",
                "getTimeToFirstFix": "Landroid/location/GpsStatus;->getTimeToFirstFix",
                "getSatellites": "Landroid/location/GpsStatus;->getSatellites"
            },
            "ILocationProvider": {
                "isEnabled": "Landroid/location/ILocationProvider;->isEnabled",
                "getAccuracy": "Landroid/location/ILocationProvider;->getAccuracy",
                "getPowerRequirement": "Landroid/location/ILocationProvider;->getPowerRequirement",
                "getStatus": "Landroid/location/ILocationProvider;->getStatus",
                "getInternalState": "Landroid/location/ILocationProvider;->getInternalState",
                "getStatusUpdateTime": "Landroid/location/ILocationProvider;->getStatusUpdateTime"
            },
            "LocationProvider": {
                "getAccuracy": "Landroid/location/LocationProvider;->getAccuracy",
                "getPowerRequirement": "Landroid/location/LocationProvider;->getPowerRequirement",
                "getName": "Landroid/location/LocationProvider;->getName"
            }
        },
        "media": {
            "AsyncPlayer$Thread": {
                "run": "Landroid/media/AsyncPlayer$Thread;->run"
            },
            "AsyncPlayer": {
                "acquireWakeLock": "Landroid/media/AsyncPlayer;->acquireWakeLock",
                "enqueueLocked": "Landroid/media/AsyncPlayer;->enqueueLocked",
                "play": "Landroid/media/AsyncPlayer;->play",
                "releaseWakeLock": "Landroid/media/AsyncPlayer;->releaseWakeLock",
                "startSound": "Landroid/media/AsyncPlayer;->startSound",
                "stop": "Landroid/media/AsyncPlayer;->stop"
            },
            "AudioManager": {
                "isBluetoothA2dpOn": "Landroid/media/AudioManager;->isBluetoothA2dpOn",
                "isWiredHeadsetOn": "Landroid/media/AudioManager;->isWiredHeadsetOn",
                "setBluetoothA2dpDeviceConnectionState": "Landroid/media/AudioManager;->setBluetoothA2dpDeviceConnectionState",
                "reloadAudioSettings": "Landroid/media/AudioManager;->reloadAudioSettings",
                "setBluetoothScoOn": "Landroid/media/AudioManager;->setBluetoothScoOn",
                "setMicrophoneMute": "Landroid/media/AudioManager;->setMicrophoneMute",
                "setMode": "Landroid/media/AudioManager;->setMode",
                "setParameter": "Landroid/media/AudioManager;->setParameter",
                "setParameters": "Landroid/media/AudioManager;->setParameters",
                "setSpeakerphoneOn": "Landroid/media/AudioManager;->setSpeakerphoneOn",
                "setWiredDeviceConnectionState": "Landroid/media/AudioManager;->setWiredDeviceConnectionState",
                "startBluetoothSco": "Landroid/media/AudioManager;->startBluetoothSco",
                "stopBluetoothSco": "Landroid/media/AudioManager;->stopBluetoothSco",
                "getDevices": "Landroid/media/AudioManager;->getDevices",
                "isBluetoothScoAvailableOffCall": "Landroid/media/AudioManager;->isBluetoothScoAvailableOffCall",
                "isBluetoothScoOn": "Landroid/media/AudioManager;->isBluetoothScoOn",
                "isCallScreeningModeSupported": "Landroid/media/AudioManager;->isCallScreeningModeSupported",
                "isHapticPlaybackSupported": "Landroid/media/AudioManager;->isHapticPlaybackSupported",
                "isMicrophoneMute": "Landroid/media/AudioManager;->isMicrophoneMute",
                "isMusicActive": "Landroid/media/AudioManager;->isMusicActive",
                "isOffloadedPlaybackSupported": "Landroid/media/AudioManager;->isOffloadedPlaybackSupported",
                "isSilentMode": "Landroid/media/AudioManager;->isSilentMode",
                "isSpeakerphoneOn": "Landroid/media/AudioManager;->isSpeakerphoneOn",
                "isStreamMute": "Landroid/media/AudioManager;->isStreamMute",
                "isVolumeFixed": "Landroid/media/AudioManager;->isVolumeFixed",
                "getStreamVolumeDb": "Landroid/media/AudioManager;->getStreamVolumeDb",
                "getAllowedCapturePolicy": "Landroid/media/AudioManager;->getAllowedCapturePolicy",
                "getDevicesForStream": "Landroid/media/AudioManager;->getDevicesForStream",
                "getLastAudibleStreamVolume": "Landroid/media/AudioManager;->getLastAudibleStreamVolume",
                "getMode": "Landroid/media/AudioManager;->getMode",
                "getRingerMode": "Landroid/media/AudioManager;->getRingerMode",
                "getRouting": "Landroid/media/AudioManager;->getRouting",
                "getStreamMaxVolume": "Landroid/media/AudioManager;->getStreamMaxVolume",
                "getStreamMinVolume": "Landroid/media/AudioManager;->getStreamMinVolume",
                "getStreamVolume": "Landroid/media/AudioManager;->getStreamVolume",
                "getVibrateSetting": "Landroid/media/AudioManager;->getVibrateSetting",
                "getParameters": "Landroid/media/AudioManager;->getParameters",
                "getProperty": "Landroid/media/AudioManager;->getProperty",
                "getActivePlaybackConfigurations": "Landroid/media/AudioManager;->getActivePlaybackConfigurations",
                "getActiveRecordingConfigurations": "Landroid/media/AudioManager;->getActiveRecordingConfigurations",
                "getMicrophones": "Landroid/media/AudioManager;->getMicrophones"
            },
            "AudioRecord": {
                "<init>": "Landroid/media/AudioRecord;-><init>",
                "read": "Landroid/media/AudioRecord;->read"
            },
            "AudioService$2": {
                "onServiceConnected": "Landroid/media/AudioService$2;->onServiceConnected"
            },
            "AudioService$4": {
                "onReceive": "Landroid/media/AudioService$4;->onReceive"
            },
            "AudioService$AudioHandler$1": {
                "onCompletion": "Landroid/media/AudioService$AudioHandler$1;->onCompletion"
            },
            "AudioService$AudioHandler$2": {
                "onError": "Landroid/media/AudioService$AudioHandler$2;->onError"
            },
            "AudioService$AudioHandler": {
                "cleanupPlayer": "Landroid/media/AudioService$AudioHandler;->cleanupPlayer",
                "onHandlePersistMediaButtonReceiver": "Landroid/media/AudioService$AudioHandler;->onHandlePersistMediaButtonReceiver",
                "persistRingerMode": "Landroid/media/AudioService$AudioHandler;->persistRingerMode",
                "persistVolume": "Landroid/media/AudioService$AudioHandler;->persistVolume",
                "playSoundEffect": "Landroid/media/AudioService$AudioHandler;->playSoundEffect"
            },
            "AudioService$AudioServiceBroadcastReceiver": {
                "onReceive": "Landroid/media/AudioService$AudioServiceBroadcastReceiver;->onReceive"
            },
            "AudioService$ScoClient": {
                "binderDied": "Landroid/media/AudioService$ScoClient;->binderDied",
                "clearCount": "Landroid/media/AudioService$ScoClient;->clearCount",
                "decCount": "Landroid/media/AudioService$ScoClient;->decCount",
                "incCount": "Landroid/media/AudioService$ScoClient;->incCount",
                "requestScoState": "Landroid/media/AudioService$ScoClient;->requestScoState"
            },
            "AudioService$SetModeDeathHandler": {
                "binderDied": "Landroid/media/AudioService$SetModeDeathHandler;->binderDied"
            },
            "AudioService$SettingsObserver": {
                "<init>": "Landroid/media/AudioService$SettingsObserver;-><init>"
            },
            "AudioService$VolumeStreamState": {
                "setAllIndexes": "Landroid/media/AudioService$VolumeStreamState;->setAllIndexes"
            },
            "AudioService": {
                "checkAudioSettingsPermission": "Landroid/media/AudioService;->checkAudioSettingsPermission",
                "onTransact": "Landroid/media/AudioService;->onTransact",
                "setBluetoothA2dpDeviceConnectionState": "Landroid/media/AudioService;->setBluetoothA2dpDeviceConnectionState",
                "broadcastScoConnectionState": "Landroid/media/AudioService;->broadcastScoConnectionState",
                "checkScoAudioState": "Landroid/media/AudioService;->checkScoAudioState",
                "clearAllScoClients": "Landroid/media/AudioService;->clearAllScoClients",
                "disconnectBluetoothSco": "Landroid/media/AudioService;->disconnectBluetoothSco",
                "dispatchMediaKeyEvent": "Landroid/media/AudioService;->dispatchMediaKeyEvent",
                "dispatchMediaKeyEventForCalls": "Landroid/media/AudioService;->dispatchMediaKeyEventForCalls",
                "dispatchMediaKeyEventUnderWakelock": "Landroid/media/AudioService;->dispatchMediaKeyEventUnderWakelock",
                "filterMediaKeyEvent": "Landroid/media/AudioService;->filterMediaKeyEvent",
                "filterVoiceInputKeyEvent": "Landroid/media/AudioService;->filterVoiceInputKeyEvent",
                "<init>": "Landroid/media/AudioService;-><init>",
                "onSendFinished": "Landroid/media/AudioService;->onSendFinished",
                "onSetA2dpConnectionState": "Landroid/media/AudioService;->onSetA2dpConnectionState",
                "onSetWiredDeviceConnectionState": "Landroid/media/AudioService;->onSetWiredDeviceConnectionState",
                "queueMsgUnderWakeLock": "Landroid/media/AudioService;->queueMsgUnderWakeLock",
                "readPersistedSettings": "Landroid/media/AudioService;->readPersistedSettings",
                "reloadAudioSettings": "Landroid/media/AudioService;->reloadAudioSettings",
                "resetBluetoothSco": "Landroid/media/AudioService;->resetBluetoothSco",
                "sendDeviceConnectionIntent": "Landroid/media/AudioService;->sendDeviceConnectionIntent",
                "sendSimulatedMediaButtonEvent": "Landroid/media/AudioService;->sendSimulatedMediaButtonEvent",
                "setBluetoothScoOn": "Landroid/media/AudioService;->setBluetoothScoOn",
                "setMode": "Landroid/media/AudioService;->setMode",
                "setSpeakerphoneOn": "Landroid/media/AudioService;->setSpeakerphoneOn",
                "setWiredDeviceConnectionState": "Landroid/media/AudioService;->setWiredDeviceConnectionState",
                "startBluetoothSco": "Landroid/media/AudioService;->startBluetoothSco",
                "startVoiceBasedInteractions": "Landroid/media/AudioService;->startVoiceBasedInteractions",
                "stopBluetoothSco": "Landroid/media/AudioService;->stopBluetoothSco",
                "adjustStreamVolume": "Landroid/media/AudioService;->adjustStreamVolume",
                "adjustSuggestedStreamVolume": "Landroid/media/AudioService;->adjustSuggestedStreamVolume",
                "disableSafeMediaVolume": "Landroid/media/AudioService;->disableSafeMediaVolume",
                "forceRemoteSubmixFullVolume": "Landroid/media/AudioService;->forceRemoteSubmixFullVolume",
                "notifyVolumeControllerVisible": "Landroid/media/AudioService;->notifyVolumeControllerVisible",
                "registerAudioPolicy": "Landroid/media/AudioService;->registerAudioPolicy",
                "registerMediaButtonEventReceiverForCalls": "Landroid/media/AudioService;->registerMediaButtonEventReceiverForCalls",
                "registerRemoteControlDisplay": "Landroid/media/AudioService;->registerRemoteControlDisplay",
                "registerRemoteController": "Landroid/media/AudioService;->registerRemoteController",
                "requestAudioFocus": "Landroid/media/AudioService;->requestAudioFocus",
                "setFocusPropertiesForPolicy": "Landroid/media/AudioService;->setFocusPropertiesForPolicy",
                "setMicrophoneMute": "Landroid/media/AudioService;->setMicrophoneMute",
                "setRemoteStreamVolume": "Landroid/media/AudioService;->setRemoteStreamVolume",
                "setRingerModeExternal": "Landroid/media/AudioService;->setRingerModeExternal",
                "setRingerModeInternal": "Landroid/media/AudioService;->setRingerModeInternal",
                "setRingtonePlayer": "Landroid/media/AudioService;->setRingtonePlayer",
                "setStreamVolume": "Landroid/media/AudioService;->setStreamVolume",
                "setVolumeController": "Landroid/media/AudioService;->setVolumeController",
                "startBluetoothScoVirtualCall": "Landroid/media/AudioService;->startBluetoothScoVirtualCall",
                "unregisterMediaButtonEventReceiverForCalls": "Landroid/media/AudioService;->unregisterMediaButtonEventReceiverForCalls"
            },
            "effect": {
                "EffectContext": {
                    "release": "Landroid/media/effect/EffectContext;->release"
                },
                "effects": {
                    "AutoFixEffect": {
                        "apply": "Landroid/media/effect/effects/AutoFixEffect;->apply",
                        "release": "Landroid/media/effect/effects/AutoFixEffect;->release"
                    },
                    "BackDropperEffect": {
                        "apply": "Landroid/media/effect/effects/BackDropperEffect;->apply",
                        "release": "Landroid/media/effect/effects/BackDropperEffect;->release"
                    },
                    "BitmapOverlayEffect": {
                        "apply": "Landroid/media/effect/effects/BitmapOverlayEffect;->apply",
                        "release": "Landroid/media/effect/effects/BitmapOverlayEffect;->release"
                    },
                    "BlackWhiteEffect": {
                        "apply": "Landroid/media/effect/effects/BlackWhiteEffect;->apply",
                        "release": "Landroid/media/effect/effects/BlackWhiteEffect;->release"
                    },
                    "BrightnessEffect": {
                        "apply": "Landroid/media/effect/effects/BrightnessEffect;->apply",
                        "release": "Landroid/media/effect/effects/BrightnessEffect;->release"
                    },
                    "ColorTemperatureEffect": {
                        "apply": "Landroid/media/effect/effects/ColorTemperatureEffect;->apply",
                        "release": "Landroid/media/effect/effects/ColorTemperatureEffect;->release"
                    },
                    "ContrastEffect": {
                        "apply": "Landroid/media/effect/effects/ContrastEffect;->apply",
                        "release": "Landroid/media/effect/effects/ContrastEffect;->release"
                    },
                    "CropEffect": {
                        "apply": "Landroid/media/effect/effects/CropEffect;->apply",
                        "release": "Landroid/media/effect/effects/CropEffect;->release"
                    },
                    "CrossProcessEffect": {
                        "apply": "Landroid/media/effect/effects/CrossProcessEffect;->apply",
                        "release": "Landroid/media/effect/effects/CrossProcessEffect;->release"
                    },
                    "DocumentaryEffect": {
                        "apply": "Landroid/media/effect/effects/DocumentaryEffect;->apply",
                        "release": "Landroid/media/effect/effects/DocumentaryEffect;->release"
                    },
                    "DuotoneEffect": {
                        "apply": "Landroid/media/effect/effects/DuotoneEffect;->apply",
                        "release": "Landroid/media/effect/effects/DuotoneEffect;->release"
                    },
                    "FillLightEffect": {
                        "apply": "Landroid/media/effect/effects/FillLightEffect;->apply",
                        "release": "Landroid/media/effect/effects/FillLightEffect;->release"
                    },
                    "FisheyeEffect": {
                        "apply": "Landroid/media/effect/effects/FisheyeEffect;->apply",
                        "release": "Landroid/media/effect/effects/FisheyeEffect;->release"
                    },
                    "FlipEffect": {
                        "apply": "Landroid/media/effect/effects/FlipEffect;->apply",
                        "release": "Landroid/media/effect/effects/FlipEffect;->release"
                    },
                    "GrainEffect": {
                        "apply": "Landroid/media/effect/effects/GrainEffect;->apply",
                        "release": "Landroid/media/effect/effects/GrainEffect;->release"
                    },
                    "GrayscaleEffect": {
                        "apply": "Landroid/media/effect/effects/GrayscaleEffect;->apply",
                        "release": "Landroid/media/effect/effects/GrayscaleEffect;->release"
                    },
                    "LomoishEffect": {
                        "apply": "Landroid/media/effect/effects/LomoishEffect;->apply",
                        "release": "Landroid/media/effect/effects/LomoishEffect;->release"
                    },
                    "NegativeEffect": {
                        "apply": "Landroid/media/effect/effects/NegativeEffect;->apply",
                        "release": "Landroid/media/effect/effects/NegativeEffect;->release"
                    },
                    "PosterizeEffect": {
                        "apply": "Landroid/media/effect/effects/PosterizeEffect;->apply",
                        "release": "Landroid/media/effect/effects/PosterizeEffect;->release"
                    },
                    "RedEyeEffect": {
                        "apply": "Landroid/media/effect/effects/RedEyeEffect;->apply",
                        "release": "Landroid/media/effect/effects/RedEyeEffect;->release"
                    },
                    "RotateEffect": {
                        "apply": "Landroid/media/effect/effects/RotateEffect;->apply",
                        "release": "Landroid/media/effect/effects/RotateEffect;->release"
                    },
                    "SaturateEffect": {
                        "apply": "Landroid/media/effect/effects/SaturateEffect;->apply",
                        "release": "Landroid/media/effect/effects/SaturateEffect;->release"
                    },
                    "SepiaEffect": {
                        "apply": "Landroid/media/effect/effects/SepiaEffect;->apply",
                        "release": "Landroid/media/effect/effects/SepiaEffect;->release"
                    },
                    "SharpenEffect": {
                        "apply": "Landroid/media/effect/effects/SharpenEffect;->apply",
                        "release": "Landroid/media/effect/effects/SharpenEffect;->release"
                    },
                    "StraightenEffect": {
                        "apply": "Landroid/media/effect/effects/StraightenEffect;->apply",
                        "<init>": "Landroid/media/effect/effects/StraightenEffect;-><init>",
                        "release": "Landroid/media/effect/effects/StraightenEffect;->release"
                    },
                    "TintEffect": {
                        "apply": "Landroid/media/effect/effects/TintEffect;->apply",
                        "release": "Landroid/media/effect/effects/TintEffect;->release"
                    },
                    "VignetteEffect": {
                        "apply": "Landroid/media/effect/effects/VignetteEffect;->apply",
                        "release": "Landroid/media/effect/effects/VignetteEffect;->release"
                    }
                },
                "FilterGraphEffect": {
                    "apply": "Landroid/media/effect/FilterGraphEffect;->apply",
                    "release": "Landroid/media/effect/FilterGraphEffect;->release"
                },
                "SingleFilterEffect": {
                    "apply": "Landroid/media/effect/SingleFilterEffect;->apply",
                    "release": "Landroid/media/effect/SingleFilterEffect;->release"
                },
                "SizeChangeEffect": {
                    "apply": "Landroid/media/effect/SizeChangeEffect;->apply",
                    "release": "Landroid/media/effect/SizeChangeEffect;->release"
                }
            },
            "IAudioService$Stub$Proxy": {
                "setBluetoothA2dpDeviceConnectionState": "Landroid/media/IAudioService$Stub$Proxy;->setBluetoothA2dpDeviceConnectionState",
                "dispatchMediaKeyEvent": "Landroid/media/IAudioService$Stub$Proxy;->dispatchMediaKeyEvent",
                "dispatchMediaKeyEventUnderWakelock": "Landroid/media/IAudioService$Stub$Proxy;->dispatchMediaKeyEventUnderWakelock",
                "reloadAudioSettings": "Landroid/media/IAudioService$Stub$Proxy;->reloadAudioSettings",
                "setBluetoothScoOn": "Landroid/media/IAudioService$Stub$Proxy;->setBluetoothScoOn",
                "setMode": "Landroid/media/IAudioService$Stub$Proxy;->setMode",
                "setSpeakerphoneOn": "Landroid/media/IAudioService$Stub$Proxy;->setSpeakerphoneOn",
                "setWiredDeviceConnectionState": "Landroid/media/IAudioService$Stub$Proxy;->setWiredDeviceConnectionState",
                "startBluetoothSco": "Landroid/media/IAudioService$Stub$Proxy;->startBluetoothSco",
                "stopBluetoothSco": "Landroid/media/IAudioService$Stub$Proxy;->stopBluetoothSco"
            },
            "IAudioService$Stub": {
                "onTransact": "Landroid/media/IAudioService$Stub;->onTransact",
                "setBluetoothA2dpDeviceConnectionState": "Landroid/media/IAudioService$Stub;->setBluetoothA2dpDeviceConnectionState",
                "dispatchMediaKeyEvent": "Landroid/media/IAudioService$Stub;->dispatchMediaKeyEvent",
                "dispatchMediaKeyEventUnderWakelock": "Landroid/media/IAudioService$Stub;->dispatchMediaKeyEventUnderWakelock",
                "reloadAudioSettings": "Landroid/media/IAudioService$Stub;->reloadAudioSettings",
                "setBluetoothScoOn": "Landroid/media/IAudioService$Stub;->setBluetoothScoOn",
                "setMode": "Landroid/media/IAudioService$Stub;->setMode",
                "setSpeakerphoneOn": "Landroid/media/IAudioService$Stub;->setSpeakerphoneOn",
                "setWiredDeviceConnectionState": "Landroid/media/IAudioService$Stub;->setWiredDeviceConnectionState",
                "startBluetoothSco": "Landroid/media/IAudioService$Stub;->startBluetoothSco",
                "stopBluetoothSco": "Landroid/media/IAudioService$Stub;->stopBluetoothSco"
            },
            "IAudioService": {
                "setBluetoothA2dpDeviceConnectionState": "Landroid/media/IAudioService;->setBluetoothA2dpDeviceConnectionState",
                "dispatchMediaKeyEvent": "Landroid/media/IAudioService;->dispatchMediaKeyEvent",
                "dispatchMediaKeyEventUnderWakelock": "Landroid/media/IAudioService;->dispatchMediaKeyEventUnderWakelock",
                "reloadAudioSettings": "Landroid/media/IAudioService;->reloadAudioSettings",
                "setBluetoothScoOn": "Landroid/media/IAudioService;->setBluetoothScoOn",
                "setMode": "Landroid/media/IAudioService;->setMode",
                "setSpeakerphoneOn": "Landroid/media/IAudioService;->setSpeakerphoneOn",
                "setWiredDeviceConnectionState": "Landroid/media/IAudioService;->setWiredDeviceConnectionState",
                "startBluetoothSco": "Landroid/media/IAudioService;->startBluetoothSco",
                "stopBluetoothSco": "Landroid/media/IAudioService;->stopBluetoothSco"
            },
            "IMediaScannerListener$Stub$Proxy": {
                "scanCompleted": "Landroid/media/IMediaScannerListener$Stub$Proxy;->scanCompleted"
            },
            "IMediaScannerListener$Stub": {
                "onTransact": "Landroid/media/IMediaScannerListener$Stub;->onTransact",
                "scanCompleted": "Landroid/media/IMediaScannerListener$Stub;->scanCompleted"
            },
            "IMediaScannerListener": {
                "scanCompleted": "Landroid/media/IMediaScannerListener;->scanCompleted"
            },
            "IRingtonePlayer$Stub$Proxy": {
                "play": "Landroid/media/IRingtonePlayer$Stub$Proxy;->play",
                "playAsync": "Landroid/media/IRingtonePlayer$Stub$Proxy;->playAsync",
                "stop": "Landroid/media/IRingtonePlayer$Stub$Proxy;->stop",
                "stopAsync": "Landroid/media/IRingtonePlayer$Stub$Proxy;->stopAsync"
            },
            "IRingtonePlayer$Stub": {
                "onTransact": "Landroid/media/IRingtonePlayer$Stub;->onTransact",
                "play": "Landroid/media/IRingtonePlayer$Stub;->play",
                "playAsync": "Landroid/media/IRingtonePlayer$Stub;->playAsync",
                "stop": "Landroid/media/IRingtonePlayer$Stub;->stop",
                "stopAsync": "Landroid/media/IRingtonePlayer$Stub;->stopAsync"
            },
            "IRingtonePlayer": {
                "play": "Landroid/media/IRingtonePlayer;->play",
                "playAsync": "Landroid/media/IRingtonePlayer;->playAsync",
                "stop": "Landroid/media/IRingtonePlayer;->stop",
                "stopAsync": "Landroid/media/IRingtonePlayer;->stopAsync"
            },
            "MediaPlayer": {
                "pause": "Landroid/media/MediaPlayer;->pause",
                "postEventFromNative": "Landroid/media/MediaPlayer;->postEventFromNative",
                "release": "Landroid/media/MediaPlayer;->release",
                "reset": "Landroid/media/MediaPlayer;->reset",
                "setWakeMode": "Landroid/media/MediaPlayer;->setWakeMode",
                "start": "Landroid/media/MediaPlayer;->start",
                "stayAwake": "Landroid/media/MediaPlayer;->stayAwake",
                "stop": "Landroid/media/MediaPlayer;->stop"
            },
            "MediaRecorder": {
                "setAudioSource": "Landroid/media/MediaRecorder;->setAudioSource",
                "setVideoSource": "Landroid/media/MediaRecorder;->setVideoSource",
                "setPreviewDisplay": "Landroid/media/MediaRecorder;->setPreviewDisplay",
                "start": "Landroid/media/MediaRecorder;->start"
            },
            "MediaScanner$MyMediaScannerClient": {
                "doScanFile": "Landroid/media/MediaScanner$MyMediaScannerClient;->doScanFile",
                "endFile": "Landroid/media/MediaScanner$MyMediaScannerClient;->endFile",
                "scanFile": "Landroid/media/MediaScanner$MyMediaScannerClient;->scanFile",
                "setSettingIfNotSet": "Landroid/media/MediaScanner$MyMediaScannerClient;->setSettingIfNotSet"
            },
            "MediaScanner": {
                "scanSingleFile": "Landroid/media/MediaScanner;->scanSingleFile",
                "scanMtpFile": "Landroid/media/MediaScanner;->scanMtpFile"
            },
            "MediaScannerClient": {
                "scanFile": "Landroid/media/MediaScannerClient;->scanFile"
            },
            "MediaScannerConnection$1": {
                "onTransact": "Landroid/media/MediaScannerConnection$1;->onTransact"
            },
            "RingtoneManager": {
                "getRingtone": "Landroid/media/RingtoneManager;->getRingtone",
                "setActualDefaultRingtoneUri": "Landroid/media/RingtoneManager;->setActualDefaultRingtoneUri",
                "stopPreviousRingtone": "Landroid/media/RingtoneManager;->stopPreviousRingtone"
            },
            "Ringtone": {
                "destroyLocalPlayer": "Landroid/media/Ringtone;->destroyLocalPlayer",
                "play": "Landroid/media/Ringtone;->play",
                "setStreamType": "Landroid/media/Ringtone;->setStreamType",
                "setUri": "Landroid/media/Ringtone;->setUri",
                "stop": "Landroid/media/Ringtone;->stop",
                "open": "Landroid/media/Ringtone;->open"
            },
            "midi": {
                "MidiManager": {
                    "getDevices": "Landroid/media/midi/MidiManager;->getDevices"
                }
            },
            "tv": {
                "TvInputManager": {
                    "getTvInputInfo": "Landroid/media/tv/TvInputManager;->getTvInputInfo",
                    "isParentalControlsEnabled": "Landroid/media/tv/TvInputManager;->isParentalControlsEnabled",
                    "isRatingBlocked": "Landroid/media/tv/TvInputManager;->isRatingBlocked",
                    "getInputState": "Landroid/media/tv/TvInputManager;->getInputState",
                    "getBlockedRatings": "Landroid/media/tv/TvInputManager;->getBlockedRatings",
                    "getTvInputList": "Landroid/media/tv/TvInputManager;->getTvInputList"
                }
            }
        },
        "mtp": {
            "MtpDatabase": {
                "endSendObject": "Landroid/mtp/MtpDatabase;->endSendObject"
            }
        },
        "net": {
            "ConnectivityManager": {
                "getActiveLinkProperties": "Landroid/net/ConnectivityManager;->getActiveLinkProperties",
                "getLinkProperties": "Landroid/net/ConnectivityManager;->getLinkProperties",
                "getActiveNetworkInfo": "Landroid/net/ConnectivityManager;->getActiveNetworkInfo",
                "getAllNetworkInfo": "Landroid/net/ConnectivityManager;->getAllNetworkInfo",
                "getNetworkInfo": "Landroid/net/ConnectivityManager;->getNetworkInfo",
                "getActiveNetworkQuotaInfo": "Landroid/net/ConnectivityManager;->getActiveNetworkQuotaInfo",
                "getMobileDataEnabled": "Landroid/net/ConnectivityManager;->getMobileDataEnabled",
                "isActiveNetworkMetered": "Landroid/net/ConnectivityManager;->isActiveNetworkMetered",
                "isNetworkSupported": "Landroid/net/ConnectivityManager;->isNetworkSupported",
                "isTetheringSupported": "Landroid/net/ConnectivityManager;->isTetheringSupported",
                "requestNetworkTransitionWakelock": "Landroid/net/ConnectivityManager;->requestNetworkTransitionWakelock",
                "requestRouteToHostAddress": "Landroid/net/ConnectivityManager;->requestRouteToHostAddress",
                "requestRouteToHost": "Landroid/net/ConnectivityManager;->requestRouteToHost",
                "setRadio": "Landroid/net/ConnectivityManager;->setRadio",
                "setRadios": "Landroid/net/ConnectivityManager;->setRadios",
                "getLastTetherError": "Landroid/net/ConnectivityManager;->getLastTetherError",
                "getNetworkPreference": "Landroid/net/ConnectivityManager;->getNetworkPreference",
                "setUsbTethering": "Landroid/net/ConnectivityManager;->setUsbTethering",
                "startUsingNetworkFeature": "Landroid/net/ConnectivityManager;->startUsingNetworkFeature",
                "stopUsingNetworkFeature": "Landroid/net/ConnectivityManager;->stopUsingNetworkFeature",
                "tether": "Landroid/net/ConnectivityManager;->tether",
                "untether": "Landroid/net/ConnectivityManager;->untether",
                "getTetherableBluetoothRegexs": "Landroid/net/ConnectivityManager;->getTetherableBluetoothRegexs",
                "getTetherableIfaces": "Landroid/net/ConnectivityManager;->getTetherableIfaces",
                "getTetherableUsbRegexs": "Landroid/net/ConnectivityManager;->getTetherableUsbRegexs",
                "getTetherableWifiRegexs": "Landroid/net/ConnectivityManager;->getTetherableWifiRegexs",
                "getTetheredIfaces": "Landroid/net/ConnectivityManager;->getTetheredIfaces",
                "getTetheringErroredIfaces": "Landroid/net/ConnectivityManager;->getTetheringErroredIfaces",
                "reportInetCondition": "Landroid/net/ConnectivityManager;->reportInetCondition",
                "setGlobalProxy": "Landroid/net/ConnectivityManager;->setGlobalProxy",
                "setMobileDataEnabled": "Landroid/net/ConnectivityManager;->setMobileDataEnabled",
                "setNetworkPreference": "Landroid/net/ConnectivityManager;->setNetworkPreference",
                "getActiveNetwork": "Landroid/net/ConnectivityManager;->getActiveNetwork",
                "getBoundNetworkForProcess": "Landroid/net/ConnectivityManager;->getBoundNetworkForProcess",
                "getProcessDefaultNetwork": "Landroid/net/ConnectivityManager;->getProcessDefaultNetwork",
                "getNetworkCapabilities": "Landroid/net/ConnectivityManager;->getNetworkCapabilities",
                "getAllNetworks": "Landroid/net/ConnectivityManager;->getAllNetworks",
                "getDefaultProxy": "Landroid/net/ConnectivityManager;->getDefaultProxy",
                "getGlobalProxy": "Landroid/net/ConnectivityManager;->getGlobalProxy",
                "getProxy": "Landroid/net/ConnectivityManager;->getProxy",
                "getBackgroundDataSetting": "Landroid/net/ConnectivityManager;->getBackgroundDataSetting",
                "isDefaultNetworkActive": "Landroid/net/ConnectivityManager;->isDefaultNetworkActive",
                "isNetworkTypeValid": "Landroid/net/ConnectivityManager;->isNetworkTypeValid",
                "getNetworkWatchlistConfigHash": "Landroid/net/ConnectivityManager;->getNetworkWatchlistConfigHash",
                "getConnectionOwnerUid": "Landroid/net/ConnectivityManager;->getConnectionOwnerUid",
                "getMultipathPreference": "Landroid/net/ConnectivityManager;->getMultipathPreference",
                "getRestrictBackgroundStatus": "Landroid/net/ConnectivityManager;->getRestrictBackgroundStatus"
            },
            "DhcpStateMachine$1": {
                "onReceive": "Landroid/net/DhcpStateMachine$1;->onReceive"
            },
            "DhcpStateMachine$DefaultState": {
                "processMessage": "Landroid/net/DhcpStateMachine$DefaultState;->processMessage",
                "enter": "Landroid/net/DhcpStateMachine$DefaultState;->enter",
                "exit": "Landroid/net/DhcpStateMachine$DefaultState;->exit"
            },
            "DhcpStateMachine$RunningState": {
                "processMessage": "Landroid/net/DhcpStateMachine$RunningState;->processMessage",
                "exit": "Landroid/net/DhcpStateMachine$RunningState;->exit"
            },
            "DhcpStateMachine$StoppedState": {
                "exit": "Landroid/net/DhcpStateMachine$StoppedState;->exit"
            },
            "DhcpStateMachine$WaitBeforeRenewalState": {
                "exit": "Landroid/net/DhcpStateMachine$WaitBeforeRenewalState;->exit"
            },
            "DhcpStateMachine$WaitBeforeStartState": {
                "exit": "Landroid/net/DhcpStateMachine$WaitBeforeStartState;->exit"
            },
            "DnsPinger": {
                "getCurrentLinkProperties": "Landroid/net/DnsPinger;->getCurrentLinkProperties",
                "getDnsList": "Landroid/net/DnsPinger;->getDnsList"
            },
            "http": {
                "RequestQueue$1": {
                    "onReceive": "Landroid/net/http/RequestQueue$1;->onReceive"
                },
                "RequestQueue": {
                    "enablePlatformNotifications": "Landroid/net/http/RequestQueue;->enablePlatformNotifications",
                    "setProxyConfig": "Landroid/net/http/RequestQueue;->setProxyConfig"
                },
                "AndroidHttpClient": {
                    "getUngzippedContent": "Landroid/net/http/AndroidHttpClient;->getUngzippedContent",
                    "getMinGzipSize": "Landroid/net/http/AndroidHttpClient;->getMinGzipSize",
                    "getConnectionManager": "Landroid/net/http/AndroidHttpClient;->getConnectionManager",
                    "getCompressedEntity": "Landroid/net/http/AndroidHttpClient;->getCompressedEntity",
                    "getParams": "Landroid/net/http/AndroidHttpClient;->getParams",
                    "execute": "Landroid/net/http/AndroidHttpClient;->execute"
                },
                "AndroidHttpClientConnection": {
                    "isOpen": "Landroid/net/http/AndroidHttpClientConnection;->isOpen",
                    "isStale": "Landroid/net/http/AndroidHttpClientConnection;->isStale",
                    "getLocalPort": "Landroid/net/http/AndroidHttpClientConnection;->getLocalPort",
                    "getRemotePort": "Landroid/net/http/AndroidHttpClientConnection;->getRemotePort",
                    "getSocketTimeout": "Landroid/net/http/AndroidHttpClientConnection;->getSocketTimeout",
                    "getLocalAddress": "Landroid/net/http/AndroidHttpClientConnection;->getLocalAddress",
                    "getRemoteAddress": "Landroid/net/http/AndroidHttpClientConnection;->getRemoteAddress",
                    "getMetrics": "Landroid/net/http/AndroidHttpClientConnection;->getMetrics"
                },
                "HttpAuthHeader": {
                    "getStale": "Landroid/net/http/HttpAuthHeader;->getStale",
                    "isBasic": "Landroid/net/http/HttpAuthHeader;->isBasic",
                    "isDigest": "Landroid/net/http/HttpAuthHeader;->isDigest",
                    "isProxy": "Landroid/net/http/HttpAuthHeader;->isProxy",
                    "isSupportedScheme": "Landroid/net/http/HttpAuthHeader;->isSupportedScheme",
                    "getScheme": "Landroid/net/http/HttpAuthHeader;->getScheme",
                    "getAlgorithm": "Landroid/net/http/HttpAuthHeader;->getAlgorithm",
                    "getNonce": "Landroid/net/http/HttpAuthHeader;->getNonce",
                    "getOpaque": "Landroid/net/http/HttpAuthHeader;->getOpaque",
                    "getPassword": "Landroid/net/http/HttpAuthHeader;->getPassword",
                    "getQop": "Landroid/net/http/HttpAuthHeader;->getQop",
                    "getRealm": "Landroid/net/http/HttpAuthHeader;->getRealm",
                    "getUsername": "Landroid/net/http/HttpAuthHeader;->getUsername"
                },
                "HttpConnection": {
                    "getScheme": "Landroid/net/http/HttpConnection;->getScheme"
                },
                "HttpResponseCache": {
                    "getInstalled": "Landroid/net/http/HttpResponseCache;->getInstalled",
                    "getHitCount": "Landroid/net/http/HttpResponseCache;->getHitCount",
                    "getNetworkCount": "Landroid/net/http/HttpResponseCache;->getNetworkCount",
                    "getRequestCount": "Landroid/net/http/HttpResponseCache;->getRequestCount",
                    "get": "Landroid/net/http/HttpResponseCache;->get"
                },
                "HttpsConnection": {
                    "getScheme": "Landroid/net/http/HttpsConnection;->getScheme"
                }
            },
            "IConnectivityManager$Stub$Proxy": {
                "getActiveLinkProperties": "Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveLinkProperties",
                "getLinkProperties": "Landroid/net/IConnectivityManager$Stub$Proxy;->getLinkProperties",
                "getActiveNetworkInfo": "Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkInfo",
                "getAllNetworkInfo": "Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworkInfo",
                "getNetworkInfo": "Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkInfo",
                "getActiveNetworkQuotaInfo": "Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkQuotaInfo",
                "getAllNetworkState": "Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworkState",
                "getMobileDataEnabled": "Landroid/net/IConnectivityManager$Stub$Proxy;->getMobileDataEnabled",
                "isActiveNetworkMetered": "Landroid/net/IConnectivityManager$Stub$Proxy;->isActiveNetworkMetered",
                "isNetworkSupported": "Landroid/net/IConnectivityManager$Stub$Proxy;->isNetworkSupported",
                "isTetheringSupported": "Landroid/net/IConnectivityManager$Stub$Proxy;->isTetheringSupported",
                "requestRouteToHostAddress": "Landroid/net/IConnectivityManager$Stub$Proxy;->requestRouteToHostAddress",
                "requestRouteToHost": "Landroid/net/IConnectivityManager$Stub$Proxy;->requestRouteToHost",
                "setRadio": "Landroid/net/IConnectivityManager$Stub$Proxy;->setRadio",
                "setRadios": "Landroid/net/IConnectivityManager$Stub$Proxy;->setRadios",
                "getLastTetherError": "Landroid/net/IConnectivityManager$Stub$Proxy;->getLastTetherError",
                "getNetworkPreference": "Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkPreference",
                "setUsbTethering": "Landroid/net/IConnectivityManager$Stub$Proxy;->setUsbTethering",
                "startUsingNetworkFeature": "Landroid/net/IConnectivityManager$Stub$Proxy;->startUsingNetworkFeature",
                "stopUsingNetworkFeature": "Landroid/net/IConnectivityManager$Stub$Proxy;->stopUsingNetworkFeature",
                "tether": "Landroid/net/IConnectivityManager$Stub$Proxy;->tether",
                "untether": "Landroid/net/IConnectivityManager$Stub$Proxy;->untether",
                "getTetherableBluetoothRegexs": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableBluetoothRegexs",
                "getTetherableIfaces": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableIfaces",
                "getTetherableUsbRegexs": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableUsbRegexs",
                "getTetherableWifiRegexs": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableWifiRegexs",
                "getTetheredIfacePairs": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheredIfacePairs",
                "getTetheredIfaces": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheredIfaces",
                "getTetheringErroredIfaces": "Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheringErroredIfaces",
                "reportInetCondition": "Landroid/net/IConnectivityManager$Stub$Proxy;->reportInetCondition",
                "requestNetworkTransitionWakelock": "Landroid/net/IConnectivityManager$Stub$Proxy;->requestNetworkTransitionWakelock",
                "setGlobalProxy": "Landroid/net/IConnectivityManager$Stub$Proxy;->setGlobalProxy",
                "setMobileDataEnabled": "Landroid/net/IConnectivityManager$Stub$Proxy;->setMobileDataEnabled",
                "setNetworkPreference": "Landroid/net/IConnectivityManager$Stub$Proxy;->setNetworkPreference",
                "startLegacyVpn": "Landroid/net/IConnectivityManager$Stub$Proxy;->startLegacyVpn"
            },
            "IConnectivityManager$Stub": {
                "getActiveLinkProperties": "Landroid/net/IConnectivityManager$Stub;->getActiveLinkProperties",
                "getLinkProperties": "Landroid/net/IConnectivityManager$Stub;->getLinkProperties",
                "getActiveNetworkInfo": "Landroid/net/IConnectivityManager$Stub;->getActiveNetworkInfo",
                "getAllNetworkInfo": "Landroid/net/IConnectivityManager$Stub;->getAllNetworkInfo",
                "getNetworkInfo": "Landroid/net/IConnectivityManager$Stub;->getNetworkInfo",
                "getActiveNetworkQuotaInfo": "Landroid/net/IConnectivityManager$Stub;->getActiveNetworkQuotaInfo",
                "getAllNetworkState": "Landroid/net/IConnectivityManager$Stub;->getAllNetworkState",
                "getMobileDataEnabled": "Landroid/net/IConnectivityManager$Stub;->getMobileDataEnabled",
                "isActiveNetworkMetered": "Landroid/net/IConnectivityManager$Stub;->isActiveNetworkMetered",
                "isNetworkSupported": "Landroid/net/IConnectivityManager$Stub;->isNetworkSupported",
                "isTetheringSupported": "Landroid/net/IConnectivityManager$Stub;->isTetheringSupported",
                "onTransact": "Landroid/net/IConnectivityManager$Stub;->onTransact",
                "requestRouteToHostAddress": "Landroid/net/IConnectivityManager$Stub;->requestRouteToHostAddress",
                "requestRouteToHost": "Landroid/net/IConnectivityManager$Stub;->requestRouteToHost",
                "setRadio": "Landroid/net/IConnectivityManager$Stub;->setRadio",
                "setRadios": "Landroid/net/IConnectivityManager$Stub;->setRadios",
                "getLastTetherError": "Landroid/net/IConnectivityManager$Stub;->getLastTetherError",
                "getNetworkPreference": "Landroid/net/IConnectivityManager$Stub;->getNetworkPreference",
                "setUsbTethering": "Landroid/net/IConnectivityManager$Stub;->setUsbTethering",
                "startUsingNetworkFeature": "Landroid/net/IConnectivityManager$Stub;->startUsingNetworkFeature",
                "stopUsingNetworkFeature": "Landroid/net/IConnectivityManager$Stub;->stopUsingNetworkFeature",
                "tether": "Landroid/net/IConnectivityManager$Stub;->tether",
                "untether": "Landroid/net/IConnectivityManager$Stub;->untether",
                "getTetherableBluetoothRegexs": "Landroid/net/IConnectivityManager$Stub;->getTetherableBluetoothRegexs",
                "getTetherableIfaces": "Landroid/net/IConnectivityManager$Stub;->getTetherableIfaces",
                "getTetherableUsbRegexs": "Landroid/net/IConnectivityManager$Stub;->getTetherableUsbRegexs",
                "getTetherableWifiRegexs": "Landroid/net/IConnectivityManager$Stub;->getTetherableWifiRegexs",
                "getTetheredIfacePairs": "Landroid/net/IConnectivityManager$Stub;->getTetheredIfacePairs",
                "getTetheredIfaces": "Landroid/net/IConnectivityManager$Stub;->getTetheredIfaces",
                "getTetheringErroredIfaces": "Landroid/net/IConnectivityManager$Stub;->getTetheringErroredIfaces",
                "reportInetCondition": "Landroid/net/IConnectivityManager$Stub;->reportInetCondition",
                "requestNetworkTransitionWakelock": "Landroid/net/IConnectivityManager$Stub;->requestNetworkTransitionWakelock",
                "setGlobalProxy": "Landroid/net/IConnectivityManager$Stub;->setGlobalProxy",
                "setMobileDataEnabled": "Landroid/net/IConnectivityManager$Stub;->setMobileDataEnabled",
                "setNetworkPreference": "Landroid/net/IConnectivityManager$Stub;->setNetworkPreference",
                "startLegacyVpn": "Landroid/net/IConnectivityManager$Stub;->startLegacyVpn"
            },
            "IConnectivityManager": {
                "getActiveLinkProperties": "Landroid/net/IConnectivityManager;->getActiveLinkProperties",
                "getLinkProperties": "Landroid/net/IConnectivityManager;->getLinkProperties",
                "getActiveNetworkInfo": "Landroid/net/IConnectivityManager;->getActiveNetworkInfo",
                "getAllNetworkInfo": "Landroid/net/IConnectivityManager;->getAllNetworkInfo",
                "getNetworkInfo": "Landroid/net/IConnectivityManager;->getNetworkInfo",
                "getActiveNetworkQuotaInfo": "Landroid/net/IConnectivityManager;->getActiveNetworkQuotaInfo",
                "getAllNetworkState": "Landroid/net/IConnectivityManager;->getAllNetworkState",
                "getMobileDataEnabled": "Landroid/net/IConnectivityManager;->getMobileDataEnabled",
                "isActiveNetworkMetered": "Landroid/net/IConnectivityManager;->isActiveNetworkMetered",
                "isNetworkSupported": "Landroid/net/IConnectivityManager;->isNetworkSupported",
                "isTetheringSupported": "Landroid/net/IConnectivityManager;->isTetheringSupported",
                "requestRouteToHostAddress": "Landroid/net/IConnectivityManager;->requestRouteToHostAddress",
                "requestRouteToHost": "Landroid/net/IConnectivityManager;->requestRouteToHost",
                "setRadio": "Landroid/net/IConnectivityManager;->setRadio",
                "setRadios": "Landroid/net/IConnectivityManager;->setRadios",
                "getLastTetherError": "Landroid/net/IConnectivityManager;->getLastTetherError",
                "getNetworkPreference": "Landroid/net/IConnectivityManager;->getNetworkPreference",
                "setUsbTethering": "Landroid/net/IConnectivityManager;->setUsbTethering",
                "startUsingNetworkFeature": "Landroid/net/IConnectivityManager;->startUsingNetworkFeature",
                "stopUsingNetworkFeature": "Landroid/net/IConnectivityManager;->stopUsingNetworkFeature",
                "tether": "Landroid/net/IConnectivityManager;->tether",
                "untether": "Landroid/net/IConnectivityManager;->untether",
                "getTetherableBluetoothRegexs": "Landroid/net/IConnectivityManager;->getTetherableBluetoothRegexs",
                "getTetherableIfaces": "Landroid/net/IConnectivityManager;->getTetherableIfaces",
                "getTetherableUsbRegexs": "Landroid/net/IConnectivityManager;->getTetherableUsbRegexs",
                "getTetherableWifiRegexs": "Landroid/net/IConnectivityManager;->getTetherableWifiRegexs",
                "getTetheredIfacePairs": "Landroid/net/IConnectivityManager;->getTetheredIfacePairs",
                "getTetheredIfaces": "Landroid/net/IConnectivityManager;->getTetheredIfaces",
                "getTetheringErroredIfaces": "Landroid/net/IConnectivityManager;->getTetheringErroredIfaces",
                "reportInetCondition": "Landroid/net/IConnectivityManager;->reportInetCondition",
                "requestNetworkTransitionWakelock": "Landroid/net/IConnectivityManager;->requestNetworkTransitionWakelock",
                "setGlobalProxy": "Landroid/net/IConnectivityManager;->setGlobalProxy",
                "setMobileDataEnabled": "Landroid/net/IConnectivityManager;->setMobileDataEnabled",
                "setNetworkPreference": "Landroid/net/IConnectivityManager;->setNetworkPreference",
                "startLegacyVpn": "Landroid/net/IConnectivityManager;->startLegacyVpn",
                "getGlobalProxy": "Landroid/net/IConnectivityManager;->getGlobalProxy",
                "getProxy": "Landroid/net/IConnectivityManager;->getProxy",
                "getBackgroundDataSetting": "Landroid/net/IConnectivityManager;->getBackgroundDataSetting"
            },
            "INetworkPolicyListener$Stub$Proxy": {
                "onRestrictBackgroundChanged": "Landroid/net/INetworkPolicyListener$Stub$Proxy;->onRestrictBackgroundChanged"
            },
            "INetworkPolicyManager$Stub$Proxy": {
                "getNetworkPolicies": "Landroid/net/INetworkPolicyManager$Stub$Proxy;->getNetworkPolicies",
                "getNetworkQuotaInfo": "Landroid/net/INetworkPolicyManager$Stub$Proxy;->getNetworkQuotaInfo",
                "isNetworkMetered": "Landroid/net/INetworkPolicyManager$Stub$Proxy;->isNetworkMetered",
                "setNetworkPolicies": "Landroid/net/INetworkPolicyManager$Stub$Proxy;->setNetworkPolicies",
                "setRestrictBackground": "Landroid/net/INetworkPolicyManager$Stub$Proxy;->setRestrictBackground"
            },
            "INetworkPolicyManager$Stub": {
                "getNetworkPolicies": "Landroid/net/INetworkPolicyManager$Stub;->getNetworkPolicies",
                "getNetworkQuotaInfo": "Landroid/net/INetworkPolicyManager$Stub;->getNetworkQuotaInfo",
                "isNetworkMetered": "Landroid/net/INetworkPolicyManager$Stub;->isNetworkMetered",
                "onTransact": "Landroid/net/INetworkPolicyManager$Stub;->onTransact",
                "setNetworkPolicies": "Landroid/net/INetworkPolicyManager$Stub;->setNetworkPolicies",
                "setRestrictBackground": "Landroid/net/INetworkPolicyManager$Stub;->setRestrictBackground"
            },
            "INetworkPolicyManager": {
                "getNetworkPolicies": "Landroid/net/INetworkPolicyManager;->getNetworkPolicies",
                "getNetworkQuotaInfo": "Landroid/net/INetworkPolicyManager;->getNetworkQuotaInfo",
                "isNetworkMetered": "Landroid/net/INetworkPolicyManager;->isNetworkMetered",
                "setNetworkPolicies": "Landroid/net/INetworkPolicyManager;->setNetworkPolicies",
                "setRestrictBackground": "Landroid/net/INetworkPolicyManager;->setRestrictBackground"
            },
            "INetworkStatsService$Stub$Proxy": {
                "getDataLayerSnapshotForUid": "Landroid/net/INetworkStatsService$Stub$Proxy;->getDataLayerSnapshotForUid"
            },
            "INetworkStatsService$Stub": {
                "getDataLayerSnapshotForUid": "Landroid/net/INetworkStatsService$Stub;->getDataLayerSnapshotForUid",
                "onTransact": "Landroid/net/INetworkStatsService$Stub;->onTransact"
            },
            "INetworkStatsService": {
                "getDataLayerSnapshotForUid": "Landroid/net/INetworkStatsService;->getDataLayerSnapshotForUid"
            },
            "IThrottleManager$Stub$Proxy": {
                "getCliffLevel": "Landroid/net/IThrottleManager$Stub$Proxy;->getCliffLevel",
                "getThrottle": "Landroid/net/IThrottleManager$Stub$Proxy;->getThrottle",
                "getHelpUri": "Landroid/net/IThrottleManager$Stub$Proxy;->getHelpUri",
                "getByteCount": "Landroid/net/IThrottleManager$Stub$Proxy;->getByteCount",
                "getCliffThreshold": "Landroid/net/IThrottleManager$Stub$Proxy;->getCliffThreshold",
                "getPeriodStartTime": "Landroid/net/IThrottleManager$Stub$Proxy;->getPeriodStartTime",
                "getResetTime": "Landroid/net/IThrottleManager$Stub$Proxy;->getResetTime"
            },
            "IThrottleManager$Stub": {
                "onTransact": "Landroid/net/IThrottleManager$Stub;->onTransact",
                "getCliffLevel": "Landroid/net/IThrottleManager$Stub;->getCliffLevel",
                "getThrottle": "Landroid/net/IThrottleManager$Stub;->getThrottle",
                "getHelpUri": "Landroid/net/IThrottleManager$Stub;->getHelpUri",
                "getByteCount": "Landroid/net/IThrottleManager$Stub;->getByteCount",
                "getCliffThreshold": "Landroid/net/IThrottleManager$Stub;->getCliffThreshold",
                "getPeriodStartTime": "Landroid/net/IThrottleManager$Stub;->getPeriodStartTime",
                "getResetTime": "Landroid/net/IThrottleManager$Stub;->getResetTime"
            },
            "IThrottleManager": {
                "getCliffLevel": "Landroid/net/IThrottleManager;->getCliffLevel",
                "getThrottle": "Landroid/net/IThrottleManager;->getThrottle",
                "getHelpUri": "Landroid/net/IThrottleManager;->getHelpUri",
                "getByteCount": "Landroid/net/IThrottleManager;->getByteCount",
                "getCliffThreshold": "Landroid/net/IThrottleManager;->getCliffThreshold",
                "getPeriodStartTime": "Landroid/net/IThrottleManager;->getPeriodStartTime",
                "getResetTime": "Landroid/net/IThrottleManager;->getResetTime"
            },
            "NetworkIdentity": {
                "buildNetworkIdentity": "Landroid/net/NetworkIdentity;->buildNetworkIdentity"
            },
            "NetworkPolicyManager": {
                "getNetworkPolicies": "Landroid/net/NetworkPolicyManager;->getNetworkPolicies",
                "setNetworkPolicies": "Landroid/net/NetworkPolicyManager;->setNetworkPolicies",
                "setRestrictBackground": "Landroid/net/NetworkPolicyManager;->setRestrictBackground"
            },
            "NetworkStateTracker": {
                "reconnect": "Landroid/net/NetworkStateTracker;->reconnect",
                "setRadio": "Landroid/net/NetworkStateTracker;->setRadio",
                "teardown": "Landroid/net/NetworkStateTracker;->teardown"
            },
            "NetworkUtils": {
                "hexToInet6Address": "Landroid/net/NetworkUtils;->hexToInet6Address"
            },
            "nsd": {
                "INsdManager$Stub$Proxy": {
                    "getMessenger": "Landroid/net/nsd/INsdManager$Stub$Proxy;->getMessenger",
                    "setEnabled": "Landroid/net/nsd/INsdManager$Stub$Proxy;->setEnabled"
                },
                "INsdManager$Stub": {
                    "getMessenger": "Landroid/net/nsd/INsdManager$Stub;->getMessenger",
                    "onTransact": "Landroid/net/nsd/INsdManager$Stub;->onTransact",
                    "setEnabled": "Landroid/net/nsd/INsdManager$Stub;->setEnabled"
                },
                "INsdManager": {
                    "getMessenger": "Landroid/net/nsd/INsdManager;->getMessenger",
                    "setEnabled": "Landroid/net/nsd/INsdManager;->setEnabled"
                },
                "NsdManager": {
                    "getMessenger": "Landroid/net/nsd/NsdManager;->getMessenger",
                    "init": "Landroid/net/nsd/NsdManager;->init",
                    "<init>": "Landroid/net/nsd/NsdManager;-><init>",
                    "setEnabled": "Landroid/net/nsd/NsdManager;->setEnabled"
                }
            },
            "sip": {
                "ISipService$Stub$Proxy": {
                    "createSession": "Landroid/net/sip/ISipService$Stub$Proxy;->createSession",
                    "getPendingSession": "Landroid/net/sip/ISipService$Stub$Proxy;->getPendingSession",
                    "getListOfProfiles": "Landroid/net/sip/ISipService$Stub$Proxy;->getListOfProfiles",
                    "isOpened": "Landroid/net/sip/ISipService$Stub$Proxy;->isOpened",
                    "isRegistered": "Landroid/net/sip/ISipService$Stub$Proxy;->isRegistered",
                    "close": "Landroid/net/sip/ISipService$Stub$Proxy;->close",
                    "open3": "Landroid/net/sip/ISipService$Stub$Proxy;->open3",
                    "open": "Landroid/net/sip/ISipService$Stub$Proxy;->open",
                    "setRegistrationListener": "Landroid/net/sip/ISipService$Stub$Proxy;->setRegistrationListener"
                },
                "ISipService$Stub": {
                    "createSession": "Landroid/net/sip/ISipService$Stub;->createSession",
                    "getPendingSession": "Landroid/net/sip/ISipService$Stub;->getPendingSession",
                    "getListOfProfiles": "Landroid/net/sip/ISipService$Stub;->getListOfProfiles",
                    "isOpened": "Landroid/net/sip/ISipService$Stub;->isOpened",
                    "isRegistered": "Landroid/net/sip/ISipService$Stub;->isRegistered",
                    "onTransact": "Landroid/net/sip/ISipService$Stub;->onTransact",
                    "close": "Landroid/net/sip/ISipService$Stub;->close",
                    "open3": "Landroid/net/sip/ISipService$Stub;->open3",
                    "open": "Landroid/net/sip/ISipService$Stub;->open",
                    "setRegistrationListener": "Landroid/net/sip/ISipService$Stub;->setRegistrationListener"
                },
                "ISipService": {
                    "createSession": "Landroid/net/sip/ISipService;->createSession",
                    "getPendingSession": "Landroid/net/sip/ISipService;->getPendingSession",
                    "getListOfProfiles": "Landroid/net/sip/ISipService;->getListOfProfiles",
                    "isOpened": "Landroid/net/sip/ISipService;->isOpened",
                    "isRegistered": "Landroid/net/sip/ISipService;->isRegistered",
                    "close": "Landroid/net/sip/ISipService;->close",
                    "open3": "Landroid/net/sip/ISipService;->open3",
                    "open": "Landroid/net/sip/ISipService;->open",
                    "setRegistrationListener": "Landroid/net/sip/ISipService;->setRegistrationListener"
                },
                "SipAudioCall$1": {
                    "onCallBusy": "Landroid/net/sip/SipAudioCall$1;->onCallBusy",
                    "onCallEnded": "Landroid/net/sip/SipAudioCall$1;->onCallEnded",
                    "onCallEstablished": "Landroid/net/sip/SipAudioCall$1;->onCallEstablished",
                    "onError": "Landroid/net/sip/SipAudioCall$1;->onError"
                },
                "SipAudioCall": {
                    "isWifiOn": "Landroid/net/sip/SipAudioCall;->isWifiOn",
                    "close": "Landroid/net/sip/SipAudioCall;->close",
                    "endCall": "Landroid/net/sip/SipAudioCall;->endCall",
                    "grabWifiHighPerfLock": "Landroid/net/sip/SipAudioCall;->grabWifiHighPerfLock",
                    "onError": "Landroid/net/sip/SipAudioCall;->onError",
                    "releaseWifiHighPerfLock": "Landroid/net/sip/SipAudioCall;->releaseWifiHighPerfLock",
                    "setSpeakerMode": "Landroid/net/sip/SipAudioCall;->setSpeakerMode",
                    "startAudio": "Landroid/net/sip/SipAudioCall;->startAudio",
                    "startAudioInternal": "Landroid/net/sip/SipAudioCall;->startAudioInternal",
                    "stopCall": "Landroid/net/sip/SipAudioCall;->stopCall",
                    "transferToNewSession": "Landroid/net/sip/SipAudioCall;->transferToNewSession"
                },
                "SipManager": {
                    "makeAudioCall": "Landroid/net/sip/SipManager;->makeAudioCall",
                    "takeAudioCall": "Landroid/net/sip/SipManager;->takeAudioCall",
                    "getListOfProfiles": "Landroid/net/sip/SipManager;->getListOfProfiles",
                    "createSipSession": "Landroid/net/sip/SipManager;->createSipSession",
                    "getSessionFor": "Landroid/net/sip/SipManager;->getSessionFor",
                    "isOpened": "Landroid/net/sip/SipManager;->isOpened",
                    "isRegistered": "Landroid/net/sip/SipManager;->isRegistered",
                    "close": "Landroid/net/sip/SipManager;->close",
                    "open": "Landroid/net/sip/SipManager;->open",
                    "register": "Landroid/net/sip/SipManager;->register",
                    "setRegistrationListener": "Landroid/net/sip/SipManager;->setRegistrationListener",
                    "unregister": "Landroid/net/sip/SipManager;->unregister",
                    "isApiSupported": "Landroid/net/sip/SipManager;->isApiSupported",
                    "isIncomingCallIntent": "Landroid/net/sip/SipManager;->isIncomingCallIntent",
                    "isSipWifiOnly": "Landroid/net/sip/SipManager;->isSipWifiOnly",
                    "isVoipSupported": "Landroid/net/sip/SipManager;->isVoipSupported",
                    "getCallId": "Landroid/net/sip/SipManager;->getCallId",
                    "getOfferSessionDescription": "Landroid/net/sip/SipManager;->getOfferSessionDescription"
                },
                "SipSession$Listener": {
                    "onCallTransferring": "Landroid/net/sip/SipSession$Listener;->onCallTransferring"
                },
                "open": "Landroid/net/sip;->open",
                "unregister": "Landroid/net/sip;->unregister",
                "takeAudioCall": "Landroid/net/sip;->takeAudioCall",
                "makeAudioCall": "Landroid/net/sip;->makeAudioCall",
                "setRegistrationListener": "Landroid/net/sip;->setRegistrationListener",
                "register": "Landroid/net/sip;->register",
                "isOpened": "Landroid/net/sip;->isOpened",
                "getSessionFor": "Landroid/net/sip;->getSessionFor",
                "createSipSession": "Landroid/net/sip;->createSipSession",
                "isRegistered": "Landroid/net/sip;->isRegistered",
                "close": "Landroid/net/sip;->close"
            },
            "SSLCertificateSocketFactory": {
                "createSocket": "Landroid/net/SSLCertificateSocketFactory;->createSocket",
                "getHttpSocketFactory": "Landroid/net/SSLCertificateSocketFactory;->getHttpSocketFactory"
            },
            "ThrottleManager": {
                "getCliffLevel": "Landroid/net/ThrottleManager;->getCliffLevel",
                "getHelpUri": "Landroid/net/ThrottleManager;->getHelpUri",
                "getByteCount": "Landroid/net/ThrottleManager;->getByteCount",
                "getCliffThreshold": "Landroid/net/ThrottleManager;->getCliffThreshold",
                "getPeriodStartTime": "Landroid/net/ThrottleManager;->getPeriodStartTime",
                "getResetTime": "Landroid/net/ThrottleManager;->getResetTime"
            },
            "TrafficStats": {
                "getDataLayerSnapshotForUid": "Landroid/net/TrafficStats;->getDataLayerSnapshotForUid",
                "stopDataProfiling": "Landroid/net/TrafficStats;->stopDataProfiling",
                "startDataProfiling": "Landroid/net/TrafficStats;->startDataProfiling"
            },
            "wifi": {
                "IWifiManager$Stub$Proxy": {
                    "getDhcpInfo": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getDhcpInfo",
                    "getWifiApConfiguration": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getWifiApConfiguration",
                    "getConnectionInfo": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getConnectionInfo",
                    "getWifiServiceMessenger": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getWifiServiceMessenger",
                    "getWifiStateMachineMessenger": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getWifiStateMachineMessenger",
                    "acquireWifiLock": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->acquireWifiLock",
                    "disableNetwork": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->disableNetwork",
                    "enableNetwork": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->enableNetwork",
                    "isMulticastEnabled": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->isMulticastEnabled",
                    "pingSupplicant": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->pingSupplicant",
                    "releaseWifiLock": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->releaseWifiLock",
                    "removeNetwork": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->removeNetwork",
                    "saveConfiguration": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->saveConfiguration",
                    "setWifiEnabled": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->setWifiEnabled",
                    "addOrUpdateNetwork": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->addOrUpdateNetwork",
                    "getFrequencyBand": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getFrequencyBand",
                    "getWifiApEnabledState": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getWifiApEnabledState",
                    "getWifiEnabledState": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getWifiEnabledState",
                    "getConfigFile": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getConfigFile",
                    "getConfiguredNetworks": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getConfiguredNetworks",
                    "getScanResults": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->getScanResults",
                    "acquireMulticastLock": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->acquireMulticastLock",
                    "addToBlacklist": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->addToBlacklist",
                    "clearBlacklist": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->clearBlacklist",
                    "disconnect": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->disconnect",
                    "initializeMulticastFiltering": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->initializeMulticastFiltering",
                    "reassociate": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->reassociate",
                    "reconnect": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->reconnect",
                    "releaseMulticastLock": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->releaseMulticastLock",
                    "setCountryCode": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->setCountryCode",
                    "setFrequencyBand": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->setFrequencyBand",
                    "setWifiApConfiguration": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->setWifiApConfiguration",
                    "setWifiApEnabled": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->setWifiApEnabled",
                    "startScan": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->startScan",
                    "startWifi": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->startWifi",
                    "stopWifi": "Landroid/net/wifi/IWifiManager$Stub$Proxy;->stopWifi"
                },
                "IWifiManager$Stub": {
                    "getDhcpInfo": "Landroid/net/wifi/IWifiManager$Stub;->getDhcpInfo",
                    "getWifiApConfiguration": "Landroid/net/wifi/IWifiManager$Stub;->getWifiApConfiguration",
                    "getConnectionInfo": "Landroid/net/wifi/IWifiManager$Stub;->getConnectionInfo",
                    "getWifiServiceMessenger": "Landroid/net/wifi/IWifiManager$Stub;->getWifiServiceMessenger",
                    "getWifiStateMachineMessenger": "Landroid/net/wifi/IWifiManager$Stub;->getWifiStateMachineMessenger",
                    "acquireWifiLock": "Landroid/net/wifi/IWifiManager$Stub;->acquireWifiLock",
                    "disableNetwork": "Landroid/net/wifi/IWifiManager$Stub;->disableNetwork",
                    "enableNetwork": "Landroid/net/wifi/IWifiManager$Stub;->enableNetwork",
                    "isMulticastEnabled": "Landroid/net/wifi/IWifiManager$Stub;->isMulticastEnabled",
                    "onTransact": "Landroid/net/wifi/IWifiManager$Stub;->onTransact",
                    "pingSupplicant": "Landroid/net/wifi/IWifiManager$Stub;->pingSupplicant",
                    "releaseWifiLock": "Landroid/net/wifi/IWifiManager$Stub;->releaseWifiLock",
                    "removeNetwork": "Landroid/net/wifi/IWifiManager$Stub;->removeNetwork",
                    "saveConfiguration": "Landroid/net/wifi/IWifiManager$Stub;->saveConfiguration",
                    "setWifiEnabled": "Landroid/net/wifi/IWifiManager$Stub;->setWifiEnabled",
                    "addOrUpdateNetwork": "Landroid/net/wifi/IWifiManager$Stub;->addOrUpdateNetwork",
                    "getFrequencyBand": "Landroid/net/wifi/IWifiManager$Stub;->getFrequencyBand",
                    "getWifiApEnabledState": "Landroid/net/wifi/IWifiManager$Stub;->getWifiApEnabledState",
                    "getWifiEnabledState": "Landroid/net/wifi/IWifiManager$Stub;->getWifiEnabledState",
                    "getConfigFile": "Landroid/net/wifi/IWifiManager$Stub;->getConfigFile",
                    "getConfiguredNetworks": "Landroid/net/wifi/IWifiManager$Stub;->getConfiguredNetworks",
                    "getScanResults": "Landroid/net/wifi/IWifiManager$Stub;->getScanResults",
                    "acquireMulticastLock": "Landroid/net/wifi/IWifiManager$Stub;->acquireMulticastLock",
                    "addToBlacklist": "Landroid/net/wifi/IWifiManager$Stub;->addToBlacklist",
                    "clearBlacklist": "Landroid/net/wifi/IWifiManager$Stub;->clearBlacklist",
                    "disconnect": "Landroid/net/wifi/IWifiManager$Stub;->disconnect",
                    "initializeMulticastFiltering": "Landroid/net/wifi/IWifiManager$Stub;->initializeMulticastFiltering",
                    "reassociate": "Landroid/net/wifi/IWifiManager$Stub;->reassociate",
                    "reconnect": "Landroid/net/wifi/IWifiManager$Stub;->reconnect",
                    "releaseMulticastLock": "Landroid/net/wifi/IWifiManager$Stub;->releaseMulticastLock",
                    "setCountryCode": "Landroid/net/wifi/IWifiManager$Stub;->setCountryCode",
                    "setFrequencyBand": "Landroid/net/wifi/IWifiManager$Stub;->setFrequencyBand",
                    "setWifiApConfiguration": "Landroid/net/wifi/IWifiManager$Stub;->setWifiApConfiguration",
                    "setWifiApEnabled": "Landroid/net/wifi/IWifiManager$Stub;->setWifiApEnabled",
                    "startScan": "Landroid/net/wifi/IWifiManager$Stub;->startScan",
                    "startWifi": "Landroid/net/wifi/IWifiManager$Stub;->startWifi",
                    "stopWifi": "Landroid/net/wifi/IWifiManager$Stub;->stopWifi"
                },
                "IWifiManager": {
                    "getDhcpInfo": "Landroid/net/wifi/IWifiManager;->getDhcpInfo",
                    "getWifiApConfiguration": "Landroid/net/wifi/IWifiManager;->getWifiApConfiguration",
                    "getConnectionInfo": "Landroid/net/wifi/IWifiManager;->getConnectionInfo",
                    "getWifiServiceMessenger": "Landroid/net/wifi/IWifiManager;->getWifiServiceMessenger",
                    "getWifiStateMachineMessenger": "Landroid/net/wifi/IWifiManager;->getWifiStateMachineMessenger",
                    "acquireWifiLock": "Landroid/net/wifi/IWifiManager;->acquireWifiLock",
                    "disableNetwork": "Landroid/net/wifi/IWifiManager;->disableNetwork",
                    "enableNetwork": "Landroid/net/wifi/IWifiManager;->enableNetwork",
                    "isMulticastEnabled": "Landroid/net/wifi/IWifiManager;->isMulticastEnabled",
                    "pingSupplicant": "Landroid/net/wifi/IWifiManager;->pingSupplicant",
                    "releaseWifiLock": "Landroid/net/wifi/IWifiManager;->releaseWifiLock",
                    "removeNetwork": "Landroid/net/wifi/IWifiManager;->removeNetwork",
                    "saveConfiguration": "Landroid/net/wifi/IWifiManager;->saveConfiguration",
                    "setWifiEnabled": "Landroid/net/wifi/IWifiManager;->setWifiEnabled",
                    "addOrUpdateNetwork": "Landroid/net/wifi/IWifiManager;->addOrUpdateNetwork",
                    "getFrequencyBand": "Landroid/net/wifi/IWifiManager;->getFrequencyBand",
                    "getWifiApEnabledState": "Landroid/net/wifi/IWifiManager;->getWifiApEnabledState",
                    "getWifiEnabledState": "Landroid/net/wifi/IWifiManager;->getWifiEnabledState",
                    "getConfigFile": "Landroid/net/wifi/IWifiManager;->getConfigFile",
                    "getConfiguredNetworks": "Landroid/net/wifi/IWifiManager;->getConfiguredNetworks",
                    "getScanResults": "Landroid/net/wifi/IWifiManager;->getScanResults",
                    "acquireMulticastLock": "Landroid/net/wifi/IWifiManager;->acquireMulticastLock",
                    "addToBlacklist": "Landroid/net/wifi/IWifiManager;->addToBlacklist",
                    "clearBlacklist": "Landroid/net/wifi/IWifiManager;->clearBlacklist",
                    "disconnect": "Landroid/net/wifi/IWifiManager;->disconnect",
                    "initializeMulticastFiltering": "Landroid/net/wifi/IWifiManager;->initializeMulticastFiltering",
                    "reassociate": "Landroid/net/wifi/IWifiManager;->reassociate",
                    "reconnect": "Landroid/net/wifi/IWifiManager;->reconnect",
                    "releaseMulticastLock": "Landroid/net/wifi/IWifiManager;->releaseMulticastLock",
                    "setCountryCode": "Landroid/net/wifi/IWifiManager;->setCountryCode",
                    "setFrequencyBand": "Landroid/net/wifi/IWifiManager;->setFrequencyBand",
                    "setWifiApConfiguration": "Landroid/net/wifi/IWifiManager;->setWifiApConfiguration",
                    "setWifiApEnabled": "Landroid/net/wifi/IWifiManager;->setWifiApEnabled",
                    "startScan": "Landroid/net/wifi/IWifiManager;->startScan",
                    "startWifi": "Landroid/net/wifi/IWifiManager;->startWifi",
                    "stopWifi": "Landroid/net/wifi/IWifiManager;->stopWifi",
                    "getMessenger": "Landroid/net/wifi/IWifiManager;->getMessenger",
                    "isDualBandSupported": "Landroid/net/wifi/IWifiManager;->isDualBandSupported",
                    "getNumAllowedChannels": "Landroid/net/wifi/IWifiManager;->getNumAllowedChannels",
                    "getValidChannelCounts": "Landroid/net/wifi/IWifiManager;->getValidChannelCounts"
                },
                "p2p": {
                    "IWifiP2pManager$Stub$Proxy": {
                        "getMessenger": "Landroid/net/wifi/p2p/IWifiP2pManager$Stub$Proxy;->getMessenger"
                    },
                    "IWifiP2pManager$Stub": {
                        "getMessenger": "Landroid/net/wifi/p2p/IWifiP2pManager$Stub;->getMessenger",
                        "onTransact": "Landroid/net/wifi/p2p/IWifiP2pManager$Stub;->onTransact"
                    },
                    "IWifiP2pManager": {
                        "getMessenger": "Landroid/net/wifi/p2p/IWifiP2pManager;->getMessenger"
                    },
                    "WifiP2pGroup": {
                        "setIsGroupOwner": "Landroid/net/wifi/p2p/WifiP2pGroup;->setIsGroupOwner"
                    },
                    "WifiP2pManager": {
                        "initialize": "Landroid/net/wifi/p2p/WifiP2pManager;->initialize",
                        "getMessenger": "Landroid/net/wifi/p2p/WifiP2pManager;->getMessenger",
                        "removeGroup": "Landroid/net/wifi/p2p/WifiP2pManager;->removeGroup"
                    },
                    "WifiP2pService$P2pStateMachine$DefaultState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$DefaultState;->processMessage",
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$DefaultState;->enter",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$DefaultState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$GroupCreatedState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$GroupCreatedState;->processMessage",
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$GroupCreatedState;->enter",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$GroupCreatedState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$GroupCreatingState": {
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$GroupCreatingState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$GroupNegotiationState": {
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$GroupNegotiationState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$InactiveState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$InactiveState;->processMessage",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$InactiveState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$P2pDisabledState": {
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pDisabledState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$P2pDisablingState": {
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pDisablingState;->enter",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pDisablingState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$P2pEnabledState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pEnabledState;->processMessage",
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pEnabledState;->enter",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pEnabledState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$P2pEnablingState": {
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pEnablingState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$P2pNotSupportedState": {
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pNotSupportedState;->enter",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$P2pNotSupportedState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$ProvisionDiscoveryState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$ProvisionDiscoveryState;->processMessage",
                        "exit": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$ProvisionDiscoveryState;->exit"
                    },
                    "WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState": {
                        "processMessage": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState;->processMessage",
                        "enter": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState;->enter"
                    },
                    "WifiP2pService$P2pStateMachine": {
                        "isForegroundApp": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->isForegroundApp",
                        "sendConnectNoticeToApp": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendConnectNoticeToApp",
                        "sendShowPinReqToFrontApp": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendShowPinReqToFrontApp",
                        "setAndPersistDeviceName": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->setAndPersistDeviceName",
                        "setDialogListenerApp": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->setDialogListenerApp",
                        "initializeP2pSettings": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->initializeP2pSettings",
                        "p2pConnectWithPinDisplay": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->p2pConnectWithPinDisplay",
                        "sendP2pConnectionChangedBroadcast": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendP2pConnectionChangedBroadcast",
                        "sendP2pDiscoveryChangedBroadcast": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendP2pDiscoveryChangedBroadcast",
                        "sendP2pStateChangedBroadcast": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendP2pStateChangedBroadcast",
                        "sendThisDeviceChangedBroadcast": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->sendThisDeviceChangedBroadcast",
                        "updateThisDevice": "Landroid/net/wifi/p2p/WifiP2pService$P2pStateMachine;->updateThisDevice"
                    },
                    "WifiP2pService": {
                        "getMessenger": "Landroid/net/wifi/p2p/WifiP2pService;->getMessenger",
                        "onTransact": "Landroid/net/wifi/p2p/WifiP2pService;->onTransact",
                        "enforceAccessPermission": "Landroid/net/wifi/p2p/WifiP2pService;->enforceAccessPermission",
                        "enforceChangePermission": "Landroid/net/wifi/p2p/WifiP2pService;->enforceChangePermission",
                        "setMiracastMode": "Landroid/net/wifi/p2p/WifiP2pService;->setMiracastMode"
                    }
                },
                "SupplicantStateTracker$CompletedState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$CompletedState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$CompletedState;->exit"
                },
                "SupplicantStateTracker$DefaultState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$DefaultState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$DefaultState;->exit"
                },
                "SupplicantStateTracker$DisconnectedState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$DisconnectedState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$DisconnectedState;->exit"
                },
                "SupplicantStateTracker$DormantState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$DormantState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$DormantState;->exit"
                },
                "SupplicantStateTracker$HandshakeState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$HandshakeState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$HandshakeState;->exit"
                },
                "SupplicantStateTracker$InactiveState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$InactiveState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$InactiveState;->exit"
                },
                "SupplicantStateTracker$ScanState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$ScanState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$ScanState;->exit"
                },
                "SupplicantStateTracker$UninitializedState": {
                    "processMessage": "Landroid/net/wifi/SupplicantStateTracker$UninitializedState;->processMessage",
                    "exit": "Landroid/net/wifi/SupplicantStateTracker$UninitializedState;->exit"
                },
                "SupplicantStateTracker": {
                    "sendSupplicantStateChangedBroadcast": "Landroid/net/wifi/SupplicantStateTracker;->sendSupplicantStateChangedBroadcast"
                },
                "WifiApConfigStore$ActiveState": {
                    "exit": "Landroid/net/wifi/WifiApConfigStore$ActiveState;->exit"
                },
                "WifiApConfigStore$DefaultState": {
                    "enter": "Landroid/net/wifi/WifiApConfigStore$DefaultState;->enter",
                    "exit": "Landroid/net/wifi/WifiApConfigStore$DefaultState;->exit"
                },
                "WifiApConfigStore$InactiveState": {
                    "enter": "Landroid/net/wifi/WifiApConfigStore$InactiveState;->enter",
                    "exit": "Landroid/net/wifi/WifiApConfigStore$InactiveState;->exit"
                },
                "WifiManager$MulticastLock": {
                    "acquire": "Landroid/net/wifi/WifiManager$MulticastLock;->acquire",
                    "finalize": "Landroid/net/wifi/WifiManager$MulticastLock;->finalize",
                    "release": "Landroid/net/wifi/WifiManager$MulticastLock;->release"
                },
                "WifiManager$WifiLock": {
                    "acquire": "Landroid/net/wifi/WifiManager$WifiLock;->acquire",
                    "finalize": "Landroid/net/wifi/WifiManager$WifiLock;->finalize",
                    "release": "Landroid/net/wifi/WifiManager$WifiLock;->release",
                    "setWorkSource": "Landroid/net/wifi/WifiManager$WifiLock;->setWorkSource"
                },
                "WifiManager": {
                    "getDhcpInfo": "Landroid/net/wifi/WifiManager;->getDhcpInfo",
                    "getWifiApConfiguration": "Landroid/net/wifi/WifiManager;->getWifiApConfiguration",
                    "getConnectionInfo": "Landroid/net/wifi/WifiManager;->getConnectionInfo",
                    "initialize": "Landroid/net/wifi/WifiManager;->initialize",
                    "getWifiServiceMessenger": "Landroid/net/wifi/WifiManager;->getWifiServiceMessenger",
                    "getWifiStateMachineMessenger": "Landroid/net/wifi/WifiManager;->getWifiStateMachineMessenger",
                    "addToBlacklist": "Landroid/net/wifi/WifiManager;->addToBlacklist",
                    "clearBlacklist": "Landroid/net/wifi/WifiManager;->clearBlacklist",
                    "disableNetwork": "Landroid/net/wifi/WifiManager;->disableNetwork",
                    "disconnect": "Landroid/net/wifi/WifiManager;->disconnect",
                    "enableNetwork": "Landroid/net/wifi/WifiManager;->enableNetwork",
                    "initializeMulticastFiltering": "Landroid/net/wifi/WifiManager;->initializeMulticastFiltering",
                    "isMulticastEnabled": "Landroid/net/wifi/WifiManager;->isMulticastEnabled",
                    "isWifiApEnabled": "Landroid/net/wifi/WifiManager;->isWifiApEnabled",
                    "isWifiEnabled": "Landroid/net/wifi/WifiManager;->isWifiEnabled",
                    "pingSupplicant": "Landroid/net/wifi/WifiManager;->pingSupplicant",
                    "reassociate": "Landroid/net/wifi/WifiManager;->reassociate",
                    "reconnect": "Landroid/net/wifi/WifiManager;->reconnect",
                    "removeNetwork": "Landroid/net/wifi/WifiManager;->removeNetwork",
                    "saveConfiguration": "Landroid/net/wifi/WifiManager;->saveConfiguration",
                    "setWifiApConfiguration": "Landroid/net/wifi/WifiManager;->setWifiApConfiguration",
                    "setWifiApEnabled": "Landroid/net/wifi/WifiManager;->setWifiApEnabled",
                    "setWifiEnabled": "Landroid/net/wifi/WifiManager;->setWifiEnabled",
                    "startScan": "Landroid/net/wifi/WifiManager;->startScan",
                    "startScanActive": "Landroid/net/wifi/WifiManager;->startScanActive",
                    "startWifi": "Landroid/net/wifi/WifiManager;->startWifi",
                    "stopWifi": "Landroid/net/wifi/WifiManager;->stopWifi",
                    "addNetwork": "Landroid/net/wifi/WifiManager;->addNetwork",
                    "addOrUpdateNetwork": "Landroid/net/wifi/WifiManager;->addOrUpdateNetwork",
                    "getFrequencyBand": "Landroid/net/wifi/WifiManager;->getFrequencyBand",
                    "getWifiApState": "Landroid/net/wifi/WifiManager;->getWifiApState",
                    "getWifiState": "Landroid/net/wifi/WifiManager;->getWifiState",
                    "updateNetwork": "Landroid/net/wifi/WifiManager;->updateNetwork",
                    "getConfigFile": "Landroid/net/wifi/WifiManager;->getConfigFile",
                    "getConfiguredNetworks": "Landroid/net/wifi/WifiManager;->getConfiguredNetworks",
                    "getScanResults": "Landroid/net/wifi/WifiManager;->getScanResults",
                    "setCountryCode": "Landroid/net/wifi/WifiManager;->setCountryCode",
                    "setFrequencyBand": "Landroid/net/wifi/WifiManager;->setFrequencyBand",
                    "getMessenger": "Landroid/net/wifi/WifiManager;->getMessenger",
                    "is5GHzBandSupported": "Landroid/net/wifi/WifiManager;->is5GHzBandSupported",
                    "is6GHzBandSupported": "Landroid/net/wifi/WifiManager;->is6GHzBandSupported",
                    "isAutoWakeupEnabled": "Landroid/net/wifi/WifiManager;->isAutoWakeupEnabled",
                    "isDeviceToApRttSupported": "Landroid/net/wifi/WifiManager;->isDeviceToApRttSupported",
                    "isDualBandSupported": "Landroid/net/wifi/WifiManager;->isDualBandSupported",
                    "isEasyConnectSupported": "Landroid/net/wifi/WifiManager;->isEasyConnectSupported",
                    "isEnhancedOpenSupported": "Landroid/net/wifi/WifiManager;->isEnhancedOpenSupported",
                    "isEnhancedPowerReportingSupported": "Landroid/net/wifi/WifiManager;->isEnhancedPowerReportingSupported",
                    "isP2pSupported": "Landroid/net/wifi/WifiManager;->isP2pSupported",
                    "isPreferredNetworkOffloadSupported": "Landroid/net/wifi/WifiManager;->isPreferredNetworkOffloadSupported",
                    "isScanAlwaysAvailable": "Landroid/net/wifi/WifiManager;->isScanAlwaysAvailable",
                    "isScanThrottleEnabled": "Landroid/net/wifi/WifiManager;->isScanThrottleEnabled",
                    "isStaApConcurrencySupported": "Landroid/net/wifi/WifiManager;->isStaApConcurrencySupported",
                    "isTdlsSupported": "Landroid/net/wifi/WifiManager;->isTdlsSupported",
                    "isWapiSupported": "Landroid/net/wifi/WifiManager;->isWapiSupported",
                    "isWifiStandardSupported": "Landroid/net/wifi/WifiManager;->isWifiStandardSupported",
                    "isWpa3SaeSupported": "Landroid/net/wifi/WifiManager;->isWpa3SaeSupported",
                    "isWpa3SuiteBSupported": "Landroid/net/wifi/WifiManager;->isWpa3SuiteBSupported",
                    "getMaxNumberOfNetworkSuggestionsPerApp": "Landroid/net/wifi/WifiManager;->getMaxNumberOfNetworkSuggestionsPerApp",
                    "getMaxSignalLevel": "Landroid/net/wifi/WifiManager;->getMaxSignalLevel",
                    "getNumAllowedChannels": "Landroid/net/wifi/WifiManager;->getNumAllowedChannels",
                    "getValidChannelCounts": "Landroid/net/wifi/WifiManager;->getValidChannelCounts",
                    "getNetworkSuggestions": "Landroid/net/wifi/WifiManager;->getNetworkSuggestions",
                    "getPasspointConfigurations": "Landroid/net/wifi/WifiManager;->getPasspointConfigurations"
                },
                "WifiStateMachine$3": {
                    "onReceive": "Landroid/net/wifi/WifiStateMachine$3;->onReceive"
                },
                "WifiStateMachine$ConnectedState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$ConnectedState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$ConnectedState;->exit"
                },
                "WifiStateMachine$ConnectModeState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$ConnectModeState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$ConnectModeState;->exit"
                },
                "WifiStateMachine$DefaultState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$DefaultState;->processMessage",
                    "enter": "Landroid/net/wifi/WifiStateMachine$DefaultState;->enter",
                    "exit": "Landroid/net/wifi/WifiStateMachine$DefaultState;->exit"
                },
                "WifiStateMachine$DisconnectingState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$DisconnectingState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$DisconnectingState;->exit"
                },
                "WifiStateMachine$DriverFailedState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverFailedState;->exit"
                },
                "WifiStateMachine$DriverLoadedState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverLoadedState;->exit"
                },
                "WifiStateMachine$DriverLoadingState$1": {
                    "run": "Landroid/net/wifi/WifiStateMachine$DriverLoadingState$1;->run"
                },
                "WifiStateMachine$DriverLoadingState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverLoadingState;->exit"
                },
                "WifiStateMachine$DriverStartedState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$DriverStartedState;->processMessage",
                    "enter": "Landroid/net/wifi/WifiStateMachine$DriverStartedState;->enter"
                },
                "WifiStateMachine$DriverStartingState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$DriverStartingState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverStartingState;->exit"
                },
                "WifiStateMachine$DriverStoppedState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$DriverStoppedState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverStoppedState;->exit"
                },
                "WifiStateMachine$DriverStoppingState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverStoppingState;->exit"
                },
                "WifiStateMachine$DriverUnloadedState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverUnloadedState;->exit"
                },
                "WifiStateMachine$DriverUnloadingState$1": {
                    "run": "Landroid/net/wifi/WifiStateMachine$DriverUnloadingState$1;->run"
                },
                "WifiStateMachine$DriverUnloadingState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$DriverUnloadingState;->exit"
                },
                "WifiStateMachine$InitialState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$InitialState;->processMessage",
                    "enter": "Landroid/net/wifi/WifiStateMachine$InitialState;->enter",
                    "exit": "Landroid/net/wifi/WifiStateMachine$InitialState;->exit"
                },
                "WifiStateMachine$ObtainingIpState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$ObtainingIpState;->exit"
                },
                "WifiStateMachine$ScanModeState": {
                    "exit": "Landroid/net/wifi/WifiStateMachine$ScanModeState;->exit"
                },
                "WifiStateMachine$SoftApStartedState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$SoftApStartedState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$SoftApStartedState;->exit"
                },
                "WifiStateMachine$SoftApStartingState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$SoftApStartingState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$SoftApStartingState;->exit"
                },
                "WifiStateMachine$SoftApStoppingState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$SoftApStoppingState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$SoftApStoppingState;->exit"
                },
                "WifiStateMachine$SupplicantStartedState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$SupplicantStartedState;->processMessage"
                },
                "WifiStateMachine$SupplicantStartingState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$SupplicantStartingState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$SupplicantStartingState;->exit"
                },
                "WifiStateMachine$SupplicantStoppingState": {
                    "enter": "Landroid/net/wifi/WifiStateMachine$SupplicantStoppingState;->enter",
                    "exit": "Landroid/net/wifi/WifiStateMachine$SupplicantStoppingState;->exit"
                },
                "WifiStateMachine$TetheredState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$TetheredState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$TetheredState;->exit"
                },
                "WifiStateMachine$TetheringState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$TetheringState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiStateMachine$TetheringState;->exit"
                },
                "WifiStateMachine$VerifyingLinkState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$VerifyingLinkState;->processMessage",
                    "enter": "Landroid/net/wifi/WifiStateMachine$VerifyingLinkState;->enter",
                    "exit": "Landroid/net/wifi/WifiStateMachine$VerifyingLinkState;->exit"
                },
                "WifiStateMachine$WpsRunningState": {
                    "processMessage": "Landroid/net/wifi/WifiStateMachine$WpsRunningState;->processMessage"
                },
                "WifiStateMachine": {
                    "isWifiTethered": "Landroid/net/wifi/WifiStateMachine;->isWifiTethered",
                    "startTethering": "Landroid/net/wifi/WifiStateMachine;->startTethering",
                    "handleNetworkDisconnect": "Landroid/net/wifi/WifiStateMachine;->handleNetworkDisconnect",
                    "sendNetworkStateChangeBroadcast": "Landroid/net/wifi/WifiStateMachine;->sendNetworkStateChangeBroadcast",
                    "setCountryCode": "Landroid/net/wifi/WifiStateMachine;->setCountryCode",
                    "setFrequencyBand": "Landroid/net/wifi/WifiStateMachine;->setFrequencyBand",
                    "setWifiApState": "Landroid/net/wifi/WifiStateMachine;->setWifiApState",
                    "setWifiState": "Landroid/net/wifi/WifiStateMachine;->setWifiState",
                    "stopTethering": "Landroid/net/wifi/WifiStateMachine;->stopTethering"
                },
                "WifiStateTracker": {
                    "reconnect": "Landroid/net/wifi/WifiStateTracker;->reconnect",
                    "setRadio": "Landroid/net/wifi/WifiStateTracker;->setRadio",
                    "teardown": "Landroid/net/wifi/WifiStateTracker;->teardown"
                },
                "WifiWatchdogStateMachine$ConnectedState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$ConnectedState;->exit"
                },
                "WifiWatchdogStateMachine$DefaultState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$DefaultState;->exit"
                },
                "WifiWatchdogStateMachine$NotConnectedState": {
                    "processMessage": "Landroid/net/wifi/WifiWatchdogStateMachine$NotConnectedState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$NotConnectedState;->exit"
                },
                "WifiWatchdogStateMachine$OnlineState": {
                    "processMessage": "Landroid/net/wifi/WifiWatchdogStateMachine$OnlineState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$OnlineState;->exit"
                },
                "WifiWatchdogStateMachine$OnlineWatchState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$OnlineWatchState;->exit"
                },
                "WifiWatchdogStateMachine$RssiMonitoringState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$RssiMonitoringState;->exit"
                },
                "WifiWatchdogStateMachine$VerifyingLinkState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$VerifyingLinkState;->exit"
                },
                "WifiWatchdogStateMachine$WalledGardenCheckState": {
                    "processMessage": "Landroid/net/wifi/WifiWatchdogStateMachine$WalledGardenCheckState;->processMessage",
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$WalledGardenCheckState;->exit"
                },
                "WifiWatchdogStateMachine$WatchdogDisabledState": {
                    "exit": "Landroid/net/wifi/WifiWatchdogStateMachine$WatchdogDisabledState;->exit"
                },
                "WifiWatchdogStateMachine$WatchdogEnabledState": {
                    "processMessage": "Landroid/net/wifi/WifiWatchdogStateMachine$WatchdogEnabledState;->processMessage"
                },
                "WifiWatchdogStateMachine": {
                    "makeWifiWatchdogStateMachine": "Landroid/net/wifi/WifiWatchdogStateMachine;->makeWifiWatchdogStateMachine",
                    "isWalledGardenConnection": "Landroid/net/wifi/WifiWatchdogStateMachine;->isWalledGardenConnection",
                    "putSettingsBoolean": "Landroid/net/wifi/WifiWatchdogStateMachine;->putSettingsBoolean",
                    "<init>": "Landroid/net/wifi/WifiWatchdogStateMachine;-><init>",
                    "registerForSettingsChanges": "Landroid/net/wifi/WifiWatchdogStateMachine;->registerForSettingsChanges",
                    "registerForWatchdogToggle": "Landroid/net/wifi/WifiWatchdogStateMachine;->registerForWatchdogToggle",
                    "setWalledGardenNotificationVisible": "Landroid/net/wifi/WifiWatchdogStateMachine;->setWalledGardenNotificationVisible"
                },
                "rtt": {
                    "ResponderLocation": {
                        "getMapImageUri": "Landroid/net/wifi/rtt/ResponderLocation;->getMapImageUri",
                        "getRegisteredLocationAgreementIndication": "Landroid/net/wifi/rtt/ResponderLocation;->getRegisteredLocationAgreementIndication",
                        "isLciSubelementValid": "Landroid/net/wifi/rtt/ResponderLocation;->isLciSubelementValid",
                        "isZaxisSubelementValid": "Landroid/net/wifi/rtt/ResponderLocation;->isZaxisSubelementValid",
                        "getAltitude": "Landroid/net/wifi/rtt/ResponderLocation;->getAltitude",
                        "getAltitudeUncertainty": "Landroid/net/wifi/rtt/ResponderLocation;->getAltitudeUncertainty",
                        "getFloorNumber": "Landroid/net/wifi/rtt/ResponderLocation;->getFloorNumber",
                        "getHeightAboveFloorMeters": "Landroid/net/wifi/rtt/ResponderLocation;->getHeightAboveFloorMeters",
                        "getHeightAboveFloorUncertaintyMeters": "Landroid/net/wifi/rtt/ResponderLocation;->getHeightAboveFloorUncertaintyMeters",
                        "getLatitude": "Landroid/net/wifi/rtt/ResponderLocation;->getLatitude",
                        "getLatitudeUncertainty": "Landroid/net/wifi/rtt/ResponderLocation;->getLatitudeUncertainty",
                        "getLongitude": "Landroid/net/wifi/rtt/ResponderLocation;->getLongitude",
                        "getLongitudeUncertainty": "Landroid/net/wifi/rtt/ResponderLocation;->getLongitudeUncertainty",
                        "getAltitudeType": "Landroid/net/wifi/rtt/ResponderLocation;->getAltitudeType",
                        "getDatum": "Landroid/net/wifi/rtt/ResponderLocation;->getDatum",
                        "getExpectedToMove": "Landroid/net/wifi/rtt/ResponderLocation;->getExpectedToMove",
                        "getLciVersion": "Landroid/net/wifi/rtt/ResponderLocation;->getLciVersion",
                        "getMapImageMimeType": "Landroid/net/wifi/rtt/ResponderLocation;->getMapImageMimeType",
                        "getColocatedBssids": "Landroid/net/wifi/rtt/ResponderLocation;->getColocatedBssids"
                    }
                },
                "saveConfiguration": "Landroid/net/wifi;->saveConfiguration",
                "isWifiEnabled": "Landroid/net/wifi;->isWifiEnabled",
                "getConnectionInfo": "Landroid/net/wifi;->getConnectionInfo",
                "disableNetwork": "Landroid/net/wifi;->disableNetwork",
                "updateNetwork": "Landroid/net/wifi;->updateNetwork",
                "enableNetwork": "Landroid/net/wifi;->enableNetwork",
                "getScanResults": "Landroid/net/wifi;->getScanResults",
                "setWifiEnabled": "Landroid/net/wifi;->setWifiEnabled",
                "getConfiguredNetworks": "Landroid/net/wifi;->getConfiguredNetworks",
                "disconnect": "Landroid/net/wifi;->disconnect",
                "WifiInfo": {
                    "getMacAddress": "Landroid/net/wifi/WifiInfo;->getMacAddress",
                    "getSSID": "Landroid/net/wifi/WifiInfo;->getSSID"
                }
            },
            "TelephonyNetworkSpecifier": {
                "getSubscriptionId": "Landroid/net/TelephonyNetworkSpecifier;->getSubscriptionId"
            },
            "VpnService": {
                "clearWallpaper": "Landroid/net/VpnService;->clearWallpaper",
                "prepare": "Landroid/net/VpnService;->prepare",
                "removeStickyBroadcast": "Landroid/net/VpnService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/net/VpnService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/net/VpnService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/net/VpnService;->setWallpaper"
            },
            "NetworkInfo": {
                "getExtraInfo": "Landroid/net/NetworkInfo;->getExtraInfo",
                "isAvailable": "Landroid/net/NetworkInfo;->isAvailable"
            },
            "Proxy": {
                "getDefaultHost": "Landroid/net/Proxy;->getDefaultHost",
                "getDefaultPort": "Landroid/net/Proxy;->getDefaultPort"
            }
        },
        "nfc": {
            "INfcAdapter$Stub$Proxy": {
                "getNfcAdapterExtrasInterface": "Landroid/nfc/INfcAdapter$Stub$Proxy;->getNfcAdapterExtrasInterface",
                "disableNdefPush": "Landroid/nfc/INfcAdapter$Stub$Proxy;->disableNdefPush",
                "enableNdefPush": "Landroid/nfc/INfcAdapter$Stub$Proxy;->enableNdefPush",
                "dispatch": "Landroid/nfc/INfcAdapter$Stub$Proxy;->dispatch",
                "setForegroundDispatch": "Landroid/nfc/INfcAdapter$Stub$Proxy;->setForegroundDispatch",
                "setNdefPushCallback": "Landroid/nfc/INfcAdapter$Stub$Proxy;->setNdefPushCallback"
            },
            "INfcAdapter$Stub": {
                "getNfcAdapterExtrasInterface": "Landroid/nfc/INfcAdapter$Stub;->getNfcAdapterExtrasInterface",
                "disableNdefPush": "Landroid/nfc/INfcAdapter$Stub;->disableNdefPush",
                "enableNdefPush": "Landroid/nfc/INfcAdapter$Stub;->enableNdefPush",
                "onTransact": "Landroid/nfc/INfcAdapter$Stub;->onTransact",
                "dispatch": "Landroid/nfc/INfcAdapter$Stub;->dispatch",
                "setForegroundDispatch": "Landroid/nfc/INfcAdapter$Stub;->setForegroundDispatch",
                "setNdefPushCallback": "Landroid/nfc/INfcAdapter$Stub;->setNdefPushCallback"
            },
            "INfcAdapter": {
                "getNfcAdapterExtrasInterface": "Landroid/nfc/INfcAdapter;->getNfcAdapterExtrasInterface",
                "disableNdefPush": "Landroid/nfc/INfcAdapter;->disableNdefPush",
                "enableNdefPush": "Landroid/nfc/INfcAdapter;->enableNdefPush",
                "dispatch": "Landroid/nfc/INfcAdapter;->dispatch",
                "setForegroundDispatch": "Landroid/nfc/INfcAdapter;->setForegroundDispatch",
                "setNdefPushCallback": "Landroid/nfc/INfcAdapter;->setNdefPushCallback"
            },
            "INfcAdapterExtras$Stub$Proxy": {
                "close": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->close",
                "open": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->open",
                "transceive": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->transceive",
                "getCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->getCardEmulationRoute",
                "authenticate": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->authenticate",
                "setCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras$Stub$Proxy;->setCardEmulationRoute"
            },
            "INfcAdapterExtras$Stub": {
                "close": "Landroid/nfc/INfcAdapterExtras$Stub;->close",
                "open": "Landroid/nfc/INfcAdapterExtras$Stub;->open",
                "transceive": "Landroid/nfc/INfcAdapterExtras$Stub;->transceive",
                "onTransact": "Landroid/nfc/INfcAdapterExtras$Stub;->onTransact",
                "getCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras$Stub;->getCardEmulationRoute",
                "authenticate": "Landroid/nfc/INfcAdapterExtras$Stub;->authenticate",
                "setCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras$Stub;->setCardEmulationRoute"
            },
            "INfcAdapterExtras": {
                "close": "Landroid/nfc/INfcAdapterExtras;->close",
                "open": "Landroid/nfc/INfcAdapterExtras;->open",
                "transceive": "Landroid/nfc/INfcAdapterExtras;->transceive",
                "getCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras;->getCardEmulationRoute",
                "authenticate": "Landroid/nfc/INfcAdapterExtras;->authenticate",
                "setCardEmulationRoute": "Landroid/nfc/INfcAdapterExtras;->setCardEmulationRoute"
            },
            "INfcTag$Stub$Proxy": {
                "ndefRead": "Landroid/nfc/INfcTag$Stub$Proxy;->ndefRead",
                "rediscover": "Landroid/nfc/INfcTag$Stub$Proxy;->rediscover",
                "transceive": "Landroid/nfc/INfcTag$Stub$Proxy;->transceive",
                "isNdef": "Landroid/nfc/INfcTag$Stub$Proxy;->isNdef",
                "close": "Landroid/nfc/INfcTag$Stub$Proxy;->close",
                "connect": "Landroid/nfc/INfcTag$Stub$Proxy;->connect",
                "formatNdef": "Landroid/nfc/INfcTag$Stub$Proxy;->formatNdef",
                "getTechList": "Landroid/nfc/INfcTag$Stub$Proxy;->getTechList",
                "getTimeout": "Landroid/nfc/INfcTag$Stub$Proxy;->getTimeout",
                "ndefMakeReadOnly": "Landroid/nfc/INfcTag$Stub$Proxy;->ndefMakeReadOnly",
                "ndefWrite": "Landroid/nfc/INfcTag$Stub$Proxy;->ndefWrite",
                "reconnect": "Landroid/nfc/INfcTag$Stub$Proxy;->reconnect",
                "setTimeout": "Landroid/nfc/INfcTag$Stub$Proxy;->setTimeout",
                "resetTimeouts": "Landroid/nfc/INfcTag$Stub$Proxy;->resetTimeouts"
            },
            "INfcTag$Stub": {
                "ndefRead": "Landroid/nfc/INfcTag$Stub;->ndefRead",
                "rediscover": "Landroid/nfc/INfcTag$Stub;->rediscover",
                "transceive": "Landroid/nfc/INfcTag$Stub;->transceive",
                "isNdef": "Landroid/nfc/INfcTag$Stub;->isNdef",
                "onTransact": "Landroid/nfc/INfcTag$Stub;->onTransact",
                "close": "Landroid/nfc/INfcTag$Stub;->close",
                "connect": "Landroid/nfc/INfcTag$Stub;->connect",
                "formatNdef": "Landroid/nfc/INfcTag$Stub;->formatNdef",
                "getTechList": "Landroid/nfc/INfcTag$Stub;->getTechList",
                "getTimeout": "Landroid/nfc/INfcTag$Stub;->getTimeout",
                "ndefMakeReadOnly": "Landroid/nfc/INfcTag$Stub;->ndefMakeReadOnly",
                "ndefWrite": "Landroid/nfc/INfcTag$Stub;->ndefWrite",
                "reconnect": "Landroid/nfc/INfcTag$Stub;->reconnect",
                "setTimeout": "Landroid/nfc/INfcTag$Stub;->setTimeout",
                "resetTimeouts": "Landroid/nfc/INfcTag$Stub;->resetTimeouts"
            },
            "INfcTag": {
                "ndefRead": "Landroid/nfc/INfcTag;->ndefRead",
                "rediscover": "Landroid/nfc/INfcTag;->rediscover",
                "transceive": "Landroid/nfc/INfcTag;->transceive",
                "isNdef": "Landroid/nfc/INfcTag;->isNdef",
                "close": "Landroid/nfc/INfcTag;->close",
                "connect": "Landroid/nfc/INfcTag;->connect",
                "formatNdef": "Landroid/nfc/INfcTag;->formatNdef",
                "getTechList": "Landroid/nfc/INfcTag;->getTechList",
                "getTimeout": "Landroid/nfc/INfcTag;->getTimeout",
                "ndefMakeReadOnly": "Landroid/nfc/INfcTag;->ndefMakeReadOnly",
                "ndefWrite": "Landroid/nfc/INfcTag;->ndefWrite",
                "reconnect": "Landroid/nfc/INfcTag;->reconnect",
                "setTimeout": "Landroid/nfc/INfcTag;->setTimeout",
                "resetTimeouts": "Landroid/nfc/INfcTag;->resetTimeouts"
            },
            "NdefRecord": {
                "getByteLength": "Landroid/nfc/NdefRecord;->getByteLength"
            },
            "NfcActivityManager": {
                "requestNfcServiceCallback": "Landroid/nfc/NfcActivityManager;->requestNfcServiceCallback",
                "setNdefPushContentUri": "Landroid/nfc/NfcActivityManager;->setNdefPushContentUri",
                "setNdefPushContentUriCallback": "Landroid/nfc/NfcActivityManager;->setNdefPushContentUriCallback",
                "setNdefPushMessage": "Landroid/nfc/NfcActivityManager;->setNdefPushMessage",
                "setNdefPushMessageCallback": "Landroid/nfc/NfcActivityManager;->setNdefPushMessageCallback",
                "setOnNdefPushCompleteCallback": "Landroid/nfc/NfcActivityManager;->setOnNdefPushCompleteCallback"
            },
            "NfcAdapter$1": {
                "onPaused": "Landroid/nfc/NfcAdapter$1;->onPaused"
            },
            "NfcAdapter": {
                "getNfcAdapterExtrasInterface": "Landroid/nfc/NfcAdapter;->getNfcAdapterExtrasInterface",
                "disableNdefPush": "Landroid/nfc/NfcAdapter;->disableNdefPush",
                "enableNdefPush": "Landroid/nfc/NfcAdapter;->enableNdefPush",
                "disableForegroundDispatch": "Landroid/nfc/NfcAdapter;->disableForegroundDispatch",
                "disableForegroundDispatchInternal": "Landroid/nfc/NfcAdapter;->disableForegroundDispatchInternal",
                "disableForegroundNdefPush": "Landroid/nfc/NfcAdapter;->disableForegroundNdefPush",
                "dispatch": "Landroid/nfc/NfcAdapter;->dispatch",
                "enableForegroundDispatch": "Landroid/nfc/NfcAdapter;->enableForegroundDispatch",
                "enableForegroundNdefPush": "Landroid/nfc/NfcAdapter;->enableForegroundNdefPush",
                "setBeamPushUris": "Landroid/nfc/NfcAdapter;->setBeamPushUris",
                "setBeamPushUrisCallback": "Landroid/nfc/NfcAdapter;->setBeamPushUrisCallback",
                "setNdefPushMessage": "Landroid/nfc/NfcAdapter;->setNdefPushMessage",
                "setNdefPushMessageCallback": "Landroid/nfc/NfcAdapter;->setNdefPushMessageCallback",
                "setOnNdefPushCompleteCallback": "Landroid/nfc/NfcAdapter;->setOnNdefPushCompleteCallback",
                "disable": "Landroid/nfc/NfcAdapter;->disable",
                "enable": "Landroid/nfc/NfcAdapter;->enable",
                "getDefaultAdapter": "Landroid/nfc/NfcAdapter;->getDefaultAdapter",
                "getService": "Landroid/nfc/NfcAdapter;->getService",
                "getSingleton": "Landroid/nfc/NfcAdapter;->getSingleton",
                "isEnabled": "Landroid/nfc/NfcAdapter;->isEnabled"
            },
            "Tag": {
                "rediscover": "Landroid/nfc/Tag;->rediscover"
            },
            "tech": {
                "BasicTagTechnology": {
                    "transceive": "Landroid/nfc/tech/BasicTagTechnology;->transceive",
                    "close": "Landroid/nfc/tech/BasicTagTechnology;->close",
                    "connect": "Landroid/nfc/tech/BasicTagTechnology;->connect",
                    "reconnect": "Landroid/nfc/tech/BasicTagTechnology;->reconnect"
                },
                "IsoDep": {
                    "transceive": "Landroid/nfc/tech/IsoDep;->transceive",
                    "getTimeout": "Landroid/nfc/tech/IsoDep;->getTimeout",
                    "close": "Landroid/nfc/tech/IsoDep;->close",
                    "connect": "Landroid/nfc/tech/IsoDep;->connect",
                    "reconnect": "Landroid/nfc/tech/IsoDep;->reconnect",
                    "setTimeout": "Landroid/nfc/tech/IsoDep;->setTimeout",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/IsoDep;->getMaxTransceiveLength"
                },
                "MifareClassic": {
                    "authenticate": "Landroid/nfc/tech/MifareClassic;->authenticate",
                    "authenticateSectorWithKeyA": "Landroid/nfc/tech/MifareClassic;->authenticateSectorWithKeyA",
                    "authenticateSectorWithKeyB": "Landroid/nfc/tech/MifareClassic;->authenticateSectorWithKeyB",
                    "readBlock": "Landroid/nfc/tech/MifareClassic;->readBlock",
                    "transceive": "Landroid/nfc/tech/MifareClassic;->transceive",
                    "getTimeout": "Landroid/nfc/tech/MifareClassic;->getTimeout",
                    "close": "Landroid/nfc/tech/MifareClassic;->close",
                    "connect": "Landroid/nfc/tech/MifareClassic;->connect",
                    "decrement": "Landroid/nfc/tech/MifareClassic;->decrement",
                    "increment": "Landroid/nfc/tech/MifareClassic;->increment",
                    "reconnect": "Landroid/nfc/tech/MifareClassic;->reconnect",
                    "restore": "Landroid/nfc/tech/MifareClassic;->restore",
                    "setTimeout": "Landroid/nfc/tech/MifareClassic;->setTimeout",
                    "transfer": "Landroid/nfc/tech/MifareClassic;->transfer",
                    "writeBlock": "Landroid/nfc/tech/MifareClassic;->writeBlock",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/MifareClassic;->getMaxTransceiveLength"
                },
                "MifareUltralight": {
                    "readPages": "Landroid/nfc/tech/MifareUltralight;->readPages",
                    "transceive": "Landroid/nfc/tech/MifareUltralight;->transceive",
                    "getTimeout": "Landroid/nfc/tech/MifareUltralight;->getTimeout",
                    "close": "Landroid/nfc/tech/MifareUltralight;->close",
                    "connect": "Landroid/nfc/tech/MifareUltralight;->connect",
                    "reconnect": "Landroid/nfc/tech/MifareUltralight;->reconnect",
                    "setTimeout": "Landroid/nfc/tech/MifareUltralight;->setTimeout",
                    "writePage": "Landroid/nfc/tech/MifareUltralight;->writePage",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/MifareUltralight;->getMaxTransceiveLength"
                },
                "Ndef": {
                    "getNdefMessage": "Landroid/nfc/tech/Ndef;->getNdefMessage",
                    "makeReadOnly": "Landroid/nfc/tech/Ndef;->makeReadOnly",
                    "transceive": "Landroid/nfc/tech/Ndef;->transceive",
                    "close": "Landroid/nfc/tech/Ndef;->close",
                    "connect": "Landroid/nfc/tech/Ndef;->connect",
                    "reconnect": "Landroid/nfc/tech/Ndef;->reconnect",
                    "writeNdefMessage": "Landroid/nfc/tech/Ndef;->writeNdefMessage",
                    "canMakeReadOnly": "Landroid/nfc/tech/Ndef;->canMakeReadOnly"
                },
                "NdefFormatable": {
                    "transceive": "Landroid/nfc/tech/NdefFormatable;->transceive",
                    "close": "Landroid/nfc/tech/NdefFormatable;->close",
                    "connect": "Landroid/nfc/tech/NdefFormatable;->connect",
                    "format": "Landroid/nfc/tech/NdefFormatable;->format",
                    "formatReadOnly": "Landroid/nfc/tech/NdefFormatable;->formatReadOnly",
                    "reconnect": "Landroid/nfc/tech/NdefFormatable;->reconnect"
                },
                "NfcA": {
                    "transceive": "Landroid/nfc/tech/NfcA;->transceive",
                    "getTimeout": "Landroid/nfc/tech/NfcA;->getTimeout",
                    "close": "Landroid/nfc/tech/NfcA;->close",
                    "connect": "Landroid/nfc/tech/NfcA;->connect",
                    "reconnect": "Landroid/nfc/tech/NfcA;->reconnect",
                    "setTimeout": "Landroid/nfc/tech/NfcA;->setTimeout",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/NfcA;->getMaxTransceiveLength"
                },
                "NfcBarcode": {
                    "getTag": "Landroid/nfc/tech/NfcBarcode;->getTag"
                },
                "NfcB": {
                    "transceive": "Landroid/nfc/tech/NfcB;->transceive",
                    "close": "Landroid/nfc/tech/NfcB;->close",
                    "connect": "Landroid/nfc/tech/NfcB;->connect",
                    "reconnect": "Landroid/nfc/tech/NfcB;->reconnect",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/NfcB;->getMaxTransceiveLength"
                },
                "NfcF": {
                    "transceive": "Landroid/nfc/tech/NfcF;->transceive",
                    "getTimeout": "Landroid/nfc/tech/NfcF;->getTimeout",
                    "close": "Landroid/nfc/tech/NfcF;->close",
                    "connect": "Landroid/nfc/tech/NfcF;->connect",
                    "reconnect": "Landroid/nfc/tech/NfcF;->reconnect",
                    "setTimeout": "Landroid/nfc/tech/NfcF;->setTimeout",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/NfcF;->getMaxTransceiveLength"
                },
                "NfcV": {
                    "transceive": "Landroid/nfc/tech/NfcV;->transceive",
                    "close": "Landroid/nfc/tech/NfcV;->close",
                    "connect": "Landroid/nfc/tech/NfcV;->connect",
                    "reconnect": "Landroid/nfc/tech/NfcV;->reconnect",
                    "getMaxTransceiveLength": "Landroid/nfc/tech/NfcV;->getMaxTransceiveLength"
                }
            },
            "NfcManager": {
                "getDefaultAdapter": "Landroid/nfc/NfcManager;->getDefaultAdapter",
                "<init>": "Landroid/nfc/NfcManager;-><init>"
            }
        },
        "opengl": {
            "GLLogWrapper": {
                "glColorPointer": "Landroid/opengl/GLLogWrapper;->glColorPointer"
            }
        },
        "os": {
            "FileUtils": {
                "stringToFile": "Landroid/os/FileUtils;->stringToFile"
            },
            "Handler": {
                "sendEmptyMessageDelayed": "Landroid/os/Handler;->sendEmptyMessageDelayed",
                "sendEmptyMessage": "Landroid/os/Handler;->sendEmptyMessage",
                "sendMessage": "Landroid/os/Handler;->sendMessage",
                "sendMessageAtTime": "Landroid/os/Handler;->sendMessageAtTime",
                "obtainMessage": "Landroid/os/Handler;->obtainMessage"
            },
            "IHardwareService$Stub$Proxy": {
                "setFlashlightEnabled": "Landroid/os/IHardwareService$Stub$Proxy;->setFlashlightEnabled"
            },
            "IHardwareService$Stub": {
                "onTransact": "Landroid/os/IHardwareService$Stub;->onTransact",
                "setFlashlightEnabled": "Landroid/os/IHardwareService$Stub;->setFlashlightEnabled"
            },
            "IHardwareService": {
                "setFlashlightEnabled": "Landroid/os/IHardwareService;->setFlashlightEnabled"
            },
            "INetworkManagementService$Stub$Proxy": {
                "setInterfaceAlert": "Landroid/os/INetworkManagementService$Stub$Proxy;->setInterfaceAlert"
            },
            "IPowerManager$Stub$Proxy": {
                "acquireWakeLock": "Landroid/os/IPowerManager$Stub$Proxy;->acquireWakeLock",
                "releaseWakeLock": "Landroid/os/IPowerManager$Stub$Proxy;->releaseWakeLock",
                "setAttentionLight": "Landroid/os/IPowerManager$Stub$Proxy;->setAttentionLight",
                "setStayOnSetting": "Landroid/os/IPowerManager$Stub$Proxy;->setStayOnSetting"
            },
            "IPowerManager$Stub": {
                "onTransact": "Landroid/os/IPowerManager$Stub;->onTransact",
                "acquireWakeLock": "Landroid/os/IPowerManager$Stub;->acquireWakeLock",
                "releaseWakeLock": "Landroid/os/IPowerManager$Stub;->releaseWakeLock",
                "setStayOnSetting": "Landroid/os/IPowerManager$Stub;->setStayOnSetting"
            },
            "IPowerManager": {
                "acquireWakeLock": "Landroid/os/IPowerManager;->acquireWakeLock",
                "releaseWakeLock": "Landroid/os/IPowerManager;->releaseWakeLock",
                "setStayOnSetting": "Landroid/os/IPowerManager;->setStayOnSetting",
                "isScreenOn": "Landroid/os/IPowerManager;->isScreenOn",
                "getSupportedWakeLockFlags": "Landroid/os/IPowerManager;->getSupportedWakeLockFlags",
                "getScreenOnTime": "Landroid/os/IPowerManager;->getScreenOnTime"
            },
            "IVibratorService$Stub$Proxy": {
                "cancelVibrate": "Landroid/os/IVibratorService$Stub$Proxy;->cancelVibrate",
                "vibrate": "Landroid/os/IVibratorService$Stub$Proxy;->vibrate",
                "vibratePattern": "Landroid/os/IVibratorService$Stub$Proxy;->vibratePattern"
            },
            "IVibratorService$Stub": {
                "onTransact": "Landroid/os/IVibratorService$Stub;->onTransact",
                "cancelVibrate": "Landroid/os/IVibratorService$Stub;->cancelVibrate",
                "vibrate": "Landroid/os/IVibratorService$Stub;->vibrate",
                "vibratePattern": "Landroid/os/IVibratorService$Stub;->vibratePattern"
            },
            "IVibratorService": {
                "cancelVibrate": "Landroid/os/IVibratorService;->cancelVibrate",
                "vibrate": "Landroid/os/IVibratorService;->vibrate",
                "vibratePattern": "Landroid/os/IVibratorService;->vibratePattern"
            },
            "MessageQueue": {
                "enqueueMessage": "Landroid/os/MessageQueue;->enqueueMessage"
            },
            "Parcel": {
                "createTypedArrayList": "Landroid/os/Parcel;->createTypedArrayList"
            },
            "PowerManager$WakeLock$1": {
                "run": "Landroid/os/PowerManager$WakeLock$1;->run"
            },
            "PowerManager$WakeLock": {
                "acquire": "Landroid/os/PowerManager$WakeLock;->acquire",
                "acquireLocked": "Landroid/os/PowerManager$WakeLock;->acquireLocked",
                "finalize": "Landroid/os/PowerManager$WakeLock;->finalize",
                "release": "Landroid/os/PowerManager$WakeLock;->release"
            },
            "PowerManager": {
                "reboot": "Landroid/os/PowerManager;->reboot",
                "isDeviceIdleMode": "Landroid/os/PowerManager;->isDeviceIdleMode",
                "isIgnoringBatteryOptimizations": "Landroid/os/PowerManager;->isIgnoringBatteryOptimizations",
                "isInteractive": "Landroid/os/PowerManager;->isInteractive",
                "isPowerSaveMode": "Landroid/os/PowerManager;->isPowerSaveMode",
                "isRebootingUserspaceSupported": "Landroid/os/PowerManager;->isRebootingUserspaceSupported",
                "isScreenOn": "Landroid/os/PowerManager;->isScreenOn",
                "isSustainedPerformanceModeSupported": "Landroid/os/PowerManager;->isSustainedPerformanceModeSupported",
                "isWakeLockLevelSupported": "Landroid/os/PowerManager;->isWakeLockLevelSupported",
                "getThermalHeadroom": "Landroid/os/PowerManager;->getThermalHeadroom",
                "getCurrentThermalStatus": "Landroid/os/PowerManager;->getCurrentThermalStatus",
                "getLocationPowerSaveMode": "Landroid/os/PowerManager;->getLocationPowerSaveMode",
                "getSupportedWakeLockFlags": "Landroid/os/PowerManager;->getSupportedWakeLockFlags"
            },
            "storage": {
                "IMountService$Stub$Proxy": {
                    "formatVolume": "Landroid/os/storage/IMountService$Stub$Proxy;->formatVolume",
                    "getStorageUsers": "Landroid/os/storage/IMountService$Stub$Proxy;->getStorageUsers",
                    "mountVolume": "Landroid/os/storage/IMountService$Stub$Proxy;->mountVolume",
                    "finishMediaUpdate": "Landroid/os/storage/IMountService$Stub$Proxy;->finishMediaUpdate",
                    "setUsbMassStorageEnabled": "Landroid/os/storage/IMountService$Stub$Proxy;->setUsbMassStorageEnabled",
                    "shutdown": "Landroid/os/storage/IMountService$Stub$Proxy;->shutdown",
                    "unmountVolume": "Landroid/os/storage/IMountService$Stub$Proxy;->unmountVolume"
                },
                "IMountService$Stub": {
                    "onTransact": "Landroid/os/storage/IMountService$Stub;->onTransact",
                    "formatVolume": "Landroid/os/storage/IMountService$Stub;->formatVolume",
                    "getStorageUsers": "Landroid/os/storage/IMountService$Stub;->getStorageUsers",
                    "mountVolume": "Landroid/os/storage/IMountService$Stub;->mountVolume",
                    "finishMediaUpdate": "Landroid/os/storage/IMountService$Stub;->finishMediaUpdate",
                    "setUsbMassStorageEnabled": "Landroid/os/storage/IMountService$Stub;->setUsbMassStorageEnabled",
                    "shutdown": "Landroid/os/storage/IMountService$Stub;->shutdown",
                    "unmountVolume": "Landroid/os/storage/IMountService$Stub;->unmountVolume"
                },
                "IMountService": {
                    "formatVolume": "Landroid/os/storage/IMountService;->formatVolume",
                    "getStorageUsers": "Landroid/os/storage/IMountService;->getStorageUsers",
                    "mountVolume": "Landroid/os/storage/IMountService;->mountVolume",
                    "finishMediaUpdate": "Landroid/os/storage/IMountService;->finishMediaUpdate",
                    "setUsbMassStorageEnabled": "Landroid/os/storage/IMountService;->setUsbMassStorageEnabled",
                    "shutdown": "Landroid/os/storage/IMountService;->shutdown",
                    "unmountVolume": "Landroid/os/storage/IMountService;->unmountVolume"
                },
                "IObbActionListener$Stub$Proxy": {
                    "getInterfaceDescriptor": "Landroid/os/storage/IObbActionListener$Stub$Proxy;->getInterfaceDescriptor"
                },
                "StorageManager": {
                    "disableUsbMassStorage": "Landroid/os/storage/StorageManager;->disableUsbMassStorage",
                    "enableUsbMassStorage": "Landroid/os/storage/StorageManager;->enableUsbMassStorage",
                    "getPrimaryStorageVolume": "Landroid/os/storage/StorageManager;->getPrimaryStorageVolume",
                    "getStorageVolume": "Landroid/os/storage/StorageManager;->getStorageVolume",
                    "getVolumeList": "Landroid/os/storage/StorageManager;->getVolumeList",
                    "isAllocationSupported": "Landroid/os/storage/StorageManager;->isAllocationSupported",
                    "isCacheBehaviorGroup": "Landroid/os/storage/StorageManager;->isCacheBehaviorGroup",
                    "isCacheBehaviorTombstone": "Landroid/os/storage/StorageManager;->isCacheBehaviorTombstone",
                    "isCheckpointSupported": "Landroid/os/storage/StorageManager;->isCheckpointSupported",
                    "isEncrypted": "Landroid/os/storage/StorageManager;->isEncrypted",
                    "isObbMounted": "Landroid/os/storage/StorageManager;->isObbMounted",
                    "isUsbMassStorageConnected": "Landroid/os/storage/StorageManager;->isUsbMassStorageConnected",
                    "isUsbMassStorageEnabled": "Landroid/os/storage/StorageManager;->isUsbMassStorageEnabled",
                    "getMountedObbPath": "Landroid/os/storage/StorageManager;->getMountedObbPath",
                    "getVolumeState": "Landroid/os/storage/StorageManager;->getVolumeState",
                    "getVolumePaths": "Landroid/os/storage/StorageManager;->getVolumePaths",
                    "getRecentStorageVolumes": "Landroid/os/storage/StorageManager;->getRecentStorageVolumes",
                    "getStorageVolumes": "Landroid/os/storage/StorageManager;->getStorageVolumes",
                    "getUuidForPath": "Landroid/os/storage/StorageManager;->getUuidForPath",
                    "getAllocatableBytes": "Landroid/os/storage/StorageManager;->getAllocatableBytes",
                    "getCacheQuotaBytes": "Landroid/os/storage/StorageManager;->getCacheQuotaBytes",
                    "getCacheSizeBytes": "Landroid/os/storage/StorageManager;->getCacheSizeBytes"
                }
            },
            "SystemVibrator": {
                "cancel": "Landroid/os/SystemVibrator;->cancel",
                "vibrate": "Landroid/os/SystemVibrator;->vibrate"
            },
            "Vibrator": {
                "cancel": "Landroid/os/Vibrator;->cancel",
                "vibrate": "Landroid/os/Vibrator;->vibrate"
            },
            "BatteryManager": {
                "isCharging": "Landroid/os/BatteryManager;->isCharging",
                "getIntProperty": "Landroid/os/BatteryManager;->getIntProperty",
                "getLongProperty": "Landroid/os/BatteryManager;->getLongProperty"
            },
            "LocalPowerManager": {
                "isScreenOn": "Landroid/os/LocalPowerManager;->isScreenOn"
            },
            "UserManager": {
                "getApplicationRestrictions": "Landroid/os/UserManager;->getApplicationRestrictions",
                "getUserRestrictions": "Landroid/os/UserManager;->getUserRestrictions",
                "getUserForSerialNumber": "Landroid/os/UserManager;->getUserForSerialNumber",
                "isDemoUser": "Landroid/os/UserManager;->isDemoUser",
                "isManagedProfile": "Landroid/os/UserManager;->isManagedProfile",
                "isQuietModeEnabled": "Landroid/os/UserManager;->isQuietModeEnabled",
                "isSystemUser": "Landroid/os/UserManager;->isSystemUser",
                "isUserAGoat": "Landroid/os/UserManager;->isUserAGoat",
                "isUserRunning": "Landroid/os/UserManager;->isUserRunning",
                "isUserRunningOrStopping": "Landroid/os/UserManager;->isUserRunningOrStopping",
                "isUserUnlocked": "Landroid/os/UserManager;->isUserUnlocked",
                "getUserCount": "Landroid/os/UserManager;->getUserCount",
                "getUserName": "Landroid/os/UserManager;->getUserName",
                "getUserProfiles": "Landroid/os/UserManager;->getUserProfiles",
                "getSerialNumberForUser": "Landroid/os/UserManager;->getSerialNumberForUser",
                "getUserCreationTime": "Landroid/os/UserManager;->getUserCreationTime"
            },
            "DropBoxManager": {
                "getNextEntry": "Landroid/os/DropBoxManager;->getNextEntry"
            },
            "HandlerThread": {
                "isAlive": "Landroid/os/HandlerThread;->isAlive"
            },
            "Bundle": {
                "getClassLoader": "Landroid/os/Bundle;->getClassLoader",
                "get": "Landroid/os/Bundle;->get",
                "getBoolean": "Landroid/os/Bundle;->getBoolean",
                "getBooleanArray": "Landroid/os/Bundle;->getBooleanArray",
                "getBundle": "Landroid/os/Bundle;->getBundle",
                "getByte": "Landroid/os/Bundle;->getByte",
                "getByteArray": "Landroid/os/Bundle;->getByteArray",
                "getChar": "Landroid/os/Bundle;->getChar",
                "getCharArray": "Landroid/os/Bundle;->getCharArray",
                "getCharSequence": "Landroid/os/Bundle;->getCharSequence",
                "getCharSequenceArray": "Landroid/os/Bundle;->getCharSequenceArray",
                "getCharSequenceArrayList": "Landroid/os/Bundle;->getCharSequenceArrayList",
                "getDouble": "Landroid/os/Bundle;->getDouble",
                "getDoubleArray": "Landroid/os/Bundle;->getDoubleArray",
                "getFloat": "Landroid/os/Bundle;->getFloat",
                "getFloatArray": "Landroid/os/Bundle;->getFloatArray",
                "getInt": "Landroid/os/Bundle;->getInt",
                "getIntArray": "Landroid/os/Bundle;->getIntArray",
                "getIntegerArrayList": "Landroid/os/Bundle;->getIntegerArrayList",
                "getLong": "Landroid/os/Bundle;->getLong",
                "getLongArray": "Landroid/os/Bundle;->getLongArray",
                "getParcelable": "Landroid/os/Bundle;->getParcelable",
                "getParcelableArray": "Landroid/os/Bundle;->getParcelableArray",
                "getParcelableArrayList": "Landroid/os/Bundle;->getParcelableArrayList",
                "getSerializable": "Landroid/os/Bundle;->getSerializable",
                "getShort": "Landroid/os/Bundle;->getShort",
                "getShortArray": "Landroid/os/Bundle;->getShortArray",
                "getSparseParcelableArray": "Landroid/os/Bundle;->getSparseParcelableArray",
                "getString": "Landroid/os/Bundle;->getString",
                "getStringArrayList": "Landroid/os/Bundle;->getStringArrayList",
                "putBinder": "Landroid/os/Bundle;->putBinder",
                "putBoolean": "Landroid/os/Bundle;->putBoolean",
                "putBooleanArray": "Landroid/os/Bundle;->putBooleanArray",
                "putBundle": "Landroid/os/Bundle;->putBundle",
                "putByte": "Landroid/os/Bundle;->putByte",
                "putByteArray": "Landroid/os/Bundle;->putByteArray",
                "putChar": "Landroid/os/Bundle;->putChar",
                "putCharArray": "Landroid/os/Bundle;->putCharArray",
                "putCharSequence": "Landroid/os/Bundle;->putCharSequence",
                "putCharSequenceArray": "Landroid/os/Bundle;->putCharSequenceArray",
                "putCharSequenceArrayList": "Landroid/os/Bundle;->putCharSequenceArrayList",
                "putDouble": "Landroid/os/Bundle;->putDouble",
                "putDoubleArray": "Landroid/os/Bundle;->putDoubleArray",
                "putFloat": "Landroid/os/Bundle;->putFloat",
                "putFloatArray": "Landroid/os/Bundle;->putFloatArray",
                "putInt": "Landroid/os/Bundle;->putInt",
                "putIntArray": "Landroid/os/Bundle;->putIntArray",
                "putIntegerArrayList": "Landroid/os/Bundle;->putIntegerArrayList",
                "putLong": "Landroid/os/Bundle;->putLong",
                "putLongArray": "Landroid/os/Bundle;->putLongArray",
                "putParcelable": "Landroid/os/Bundle;->putParcelable",
                "putParcelableArray": "Landroid/os/Bundle;->putParcelableArray",
                "putParcelableArrayList": "Landroid/os/Bundle;->putParcelableArrayList",
                "putSerializable": "Landroid/os/Bundle;->putSerializable",
                "putShort": "Landroid/os/Bundle;->putShort",
                "putShortArray": "Landroid/os/Bundle;->putShortArray",
                "putSparseParcelableArray": "Landroid/os/Bundle;->putSparseParcelableArray",
                "putString": "Landroid/os/Bundle;->putString",
                "putStringArray": "Landroid/os/Bundle;->putStringArray",
                "putStringArrayList": "Landroid/os/Bundle;->putStringArrayList",
                "putAll": "Landroid/os/Bundle;->putAll"
            }
        },
        "preference": {
            "Preference": {
                "getSummary": "Landroid/preference/Preference;->getSummary"
            },
            "VolumePreference$SeekBarVolumizer": {
                "changeVolumeBy": "Landroid/preference/VolumePreference$SeekBarVolumizer;->changeVolumeBy",
                "<init>": "Landroid/preference/VolumePreference$SeekBarVolumizer;-><init>",
                "initSeekBar": "Landroid/preference/VolumePreference$SeekBarVolumizer;->initSeekBar",
                "muteVolume": "Landroid/preference/VolumePreference$SeekBarVolumizer;->muteVolume",
                "onStopTrackingTouch": "Landroid/preference/VolumePreference$SeekBarVolumizer;->onStopTrackingTouch",
                "startSample": "Landroid/preference/VolumePreference$SeekBarVolumizer;->startSample",
                "stop": "Landroid/preference/VolumePreference$SeekBarVolumizer;->stop",
                "stopSample": "Landroid/preference/VolumePreference$SeekBarVolumizer;->stopSample"
            },
            "VolumePreference": {
                "onKey": "Landroid/preference/VolumePreference;->onKey",
                "cleanup": "Landroid/preference/VolumePreference;->cleanup",
                "onActivityStop": "Landroid/preference/VolumePreference;->onActivityStop",
                "onBindDialogView": "Landroid/preference/VolumePreference;->onBindDialogView",
                "onDialogClosed": "Landroid/preference/VolumePreference;->onDialogClosed",
                "onSampleStarting": "Landroid/preference/VolumePreference;->onSampleStarting"
            },
            "PreferenceActivity": {
                "clearWallpaper": "Landroid/preference/PreferenceActivity;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/preference/PreferenceActivity;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/preference/PreferenceActivity;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/preference/PreferenceActivity;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/preference/PreferenceActivity;->setWallpaper"
            }
        },
        "provider": {
            "Browser": {
                "getAllBookmarks": "Landroid/provider/Browser;->getAllBookmarks",
                "getAllVisitedUrls": "Landroid/provider/Browser;->getAllVisitedUrls",
                "getVisitedLike": "Landroid/provider/Browser;->getVisitedLike",
                "canClearHistory": "Landroid/provider/Browser;->canClearHistory",
                "getVisitedHistory": "Landroid/provider/Browser;->getVisitedHistory",
                "addSearchUrl": "Landroid/provider/Browser;->addSearchUrl",
                "clearHistory": "Landroid/provider/Browser;->clearHistory",
                "clearSearches": "Landroid/provider/Browser;->clearSearches",
                "deleteFromHistory": "Landroid/provider/Browser;->deleteFromHistory",
                "deleteHistoryTimeFrame": "Landroid/provider/Browser;->deleteHistoryTimeFrame",
                "deleteHistoryWhere": "Landroid/provider/Browser;->deleteHistoryWhere",
                "truncateHistory": "Landroid/provider/Browser;->truncateHistory",
                "updateVisitedHistory": "Landroid/provider/Browser;->updateVisitedHistory",
                "requestAllIcons": "Landroid/provider/Browser;->requestAllIcons"
            },
            "BrowserContract$Bookmarks": {
                "buildFolderUri": "Landroid/provider/BrowserContract$Bookmarks;->buildFolderUri"
            },
            "BrowserContract$Settings": {
                "isSyncEnabled": "Landroid/provider/BrowserContract$Settings;->isSyncEnabled",
                "setSyncEnabled": "Landroid/provider/BrowserContract$Settings;->setSyncEnabled"
            },
            "BrowserContract$SyncState": {
                "newSetOperation": "Landroid/provider/BrowserContract$SyncState;->newSetOperation",
                "getWithUri": "Landroid/provider/BrowserContract$SyncState;->getWithUri",
                "get": "Landroid/provider/BrowserContract$SyncState;->get",
                "set": "Landroid/provider/BrowserContract$SyncState;->set"
            },
            "CalendarContract$Attendees": {
                "query": "Landroid/provider/CalendarContract$Attendees;->query"
            },
            "CalendarContract$CalendarAlerts": {
                "insert": "Landroid/provider/CalendarContract$CalendarAlerts;->insert",
                "alarmExists": "Landroid/provider/CalendarContract$CalendarAlerts;->alarmExists",
                "findNextAlarmTime": "Landroid/provider/CalendarContract$CalendarAlerts;->findNextAlarmTime",
                "rescheduleMissedAlarms": "Landroid/provider/CalendarContract$CalendarAlerts;->rescheduleMissedAlarms"
            },
            "CalendarContract$CalendarEntity$EntityIteratorImpl": {
                "next": "Landroid/provider/CalendarContract$CalendarEntity$EntityIteratorImpl;->next"
            },
            "CalendarContract$EventDays": {
                "query": "Landroid/provider/CalendarContract$EventDays;->query"
            },
            "CalendarContract$EventsEntity$EntityIteratorImpl": {
                "getEntityAndIncrementCursor": "Landroid/provider/CalendarContract$EventsEntity$EntityIteratorImpl;->getEntityAndIncrementCursor",
                "next": "Landroid/provider/CalendarContract$EventsEntity$EntityIteratorImpl;->next"
            },
            "CalendarContract$Instances": {
                "query": "Landroid/provider/CalendarContract$Instances;->query"
            },
            "CalendarContract$Reminders": {
                "query": "Landroid/provider/CalendarContract$Reminders;->query"
            },
            "CallLog$Calls": {
                "addCall": "Landroid/provider/CallLog$Calls;->addCall",
                "getLastOutgoingCall": "Landroid/provider/CallLog$Calls;->getLastOutgoingCall",
                "removeExpiredEntries": "Landroid/provider/CallLog$Calls;->removeExpiredEntries"
            },
            "Contacts$ContactMethods": {
                "addPostalLocation": "Landroid/provider/Contacts$ContactMethods;->addPostalLocation"
            },
            "Contacts$People": {
                "queryGroups": "Landroid/provider/Contacts$People;->queryGroups",
                "addToGroup": "Landroid/provider/Contacts$People;->addToGroup",
                "addToMyContactsGroup": "Landroid/provider/Contacts$People;->addToMyContactsGroup",
                "createPersonInMyContactsGroup": "Landroid/provider/Contacts$People;->createPersonInMyContactsGroup",
                "tryGetMyContactsGroupId": "Landroid/provider/Contacts$People;->tryGetMyContactsGroupId",
                "markAsContacted": "Landroid/provider/Contacts$People;->markAsContacted"
            },
            "Contacts$Settings": {
                "getSetting": "Landroid/provider/Contacts$Settings;->getSetting",
                "setSetting": "Landroid/provider/Contacts$Settings;->setSetting"
            },
            "ContactsContract$Contacts$AggregationSuggestions$Builder": {
                "build": "Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;->build"
            },
            "ContactsContract$Contacts": {
                "getLookupUri": "Landroid/provider/ContactsContract$Contacts;->getLookupUri",
                "markAsContacted": "Landroid/provider/ContactsContract$Contacts;->markAsContacted"
            },
            "ContactsContract$Data": {
                "getContactLookupUri": "Landroid/provider/ContactsContract$Data;->getContactLookupUri"
            },
            "ContactsContract$Directory": {
                "notifyDirectoryChange": "Landroid/provider/ContactsContract$Directory;->notifyDirectoryChange"
            },
            "ContactsContract$Groups$EntityIteratorImpl": {
                "next": "Landroid/provider/ContactsContract$Groups$EntityIteratorImpl;->next"
            },
            "ContactsContract$ProfileSyncState": {
                "newSetOperation": "Landroid/provider/ContactsContract$ProfileSyncState;->newSetOperation",
                "getWithUri": "Landroid/provider/ContactsContract$ProfileSyncState;->getWithUri",
                "get": "Landroid/provider/ContactsContract$ProfileSyncState;->get",
                "set": "Landroid/provider/ContactsContract$ProfileSyncState;->set"
            },
            "ContactsContract$RawContacts$EntityIteratorImpl": {
                "next": "Landroid/provider/ContactsContract$RawContacts$EntityIteratorImpl;->next"
            },
            "ContactsContract$RawContacts": {
                "getContactLookupUri": "Landroid/provider/ContactsContract$RawContacts;->getContactLookupUri"
            },
            "ContactsContract$SyncState": {
                "newSetOperation": "Landroid/provider/ContactsContract$SyncState;->newSetOperation",
                "getWithUri": "Landroid/provider/ContactsContract$SyncState;->getWithUri",
                "get": "Landroid/provider/ContactsContract$SyncState;->get",
                "set": "Landroid/provider/ContactsContract$SyncState;->set"
            },
            "Downloads": {
                "removeAllDownloadsByPackage": "Landroid/provider/Downloads;->removeAllDownloadsByPackage"
            },
            "Settings$Bookmarks": {
                "add": "Landroid/provider/Settings$Bookmarks;->add"
            },
            "Settings$Secure": {
                "getUriFor": "Landroid/provider/Settings$Secure;->getUriFor",
                "putFloat": "Landroid/provider/Settings$Secure;->putFloat",
                "putInt": "Landroid/provider/Settings$Secure;->putInt",
                "putLong": "Landroid/provider/Settings$Secure;->putLong",
                "putString": "Landroid/provider/Settings$Secure;->putString",
                "setLocationProviderEnabled": "Landroid/provider/Settings$Secure;->setLocationProviderEnabled"
            },
            "Settings$System": {
                "getUriFor": "Landroid/provider/Settings$System;->getUriFor",
                "putConfiguration": "Landroid/provider/Settings$System;->putConfiguration",
                "putFloat": "Landroid/provider/Settings$System;->putFloat",
                "putInt": "Landroid/provider/Settings$System;->putInt",
                "putLong": "Landroid/provider/Settings$System;->putLong",
                "putString": "Landroid/provider/Settings$System;->putString",
                "setShowGTalkServiceStatus": "Landroid/provider/Settings$System;->setShowGTalkServiceStatus"
            },
            "Telephony$Mms": {
                "query": "Landroid/provider/Telephony$Mms;->query"
            },
            "Telephony$Sms$Draft": {
                "addMessage": "Landroid/provider/Telephony$Sms$Draft;->addMessage"
            },
            "Telephony$Sms$Inbox": {
                "addMessage": "Landroid/provider/Telephony$Sms$Inbox;->addMessage"
            },
            "Telephony$Sms$Outbox": {
                "addMessage": "Landroid/provider/Telephony$Sms$Outbox;->addMessage"
            },
            "Telephony$Sms$Sent": {
                "addMessage": "Landroid/provider/Telephony$Sms$Sent;->addMessage"
            },
            "Telephony$Sms": {
                "query": "Landroid/provider/Telephony$Sms;->query"
            },
            "Telephony$Threads": {
                "getOrCreateThreadId": "Landroid/provider/Telephony$Threads;->getOrCreateThreadId"
            },
            "UserDictionary$Words": {
                "addWord": "Landroid/provider/UserDictionary$Words;->addWord"
            },
            "VoicemailContract$Status": {
                "buildSourceUri": "Landroid/provider/VoicemailContract$Status;->buildSourceUri"
            },
            "VoicemailContract$Voicemails": {
                "buildSourceUri": "Landroid/provider/VoicemailContract$Voicemails;->buildSourceUri"
            }
        },
        "server": {
            "BluetoothA2dpService$1": {
                "onReceive": "Landroid/server/BluetoothA2dpService$1;->onReceive"
            },
            "BluetoothA2dpService": {
                "allowIncomingConnect": "Landroid/server/BluetoothA2dpService;->allowIncomingConnect",
                "checkSinkSuspendState": "Landroid/server/BluetoothA2dpService;->checkSinkSuspendState",
                "connect": "Landroid/server/BluetoothA2dpService;->connect",
                "connectSinkInternal": "Landroid/server/BluetoothA2dpService;->connectSinkInternal",
                "disconnect": "Landroid/server/BluetoothA2dpService;->disconnect",
                "disconnectSinkInternal": "Landroid/server/BluetoothA2dpService;->disconnectSinkInternal",
                "isA2dpPlaying": "Landroid/server/BluetoothA2dpService;->isA2dpPlaying",
                "isConnectSinkFeasible": "Landroid/server/BluetoothA2dpService;->isConnectSinkFeasible",
                "isDisconnectSinkFeasible": "Landroid/server/BluetoothA2dpService;->isDisconnectSinkFeasible",
                "isSinkDevice": "Landroid/server/BluetoothA2dpService;->isSinkDevice",
                "onTransact": "Landroid/server/BluetoothA2dpService;->onTransact",
                "resumeSink": "Landroid/server/BluetoothA2dpService;->resumeSink",
                "setPriority": "Landroid/server/BluetoothA2dpService;->setPriority",
                "suspendSink": "Landroid/server/BluetoothA2dpService;->suspendSink",
                "getConnectionState": "Landroid/server/BluetoothA2dpService;->getConnectionState",
                "getPriority": "Landroid/server/BluetoothA2dpService;->getPriority",
                "getConnectedDevices": "Landroid/server/BluetoothA2dpService;->getConnectedDevices",
                "getDevicesMatchingConnectionStates": "Landroid/server/BluetoothA2dpService;->getDevicesMatchingConnectionStates",
                "adjustOtherSinkPriorities": "Landroid/server/BluetoothA2dpService;->adjustOtherSinkPriorities",
                "handleSinkStateChange": "Landroid/server/BluetoothA2dpService;->handleSinkStateChange",
                "<init>": "Landroid/server/BluetoothA2dpService;-><init>",
                "onBluetoothDisable": "Landroid/server/BluetoothA2dpService;->onBluetoothDisable",
                "onBluetoothEnable": "Landroid/server/BluetoothA2dpService;->onBluetoothEnable",
                "onConnectSinkResult": "Landroid/server/BluetoothA2dpService;->onConnectSinkResult",
                "onSinkPropertyChanged": "Landroid/server/BluetoothA2dpService;->onSinkPropertyChanged"
            },
            "BluetoothAdapterProperties": {
                "getObjectPath": "Landroid/server/BluetoothAdapterProperties;->getObjectPath",
                "getProperty": "Landroid/server/BluetoothAdapterProperties;->getProperty",
                "getAllProperties": "Landroid/server/BluetoothAdapterProperties;->getAllProperties"
            },
            "BluetoothAdapterStateMachine$BluetoothOn": {
                "processMessage": "Landroid/server/BluetoothAdapterStateMachine$BluetoothOn;->processMessage",
                "exit": "Landroid/server/BluetoothAdapterStateMachine$BluetoothOn;->exit"
            },
            "BluetoothAdapterStateMachine$HotOff": {
                "exit": "Landroid/server/BluetoothAdapterStateMachine$HotOff;->exit"
            },
            "BluetoothAdapterStateMachine$PerProcessState": {
                "processMessage": "Landroid/server/BluetoothAdapterStateMachine$PerProcessState;->processMessage",
                "exit": "Landroid/server/BluetoothAdapterStateMachine$PerProcessState;->exit"
            },
            "BluetoothAdapterStateMachine$PowerOff": {
                "exit": "Landroid/server/BluetoothAdapterStateMachine$PowerOff;->exit"
            },
            "BluetoothAdapterStateMachine$Switching": {
                "processMessage": "Landroid/server/BluetoothAdapterStateMachine$Switching;->processMessage",
                "exit": "Landroid/server/BluetoothAdapterStateMachine$Switching;->exit"
            },
            "BluetoothAdapterStateMachine$WarmUp": {
                "exit": "Landroid/server/BluetoothAdapterStateMachine$WarmUp;->exit"
            },
            "BluetoothAdapterStateMachine": {
                "finishSwitchingOff": "Landroid/server/BluetoothAdapterStateMachine;->finishSwitchingOff"
            },
            "BluetoothBondState": {
                "isAutoPairingBlacklisted": "Landroid/server/BluetoothBondState;->isAutoPairingBlacklisted",
                "initBondState": "Landroid/server/BluetoothBondState;->initBondState",
                "loadBondState": "Landroid/server/BluetoothBondState;->loadBondState",
                "setBondState": "Landroid/server/BluetoothBondState;->setBondState",
                "setProfilePriorities": "Landroid/server/BluetoothBondState;->setProfilePriorities"
            },
            "BluetoothDeviceProperties": {
                "getProperty": "Landroid/server/BluetoothDeviceProperties;->getProperty",
                "addProperties": "Landroid/server/BluetoothDeviceProperties;->addProperties",
                "updateCache": "Landroid/server/BluetoothDeviceProperties;->updateCache"
            },
            "BluetoothEventLoop": {
                "isOtherSinkInNonDisconnectedState": "Landroid/server/BluetoothEventLoop;->isOtherSinkInNonDisconnectedState",
                "onAgentOutOfBandDataAvailable": "Landroid/server/BluetoothEventLoop;->onAgentOutOfBandDataAvailable",
                "checkPairingRequestAndGetAddress": "Landroid/server/BluetoothEventLoop;->checkPairingRequestAndGetAddress",
                "addDevice": "Landroid/server/BluetoothEventLoop;->addDevice",
                "onAgentAuthorize": "Landroid/server/BluetoothEventLoop;->onAgentAuthorize",
                "onCreateDeviceResult": "Landroid/server/BluetoothEventLoop;->onCreateDeviceResult",
                "onCreatePairedDeviceResult": "Landroid/server/BluetoothEventLoop;->onCreatePairedDeviceResult",
                "onDeviceCreated": "Landroid/server/BluetoothEventLoop;->onDeviceCreated",
                "onDeviceDisconnectRequested": "Landroid/server/BluetoothEventLoop;->onDeviceDisconnectRequested",
                "onDeviceFound": "Landroid/server/BluetoothEventLoop;->onDeviceFound",
                "onDevicePropertyChanged": "Landroid/server/BluetoothEventLoop;->onDevicePropertyChanged",
                "onDeviceRemoved": "Landroid/server/BluetoothEventLoop;->onDeviceRemoved",
                "onDiscoverServicesResult": "Landroid/server/BluetoothEventLoop;->onDiscoverServicesResult",
                "onDisplayPasskey": "Landroid/server/BluetoothEventLoop;->onDisplayPasskey",
                "onHealthDeviceChannelChanged": "Landroid/server/BluetoothEventLoop;->onHealthDeviceChannelChanged",
                "onHealthDevicePropertyChanged": "Landroid/server/BluetoothEventLoop;->onHealthDevicePropertyChanged",
                "onInputDeviceConnectionResult": "Landroid/server/BluetoothEventLoop;->onInputDeviceConnectionResult",
                "onInputDevicePropertyChanged": "Landroid/server/BluetoothEventLoop;->onInputDevicePropertyChanged",
                "onNetworkDeviceConnected": "Landroid/server/BluetoothEventLoop;->onNetworkDeviceConnected",
                "onNetworkDeviceDisconnected": "Landroid/server/BluetoothEventLoop;->onNetworkDeviceDisconnected",
                "onPanDeviceConnectionResult": "Landroid/server/BluetoothEventLoop;->onPanDeviceConnectionResult",
                "onPanDevicePropertyChanged": "Landroid/server/BluetoothEventLoop;->onPanDevicePropertyChanged",
                "onPropertyChanged": "Landroid/server/BluetoothEventLoop;->onPropertyChanged",
                "onRequestOobData": "Landroid/server/BluetoothEventLoop;->onRequestOobData",
                "onRequestPairingConsent": "Landroid/server/BluetoothEventLoop;->onRequestPairingConsent",
                "onRequestPasskeyConfirmation": "Landroid/server/BluetoothEventLoop;->onRequestPasskeyConfirmation",
                "onRequestPasskey": "Landroid/server/BluetoothEventLoop;->onRequestPasskey",
                "onRequestPinCode": "Landroid/server/BluetoothEventLoop;->onRequestPinCode",
                "sendDisplayPinIntent": "Landroid/server/BluetoothEventLoop;->sendDisplayPinIntent"
            },
            "BluetoothHealthProfileHandler": {
                "getMainChannelFd": "Landroid/server/BluetoothHealthProfileHandler;->getMainChannelFd",
                "connectChannel": "Landroid/server/BluetoothHealthProfileHandler;->connectChannel",
                "connectChannelToSource": "Landroid/server/BluetoothHealthProfileHandler;->connectChannelToSource",
                "disconnectChannel": "Landroid/server/BluetoothHealthProfileHandler;->disconnectChannel",
                "unregisterAppConfiguration": "Landroid/server/BluetoothHealthProfileHandler;->unregisterAppConfiguration",
                "onHealthDeviceChannelChanged": "Landroid/server/BluetoothHealthProfileHandler;->onHealthDeviceChannelChanged",
                "onHealthDevicePropertyChanged": "Landroid/server/BluetoothHealthProfileHandler;->onHealthDevicePropertyChanged"
            },
            "BluetoothInputProfileHandler": {
                "connectInputDevice": "Landroid/server/BluetoothInputProfileHandler;->connectInputDevice",
                "connectInputDeviceInternal": "Landroid/server/BluetoothInputProfileHandler;->connectInputDeviceInternal",
                "disconnectInputDevice": "Landroid/server/BluetoothInputProfileHandler;->disconnectInputDevice",
                "disconnectInputDeviceInternal": "Landroid/server/BluetoothInputProfileHandler;->disconnectInputDeviceInternal",
                "setInputDevicePriority": "Landroid/server/BluetoothInputProfileHandler;->setInputDevicePriority",
                "handleInputDevicePropertyChange": "Landroid/server/BluetoothInputProfileHandler;->handleInputDevicePropertyChange",
                "handleInputDeviceStateChange": "Landroid/server/BluetoothInputProfileHandler;->handleInputDeviceStateChange",
                "setInitialInputDevicePriority": "Landroid/server/BluetoothInputProfileHandler;->setInitialInputDevicePriority"
            },
            "BluetoothPanProfileHandler": {
                "connectPanDevice": "Landroid/server/BluetoothPanProfileHandler;->connectPanDevice",
                "disconnectPanDevice": "Landroid/server/BluetoothPanProfileHandler;->disconnectPanDevice",
                "disconnectPanServerDevices": "Landroid/server/BluetoothPanProfileHandler;->disconnectPanServerDevices",
                "enableTethering": "Landroid/server/BluetoothPanProfileHandler;->enableTethering",
                "handlePanDeviceStateChange": "Landroid/server/BluetoothPanProfileHandler;->handlePanDeviceStateChange",
                "setBluetoothTethering": "Landroid/server/BluetoothPanProfileHandler;->setBluetoothTethering"
            },
            "BluetoothService": {
                "getMainChannelFd": "Landroid/server/BluetoothService;->getMainChannelFd",
                "getRemoteUuids": "Landroid/server/BluetoothService;->getRemoteUuids",
                "getUuidFromCache": "Landroid/server/BluetoothService;->getUuidFromCache",
                "getUuids": "Landroid/server/BluetoothService;->getUuids",
                "allowIncomingProfileConnect": "Landroid/server/BluetoothService;->allowIncomingProfileConnect",
                "attemptAutoPair": "Landroid/server/BluetoothService;->attemptAutoPair",
                "cancelBondProcess": "Landroid/server/BluetoothService;->cancelBondProcess",
                "cancelDiscovery": "Landroid/server/BluetoothService;->cancelDiscovery",
                "cancelPairingUserInput": "Landroid/server/BluetoothService;->cancelPairingUserInput",
                "changeApplicationBluetoothState": "Landroid/server/BluetoothService;->changeApplicationBluetoothState",
                "connectChannelToSink": "Landroid/server/BluetoothService;->connectChannelToSink",
                "connectChannelToSource": "Landroid/server/BluetoothService;->connectChannelToSource",
                "connectHeadset": "Landroid/server/BluetoothService;->connectHeadset",
                "connectInputDevice": "Landroid/server/BluetoothService;->connectInputDevice",
                "connectInputDeviceInternal": "Landroid/server/BluetoothService;->connectInputDeviceInternal",
                "connectPanDevice": "Landroid/server/BluetoothService;->connectPanDevice",
                "connectSink": "Landroid/server/BluetoothService;->connectSink",
                "createBond": "Landroid/server/BluetoothService;->createBond",
                "createBondOutOfBand": "Landroid/server/BluetoothService;->createBondOutOfBand",
                "disable": "Landroid/server/BluetoothService;->disable",
                "disconnectChannel": "Landroid/server/BluetoothService;->disconnectChannel",
                "disconnectHeadset": "Landroid/server/BluetoothService;->disconnectHeadset",
                "disconnectInputDevice": "Landroid/server/BluetoothService;->disconnectInputDevice",
                "disconnectInputDeviceInternal": "Landroid/server/BluetoothService;->disconnectInputDeviceInternal",
                "disconnectPanDevice": "Landroid/server/BluetoothService;->disconnectPanDevice",
                "disconnectSink": "Landroid/server/BluetoothService;->disconnectSink",
                "enable": "Landroid/server/BluetoothService;->enable",
                "enableNoAutoConnect": "Landroid/server/BluetoothService;->enableNoAutoConnect",
                "fetchRemoteUuids": "Landroid/server/BluetoothService;->fetchRemoteUuids",
                "getTrustState": "Landroid/server/BluetoothService;->getTrustState",
                "isBondingFeasible": "Landroid/server/BluetoothService;->isBondingFeasible",
                "isDiscovering": "Landroid/server/BluetoothService;->isDiscovering",
                "isEnabled": "Landroid/server/BluetoothService;->isEnabled",
                "isTetheringOn": "Landroid/server/BluetoothService;->isTetheringOn",
                "notifyIncomingA2dpConnection": "Landroid/server/BluetoothService;->notifyIncomingA2dpConnection",
                "notifyIncomingConnection": "Landroid/server/BluetoothService;->notifyIncomingConnection",
                "onTransact": "Landroid/server/BluetoothService;->onTransact",
                "registerAppConfiguration": "Landroid/server/BluetoothService;->registerAppConfiguration",
                "removeBondInternal": "Landroid/server/BluetoothService;->removeBondInternal",
                "removeBond": "Landroid/server/BluetoothService;->removeBond",
                "setBondState": "Landroid/server/BluetoothService;->setBondState",
                "setDeviceOutOfBandData": "Landroid/server/BluetoothService;->setDeviceOutOfBandData",
                "setDiscoverableTimeout": "Landroid/server/BluetoothService;->setDiscoverableTimeout",
                "setInputDevicePriority": "Landroid/server/BluetoothService;->setInputDevicePriority",
                "setName": "Landroid/server/BluetoothService;->setName",
                "setPairingConfirmation": "Landroid/server/BluetoothService;->setPairingConfirmation",
                "setPasskey": "Landroid/server/BluetoothService;->setPasskey",
                "setPin": "Landroid/server/BluetoothService;->setPin",
                "setPropertyBoolean": "Landroid/server/BluetoothService;->setPropertyBoolean",
                "setPropertyInteger": "Landroid/server/BluetoothService;->setPropertyInteger",
                "setPropertyString": "Landroid/server/BluetoothService;->setPropertyString",
                "setRemoteAlias": "Landroid/server/BluetoothService;->setRemoteAlias",
                "setRemoteOutOfBandData": "Landroid/server/BluetoothService;->setRemoteOutOfBandData",
                "setScanMode": "Landroid/server/BluetoothService;->setScanMode",
                "setTrust": "Landroid/server/BluetoothService;->setTrust",
                "startDiscovery": "Landroid/server/BluetoothService;->startDiscovery",
                "unregisterAppConfiguration": "Landroid/server/BluetoothService;->unregisterAppConfiguration",
                "readOutOfBandData": "Landroid/server/BluetoothService;->readOutOfBandData",
                "addRfcommServiceRecord": "Landroid/server/BluetoothService;->addRfcommServiceRecord",
                "getBluetoothState": "Landroid/server/BluetoothService;->getBluetoothState",
                "getBondState": "Landroid/server/BluetoothService;->getBondState",
                "getDeviceServiceChannelForUuid": "Landroid/server/BluetoothService;->getDeviceServiceChannelForUuid",
                "getDiscoverableTimeout": "Landroid/server/BluetoothService;->getDiscoverableTimeout",
                "getHealthDeviceConnectionState": "Landroid/server/BluetoothService;->getHealthDeviceConnectionState",
                "getInputDeviceConnectionState": "Landroid/server/BluetoothService;->getInputDeviceConnectionState",
                "getInputDevicePriority": "Landroid/server/BluetoothService;->getInputDevicePriority",
                "getPanDeviceConnectionState": "Landroid/server/BluetoothService;->getPanDeviceConnectionState",
                "getProfileConnectionState": "Landroid/server/BluetoothService;->getProfileConnectionState",
                "getRemoteClass": "Landroid/server/BluetoothService;->getRemoteClass",
                "getRemoteServiceChannel": "Landroid/server/BluetoothService;->getRemoteServiceChannel",
                "getScanMode": "Landroid/server/BluetoothService;->getScanMode",
                "getAddress": "Landroid/server/BluetoothService;->getAddress",
                "getAddressFromObjectPath": "Landroid/server/BluetoothService;->getAddressFromObjectPath",
                "getKnownDevices": "Landroid/server/BluetoothService;->getKnownDevices",
                "getName": "Landroid/server/BluetoothService;->getName",
                "getObjectPathFromAddress": "Landroid/server/BluetoothService;->getObjectPathFromAddress",
                "getProperty": "Landroid/server/BluetoothService;->getProperty",
                "getRemoteAlias": "Landroid/server/BluetoothService;->getRemoteAlias",
                "getRemoteDeviceProperties": "Landroid/server/BluetoothService;->getRemoteDeviceProperties",
                "getRemoteName": "Landroid/server/BluetoothService;->getRemoteName",
                "listBonds": "Landroid/server/BluetoothService;->listBonds",
                "getConnectedHealthDevices": "Landroid/server/BluetoothService;->getConnectedHealthDevices",
                "getConnectedInputDevices": "Landroid/server/BluetoothService;->getConnectedInputDevices",
                "getConnectedPanDevices": "Landroid/server/BluetoothService;->getConnectedPanDevices",
                "getHealthDevicesMatchingConnectionStates": "Landroid/server/BluetoothService;->getHealthDevicesMatchingConnectionStates",
                "getInputDevicesMatchingConnectionStates": "Landroid/server/BluetoothService;->getInputDevicesMatchingConnectionStates",
                "getPanDevicesMatchingConnectionStates": "Landroid/server/BluetoothService;->getPanDevicesMatchingConnectionStates",
                "autoConnect": "Landroid/server/BluetoothService;->autoConnect",
                "disconnectDevices": "Landroid/server/BluetoothService;->disconnectDevices",
                "dumpAclConnectedDevices": "Landroid/server/BluetoothService;->dumpAclConnectedDevices",
                "dumpHeadsetConnectionState": "Landroid/server/BluetoothService;->dumpHeadsetConnectionState",
                "dumpHeadsetService": "Landroid/server/BluetoothService;->dumpHeadsetService",
                "dumpInputDeviceProfile": "Landroid/server/BluetoothService;->dumpInputDeviceProfile",
                "dump": "Landroid/server/BluetoothService;->dump",
                "dumpKnownDevices": "Landroid/server/BluetoothService;->dumpKnownDevices",
                "dumpPanProfile": "Landroid/server/BluetoothService;->dumpPanProfile",
                "dumpProfileState": "Landroid/server/BluetoothService;->dumpProfileState",
                "finishDisable": "Landroid/server/BluetoothService;->finishDisable",
                "handleInputDevicePropertyChange": "Landroid/server/BluetoothService;->handleInputDevicePropertyChange",
                "handlePanDeviceStateChange": "Landroid/server/BluetoothService;->handlePanDeviceStateChange",
                "initBluetoothAfterTurningOn": "Landroid/server/BluetoothService;->initBluetoothAfterTurningOn",
                "initProfileState": "Landroid/server/BluetoothService;->initProfileState",
                "onCreatePairedDeviceResult": "Landroid/server/BluetoothService;->onCreatePairedDeviceResult",
                "onHealthDeviceChannelChanged": "Landroid/server/BluetoothService;->onHealthDeviceChannelChanged",
                "onHealthDevicePropertyChanged": "Landroid/server/BluetoothService;->onHealthDevicePropertyChanged",
                "pairingAttempt": "Landroid/server/BluetoothService;->pairingAttempt",
                "removeServiceRecord": "Landroid/server/BluetoothService;->removeServiceRecord",
                "runBluetooth": "Landroid/server/BluetoothService;->runBluetooth",
                "sendUuidIntent": "Landroid/server/BluetoothService;->sendUuidIntent",
                "setBluetoothTethering": "Landroid/server/BluetoothService;->setBluetoothTethering",
                "setLinkTimeout": "Landroid/server/BluetoothService;->setLinkTimeout",
                "setPairable": "Landroid/server/BluetoothService;->setPairable",
                "updateDeviceServiceChannelCache": "Landroid/server/BluetoothService;->updateDeviceServiceChannelCache",
                "updateRemoteDevicePropertiesCache": "Landroid/server/BluetoothService;->updateRemoteDevicePropertiesCache"
            },
            "search": {
                "SearchManagerService$GlobalSearchProviderObserver": {
                    "<init>": "Landroid/server/search/SearchManagerService$GlobalSearchProviderObserver;-><init>"
                },
                "SearchManagerService$MyPackageMonitor": {
                    "onHandleForceStop": "Landroid/server/search/SearchManagerService$MyPackageMonitor;->onHandleForceStop",
                    "onPackageRemoved": "Landroid/server/search/SearchManagerService$MyPackageMonitor;->onPackageRemoved",
                    "onReceive": "Landroid/server/search/SearchManagerService$MyPackageMonitor;->onReceive"
                },
                "SearchManagerService": {
                    "<init>": "Landroid/server/search/SearchManagerService;-><init>"
                }
            }
        },
        "service": {
            "dreams": {
                "DreamManagerService": {
                    "onTransact": "Landroid/service/dreams/DreamManagerService;->onTransact",
                    "setDreamComponent": "Landroid/service/dreams/DreamManagerService;->setDreamComponent"
                },
                "IDreamManager$Stub$Proxy": {
                    "setDreamComponent": "Landroid/service/dreams/IDreamManager$Stub$Proxy;->setDreamComponent"
                },
                "IDreamManager$Stub": {
                    "onTransact": "Landroid/service/dreams/IDreamManager$Stub;->onTransact",
                    "setDreamComponent": "Landroid/service/dreams/IDreamManager$Stub;->setDreamComponent"
                },
                "IDreamManager": {
                    "setDreamComponent": "Landroid/service/dreams/IDreamManager;->setDreamComponent"
                }
            },
            "textservice": {
                "SpellCheckerService": {
                    "clearWallpaper": "Landroid/service/textservice/SpellCheckerService;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/service/textservice/SpellCheckerService;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/service/textservice/SpellCheckerService;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/service/textservice/SpellCheckerService;->sendStickyOrderedBroadcast",
                    "setWallpaper": "Landroid/service/textservice/SpellCheckerService;->setWallpaper"
                }
            },
            "wallpaper": {
                "WallpaperService": {
                    "clearWallpaper": "Landroid/service/wallpaper/WallpaperService;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/service/wallpaper/WallpaperService;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/service/wallpaper/WallpaperService;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/service/wallpaper/WallpaperService;->sendStickyOrderedBroadcast",
                    "setWallpaper": "Landroid/service/wallpaper/WallpaperService;->setWallpaper"
                }
            }
        },
        "speech": {
            "IRecognitionService$Stub$Proxy": {
                "cancel": "Landroid/speech/IRecognitionService$Stub$Proxy;->cancel",
                "startListening": "Landroid/speech/IRecognitionService$Stub$Proxy;->startListening",
                "stopListening": "Landroid/speech/IRecognitionService$Stub$Proxy;->stopListening"
            },
            "IRecognitionService$Stub": {
                "onTransact": "Landroid/speech/IRecognitionService$Stub;->onTransact",
                "cancel": "Landroid/speech/IRecognitionService$Stub;->cancel",
                "startListening": "Landroid/speech/IRecognitionService$Stub;->startListening",
                "stopListening": "Landroid/speech/IRecognitionService$Stub;->stopListening"
            },
            "IRecognitionService": {
                "cancel": "Landroid/speech/IRecognitionService;->cancel",
                "startListening": "Landroid/speech/IRecognitionService;->startListening",
                "stopListening": "Landroid/speech/IRecognitionService;->stopListening"
            },
            "RecognitionService$RecognitionServiceBinder": {
                "onTransact": "Landroid/speech/RecognitionService$RecognitionServiceBinder;->onTransact",
                "cancel": "Landroid/speech/RecognitionService$RecognitionServiceBinder;->cancel",
                "startListening": "Landroid/speech/RecognitionService$RecognitionServiceBinder;->startListening",
                "stopListening": "Landroid/speech/RecognitionService$RecognitionServiceBinder;->stopListening"
            },
            "RecognitionService": {
                "checkPermissions": "Landroid/speech/RecognitionService;->checkPermissions",
                "clearWallpaper": "Landroid/speech/RecognitionService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/speech/RecognitionService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/speech/RecognitionService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/speech/RecognitionService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/speech/RecognitionService;->setWallpaper"
            },
            "SpeechRecognizer": {
                "cancel": "Landroid/speech/SpeechRecognizer;->cancel",
                "handleCancelMessage": "Landroid/speech/SpeechRecognizer;->handleCancelMessage",
                "handleStartListening": "Landroid/speech/SpeechRecognizer;->handleStartListening",
                "handleStopMessage": "Landroid/speech/SpeechRecognizer;->handleStopMessage",
                "putMessage": "Landroid/speech/SpeechRecognizer;->putMessage",
                "setRecognitionListener": "Landroid/speech/SpeechRecognizer;->setRecognitionListener",
                "startListening": "Landroid/speech/SpeechRecognizer;->startListening",
                "stopListening": "Landroid/speech/SpeechRecognizer;->stopListening"
            },
            "tts": {
                "AudioPlaybackHandler$MessageLoop": {
                    "run": "Landroid/speech/tts/AudioPlaybackHandler$MessageLoop;->run"
                },
                "AudioPlaybackQueueItem": {
                    "finish": "Landroid/speech/tts/AudioPlaybackQueueItem;->finish",
                    "run": "Landroid/speech/tts/AudioPlaybackQueueItem;->run"
                },
                "PlaybackQueueItem": {
                    "run": "Landroid/speech/tts/PlaybackQueueItem;->run"
                },
                "TtsEngines": {
                    "updateLocalePrefForEngine": "Landroid/speech/tts/TtsEngines;->updateLocalePrefForEngine"
                },
                "TextToSpeechService": {
                    "clearWallpaper": "Landroid/speech/tts/TextToSpeechService;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/speech/tts/TextToSpeechService;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/speech/tts/TextToSpeechService;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/speech/tts/TextToSpeechService;->sendStickyOrderedBroadcast",
                    "setWallpaper": "Landroid/speech/tts/TextToSpeechService;->setWallpaper"
                }
            }
        },
        "support": {
            "v4": {
                "net": {
                    "ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompat$ConnectivityManagerCompatImpl": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat$ConnectivityManagerCompatImpl;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompat": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompat;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompatGingerbread": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompatGingerbread;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompatHoneycombMR2": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompatHoneycombMR2;->isActiveNetworkMetered"
                    },
                    "ConnectivityManagerCompatJellyBean": {
                        "isActiveNetworkMetered": "Landroid/support/v4/net/ConnectivityManagerCompatJellyBean;->isActiveNetworkMetered"
                    }
                },
                "view": {
                    "accessibility": {
                        "AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1": {
                            "performAction": "Landroid/support/v4/view/accessibility/AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1;->performAction"
                        },
                        "AccessibilityNodeProviderCompat": {
                            "performAction": "Landroid/support/v4/view/accessibility/AccessibilityNodeProviderCompat;->performAction"
                        },
                        "AccessibilityNodeProviderCompatJellyBean$1": {
                            "performAction": "Landroid/support/v4/view/accessibility/AccessibilityNodeProviderCompatJellyBean$1;->performAction"
                        },
                        "AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge": {
                            "performAction": "Landroid/support/v4/view/accessibility/AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge;->performAction"
                        }
                    }
                }
            }
        },
        "telephony": {
            "CellInfoCdma": {
                "getCellSignalStrength": "Landroid/telephony/CellInfoCdma;->getCellSignalStrength"
            },
            "gsm": {
                "SmsManager": {
                    "copyMessageToSim": "Landroid/telephony/gsm/SmsManager;->copyMessageToSim",
                    "deleteMessageFromSim": "Landroid/telephony/gsm/SmsManager;->deleteMessageFromSim",
                    "updateMessageOnSim": "Landroid/telephony/gsm/SmsManager;->updateMessageOnSim",
                    "getAllMessagesFromSim": "Landroid/telephony/gsm/SmsManager;->getAllMessagesFromSim",
                    "sendDataMessage": "Landroid/telephony/gsm/SmsManager;->sendDataMessage",
                    "sendMultipartTextMessage": "Landroid/telephony/gsm/SmsManager;->sendMultipartTextMessage",
                    "sendTextMessage": "Landroid/telephony/gsm/SmsManager;->sendTextMessage",
                    "getDefault": "Landroid/telephony/gsm/SmsManager;->getDefault"
                },
                "GsmCellLocation": {
                    "isEmpty": "Landroid/telephony/gsm/GsmCellLocation;->isEmpty",
                    "getCid": "Landroid/telephony/gsm/GsmCellLocation;->getCid",
                    "getLac": "Landroid/telephony/gsm/GsmCellLocation;->getLac",
                    "getPsc": "Landroid/telephony/gsm/GsmCellLocation;->getPsc"
                },
                "SmsMessage": {
                    "getMessageClass": "Landroid/telephony/gsm/SmsMessage;->getMessageClass",
                    "getSubmitPdu": "Landroid/telephony/gsm/SmsMessage;->getSubmitPdu",
                    "isCphsMwiMessage": "Landroid/telephony/gsm/SmsMessage;->isCphsMwiMessage",
                    "isEmail": "Landroid/telephony/gsm/SmsMessage;->isEmail",
                    "isMWIClearMessage": "Landroid/telephony/gsm/SmsMessage;->isMWIClearMessage",
                    "isMWISetMessage": "Landroid/telephony/gsm/SmsMessage;->isMWISetMessage",
                    "isMwiDontStore": "Landroid/telephony/gsm/SmsMessage;->isMwiDontStore",
                    "isReplace": "Landroid/telephony/gsm/SmsMessage;->isReplace",
                    "isReplyPathPresent": "Landroid/telephony/gsm/SmsMessage;->isReplyPathPresent",
                    "isStatusReportMessage": "Landroid/telephony/gsm/SmsMessage;->isStatusReportMessage",
                    "getPdu": "Landroid/telephony/gsm/SmsMessage;->getPdu",
                    "getUserData": "Landroid/telephony/gsm/SmsMessage;->getUserData",
                    "getIndexOnIcc": "Landroid/telephony/gsm/SmsMessage;->getIndexOnIcc",
                    "getIndexOnSim": "Landroid/telephony/gsm/SmsMessage;->getIndexOnSim",
                    "getProtocolIdentifier": "Landroid/telephony/gsm/SmsMessage;->getProtocolIdentifier",
                    "getStatus": "Landroid/telephony/gsm/SmsMessage;->getStatus",
                    "getStatusOnIcc": "Landroid/telephony/gsm/SmsMessage;->getStatusOnIcc",
                    "getStatusOnSim": "Landroid/telephony/gsm/SmsMessage;->getStatusOnSim",
                    "getTPLayerLengthForPDU": "Landroid/telephony/gsm/SmsMessage;->getTPLayerLengthForPDU",
                    "getDisplayMessageBody": "Landroid/telephony/gsm/SmsMessage;->getDisplayMessageBody",
                    "getDisplayOriginatingAddress": "Landroid/telephony/gsm/SmsMessage;->getDisplayOriginatingAddress",
                    "getEmailBody": "Landroid/telephony/gsm/SmsMessage;->getEmailBody",
                    "getEmailFrom": "Landroid/telephony/gsm/SmsMessage;->getEmailFrom",
                    "getMessageBody": "Landroid/telephony/gsm/SmsMessage;->getMessageBody",
                    "getOriginatingAddress": "Landroid/telephony/gsm/SmsMessage;->getOriginatingAddress",
                    "getPseudoSubject": "Landroid/telephony/gsm/SmsMessage;->getPseudoSubject",
                    "getServiceCenterAddress": "Landroid/telephony/gsm/SmsMessage;->getServiceCenterAddress",
                    "getTimestampMillis": "Landroid/telephony/gsm/SmsMessage;->getTimestampMillis"
                },
                "getLac": "Landroid/telephony/gsm;->getLac",
                "getCid": "Landroid/telephony/gsm;->getCid",
                "sendDataMessage": "Landroid/telephony/gsm;->sendDataMessage",
                "sendMultipartTextMessage": "Landroid/telephony/gsm;->sendMultipartTextMessage",
                "divideMessage": "Landroid/telephony/gsm;->divideMessage"
            },
            "PhoneNumberFormattingTextWatcher": {
                "beforeTextChanged": "Landroid/telephony/PhoneNumberFormattingTextWatcher;->beforeTextChanged"
            },
            "PhoneNumberUtils": {
                "isVoiceMailNumber": "Landroid/telephony/PhoneNumberUtils;->isVoiceMailNumber"
            },
            "SignalStrength": {
                "getGsmSignalStrength": "Landroid/telephony/SignalStrength;->getGsmSignalStrength"
            },
            "SmsManager": {
                "copyMessageToIcc": "Landroid/telephony/SmsManager;->copyMessageToIcc",
                "deleteMessageFromIcc": "Landroid/telephony/SmsManager;->deleteMessageFromIcc",
                "disableCellBroadcast": "Landroid/telephony/SmsManager;->disableCellBroadcast",
                "disableCellBroadcastRange": "Landroid/telephony/SmsManager;->disableCellBroadcastRange",
                "enableCellBroadcast": "Landroid/telephony/SmsManager;->enableCellBroadcast",
                "enableCellBroadcastRange": "Landroid/telephony/SmsManager;->enableCellBroadcastRange",
                "updateMessageOnIcc": "Landroid/telephony/SmsManager;->updateMessageOnIcc",
                "getAllMessagesFromIcc": "Landroid/telephony/SmsManager;->getAllMessagesFromIcc",
                "sendDataMessage": "Landroid/telephony/SmsManager;->sendDataMessage",
                "sendMultipartTextMessage": "Landroid/telephony/SmsManager;->sendMultipartTextMessage",
                "sendTextMessage": "Landroid/telephony/SmsManager;->sendTextMessage",
                "getCarrierConfigValues": "Landroid/telephony/SmsManager;->getCarrierConfigValues",
                "getDefault": "Landroid/telephony/SmsManager;->getDefault",
                "getSmsManagerForSubscriptionId": "Landroid/telephony/SmsManager;->getSmsManagerForSubscriptionId",
                "getDefaultSmsSubscriptionId": "Landroid/telephony/SmsManager;->getDefaultSmsSubscriptionId",
                "getSubscriptionId": "Landroid/telephony/SmsManager;->getSubscriptionId",
                "getSmscAddress": "Landroid/telephony/SmsManager;->getSmscAddress",
                "getSmsMessagesForFinancialApp": "Landroid/telephony/SmsManager;->getSmsMessagesForFinancialApp",
                "divideMessage": "Landroid/telephony/SmsManager;->divideMessage",
                "downloadMultimediaMessage": "Landroid/telephony/SmsManager;->downloadMultimediaMessage",
                "sendMultimediaMessage": "Landroid/telephony/SmsManager;->sendMultimediaMessage"
            },
            "TelephonyManager": {
                "getCellLocation": "Landroid/telephony/TelephonyManager;->getCellLocation",
                "getCompleteVoiceMailNumber": "Landroid/telephony/TelephonyManager;->getCompleteVoiceMailNumber",
                "getDeviceId": "Landroid/telephony/TelephonyManager;->getDeviceId",
                "getDeviceSoftwareVersion": "Landroid/telephony/TelephonyManager;->getDeviceSoftwareVersion",
                "getLine1AlphaTag": "Landroid/telephony/TelephonyManager;->getLine1AlphaTag",
                "getLine1Number": "Landroid/telephony/TelephonyManager;->getLine1Number",
                "getMsisdn": "Landroid/telephony/TelephonyManager;->getMsisdn",
                "getSimSerialNumber": "Landroid/telephony/TelephonyManager;->getSimSerialNumber",
                "getSubscriberId": "Landroid/telephony/TelephonyManager;->getSubscriberId",
                "getVoiceMailAlphaTag": "Landroid/telephony/TelephonyManager;->getVoiceMailAlphaTag",
                "getVoiceMailNumber": "Landroid/telephony/TelephonyManager;->getVoiceMailNumber",
                "getAllCellInfo": "Landroid/telephony/TelephonyManager;->getAllCellInfo",
                "getNeighboringCellInfo": "Landroid/telephony/TelephonyManager;->getNeighboringCellInfo",
                "listen": "Landroid/telephony/TelephonyManager;->listen",
                "getVoicemailRingtoneUri": "Landroid/telephony/TelephonyManager;->getVoicemailRingtoneUri",
                "getCarrierConfig": "Landroid/telephony/TelephonyManager;->getCarrierConfig",
                "getServiceState": "Landroid/telephony/TelephonyManager;->getServiceState",
                "getSignalStrength": "Landroid/telephony/TelephonyManager;->getSignalStrength",
                "getDefault": "Landroid/telephony/TelephonyManager;->getDefault",
                "isConcurrentVoiceAndDataSupported": "Landroid/telephony/TelephonyManager;->isConcurrentVoiceAndDataSupported",
                "isDataEnabled": "Landroid/telephony/TelephonyManager;->isDataEnabled",
                "isDataRoamingEnabled": "Landroid/telephony/TelephonyManager;->isDataRoamingEnabled",
                "isEmergencyNumber": "Landroid/telephony/TelephonyManager;->isEmergencyNumber",
                "isHearingAidCompatibilitySupported": "Landroid/telephony/TelephonyManager;->isHearingAidCompatibilitySupported",
                "isManualNetworkSelectionAllowed": "Landroid/telephony/TelephonyManager;->isManualNetworkSelectionAllowed",
                "isModemEnabledForSlot": "Landroid/telephony/TelephonyManager;->isModemEnabledForSlot",
                "isNetworkRoaming": "Landroid/telephony/TelephonyManager;->isNetworkRoaming",
                "isRttSupported": "Landroid/telephony/TelephonyManager;->isRttSupported",
                "isSmsCapable": "Landroid/telephony/TelephonyManager;->isSmsCapable",
                "isTtyModeSupported": "Landroid/telephony/TelephonyManager;->isTtyModeSupported",
                "isVoiceCapable": "Landroid/telephony/TelephonyManager;->isVoiceCapable",
                "isVoicemailVibrationEnabled": "Landroid/telephony/TelephonyManager;->isVoicemailVibrationEnabled",
                "isWorldPhone": "Landroid/telephony/TelephonyManager;->isWorldPhone",
                "getActiveModemCount": "Landroid/telephony/TelephonyManager;->getActiveModemCount",
                "getCallState": "Landroid/telephony/TelephonyManager;->getCallState",
                "getCardIdForDefaultEuicc": "Landroid/telephony/TelephonyManager;->getCardIdForDefaultEuicc",
                "getCarrierIdFromSimMccMnc": "Landroid/telephony/TelephonyManager;->getCarrierIdFromSimMccMnc",
                "getCdmaEriIconIndex": "Landroid/telephony/TelephonyManager;->getCdmaEriIconIndex",
                "getCdmaEriIconMode": "Landroid/telephony/TelephonyManager;->getCdmaEriIconMode",
                "getCurrentPhoneType": "Landroid/telephony/TelephonyManager;->getCurrentPhoneType",
                "getDataNetworkType": "Landroid/telephony/TelephonyManager;->getDataNetworkType",
                "getDataState": "Landroid/telephony/TelephonyManager;->getDataState",
                "getNetworkSelectionMode": "Landroid/telephony/TelephonyManager;->getNetworkSelectionMode",
                "getNetworkType": "Landroid/telephony/TelephonyManager;->getNetworkType",
                "getPhoneCount": "Landroid/telephony/TelephonyManager;->getPhoneCount",
                "getPhoneType": "Landroid/telephony/TelephonyManager;->getPhoneType",
                "getPreferredOpportunisticDataSubscription": "Landroid/telephony/TelephonyManager;->getPreferredOpportunisticDataSubscription",
                "getSimCarrierId": "Landroid/telephony/TelephonyManager;->getSimCarrierId",
                "getSimSpecificCarrierId": "Landroid/telephony/TelephonyManager;->getSimSpecificCarrierId",
                "getSimState": "Landroid/telephony/TelephonyManager;->getSimState",
                "getSubscriptionId": "Landroid/telephony/TelephonyManager;->getSubscriptionId",
                "getSupportedModemCount": "Landroid/telephony/TelephonyManager;->getSupportedModemCount",
                "getVoiceMessageCount": "Landroid/telephony/TelephonyManager;->getVoiceMessageCount",
                "getVoiceNetworkType": "Landroid/telephony/TelephonyManager;->getVoiceNetworkType",
                "isMultiSimSupported": "Landroid/telephony/TelephonyManager;->isMultiSimSupported",
                "getSimCarrierIdName": "Landroid/telephony/TelephonyManager;->getSimCarrierIdName",
                "getSimSpecificCarrierIdName": "Landroid/telephony/TelephonyManager;->getSimSpecificCarrierIdName",
                "getCdmaEriText": "Landroid/telephony/TelephonyManager;->getCdmaEriText",
                "getGroupIdLevel1": "Landroid/telephony/TelephonyManager;->getGroupIdLevel1",
                "getIccAuthentication": "Landroid/telephony/TelephonyManager;->getIccAuthentication",
                "getImei": "Landroid/telephony/TelephonyManager;->getImei",
                "getManualNetworkSelectionPlmn": "Landroid/telephony/TelephonyManager;->getManualNetworkSelectionPlmn",
                "getManufacturerCode": "Landroid/telephony/TelephonyManager;->getManufacturerCode",
                "getMeid": "Landroid/telephony/TelephonyManager;->getMeid",
                "getMmsUAProfUrl": "Landroid/telephony/TelephonyManager;->getMmsUAProfUrl",
                "getMmsUserAgent": "Landroid/telephony/TelephonyManager;->getMmsUserAgent",
                "getNai": "Landroid/telephony/TelephonyManager;->getNai",
                "getNetworkCountryIso": "Landroid/telephony/TelephonyManager;->getNetworkCountryIso",
                "getNetworkOperator": "Landroid/telephony/TelephonyManager;->getNetworkOperator",
                "getNetworkOperatorName": "Landroid/telephony/TelephonyManager;->getNetworkOperatorName",
                "getNetworkSpecifier": "Landroid/telephony/TelephonyManager;->getNetworkSpecifier",
                "getNetworkTypeName": "Landroid/telephony/TelephonyManager;->getNetworkTypeName",
                "getSimCountryIso": "Landroid/telephony/TelephonyManager;->getSimCountryIso",
                "getSimOperator": "Landroid/telephony/TelephonyManager;->getSimOperator",
                "getSimOperatorName": "Landroid/telephony/TelephonyManager;->getSimOperatorName",
                "getTypeAllocationCode": "Landroid/telephony/TelephonyManager;->getTypeAllocationCode",
                "getVisualVoicemailPackageName": "Landroid/telephony/TelephonyManager;->getVisualVoicemailPackageName",
                "getForbiddenPlmns": "Landroid/telephony/TelephonyManager;->getForbiddenPlmns",
                "getUiccCardsInfo": "Landroid/telephony/TelephonyManager;->getUiccCardsInfo",
                "java": {
                    "util": {
                        "List<android": {
                            "telephony": {
                                "emergency": {
                                    "EmergencyNumber>>getEmergencyNumberList": "Landroid/telephony/TelephonyManager/java/util/List<android/telephony/emergency;->EmergencyNumber>>getEmergencyNumberList"
                                }
                            }
                        }
                    }
                },
                "getDataActivity": "Landroid/telephony/TelephonyManager;->getDataActivity"
            },
            "euicc": {
                "EuiccManager": {
                    "getEuiccInfo": "Landroid/telephony/euicc/EuiccManager;->getEuiccInfo",
                    "isEnabled": "Landroid/telephony/euicc/EuiccManager;->isEnabled",
                    "getEid": "Landroid/telephony/euicc/EuiccManager;->getEid"
                }
            },
            "CellLocation": {
                "getEmpty": "Landroid/telephony/CellLocation;->getEmpty",
                "isEmpty": "Landroid/telephony/CellLocation;->isEmpty"
            },
            "SmsCbMessage": {
                "getGeographicalScope": "Landroid/telephony/SmsCbMessage;->getGeographicalScope",
                "getMessageCode": "Landroid/telephony/SmsCbMessage;->getMessageCode",
                "getMessageIdentifier": "Landroid/telephony/SmsCbMessage;->getMessageIdentifier",
                "getUpdateNumber": "Landroid/telephony/SmsCbMessage;->getUpdateNumber",
                "getLanguageCode": "Landroid/telephony/SmsCbMessage;->getLanguageCode",
                "getMessageBody": "Landroid/telephony/SmsCbMessage;->getMessageBody"
            },
            "SmsMessage": {
                "getMessageClass": "Landroid/telephony/SmsMessage;->getMessageClass",
                "getSubmitPdu": "Landroid/telephony/SmsMessage;->getSubmitPdu",
                "isCphsMwiMessage": "Landroid/telephony/SmsMessage;->isCphsMwiMessage",
                "isEmail": "Landroid/telephony/SmsMessage;->isEmail",
                "isMWIClearMessage": "Landroid/telephony/SmsMessage;->isMWIClearMessage",
                "isMWISetMessage": "Landroid/telephony/SmsMessage;->isMWISetMessage",
                "isMwiDontStore": "Landroid/telephony/SmsMessage;->isMwiDontStore",
                "isReplace": "Landroid/telephony/SmsMessage;->isReplace",
                "isReplyPathPresent": "Landroid/telephony/SmsMessage;->isReplyPathPresent",
                "isStatusReportMessage": "Landroid/telephony/SmsMessage;->isStatusReportMessage",
                "getPdu": "Landroid/telephony/SmsMessage;->getPdu",
                "getUserData": "Landroid/telephony/SmsMessage;->getUserData",
                "getUserDataHeader": "Landroid/telephony/SmsMessage;->getUserDataHeader",
                "getIndexOnIcc": "Landroid/telephony/SmsMessage;->getIndexOnIcc",
                "getIndexOnSim": "Landroid/telephony/SmsMessage;->getIndexOnSim",
                "getProtocolIdentifier": "Landroid/telephony/SmsMessage;->getProtocolIdentifier",
                "getStatus": "Landroid/telephony/SmsMessage;->getStatus",
                "getStatusOnIcc": "Landroid/telephony/SmsMessage;->getStatusOnIcc",
                "getStatusOnSim": "Landroid/telephony/SmsMessage;->getStatusOnSim",
                "getTPLayerLengthForPDU": "Landroid/telephony/SmsMessage;->getTPLayerLengthForPDU",
                "getDisplayMessageBody": "Landroid/telephony/SmsMessage;->getDisplayMessageBody",
                "getDisplayOriginatingAddress": "Landroid/telephony/SmsMessage;->getDisplayOriginatingAddress",
                "getEmailBody": "Landroid/telephony/SmsMessage;->getEmailBody",
                "getEmailFrom": "Landroid/telephony/SmsMessage;->getEmailFrom",
                "getMessageBody": "Landroid/telephony/SmsMessage;->getMessageBody",
                "getOriginatingAddress": "Landroid/telephony/SmsMessage;->getOriginatingAddress",
                "getPseudoSubject": "Landroid/telephony/SmsMessage;->getPseudoSubject",
                "getServiceCenterAddress": "Landroid/telephony/SmsMessage;->getServiceCenterAddress",
                "getTimestampMillis": "Landroid/telephony/SmsMessage;->getTimestampMillis"
            },
            "TelephonyDisplayInfo": {
                "getNetworkType": "Landroid/telephony/TelephonyDisplayInfo;->getNetworkType",
                "getOverrideNetworkType": "Landroid/telephony/TelephonyDisplayInfo;->getOverrideNetworkType"
            },
            "VisualVoicemailSms": {
                "getFields": "Landroid/telephony/VisualVoicemailSms;->getFields",
                "getPhoneAccountHandle": "Landroid/telephony/VisualVoicemailSms;->getPhoneAccountHandle",
                "getMessageBody": "Landroid/telephony/VisualVoicemailSms;->getMessageBody",
                "getPrefix": "Landroid/telephony/VisualVoicemailSms;->getPrefix"
            },
            "cdma": {
                "CdmaCellLocation": {
                    "isEmpty": "Landroid/telephony/cdma/CdmaCellLocation;->isEmpty",
                    "getBaseStationId": "Landroid/telephony/cdma/CdmaCellLocation;->getBaseStationId",
                    "getBaseStationLatitude": "Landroid/telephony/cdma/CdmaCellLocation;->getBaseStationLatitude",
                    "getBaseStationLongitude": "Landroid/telephony/cdma/CdmaCellLocation;->getBaseStationLongitude",
                    "getNetworkId": "Landroid/telephony/cdma/CdmaCellLocation;->getNetworkId",
                    "getSystemId": "Landroid/telephony/cdma/CdmaCellLocation;->getSystemId"
                },
                "getBaseStationId": "Landroid/telephony/cdma;->getBaseStationId",
                "getSystemId": "Landroid/telephony/cdma;->getSystemId",
                "getNetworkId": "Landroid/telephony/cdma;->getNetworkId",
                "getBaseStationLongitude": "Landroid/telephony/cdma;->getBaseStationLongitude",
                "getBaseStationLatitude": "Landroid/telephony/cdma;->getBaseStationLatitude"
            },
            "SubscriptionManager": {
                "addOnSubscriptionsChangedListener": "Landroid/telephony/SubscriptionManager;->addOnSubscriptionsChangedListener",
                "getActiveSubscriptionInfoForSimSlotIndex": "Landroid/telephony/SubscriptionManager;->getActiveSubscriptionInfoForSimSlotIndex",
                "getActiveSubscriptionInfoList": "Landroid/telephony/SubscriptionManager;->getActiveSubscriptionInfoList",
                "getActiveSubscriptionInfoCount": "Landroid/telephony/SubscriptionManager;->getActiveSubscriptionInfoCount",
                "getActiveSubscriptionInfo": "Landroid/telephony/SubscriptionManager;->getActiveSubscriptionInfo"
            }
        },
        "test": {
            "IsolatedContext$MockAccountManager": {
                "getAccountsByType": "Landroid/test/IsolatedContext$MockAccountManager;->getAccountsByType",
                "addAccount": "Landroid/test/IsolatedContext$MockAccountManager;->addAccount",
                "confirmCredentials": "Landroid/test/IsolatedContext$MockAccountManager;->confirmCredentials",
                "editProperties": "Landroid/test/IsolatedContext$MockAccountManager;->editProperties",
                "getAuthToken": "Landroid/test/IsolatedContext$MockAccountManager;->getAuthToken",
                "getAuthTokenByFeatures": "Landroid/test/IsolatedContext$MockAccountManager;->getAuthTokenByFeatures",
                "getAuthTokenLabel": "Landroid/test/IsolatedContext$MockAccountManager;->getAuthTokenLabel",
                "hasFeatures": "Landroid/test/IsolatedContext$MockAccountManager;->hasFeatures",
                "removeAccount": "Landroid/test/IsolatedContext$MockAccountManager;->removeAccount",
                "updateCredentials": "Landroid/test/IsolatedContext$MockAccountManager;->updateCredentials",
                "addAccountExplicitly": "Landroid/test/IsolatedContext$MockAccountManager;->addAccountExplicitly",
                "getPassword": "Landroid/test/IsolatedContext$MockAccountManager;->getPassword",
                "getUserData": "Landroid/test/IsolatedContext$MockAccountManager;->getUserData",
                "peekAuthToken": "Landroid/test/IsolatedContext$MockAccountManager;->peekAuthToken",
                "clearPassword": "Landroid/test/IsolatedContext$MockAccountManager;->clearPassword",
                "invalidateAuthToken": "Landroid/test/IsolatedContext$MockAccountManager;->invalidateAuthToken",
                "setAuthToken": "Landroid/test/IsolatedContext$MockAccountManager;->setAuthToken",
                "setPassword": "Landroid/test/IsolatedContext$MockAccountManager;->setPassword",
                "setUserData": "Landroid/test/IsolatedContext$MockAccountManager;->setUserData",
                "getAccountsByTypeAndFeatures": "Landroid/test/IsolatedContext$MockAccountManager;->getAccountsByTypeAndFeatures",
                "getAccounts": "Landroid/test/IsolatedContext$MockAccountManager;->getAccounts"
            },
            "mock": {
                "MockContentResolver": {
                    "getCurrentSync": "Landroid/test/mock/MockContentResolver;->getCurrentSync",
                    "getSyncStatus": "Landroid/test/mock/MockContentResolver;->getSyncStatus",
                    "getMasterSyncAutomatically": "Landroid/test/mock/MockContentResolver;->getMasterSyncAutomatically",
                    "getSyncAutomatically": "Landroid/test/mock/MockContentResolver;->getSyncAutomatically",
                    "isSyncActive": "Landroid/test/mock/MockContentResolver;->isSyncActive",
                    "isSyncPending": "Landroid/test/mock/MockContentResolver;->isSyncPending",
                    "getIsSyncable": "Landroid/test/mock/MockContentResolver;->getIsSyncable",
                    "getCurrentSyncs": "Landroid/test/mock/MockContentResolver;->getCurrentSyncs",
                    "getPeriodicSyncs": "Landroid/test/mock/MockContentResolver;->getPeriodicSyncs",
                    "addPeriodicSync": "Landroid/test/mock/MockContentResolver;->addPeriodicSync",
                    "removePeriodicSync": "Landroid/test/mock/MockContentResolver;->removePeriodicSync",
                    "setIsSyncable": "Landroid/test/mock/MockContentResolver;->setIsSyncable",
                    "setMasterSyncAutomatically": "Landroid/test/mock/MockContentResolver;->setMasterSyncAutomatically",
                    "setSyncAutomatically": "Landroid/test/mock/MockContentResolver;->setSyncAutomatically"
                },
                "MockApplication": {
                    "clearWallpaper": "Landroid/test/mock/MockApplication;->clearWallpaper",
                    "removeStickyBroadcast": "Landroid/test/mock/MockApplication;->removeStickyBroadcast",
                    "sendStickyBroadcast": "Landroid/test/mock/MockApplication;->sendStickyBroadcast",
                    "sendStickyOrderedBroadcast": "Landroid/test/mock/MockApplication;->sendStickyOrderedBroadcast",
                    "setWallpaper": "Landroid/test/mock/MockApplication;->setWallpaper"
                }
            },
            "SyncBaseInstrumentation": {
                "cancelSyncsandDisableAutoSync": "Landroid/test/SyncBaseInstrumentation;->cancelSyncsandDisableAutoSync",
                "syncProvider": "Landroid/test/SyncBaseInstrumentation;->syncProvider"
            },
            "TestLocationProvider": {
                "isEnabled": "Landroid/test/TestLocationProvider;->isEnabled",
                "getAccuracy": "Landroid/test/TestLocationProvider;->getAccuracy",
                "getPowerRequirement": "Landroid/test/TestLocationProvider;->getPowerRequirement",
                "getStatus": "Landroid/test/TestLocationProvider;->getStatus",
                "getStatusUpdateTime": "Landroid/test/TestLocationProvider;->getStatusUpdateTime"
            },
            "IsolatedContext": {
                "clearWallpaper": "Landroid/test/IsolatedContext;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/test/IsolatedContext;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/test/IsolatedContext;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/test/IsolatedContext;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/test/IsolatedContext;->setWallpaper"
            },
            "RenamingDelegatingContext": {
                "clearWallpaper": "Landroid/test/RenamingDelegatingContext;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/test/RenamingDelegatingContext;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/test/RenamingDelegatingContext;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/test/RenamingDelegatingContext;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/test/RenamingDelegatingContext;->setWallpaper"
            }
        },
        "text": {
            "style": {
                "ImageSpan": {
                    "<init>": "Landroid/text/style/ImageSpan;-><init>"
                }
            },
            "ClipboardManager": {
                "getText": "Landroid/text/ClipboardManager;->getText"
            },
            "format": {
                "toMillis": "Landroid/text/format;->toMillis",
                "$init": "Landroid/text/format;->$init",
                "set": "Landroid/text/format;->set"
            },
            "Editable": {
                "toString": "Landroid/text/Editable;->toString"
            }
        },
        "util": {
            "Base64": {
                "encode": "Landroid/util/Base64;->encode"
            }
        },
        "view": {
            "accessibility": {
                "IAccessibilityManager$Stub$Proxy": {
                    "unregisterUiTestAutomationService": "Landroid/view/accessibility/IAccessibilityManager$Stub$Proxy;->unregisterUiTestAutomationService"
                },
                "IAccessibilityManager$Stub": {
                    "onTransact": "Landroid/view/accessibility/IAccessibilityManager$Stub;->onTransact",
                    "unregisterUiTestAutomationService": "Landroid/view/accessibility/IAccessibilityManager$Stub;->unregisterUiTestAutomationService"
                },
                "IAccessibilityManager": {
                    "unregisterUiTestAutomationService": "Landroid/view/accessibility/IAccessibilityManager;->unregisterUiTestAutomationService",
                    "getAccessibilityServiceList": "Landroid/view/accessibility/IAccessibilityManager;->getAccessibilityServiceList"
                },
                "AccessibilityManager": {
                    "getInstance": "Landroid/view/accessibility/AccessibilityManager;->getInstance",
                    "getClient": "Landroid/view/accessibility/AccessibilityManager;->getClient",
                    "isAccessibilityButtonSupported": "Landroid/view/accessibility/AccessibilityManager;->isAccessibilityButtonSupported",
                    "isEnabled": "Landroid/view/accessibility/AccessibilityManager;->isEnabled",
                    "isTouchExplorationEnabled": "Landroid/view/accessibility/AccessibilityManager;->isTouchExplorationEnabled",
                    "getRecommendedTimeoutMillis": "Landroid/view/accessibility/AccessibilityManager;->getRecommendedTimeoutMillis",
                    "getEnabledAccessibilityServiceList": "Landroid/view/accessibility/AccessibilityManager;->getEnabledAccessibilityServiceList",
                    "getInstalledAccessibilityServiceList": "Landroid/view/accessibility/AccessibilityManager;->getInstalledAccessibilityServiceList",
                    "getAccessibilityServiceList": "Landroid/view/accessibility/AccessibilityManager;->getAccessibilityServiceList"
                },
                "CaptioningManager": {
                    "getUserStyle": "Landroid/view/accessibility/CaptioningManager;->getUserStyle",
                    "booleanisEnabled": "Landroid/view/accessibility/CaptioningManager;->booleanisEnabled",
                    "floatgetFontScale": "Landroid/view/accessibility/CaptioningManager;->floatgetFontScale",
                    "java": {
                        "util": {
                            "LocalegetLocale": "Landroid/view/accessibility/CaptioningManager/java/util;->LocalegetLocale"
                        }
                    }
                }
            },
            "FallbackEventHandler": {
                "dispatchKeyEvent": "Landroid/view/FallbackEventHandler;->dispatchKeyEvent"
            },
            "GLES20Canvas": {
                "drawText": "Landroid/view/GLES20Canvas;->drawText"
            },
            "HardwareCanvas": {
                "callDrawGLFunction": "Landroid/view/HardwareCanvas;->callDrawGLFunction"
            },
            "IApplicationToken$Stub$Proxy": {
                "keyDispatchingTimedOut": "Landroid/view/IApplicationToken$Stub$Proxy;->keyDispatchingTimedOut",
                "windowsVisible": "Landroid/view/IApplicationToken$Stub$Proxy;->windowsVisible"
            },
            "IApplicationToken$Stub": {
                "keyDispatchingTimedOut": "Landroid/view/IApplicationToken$Stub;->keyDispatchingTimedOut",
                "onTransact": "Landroid/view/IApplicationToken$Stub;->onTransact",
                "windowsVisible": "Landroid/view/IApplicationToken$Stub;->windowsVisible"
            },
            "IApplicationToken": {
                "keyDispatchingTimedOut": "Landroid/view/IApplicationToken;->keyDispatchingTimedOut",
                "windowsVisible": "Landroid/view/IApplicationToken;->windowsVisible"
            },
            "IInputFilter$Stub$Proxy": {
                "install": "Landroid/view/IInputFilter$Stub$Proxy;->install"
            },
            "IWindowManager$Stub$Proxy": {
                "getScancodeState": "Landroid/view/IWindowManager$Stub$Proxy;->getScancodeState",
                "clearForcedDisplaySize": "Landroid/view/IWindowManager$Stub$Proxy;->clearForcedDisplaySize",
                "disableKeyguard": "Landroid/view/IWindowManager$Stub$Proxy;->disableKeyguard",
                "dismissKeyguard": "Landroid/view/IWindowManager$Stub$Proxy;->dismissKeyguard",
                "executeAppTransition": "Landroid/view/IWindowManager$Stub$Proxy;->executeAppTransition",
                "exitKeyguardSecurely": "Landroid/view/IWindowManager$Stub$Proxy;->exitKeyguardSecurely",
                "freezeRotation": "Landroid/view/IWindowManager$Stub$Proxy;->freezeRotation",
                "moveAppToken": "Landroid/view/IWindowManager$Stub$Proxy;->moveAppToken",
                "prepareAppTransition": "Landroid/view/IWindowManager$Stub$Proxy;->prepareAppTransition",
                "reenableKeyguard": "Landroid/view/IWindowManager$Stub$Proxy;->reenableKeyguard",
                "setForcedDisplaySize": "Landroid/view/IWindowManager$Stub$Proxy;->setForcedDisplaySize",
                "setNewConfiguration": "Landroid/view/IWindowManager$Stub$Proxy;->setNewConfiguration",
                "stopAppFreezingScreen": "Landroid/view/IWindowManager$Stub$Proxy;->stopAppFreezingScreen",
                "thawRotation": "Landroid/view/IWindowManager$Stub$Proxy;->thawRotation"
            },
            "IWindowManager$Stub": {
                "onTransact": "Landroid/view/IWindowManager$Stub;->onTransact",
                "clearForcedDisplaySize": "Landroid/view/IWindowManager$Stub;->clearForcedDisplaySize",
                "disableKeyguard": "Landroid/view/IWindowManager$Stub;->disableKeyguard",
                "dismissKeyguard": "Landroid/view/IWindowManager$Stub;->dismissKeyguard",
                "exitKeyguardSecurely": "Landroid/view/IWindowManager$Stub;->exitKeyguardSecurely",
                "freezeRotation": "Landroid/view/IWindowManager$Stub;->freezeRotation",
                "prepareAppTransition": "Landroid/view/IWindowManager$Stub;->prepareAppTransition",
                "reenableKeyguard": "Landroid/view/IWindowManager$Stub;->reenableKeyguard",
                "setForcedDisplaySize": "Landroid/view/IWindowManager$Stub;->setForcedDisplaySize",
                "setNewConfiguration": "Landroid/view/IWindowManager$Stub;->setNewConfiguration",
                "thawRotation": "Landroid/view/IWindowManager$Stub;->thawRotation"
            },
            "IWindowManager": {
                "clearForcedDisplaySize": "Landroid/view/IWindowManager;->clearForcedDisplaySize",
                "disableKeyguard": "Landroid/view/IWindowManager;->disableKeyguard",
                "dismissKeyguard": "Landroid/view/IWindowManager;->dismissKeyguard",
                "exitKeyguardSecurely": "Landroid/view/IWindowManager;->exitKeyguardSecurely",
                "freezeRotation": "Landroid/view/IWindowManager;->freezeRotation",
                "prepareAppTransition": "Landroid/view/IWindowManager;->prepareAppTransition",
                "reenableKeyguard": "Landroid/view/IWindowManager;->reenableKeyguard",
                "setForcedDisplaySize": "Landroid/view/IWindowManager;->setForcedDisplaySize",
                "setNewConfiguration": "Landroid/view/IWindowManager;->setNewConfiguration",
                "thawRotation": "Landroid/view/IWindowManager;->thawRotation"
            },
            "IWindowSession$Stub$Proxy": {
                "prepareDrag": "Landroid/view/IWindowSession$Stub$Proxy;->prepareDrag",
                "performDrag": "Landroid/view/IWindowSession$Stub$Proxy;->performDrag",
                "add": "Landroid/view/IWindowSession$Stub$Proxy;->add",
                "addWithoutInputChannel": "Landroid/view/IWindowSession$Stub$Proxy;->addWithoutInputChannel"
            },
            "IWindowSession$Stub": {
                "prepareDrag": "Landroid/view/IWindowSession$Stub;->prepareDrag",
                "onTransact": "Landroid/view/IWindowSession$Stub;->onTransact",
                "performDrag": "Landroid/view/IWindowSession$Stub;->performDrag",
                "add": "Landroid/view/IWindowSession$Stub;->add",
                "addWithoutInputChannel": "Landroid/view/IWindowSession$Stub;->addWithoutInputChannel"
            },
            "IWindowSession": {
                "prepareDrag": "Landroid/view/IWindowSession;->prepareDrag",
                "performDrag": "Landroid/view/IWindowSession;->performDrag",
                "add": "Landroid/view/IWindowSession;->add",
                "addWithoutInputChannel": "Landroid/view/IWindowSession;->addWithoutInputChannel"
            },
            "SurfaceView": {
                "updateWindow": "Landroid/view/SurfaceView;->updateWindow"
            },
            "View$10": {
                "get": "Landroid/view/View$10;->get"
            },
            "View": {
                "startDrag": "Landroid/view/View;->startDrag"
            },
            "VolumePanel": {
                "onMuteChanged": "Landroid/view/VolumePanel;->onMuteChanged",
                "onRemoteVolumeChanged": "Landroid/view/VolumePanel;->onRemoteVolumeChanged",
                "onRemoteVolumeUpdateIfShown": "Landroid/view/VolumePanel;->onRemoteVolumeUpdateIfShown",
                "onShowVolumeChanged": "Landroid/view/VolumePanel;->onShowVolumeChanged",
                "onVibrate": "Landroid/view/VolumePanel;->onVibrate",
                "onVolumeChanged": "Landroid/view/VolumePanel;->onVolumeChanged"
            },
            "WindowManagerPolicy$WindowManagerFuncs": {
                "rebootSafeMode": "Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->rebootSafeMode",
                "reevaluateStatusBarVisibility": "Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->reevaluateStatusBarVisibility",
                "shutdown": "Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->shutdown"
            },
            "WindowManagerPolicy": {
                "dispatchUnhandledKey": "Landroid/view/WindowManagerPolicy;->dispatchUnhandledKey",
                "performHapticFeedbackLw": "Landroid/view/WindowManagerPolicy;->performHapticFeedbackLw",
                "checkAddPermission": "Landroid/view/WindowManagerPolicy;->checkAddPermission",
                "interceptKeyBeforeQueueing": "Landroid/view/WindowManagerPolicy;->interceptKeyBeforeQueueing",
                "interceptMotionBeforeQueueingWhenScreenOff": "Landroid/view/WindowManagerPolicy;->interceptMotionBeforeQueueingWhenScreenOff",
                "interceptKeyBeforeDispatching": "Landroid/view/WindowManagerPolicy;->interceptKeyBeforeDispatching",
                "enableKeyguard": "Landroid/view/WindowManagerPolicy;->enableKeyguard",
                "exitKeyguardSecurely": "Landroid/view/WindowManagerPolicy;->exitKeyguardSecurely",
                "init": "Landroid/view/WindowManagerPolicy;->init",
                "notifyLidSwitchChanged": "Landroid/view/WindowManagerPolicy;->notifyLidSwitchChanged",
                "screenTurnedOff": "Landroid/view/WindowManagerPolicy;->screenTurnedOff",
                "screenTurningOn": "Landroid/view/WindowManagerPolicy;->screenTurningOn",
                "setSafeMode": "Landroid/view/WindowManagerPolicy;->setSafeMode",
                "setUserRotationMode": "Landroid/view/WindowManagerPolicy;->setUserRotationMode",
                "systemReady": "Landroid/view/WindowManagerPolicy;->systemReady"
            },
            "ContextThemeWrapper": {
                "clearWallpaper": "Landroid/view/ContextThemeWrapper;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/view/ContextThemeWrapper;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/view/ContextThemeWrapper;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/view/ContextThemeWrapper;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/view/ContextThemeWrapper;->setWallpaper"
            },
            "Window": {
                "setIcon": "Landroid/view/Window;->setIcon",
                "getLayoutInflater": "Landroid/view/Window;->getLayoutInflater",
                "setLogo": "Landroid/view/Window;->setLogo"
            },
            "animation": {
                "start": "Landroid/view/animation;->start"
            },
            "inputmethod": {
                "showInputMethodAndSubtypeEnabler": "Landroid/view/inputmethod;->showInputMethodAndSubtypeEnabler"
            }
        },
        "webkit": {
            "GeolocationService": {
                "start": "Landroid/webkit/GeolocationService;->start",
                "registerForLocationUpdates": "Landroid/webkit/GeolocationService;->registerForLocationUpdates",
                "setEnableGps": "Landroid/webkit/GeolocationService;->setEnableGps"
            },
            "HTML5Audio": {
                "onError": "Landroid/webkit/HTML5Audio;->onError",
                "<init>": "Landroid/webkit/HTML5Audio;-><init>",
                "onAudioFocusChange": "Landroid/webkit/HTML5Audio;->onAudioFocusChange",
                "onPrepared": "Landroid/webkit/HTML5Audio;->onPrepared",
                "pause": "Landroid/webkit/HTML5Audio;->pause",
                "play": "Landroid/webkit/HTML5Audio;->play",
                "resetMediaPlayer": "Landroid/webkit/HTML5Audio;->resetMediaPlayer",
                "setDataSource": "Landroid/webkit/HTML5Audio;->setDataSource",
                "teardown": "Landroid/webkit/HTML5Audio;->teardown"
            },
            "HTML5VideoFullScreen$1": {
                "surfaceCreated": "Landroid/webkit/HTML5VideoFullScreen$1;->surfaceCreated",
                "surfaceDestroyed": "Landroid/webkit/HTML5VideoFullScreen$1;->surfaceDestroyed"
            },
            "HTML5VideoFullScreen": {
                "onPrepared": "Landroid/webkit/HTML5VideoFullScreen;->onPrepared",
                "pause": "Landroid/webkit/HTML5VideoFullScreen;->pause",
                "pauseAndDispatch": "Landroid/webkit/HTML5VideoFullScreen;->pauseAndDispatch",
                "prepareDataAndDisplayMode": "Landroid/webkit/HTML5VideoFullScreen;->prepareDataAndDisplayMode",
                "prepareDataCommon": "Landroid/webkit/HTML5VideoFullScreen;->prepareDataCommon",
                "prepareForFullScreen": "Landroid/webkit/HTML5VideoFullScreen;->prepareForFullScreen",
                "reprepareData": "Landroid/webkit/HTML5VideoFullScreen;->reprepareData",
                "reset": "Landroid/webkit/HTML5VideoFullScreen;->reset",
                "start": "Landroid/webkit/HTML5VideoFullScreen;->start",
                "stopPlayback": "Landroid/webkit/HTML5VideoFullScreen;->stopPlayback"
            },
            "HTML5VideoInline": {
                "onPrepared": "Landroid/webkit/HTML5VideoInline;->onPrepared",
                "pause": "Landroid/webkit/HTML5VideoInline;->pause",
                "pauseAndDispatch": "Landroid/webkit/HTML5VideoInline;->pauseAndDispatch",
                "prepareDataAndDisplayMode": "Landroid/webkit/HTML5VideoInline;->prepareDataAndDisplayMode",
                "prepareDataCommon": "Landroid/webkit/HTML5VideoInline;->prepareDataCommon",
                "reprepareData": "Landroid/webkit/HTML5VideoInline;->reprepareData",
                "reset": "Landroid/webkit/HTML5VideoInline;->reset",
                "start": "Landroid/webkit/HTML5VideoInline;->start",
                "stopPlayback": "Landroid/webkit/HTML5VideoInline;->stopPlayback"
            },
            "HTML5VideoViewProxy$VideoPlayer": {
                "enterFullScreenVideo": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->enterFullScreenVideo",
                "onPrepared": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->onPrepared",
                "pauseAndDispatch": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->pauseAndDispatch",
                "pause": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->pause",
                "play": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->play",
                "setBaseLayer": "Landroid/webkit/HTML5VideoViewProxy$VideoPlayer;->setBaseLayer"
            },
            "HTML5VideoViewProxy": {
                "enterFullScreenVideo": "Landroid/webkit/HTML5VideoViewProxy;->enterFullScreenVideo",
                "onPrepared": "Landroid/webkit/HTML5VideoViewProxy;->onPrepared",
                "pause": "Landroid/webkit/HTML5VideoViewProxy;->pause",
                "pauseAndDispatch": "Landroid/webkit/HTML5VideoViewProxy;->pauseAndDispatch",
                "play": "Landroid/webkit/HTML5VideoViewProxy;->play",
                "setBaseLayer": "Landroid/webkit/HTML5VideoViewProxy;->setBaseLayer"
            },
            "HTML5VideoView": {
                "onPrepared": "Landroid/webkit/HTML5VideoView;->onPrepared",
                "pause": "Landroid/webkit/HTML5VideoView;->pause",
                "pauseAndDispatch": "Landroid/webkit/HTML5VideoView;->pauseAndDispatch",
                "prepareDataAndDisplayMode": "Landroid/webkit/HTML5VideoView;->prepareDataAndDisplayMode",
                "prepareDataCommon": "Landroid/webkit/HTML5VideoView;->prepareDataCommon",
                "reprepareData": "Landroid/webkit/HTML5VideoView;->reprepareData",
                "reset": "Landroid/webkit/HTML5VideoView;->reset",
                "start": "Landroid/webkit/HTML5VideoView;->start",
                "stopPlayback": "Landroid/webkit/HTML5VideoView;->stopPlayback"
            },
            "PluginFullScreenHolder$CustomFrameLayout": {
                "onKeyDown": "Landroid/webkit/PluginFullScreenHolder$CustomFrameLayout;->onKeyDown"
            },
            "Plugin": {
                "toString": "Landroid/webkit/Plugin;->toString"
            },
            "WebIconDatabaseClassic$EventHandler": {
                "bulkRequestIcons": "Landroid/webkit/WebIconDatabaseClassic$EventHandler;->bulkRequestIcons",
                "postMessage": "Landroid/webkit/WebIconDatabaseClassic$EventHandler;->postMessage"
            },
            "WebIconDatabaseClassic": {
                "bulkRequestIconForPageUrl": "Landroid/webkit/WebIconDatabaseClassic;->bulkRequestIconForPageUrl",
                "close": "Landroid/webkit/WebIconDatabaseClassic;->close",
                "open": "Landroid/webkit/WebIconDatabaseClassic;->open",
                "releaseIconForPageUrl": "Landroid/webkit/WebIconDatabaseClassic;->releaseIconForPageUrl",
                "removeAllIcons": "Landroid/webkit/WebIconDatabaseClassic;->removeAllIcons",
                "requestIconForPageUrl": "Landroid/webkit/WebIconDatabaseClassic;->requestIconForPageUrl",
                "retainIconForPageUrl": "Landroid/webkit/WebIconDatabaseClassic;->retainIconForPageUrl"
            },
            "WebSettings": {
                "getJavaScriptCanOpenWindowsAutomatically": "Landroid/webkit/WebSettings;->getJavaScriptCanOpenWindowsAutomatically",
                "<init>": "Landroid/webkit/WebSettings;-><init>",
                "setBlockNetworkLoads": "Landroid/webkit/WebSettings;->setBlockNetworkLoads",
                "setMinimumFontSize": "Landroid/webkit/WebSettings;->setMinimumFontSize",
                "getMinimumFontSize": "Landroid/webkit/WebSettings;->getMinimumFontSize",
                "setDefaultZoom": "Landroid/webkit/WebSettings;->setDefaultZoom",
                "setTextSize": "Landroid/webkit/WebSettings;->setTextSize"
            },
            "WebSettingsClassic": {
                "<init>": "Landroid/webkit/WebSettingsClassic;-><init>",
                "setBlockNetworkLoads": "Landroid/webkit/WebSettingsClassic;->setBlockNetworkLoads",
                "verifyNetworkAccess": "Landroid/webkit/WebSettingsClassic;->verifyNetworkAccess"
            },
            "WebViewClassic$5": {
                "onClick": "Landroid/webkit/WebViewClassic$5;->onClick"
            },
            "WebViewClassic$8": {
                "onPostExecute": "Landroid/webkit/WebViewClassic$8;->onPostExecute"
            },
            "WebViewClassic": {
                "onKeyDown": "Landroid/webkit/WebViewClassic;->onKeyDown",
                "clearView": "Landroid/webkit/WebViewClassic;->clearView",
                "drawContent": "Landroid/webkit/WebViewClassic;->drawContent",
                "init": "Landroid/webkit/WebViewClassic;->init",
                "onDraw": "Landroid/webkit/WebViewClassic;->onDraw",
                "onPause": "Landroid/webkit/WebViewClassic;->onPause",
                "onSizeChanged": "Landroid/webkit/WebViewClassic;->onSizeChanged",
                "setBaseLayer": "Landroid/webkit/WebViewClassic;->setBaseLayer",
                "setNewPicture": "Landroid/webkit/WebViewClassic;->setNewPicture"
            },
            "WebViewClient": {
                "shouldOverrideUrlLoading": "Landroid/webkit/WebViewClient;->shouldOverrideUrlLoading"
            },
            "WebViewCore": {
                "<init>": "Landroid/webkit/WebViewCore;-><init>",
                "setMockGeolocationError": "Landroid/webkit/WebViewCore;->setMockGeolocationError"
            },
            "WebViewFragment": {
                "onCreateView": "Landroid/webkit/WebViewFragment;->onCreateView",
                "onPause": "Landroid/webkit/WebViewFragment;->onPause"
            },
            "WebViewProvider": {
                "clearView": "Landroid/webkit/WebViewProvider;->clearView",
                "init": "Landroid/webkit/WebViewProvider;->init"
            },
            "WebView": {
                "<init>": "Landroid/webkit/WebView;-><init>",
                "clearView": "Landroid/webkit/WebView;->clearView",
                "dispatchKeyEvent": "Landroid/webkit/WebView;->dispatchKeyEvent",
                "enablePlatformNotifications": "Landroid/webkit/WebView;->enablePlatformNotifications",
                "onDraw": "Landroid/webkit/WebView;->onDraw",
                "onKeyDown": "Landroid/webkit/WebView;->onKeyDown",
                "onPause": "Landroid/webkit/WebView;->onPause",
                "onSizeChanged": "Landroid/webkit/WebView;->onSizeChanged",
                "saveWebArchive": "Landroid/webkit/WebView;->saveWebArchive",
                "loadData": "Landroid/webkit/WebView;->loadData",
                "getVisibility": "Landroid/webkit/WebView;->getVisibility",
                "removeAllViews": "Landroid/webkit/WebView;->removeAllViews",
                "setTag": "Landroid/webkit/WebView;->setTag",
                "setDownloadListener": "Landroid/webkit/WebView;->setDownloadListener",
                "setVerticalScrollbarOverlay": "Landroid/webkit/WebView;->setVerticalScrollbarOverlay",
                "removeJavascriptInterface": "Landroid/webkit/WebView;->removeJavascriptInterface"
            },
            "GoogleLocationSettingManager": {
                "getInstance": "Landroid/webkit/GoogleLocationSettingManager;->getInstance"
            },
            "WebIconDatabase": {
                "close": "Landroid/webkit/WebIconDatabase;->close",
                "open": "Landroid/webkit/WebIconDatabase;->open",
                "releaseIconForPageUrl": "Landroid/webkit/WebIconDatabase;->releaseIconForPageUrl",
                "removeAllIcons": "Landroid/webkit/WebIconDatabase;->removeAllIcons",
                "requestIconForPageUrl": "Landroid/webkit/WebIconDatabase;->requestIconForPageUrl",
                "retainIconForPageUrl": "Landroid/webkit/WebIconDatabase;->retainIconForPageUrl"
            },
            "WebChromeClient": {
                "onRequestFocus": "Landroid/webkit/WebChromeClient;->onRequestFocus"
            },
            "CookieManager": {
                "removeAllCookie": "Landroid/webkit/CookieManager;->removeAllCookie"
            }
        },
        "widget": {
            "AbsListView": {
                "isTextFilterEnabled": "Landroid/widget/AbsListView;->isTextFilterEnabled"
            },
            "ActivityChooserModel$DataModelPackageMonitor": {
                "onHandleForceStop": "Landroid/widget/ActivityChooserModel$DataModelPackageMonitor;->onHandleForceStop",
                "onPackageRemoved": "Landroid/widget/ActivityChooserModel$DataModelPackageMonitor;->onPackageRemoved",
                "onReceive": "Landroid/widget/ActivityChooserModel$DataModelPackageMonitor;->onReceive"
            },
            "ActivityChooserView": {
                "setActivityChooserModel": "Landroid/widget/ActivityChooserView;->setActivityChooserModel"
            },
            "DateTimeView": {
                "onAttachedToWindow": "Landroid/widget/DateTimeView;->onAttachedToWindow",
                "registerReceivers": "Landroid/widget/DateTimeView;->registerReceivers"
            },
            "Editor": {
                "finishBatchEdit": "Landroid/widget/Editor;->finishBatchEdit"
            },
            "LinearLayout": {
                "getDividerWidth": "Landroid/widget/LinearLayout;->getDividerWidth",
                "setBackgroundDrawable": "Landroid/widget/LinearLayout;->setBackgroundDrawable",
                "setMinimumWidth": "Landroid/widget/LinearLayout;->setMinimumWidth"
            },
            "ListPopupWindow": {
                "setDropDownAlwaysVisible": "Landroid/widget/ListPopupWindow;->setDropDownAlwaysVisible"
            },
            "QuickContactBadge$QueryHandler": {
                "onQueryComplete": "Landroid/widget/QuickContactBadge$QueryHandler;->onQueryComplete"
            },
            "QuickContactBadge": {
                "assignContactFromEmail": "Landroid/widget/QuickContactBadge;->assignContactFromEmail",
                "assignContactFromPhone": "Landroid/widget/QuickContactBadge;->assignContactFromPhone",
                "onClick": "Landroid/widget/QuickContactBadge;->onClick"
            },
            "Switch": {
                "setSwitchTypeface": "Landroid/widget/Switch;->setSwitchTypeface"
            },
            "TextView": {
                "onPreDraw": "Landroid/widget/TextView;->onPreDraw",
                "setText": "Landroid/widget/TextView;->setText"
            },
            "VideoView$2": {
                "onPrepared": "Landroid/widget/VideoView$2;->onPrepared"
            },
            "VideoView$6": {
                "surfaceChanged": "Landroid/widget/VideoView$6;->surfaceChanged",
                "surfaceCreated": "Landroid/widget/VideoView$6;->surfaceCreated",
                "surfaceDestroyed": "Landroid/widget/VideoView$6;->surfaceDestroyed"
            },
            "VideoView": {
                "onKeyDown": "Landroid/widget/VideoView;->onKeyDown",
                "openVideo": "Landroid/widget/VideoView;->openVideo",
                "pause": "Landroid/widget/VideoView;->pause",
                "release": "Landroid/widget/VideoView;->release",
                "resume": "Landroid/widget/VideoView;->resume",
                "setVideoPath": "Landroid/widget/VideoView;->setVideoPath",
                "setVideoURI": "Landroid/widget/VideoView;->setVideoURI",
                "start": "Landroid/widget/VideoView;->start",
                "stopPlayback": "Landroid/widget/VideoView;->stopPlayback",
                "suspend": "Landroid/widget/VideoView;->suspend"
            },
            "RemoteViewsService": {
                "clearWallpaper": "Landroid/widget/RemoteViewsService;->clearWallpaper",
                "removeStickyBroadcast": "Landroid/widget/RemoteViewsService;->removeStickyBroadcast",
                "sendStickyBroadcast": "Landroid/widget/RemoteViewsService;->sendStickyBroadcast",
                "sendStickyOrderedBroadcast": "Landroid/widget/RemoteViewsService;->sendStickyOrderedBroadcast",
                "setWallpaper": "Landroid/widget/RemoteViewsService;->setWallpaper"
            },
            "EditText": {
                "setFocusable": "Landroid/widget/EditText;->setFocusable",
                "setTextSize": "Landroid/widget/EditText;->setTextSize",
                "setFocusableInTouchMode": "Landroid/widget/EditText;->setFocusableInTouchMode",
                "setGravity": "Landroid/widget/EditText;->setGravity",
                "getContext": "Landroid/widget/EditText;->getContext"
            },
            "CheckBox": {
                "getTextColors": "Landroid/widget/CheckBox;->getTextColors"
            },
            "RadioButton": {
                "setOnCheckedChangeListener": "Landroid/widget/RadioButton;->setOnCheckedChangeListener",
                "isChecked": "Landroid/widget/RadioButton;->isChecked"
            },
            "Toast": {
                "cancel": "Landroid/widget/Toast;->cancel"
            }
        },
        "backup": {
            "IBackupManager": {
                "isBackupEnabled": "Landroid/backup/IBackupManager;->isBackupEnabled",
                "getCurrentTransport": "Landroid/backup/IBackupManager;->getCurrentTransport"
            }
        },
        "companion": {
            "CompanionDeviceManager": {
                "getAssociations": "Landroid/companion/CompanionDeviceManager;->getAssociations"
            }
        },
        "print": {
            "PrintManager": {
                "getPrintJobs": "Landroid/print/PrintManager;->getPrintJobs"
            }
        },
        "telecom": {
            "TelecomManager": {
                "getAdnUriForPhoneAccount": "Landroid/telecom/TelecomManager;->getAdnUriForPhoneAccount",
                "getPhoneAccount": "Landroid/telecom/TelecomManager;->getPhoneAccount",
                "getDefaultOutgoingPhoneAccount": "Landroid/telecom/TelecomManager;->getDefaultOutgoingPhoneAccount",
                "getSimCallManager": "Landroid/telecom/TelecomManager;->getSimCallManager",
                "getSimCallManagerForSubscription": "Landroid/telecom/TelecomManager;->getSimCallManagerForSubscription",
                "getUserSelectedOutgoingPhoneAccount": "Landroid/telecom/TelecomManager;->getUserSelectedOutgoingPhoneAccount",
                "isInCall": "Landroid/telecom/TelecomManager;->isInCall",
                "isInManagedCall": "Landroid/telecom/TelecomManager;->isInManagedCall",
                "isIncomingCallPermitted": "Landroid/telecom/TelecomManager;->isIncomingCallPermitted",
                "isOutgoingCallPermitted": "Landroid/telecom/TelecomManager;->isOutgoingCallPermitted",
                "isTtySupported": "Landroid/telecom/TelecomManager;->isTtySupported",
                "isVoiceMailNumber": "Landroid/telecom/TelecomManager;->isVoiceMailNumber",
                "getDefaultDialerPackage": "Landroid/telecom/TelecomManager;->getDefaultDialerPackage",
                "getLine1Number": "Landroid/telecom/TelecomManager;->getLine1Number",
                "getSystemDialerPackage": "Landroid/telecom/TelecomManager;->getSystemDialerPackage",
                "getVoiceMailNumber": "Landroid/telecom/TelecomManager;->getVoiceMailNumber",
                "getCallCapablePhoneAccounts": "Landroid/telecom/TelecomManager;->getCallCapablePhoneAccounts",
                "getSelfManagedPhoneAccounts": "Landroid/telecom/TelecomManager;->getSelfManagedPhoneAccounts",
                "showInCallScreen": "Landroid/telecom/TelecomManager;->showInCallScreen"
            }
        }
    },
    "dalvik": {
        "system": {
            "BaseDexClassLoader": {
                "<init>": "Ldalvik/system/BaseDexClassLoader;-><init>"
            },
            "DexClassLoader": {
                "<init>": "Ldalvik/system/DexClassLoader;-><init>",
                "findLibrary": "Ldalvik/system/DexClassLoader;->findLibrary"
            },
            "PathClassLoader": {
                "<init>": "Ldalvik/system/PathClassLoader;-><init>"
            }
        }
    },
    "com": {
        "adobe": {
            "xmp": {
                "impl": {
                    "XMPMetaImpl": {
                        "setNode": "Lcom/adobe/xmp/impl/XMPMetaImpl;->setNode"
                    },
                    "xpath": {
                        "XMPPathSegment": {
                            "setAliasForm": "Lcom/adobe/xmp/impl/xpath/XMPPathSegment;->setAliasForm"
                        }
                    }
                }
            }
        },
        "android": {
            "bluetooth": {
                "opp": {
                    "BluetoothOppBtEnableActivity": {
                        "onClick": "Lcom/android/bluetooth/opp/BluetoothOppBtEnableActivity;->onClick",
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppBtEnableActivity;->onCreate"
                    },
                    "BluetoothOppBtEnablingActivity": {
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppBtEnablingActivity;->onCreate"
                    },
                    "BluetoothOppBtErrorActivity": {
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppBtErrorActivity;->onCreate"
                    },
                    "BluetoothOppIncomingFileConfirmActivity": {
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppIncomingFileConfirmActivity;->onCreate"
                    },
                    "BluetoothOppLauncherActivity": {
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppLauncherActivity;->onCreate"
                    },
                    "BluetoothOppManager": {
                        "isEnabled": "Lcom/android/bluetooth/opp/BluetoothOppManager;->isEnabled",
                        "getDeviceName": "Lcom/android/bluetooth/opp/BluetoothOppManager;->getDeviceName",
                        "disableBluetooth": "Lcom/android/bluetooth/opp/BluetoothOppManager;->disableBluetooth",
                        "enableBluetooth": "Lcom/android/bluetooth/opp/BluetoothOppManager;->enableBluetooth"
                    },
                    "BluetoothOppNotification$NotificationUpdateThread": {
                        "run": "Lcom/android/bluetooth/opp/BluetoothOppNotification$NotificationUpdateThread;->run"
                    },
                    "BluetoothOppNotification": {
                        "updateActiveNotification": "Lcom/android/bluetooth/opp/BluetoothOppNotification;->updateActiveNotification",
                        "updateCompletedNotification": "Lcom/android/bluetooth/opp/BluetoothOppNotification;->updateCompletedNotification",
                        "updateIncomingFileConfirmNotification": "Lcom/android/bluetooth/opp/BluetoothOppNotification;->updateIncomingFileConfirmNotification"
                    },
                    "BluetoothOppObexClientSession$ClientThread": {
                        "run": "Lcom/android/bluetooth/opp/BluetoothOppObexClientSession$ClientThread;->run"
                    },
                    "BluetoothOppObexClientSession": {
                        "start": "Lcom/android/bluetooth/opp/BluetoothOppObexClientSession;->start"
                    },
                    "BluetoothOppObexServerSession": {
                        "onPut": "Lcom/android/bluetooth/opp/BluetoothOppObexServerSession;->onPut",
                        "onClose": "Lcom/android/bluetooth/opp/BluetoothOppObexServerSession;->onClose",
                        "preStart": "Lcom/android/bluetooth/opp/BluetoothOppObexServerSession;->preStart",
                        "releaseWakeLocks": "Lcom/android/bluetooth/opp/BluetoothOppObexServerSession;->releaseWakeLocks"
                    },
                    "BluetoothOppObexSession": {
                        "start": "Lcom/android/bluetooth/opp/BluetoothOppObexSession;->start"
                    },
                    "BluetoothOppReceiver": {
                        "onReceive": "Lcom/android/bluetooth/opp/BluetoothOppReceiver;->onReceive"
                    },
                    "BluetoothOppRfcommListener$1": {
                        "run": "Lcom/android/bluetooth/opp/BluetoothOppRfcommListener$1;->run"
                    },
                    "BluetoothOppService$BluetoothShareContentObserver": {
                        "onChange": "Lcom/android/bluetooth/opp/BluetoothOppService$BluetoothShareContentObserver;->onChange"
                    },
                    "BluetoothOppService$UpdateThread": {
                        "run": "Lcom/android/bluetooth/opp/BluetoothOppService$UpdateThread;->run"
                    },
                    "BluetoothOppService": {
                        "onStartCommand": "Lcom/android/bluetooth/opp/BluetoothOppService;->onStartCommand",
                        "createServerSession": "Lcom/android/bluetooth/opp/BluetoothOppService;->createServerSession",
                        "deleteShare": "Lcom/android/bluetooth/opp/BluetoothOppService;->deleteShare",
                        "insertShare": "Lcom/android/bluetooth/opp/BluetoothOppService;->insertShare",
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppService;->onCreate",
                        "removeBatch": "Lcom/android/bluetooth/opp/BluetoothOppService;->removeBatch",
                        "startListener": "Lcom/android/bluetooth/opp/BluetoothOppService;->startListener",
                        "updateFromProvider": "Lcom/android/bluetooth/opp/BluetoothOppService;->updateFromProvider",
                        "updateShare": "Lcom/android/bluetooth/opp/BluetoothOppService;->updateShare"
                    },
                    "BluetoothOppTransfer$2": {
                        "onReceive": "Lcom/android/bluetooth/opp/BluetoothOppTransfer$2;->onReceive"
                    },
                    "BluetoothOppTransfer$SocketConnectThread": {
                        "run": "Lcom/android/bluetooth/opp/BluetoothOppTransfer$SocketConnectThread;->run"
                    },
                    "BluetoothOppTransferActivity$BluetoothTransferContentObserver": {
                        "onChange": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity$BluetoothTransferContentObserver;->onChange"
                    },
                    "BluetoothOppTransferActivity": {
                        "createView": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;->createView",
                        "onClick": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;->onClick",
                        "onCreate": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;->onCreate",
                        "setUpDialog": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;->setUpDialog",
                        "updateProgressbar": "Lcom/android/bluetooth/opp/BluetoothOppTransferActivity;->updateProgressbar"
                    },
                    "BluetoothOppTransferAdapter": {
                        "bindView": "Lcom/android/bluetooth/opp/BluetoothOppTransferAdapter;->bindView"
                    },
                    "BluetoothOppTransferHistory$1": {
                        "onClick": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory$1;->onClick"
                    },
                    "BluetoothOppTransferHistory": {
                        "onContextItemSelected": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;->onContextItemSelected",
                        "clearAllDownloads": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;->clearAllDownloads",
                        "onItemClick": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;->onItemClick",
                        "openCompleteTransfer": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;->openCompleteTransfer",
                        "updateNotificationWhenBtDisabled": "Lcom/android/bluetooth/opp/BluetoothOppTransferHistory;->updateNotificationWhenBtDisabled"
                    },
                    "BluetoothOppTransfer": {
                        "doOpushSdp": "Lcom/android/bluetooth/opp/BluetoothOppTransfer;->doOpushSdp",
                        "start": "Lcom/android/bluetooth/opp/BluetoothOppTransfer;->start",
                        "startConnectSession": "Lcom/android/bluetooth/opp/BluetoothOppTransfer;->startConnectSession",
                        "startObexSession": "Lcom/android/bluetooth/opp/BluetoothOppTransfer;->startObexSession"
                    },
                    "BluetoothOppUtility": {
                        "queryRecord": "Lcom/android/bluetooth/opp/BluetoothOppUtility;->queryRecord"
                    },
                    "TestTcpServer": {
                        "run": "Lcom/android/bluetooth/opp/TestTcpServer;->run"
                    },
                    "TestTcpSessionNotifier": {
                        "<init>": "Lcom/android/bluetooth/opp/TestTcpSessionNotifier;-><init>"
                    },
                    "BluetoothOppProvider": "Lcom/android/bluetooth/opp;->BluetoothOppProvider"
                },
                "pbap": {
                    "BluetoothPbapActivity": {
                        "onCreate": "Lcom/android/bluetooth/pbap/BluetoothPbapActivity;->onCreate"
                    },
                    "BluetoothPbapObexServer": {
                        "createList": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->createList",
                        "onGet": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->onGet",
                        "pullPhonebook": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->pullPhonebook",
                        "pullVcardEntry": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->pullVcardEntry",
                        "pullVcardListing": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->pullVcardListing",
                        "sendVcardListingXml": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;->sendVcardListingXml",
                        "<init>": "Lcom/android/bluetooth/pbap/BluetoothPbapObexServer;-><init>"
                    },
                    "BluetoothPbapReceiver": {
                        "onReceive": "Lcom/android/bluetooth/pbap/BluetoothPbapReceiver;->onReceive"
                    },
                    "BluetoothPbapService$1": {
                        "handleMessage": "Lcom/android/bluetooth/pbap/BluetoothPbapService$1;->handleMessage"
                    },
                    "BluetoothPbapService$2": {
                        "getClient": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->getClient",
                        "connect": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->connect",
                        "isConnected": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->isConnected",
                        "onTransact": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->onTransact",
                        "getState": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->getState",
                        "disconnect": "Lcom/android/bluetooth/pbap/BluetoothPbapService$2;->disconnect"
                    },
                    "BluetoothPbapService$SocketAcceptThread": {
                        "run": "Lcom/android/bluetooth/pbap/BluetoothPbapService$SocketAcceptThread;->run"
                    },
                    "BluetoothPbapService": {
                        "initSocket": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->initSocket",
                        "onStartCommand": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->onStartCommand",
                        "createPbapNotification": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->createPbapNotification",
                        "onCreate": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->onCreate",
                        "onDestroy": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->onDestroy",
                        "parseIntent": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->parseIntent",
                        "startObexServerSession": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->startObexServerSession",
                        "startRfcommSocketListener": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->startRfcommSocketListener",
                        "stopObexServerSession": "Lcom/android/bluetooth/pbap/BluetoothPbapService;->stopObexServerSession"
                    },
                    "BluetoothPbapVcardManager": {
                        "composeAndSendCallLogVcards": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->composeAndSendCallLogVcards",
                        "composeAndSendPhonebookOneVcard": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->composeAndSendPhonebookOneVcard",
                        "composeAndSendPhonebookVcards": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->composeAndSendPhonebookVcards",
                        "composeAndSendVCards": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->composeAndSendVCards",
                        "getCallHistorySize": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->getCallHistorySize",
                        "getContactsSize": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->getContactsSize",
                        "getPhonebookSize": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->getPhonebookSize",
                        "getContactNamesByNumber": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->getContactNamesByNumber",
                        "getPhonebookNameList": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->getPhonebookNameList",
                        "loadCallHistoryList": "Lcom/android/bluetooth/pbap/BluetoothPbapVcardManager;->loadCallHistoryList"
                    }
                },
                "a2dp": {
                    "A2dpService$BluetoothA2dpBinder": {
                        "connect": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->disconnect",
                        "getConnectedDevices": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->getPriority",
                        "isA2dpPlaying": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->isA2dpPlaying",
                        "setPriority": "Lcom/android/bluetooth/a2dp/A2dpService$BluetoothA2dpBinder;->setPriority"
                    },
                    "A2dpSinkService$BluetoothA2dpSinkBinder": {
                        "connect": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->disconnect",
                        "getAudioConfig": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->getAudioConfig",
                        "getConnectedDevices": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/a2dp/A2dpSinkService$BluetoothA2dpSinkBinder;->getDevicesMatchingConnectionStates"
                    }
                },
                "a2dpsink": {
                    "A2dpSinkService$BluetoothA2dpSinkBinder": {
                        "connect": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->disconnect",
                        "getAudioConfig": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getAudioConfig",
                        "getConnectedDevices": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->getPriority",
                        "isA2dpPlaying": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->isA2dpPlaying",
                        "setPriority": "Lcom/android/bluetooth/a2dpsink/A2dpSinkService$BluetoothA2dpSinkBinder;->setPriority"
                    }
                },
                "avrcp": {
                    "AvrcpControllerService$BluetoothAvrcpControllerBinder": {
                        "getConnectedDevices": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getDevicesMatchingConnectionStates",
                        "getMetadata": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getMetadata",
                        "getPlaybackState": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getPlaybackState",
                        "getPlayerSettings": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->getPlayerSettings",
                        "sendGroupNavigationCmd": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->sendGroupNavigationCmd",
                        "sendPassThroughCmd": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->sendPassThroughCmd",
                        "setPlayerApplicationSetting": "Lcom/android/bluetooth/avrcp/AvrcpControllerService$BluetoothAvrcpControllerBinder;->setPlayerApplicationSetting"
                    }
                },
                "btservice": {
                    "AdapterService$AdapterServiceBinder": {
                        "cancelBondProcess": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->cancelBondProcess",
                        "cancelDiscovery": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->cancelDiscovery",
                        "configHciSnoopLog": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->configHciSnoopLog",
                        "connectSocket": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->connectSocket",
                        "createBond": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createBond",
                        "createBondOutOfBand": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createBondOutOfBand",
                        "createSocketChannel": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->createSocketChannel",
                        "disable": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->disable",
                        "enable": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->enable",
                        "enableNoAutoConnect": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->enableNoAutoConnect",
                        "factoryReset": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->factoryReset",
                        "fetchRemoteMasInstances": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->fetchRemoteMasInstances",
                        "fetchRemoteUuids": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->fetchRemoteUuids",
                        "getActivityEnergyInfoFromController": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getActivityEnergyInfoFromController",
                        "getAdapterConnectionState": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getAdapterConnectionState",
                        "getAddress": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getAddress",
                        "getBondedDevices": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getBondedDevices",
                        "getBondState": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getBondState",
                        "getConnectionState": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getConnectionState",
                        "getDiscoverableTimeout": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getDiscoverableTimeout",
                        "getMessageAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getMessageAccessPermission",
                        "getName": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getName",
                        "getPhonebookAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getPhonebookAccessPermission",
                        "getProfileConnectionState": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getProfileConnectionState",
                        "getRemoteAlias": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteAlias",
                        "getRemoteClass": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteClass",
                        "getRemoteName": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteName",
                        "getRemoteType": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteType",
                        "getRemoteUuids": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getRemoteUuids",
                        "getScanMode": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getScanMode",
                        "getSimAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getSimAccessPermission",
                        "getState": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getState",
                        "getUuids": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->getUuids",
                        "isActivityAndEnergyReportingSupported": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isActivityAndEnergyReportingSupported",
                        "isConnected": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isConnected",
                        "isDiscovering": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isDiscovering",
                        "isEnabled": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isEnabled",
                        "isMultiAdvertisementSupported": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isMultiAdvertisementSupported",
                        "isOffloadedFilteringSupported": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isOffloadedFilteringSupported",
                        "isOffloadedScanBatchingSupported": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->isOffloadedScanBatchingSupported",
                        "removeBond": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->removeBond",
                        "reportActivityInfo": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->reportActivityInfo",
                        "requestActivityInfo": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->requestActivityInfo",
                        "sdpSearch": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->sdpSearch",
                        "sendConnectionStateChange": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->sendConnectionStateChange",
                        "setDiscoverableTimeout": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setDiscoverableTimeout",
                        "setMessageAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setMessageAccessPermission",
                        "setName": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setName",
                        "setPairingConfirmation": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPairingConfirmation",
                        "setPasskey": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPasskey",
                        "setPhonebookAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPhonebookAccessPermission",
                        "setPin": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setPin",
                        "setRemoteAlias": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setRemoteAlias",
                        "setScanMode": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setScanMode",
                        "setSimAccessPermission": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->setSimAccessPermission",
                        "startDiscovery": "Lcom/android/bluetooth/btservice/AdapterService$AdapterServiceBinder;->startDiscovery"
                    }
                },
                "gatt": {
                    "GattService$BluetoothGattBinder": {
                        "addCharacteristic": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addCharacteristic",
                        "addDescriptor": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addDescriptor",
                        "addIncludedService": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->addIncludedService",
                        "beginReliableWrite": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->beginReliableWrite",
                        "beginServiceDeclaration": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->beginServiceDeclaration",
                        "clearServices": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clearServices",
                        "clientConnect": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clientConnect",
                        "clientDisconnect": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->clientDisconnect",
                        "configureMTU": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->configureMTU",
                        "connectionParameterUpdate": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->connectionParameterUpdate",
                        "disconnectAll": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->disconnectAll",
                        "discoverServices": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->discoverServices",
                        "endReliableWrite": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->endReliableWrite",
                        "endServiceDeclaration": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->endServiceDeclaration",
                        "getAdvManufacturerData": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->getAdvManufacturerData",
                        "getAdvServiceData": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->getAdvServiceData",
                        "getAdvServiceUuids": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->getAdvServiceUuids",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->getDevicesMatchingConnectionStates",
                        "isAdvertising": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->isAdvertising",
                        "numHwTrackFiltersAvailable": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->numHwTrackFiltersAvailable",
                        "readCharacteristic": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readCharacteristic",
                        "readDescriptor": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readDescriptor",
                        "readRemoteRssi": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->readRemoteRssi",
                        "refreshDevice": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->refreshDevice",
                        "registerClient": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerClient",
                        "registerForNotification": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerForNotification",
                        "registerServer": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->registerServer",
                        "removeAdvManufacturerCodeAndData": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->removeAdvManufacturerCodeAndData",
                        "removeService": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->removeService",
                        "sendNotification": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->sendNotification",
                        "sendResponse": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->sendResponse",
                        "serverConnect": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->serverConnect",
                        "serverDisconnect": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->serverDisconnect",
                        "setAdvManufacturerCodeAndData": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->setAdvManufacturerCodeAndData",
                        "setAdvServiceData": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->setAdvServiceData",
                        "startAdvertising": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startAdvertising",
                        "startMultiAdvertising": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startMultiAdvertising",
                        "startScan": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startScan",
                        "startScanWithUuids": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->startScanWithUuids",
                        "stopAdvertising": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->stopAdvertising",
                        "stopMultiAdvertising": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->stopMultiAdvertising",
                        "stopScan": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->stopScan",
                        "unregAll": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregAll",
                        "unregisterClient": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregisterClient",
                        "unregisterServer": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->unregisterServer",
                        "writeCharacteristic": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->writeCharacteristic",
                        "writeDescriptor": "Lcom/android/bluetooth/gatt/GattService$BluetoothGattBinder;->writeDescriptor"
                    }
                },
                "hdp": {
                    "HealthService$BluetoothHealthBinder": {
                        "connectChannelToSink": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->connectChannelToSink",
                        "connectChannelToSource": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->connectChannelToSource",
                        "disconnectChannel": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->disconnectChannel",
                        "getConnectedHealthDevices": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getConnectedHealthDevices",
                        "getHealthDeviceConnectionState": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getHealthDeviceConnectionState",
                        "getHealthDevicesMatchingConnectionStates": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getHealthDevicesMatchingConnectionStates",
                        "getMainChannelFd": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->getMainChannelFd",
                        "registerAppConfiguration": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->registerAppConfiguration",
                        "unregisterAppConfiguration": "Lcom/android/bluetooth/hdp/HealthService$BluetoothHealthBinder;->unregisterAppConfiguration"
                    }
                },
                "hfp": {
                    "HeadsetService$BluetoothHeadsetBinder": {
                        "bindResponse": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->bindResponse",
                        "clccResponse": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->clccResponse",
                        "connect": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->connect",
                        "connectAudio": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->connectAudio",
                        "disableWBS": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disableWBS",
                        "disconnect": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disconnect",
                        "disconnectAudio": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->disconnectAudio",
                        "enableWBS": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->enableWBS",
                        "getConnectedDevices": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->getPriority",
                        "isAudioConnected": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->isAudioConnected",
                        "isAudioOn": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->isAudioOn",
                        "phoneStateChanged": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->phoneStateChanged",
                        "roamChanged": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->roamChanged",
                        "sendVendorSpecificResultCode": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->sendVendorSpecificResultCode",
                        "setPriority": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->setPriority",
                        "startVoiceRecognition": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->startVoiceRecognition",
                        "stopVoiceRecognition": "Lcom/android/bluetooth/hfp/HeadsetService$BluetoothHeadsetBinder;->stopVoiceRecognition"
                    }
                },
                "hfpclient": {
                    "HeadsetClientService$BluetoothHeadsetClientBinder": {
                        "acceptCall": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->acceptCall",
                        "connect": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->connect",
                        "connectAudio": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->connectAudio",
                        "dial": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->dial",
                        "dialMemory": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->dialMemory",
                        "disconnect": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->disconnect",
                        "disconnectAudio": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->disconnectAudio",
                        "enterPrivateMode": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->enterPrivateMode",
                        "explicitCallTransfer": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->explicitCallTransfer",
                        "getConnectedDevices": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getConnectionState",
                        "getCurrentAgEvents": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentAgEvents",
                        "getCurrentAgFeatures": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentAgFeatures",
                        "getCurrentCalls": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getCurrentCalls",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getDevicesMatchingConnectionStates",
                        "getLastVoiceTagNumber": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getLastVoiceTagNumber",
                        "getPriority": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->getPriority",
                        "holdCall": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->holdCall",
                        "redial": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->redial",
                        "rejectCall": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->rejectCall",
                        "sendDTMF": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->sendDTMF",
                        "setPriority": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->setPriority",
                        "startVoiceRecognition": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->startVoiceRecognition",
                        "stopVoiceRecognition": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->stopVoiceRecognition",
                        "terminateCall": "Lcom/android/bluetooth/hfpclient/HeadsetClientService$BluetoothHeadsetClientBinder;->terminateCall"
                    }
                },
                "hid": {
                    "HidService$BluetoothInputDeviceBinder": {
                        "connect": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->disconnect",
                        "getConnectedDevices": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getConnectedDevices",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getPriority",
                        "getProtocolMode": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getProtocolMode",
                        "getReport": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->getReport",
                        "sendData": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->sendData",
                        "setPriority": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setPriority",
                        "setProtocolMode": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setProtocolMode",
                        "setReport": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->setReport",
                        "virtualUnplug": "Lcom/android/bluetooth/hid/HidService$BluetoothInputDeviceBinder;->virtualUnplug"
                    }
                },
                "map": {
                    "BluetoothMapService$BluetoothMapBinder": {
                        "connect": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->disconnect",
                        "getClient": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getClient",
                        "getConnectedDevices": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getPriority",
                        "getState": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->getState",
                        "isConnected": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->isConnected",
                        "setPriority": "Lcom/android/bluetooth/map/BluetoothMapService$BluetoothMapBinder;->setPriority"
                    }
                },
                "pan": {
                    "PanService$BluetoothPanBinder": {
                        "connect": "Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->disconnect",
                        "getConnectedDevices": "Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->getConnectedDevices",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->getDevicesMatchingConnectionStates",
                        "setBluetoothTethering": "Lcom/android/bluetooth/pan/PanService$BluetoothPanBinder;->setBluetoothTethering"
                    }
                },
                "pbapclient": {
                    "PbapClientService$BluetoothPbapClientBinder": {
                        "connect": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->disconnect",
                        "getConnectedDevices": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->getPriority",
                        "setPriority": "Lcom/android/bluetooth/pbapclient/PbapClientService$BluetoothPbapClientBinder;->setPriority"
                    }
                },
                "sap": {
                    "SapService$SapBinder": {
                        "connect": "Lcom/android/bluetooth/sap/SapService$SapBinder;->connect",
                        "disconnect": "Lcom/android/bluetooth/sap/SapService$SapBinder;->disconnect",
                        "getClient": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getClient",
                        "getConnectedDevices": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getConnectedDevices",
                        "getConnectionState": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getConnectionState",
                        "getDevicesMatchingConnectionStates": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getDevicesMatchingConnectionStates",
                        "getPriority": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getPriority",
                        "getState": "Lcom/android/bluetooth/sap/SapService$SapBinder;->getState",
                        "isConnected": "Lcom/android/bluetooth/sap/SapService$SapBinder;->isConnected",
                        "setPriority": "Lcom/android/bluetooth/sap/SapService$SapBinder;->setPriority"
                    }
                }
            },
            "browser": {
                "AccountsChangedReceiver$DeleteRemovedAccounts": {
                    "delete": "Lcom/android/browser/AccountsChangedReceiver$DeleteRemovedAccounts;->delete",
                    "run": "Lcom/android/browser/AccountsChangedReceiver$DeleteRemovedAccounts;->run"
                },
                "AccountsChangedReceiver": {
                    "onReceive": "Lcom/android/browser/AccountsChangedReceiver;->onReceive"
                },
                "ActivityController": {
                    "onContextItemSelected": "Lcom/android/browser/ActivityController;->onContextItemSelected",
                    "onKeyUp": "Lcom/android/browser/ActivityController;->onKeyUp",
                    "onOptionsItemSelected": "Lcom/android/browser/ActivityController;->onOptionsItemSelected",
                    "handleNewIntent": "Lcom/android/browser/ActivityController;->handleNewIntent",
                    "onDestroy": "Lcom/android/browser/ActivityController;->onDestroy",
                    "onPause": "Lcom/android/browser/ActivityController;->onPause",
                    "onResume": "Lcom/android/browser/ActivityController;->onResume",
                    "onSaveInstanceState": "Lcom/android/browser/ActivityController;->onSaveInstanceState",
                    "start": "Lcom/android/browser/ActivityController;->start"
                },
                "AddBookmarkPage$1": {
                    "onLoadFinished": "Lcom/android/browser/AddBookmarkPage$1;->onLoadFinished"
                },
                "AddBookmarkPage$EditBookmarkInfoLoader": {
                    "loadInBackground": "Lcom/android/browser/AddBookmarkPage$EditBookmarkInfoLoader;->loadInBackground"
                },
                "AddBookmarkPage$SaveBookmarkRunnable": {
                    "run": "Lcom/android/browser/AddBookmarkPage$SaveBookmarkRunnable;->run"
                },
                "AddBookmarkPage$UpdateBookmarkTask": {
                    "doInBackground": "Lcom/android/browser/AddBookmarkPage$UpdateBookmarkTask;->doInBackground"
                },
                "AddBookmarkPage": {
                    "onCreateLoader": "Lcom/android/browser/AddBookmarkPage;->onCreateLoader",
                    "getUriForFolder": "Lcom/android/browser/AddBookmarkPage;->getUriForFolder",
                    "onEditorAction": "Lcom/android/browser/AddBookmarkPage;->onEditorAction",
                    "addFolderToCurrent": "Lcom/android/browser/AddBookmarkPage;->addFolderToCurrent",
                    "completeOrCancelFolderNaming": "Lcom/android/browser/AddBookmarkPage;->completeOrCancelFolderNaming",
                    "descendInto": "Lcom/android/browser/AddBookmarkPage;->descendInto",
                    "onClick": "Lcom/android/browser/AddBookmarkPage;->onClick",
                    "onItemClick": "Lcom/android/browser/AddBookmarkPage;->onItemClick",
                    "onItemSelected": "Lcom/android/browser/AddBookmarkPage;->onItemSelected",
                    "onRootFolderFound": "Lcom/android/browser/AddBookmarkPage;->onRootFolderFound",
                    "onTop": "Lcom/android/browser/AddBookmarkPage;->onTop",
                    "setAccount": "Lcom/android/browser/AddBookmarkPage;->setAccount",
                    "setupTopCrumb": "Lcom/android/browser/AddBookmarkPage;->setupTopCrumb",
                    "switchToDefaultView": "Lcom/android/browser/AddBookmarkPage;->switchToDefaultView"
                },
                "AutofillHandler$LoadFromDb": {
                    "run": "Lcom/android/browser/AutofillHandler$LoadFromDb;->run"
                },
                "AutofillHandler": {
                    "asyncLoadFromDb": "Lcom/android/browser/AutofillHandler;->asyncLoadFromDb"
                },
                "AutologinBar": {
                    "onClick": "Lcom/android/browser/AutologinBar;->onClick"
                },
                "BaseUi": {
                    "onBackKey": "Lcom/android/browser/BaseUi;->onBackKey",
                    "onOptionsItemSelected": "Lcom/android/browser/BaseUi;->onOptionsItemSelected",
                    "<init>": "Lcom/android/browser/BaseUi;-><init>",
                    "setUseQuickControls": "Lcom/android/browser/BaseUi;->setUseQuickControls",
                    "showWeb": "Lcom/android/browser/BaseUi;->showWeb"
                },
                "Bookmarks$1": {
                    "doInBackground": "Lcom/android/browser/Bookmarks$1;->doInBackground",
                    "updateImages": "Lcom/android/browser/Bookmarks$1;->updateImages"
                },
                "Bookmarks": {
                    "queryCombinedForUrl": "Lcom/android/browser/Bookmarks;->queryCombinedForUrl",
                    "addBookmark": "Lcom/android/browser/Bookmarks;->addBookmark",
                    "removeFromBookmarks": "Lcom/android/browser/Bookmarks;->removeFromBookmarks"
                },
                "BookmarkUtils$1$1": {
                    "run": "Lcom/android/browser/BookmarkUtils$1$1;->run"
                },
                "BookmarkUtils": {
                    "getBookmarksUri": "Lcom/android/browser/BookmarkUtils;->getBookmarksUri"
                },
                "BreadCrumbView$Controller": {
                    "onTop": "Lcom/android/browser/BreadCrumbView$Controller;->onTop"
                },
                "BreadCrumbView": {
                    "clear": "Lcom/android/browser/BreadCrumbView;->clear",
                    "notifyController": "Lcom/android/browser/BreadCrumbView;->notifyController",
                    "onClick": "Lcom/android/browser/BreadCrumbView;->onClick",
                    "pop": "Lcom/android/browser/BreadCrumbView;->pop",
                    "popView": "Lcom/android/browser/BreadCrumbView;->popView"
                },
                "BrowserActivity": {
                    "onContextItemSelected": "Lcom/android/browser/BrowserActivity;->onContextItemSelected",
                    "onKeyUp": "Lcom/android/browser/BrowserActivity;->onKeyUp",
                    "onOptionsItemSelected": "Lcom/android/browser/BrowserActivity;->onOptionsItemSelected",
                    "createController": "Lcom/android/browser/BrowserActivity;->createController",
                    "onCreate": "Lcom/android/browser/BrowserActivity;->onCreate",
                    "onDestroy": "Lcom/android/browser/BrowserActivity;->onDestroy",
                    "onNewIntent": "Lcom/android/browser/BrowserActivity;->onNewIntent",
                    "onPause": "Lcom/android/browser/BrowserActivity;->onPause",
                    "onResume": "Lcom/android/browser/BrowserActivity;->onResume",
                    "onSaveInstanceState": "Lcom/android/browser/BrowserActivity;->onSaveInstanceState"
                },
                "BrowserBackupAgent": {
                    "addBookmark": "Lcom/android/browser/BrowserBackupAgent;->addBookmark",
                    "onRestore": "Lcom/android/browser/BrowserBackupAgent;->onRestore"
                },
                "BrowserBookmarksPage$2": {
                    "onMenuItemClick": "Lcom/android/browser/BrowserBookmarksPage$2;->onMenuItemClick"
                },
                "BrowserBookmarksPage$LookupBookmarkCount": {
                    "doInBackground": "Lcom/android/browser/BrowserBookmarksPage$LookupBookmarkCount;->doInBackground"
                },
                "BrowserBookmarksPage$OpenAllInTabsTask": {
                    "doInBackground": "Lcom/android/browser/BrowserBookmarksPage$OpenAllInTabsTask;->doInBackground"
                },
                "BrowserBookmarksPage": {
                    "handleContextItem": "Lcom/android/browser/BrowserBookmarksPage;->handleContextItem",
                    "onContextItemSelected": "Lcom/android/browser/BrowserBookmarksPage;->onContextItemSelected"
                },
                "BrowserHistoryPage$3": {
                    "onClick": "Lcom/android/browser/BrowserHistoryPage$3;->onClick"
                },
                "BrowserHistoryPage$ClearHistoryTask": {
                    "run": "Lcom/android/browser/BrowserHistoryPage$ClearHistoryTask;->run"
                },
                "BrowserHistoryPage$HistoryAdapter": {
                    "changeCursor": "Lcom/android/browser/BrowserHistoryPage$HistoryAdapter;->changeCursor"
                },
                "BrowserHistoryPage": {
                    "onContextItemSelected": "Lcom/android/browser/BrowserHistoryPage;->onContextItemSelected"
                },
                "BrowserSettings": {
                    "clearHistory": "Lcom/android/browser/BrowserSettings;->clearHistory",
                    "<init>": "Lcom/android/browser/BrowserSettings;-><init>",
                    "initialize": "Lcom/android/browser/BrowserSettings;->initialize",
                    "onSharedPreferenceChanged": "Lcom/android/browser/BrowserSettings;->onSharedPreferenceChanged",
                    "updateConnectionType": "Lcom/android/browser/BrowserSettings;->updateConnectionType"
                },
                "Browser": {
                    "onCreate": "Lcom/android/browser/Browser;->onCreate"
                },
                "BrowserWebViewFactory": {
                    "createSubWebView": "Lcom/android/browser/BrowserWebViewFactory;->createSubWebView",
                    "createWebView": "Lcom/android/browser/BrowserWebViewFactory;->createWebView",
                    "instantiateWebView": "Lcom/android/browser/BrowserWebViewFactory;->instantiateWebView"
                },
                "BrowserWebView": {
                    "<init>": "Lcom/android/browser/BrowserWebView;-><init>"
                },
                "BrowserYesNoPreference": {
                    "onDialogClosed": "Lcom/android/browser/BrowserYesNoPreference;->onDialogClosed"
                },
                "Controller$10": {
                    "doInBackground": "Lcom/android/browser/Controller$10;->doInBackground"
                },
                "Controller$2": {
                    "run": "Lcom/android/browser/Controller$2;->run"
                },
                "Controller$5": {
                    "doInBackground": "Lcom/android/browser/Controller$5;->doInBackground"
                },
                "Controller$7": {
                    "onMenuItemClick": "Lcom/android/browser/Controller$7;->onMenuItemClick"
                },
                "Controller$9": {
                    "onMenuItemClick": "Lcom/android/browser/Controller$9;->onMenuItemClick"
                },
                "Controller$Download": {
                    "onMenuItemClick": "Lcom/android/browser/Controller$Download;->onMenuItemClick",
                    "saveDataUri": "Lcom/android/browser/Controller$Download;->saveDataUri"
                },
                "Controller$PruneThumbnails": {
                    "run": "Lcom/android/browser/Controller$PruneThumbnails;->run"
                },
                "Controller$SaveSnapshotTask": {
                    "doInBackground": "Lcom/android/browser/Controller$SaveSnapshotTask;->doInBackground"
                },
                "Controller": {
                    "createSaveState": "Lcom/android/browser/Controller;->createSaveState",
                    "onContextItemSelected": "Lcom/android/browser/Controller;->onContextItemSelected",
                    "onKeyDown": "Lcom/android/browser/Controller;->onKeyDown",
                    "onKeyUp": "Lcom/android/browser/Controller;->onKeyUp",
                    "onOptionsItemSelected": "Lcom/android/browser/Controller;->onOptionsItemSelected",
                    "shouldOverrideUrlLoading": "Lcom/android/browser/Controller;->shouldOverrideUrlLoading",
                    "switchToTab": "Lcom/android/browser/Controller;->switchToTab",
                    "createNewSnapshotTab": "Lcom/android/browser/Controller;->createNewSnapshotTab",
                    "createNewTab": "Lcom/android/browser/Controller;->createNewTab",
                    "openIncognitoTab": "Lcom/android/browser/Controller;->openIncognitoTab",
                    "openTab": "Lcom/android/browser/Controller;->openTab",
                    "openTabToHomePage": "Lcom/android/browser/Controller;->openTabToHomePage",
                    "showPreloadedTab": "Lcom/android/browser/Controller;->showPreloadedTab",
                    "closeCurrentTab": "Lcom/android/browser/Controller;->closeCurrentTab",
                    "closeEmptyTab": "Lcom/android/browser/Controller;->closeEmptyTab",
                    "closeTab": "Lcom/android/browser/Controller;->closeTab",
                    "createSubWindow": "Lcom/android/browser/Controller;->createSubWindow",
                    "doStart": "Lcom/android/browser/Controller;->doStart",
                    "doUpdateVisitedHistory": "Lcom/android/browser/Controller;->doUpdateVisitedHistory",
                    "goBackOnePageOrQuit": "Lcom/android/browser/Controller;->goBackOnePageOrQuit",
                    "handleNewIntent": "Lcom/android/browser/Controller;->handleNewIntent",
                    "<init>": "Lcom/android/browser/Controller;-><init>",
                    "onActivityResult": "Lcom/android/browser/Controller;->onActivityResult",
                    "onBackKey": "Lcom/android/browser/Controller;->onBackKey",
                    "onDestroy": "Lcom/android/browser/Controller;->onDestroy",
                    "onDownloadStart": "Lcom/android/browser/Controller;->onDownloadStart",
                    "onPageFinished": "Lcom/android/browser/Controller;->onPageFinished",
                    "onPause": "Lcom/android/browser/Controller;->onPause",
                    "onPreloginFinished": "Lcom/android/browser/Controller;->onPreloginFinished",
                    "onReceivedTitle": "Lcom/android/browser/Controller;->onReceivedTitle",
                    "onResume": "Lcom/android/browser/Controller;->onResume",
                    "onSaveInstanceState": "Lcom/android/browser/Controller;->onSaveInstanceState",
                    "releaseWakeLock": "Lcom/android/browser/Controller;->releaseWakeLock",
                    "removeTab": "Lcom/android/browser/Controller;->removeTab",
                    "reuseTab": "Lcom/android/browser/Controller;->reuseTab",
                    "setActiveTab": "Lcom/android/browser/Controller;->setActiveTab",
                    "start": "Lcom/android/browser/Controller;->start"
                },
                "CrashRecoveryHandler$2": {
                    "run": "Lcom/android/browser/CrashRecoveryHandler$2;->run"
                },
                "CrashRecoveryHandler": {
                    "startRecovery": "Lcom/android/browser/CrashRecoveryHandler;->startRecovery"
                },
                "DataController$DataControllerHandler": {
                    "doLoadThumbnail": "Lcom/android/browser/DataController$DataControllerHandler;->doLoadThumbnail",
                    "doQueryBookmarkStatus": "Lcom/android/browser/DataController$DataControllerHandler;->doQueryBookmarkStatus",
                    "doSaveThumbnail": "Lcom/android/browser/DataController$DataControllerHandler;->doSaveThumbnail",
                    "doUpdateHistoryTitle": "Lcom/android/browser/DataController$DataControllerHandler;->doUpdateHistoryTitle",
                    "doUpdateVisitedHistory": "Lcom/android/browser/DataController$DataControllerHandler;->doUpdateVisitedHistory",
                    "handleMessage": "Lcom/android/browser/DataController$DataControllerHandler;->handleMessage",
                    "run": "Lcom/android/browser/DataController$DataControllerHandler;->run"
                },
                "DataController": {
                    "getInstance": "Lcom/android/browser/DataController;->getInstance",
                    "<init>": "Lcom/android/browser/DataController;-><init>"
                },
                "DeviceAccountLogin": {
                    "handleLogin": "Lcom/android/browser/DeviceAccountLogin;->handleLogin",
                    "login": "Lcom/android/browser/DeviceAccountLogin;->login"
                },
                "DownloadHandler$1": {
                    "run": "Lcom/android/browser/DownloadHandler$1;->run"
                },
                "DownloadHandler": {
                    "onDownloadStart": "Lcom/android/browser/DownloadHandler;->onDownloadStart",
                    "onDownloadStartNoStream": "Lcom/android/browser/DownloadHandler;->onDownloadStartNoStream"
                },
                "DownloadTouchIcon": {
                    "doInBackground": "Lcom/android/browser/DownloadTouchIcon;->doInBackground",
                    "storeIcon": "Lcom/android/browser/DownloadTouchIcon;->storeIcon"
                },
                "FetchUrlMimeType": {
                    "run": "Lcom/android/browser/FetchUrlMimeType;->run"
                },
                "GoogleAccountLogin": {
                    "getAccounts": "Lcom/android/browser/GoogleAccountLogin;->getAccounts",
                    "<init>": "Lcom/android/browser/GoogleAccountLogin;-><init>",
                    "invalidateTokens": "Lcom/android/browser/GoogleAccountLogin;->invalidateTokens",
                    "run": "Lcom/android/browser/GoogleAccountLogin;->run",
                    "startLogin": "Lcom/android/browser/GoogleAccountLogin;->startLogin",
                    "startLoginIfNeeded": "Lcom/android/browser/GoogleAccountLogin;->startLoginIfNeeded"
                },
                "HistoryItem": {
                    "onCheckedChanged": "Lcom/android/browser/HistoryItem;->onCheckedChanged"
                },
                "homepages": {
                    "HomeProvider": {
                        "openFile": "Lcom/android/browser/homepages/HomeProvider;->openFile",
                        "shouldInterceptRequest": "Lcom/android/browser/homepages/HomeProvider;->shouldInterceptRequest"
                    },
                    "RequestHandler": {
                        "doHandleRequest": "Lcom/android/browser/homepages/RequestHandler;->doHandleRequest",
                        "run": "Lcom/android/browser/homepages/RequestHandler;->run",
                        "writeTemplatedIndex": "Lcom/android/browser/homepages/RequestHandler;->writeTemplatedIndex"
                    }
                },
                "IntentHandler$1": {
                    "doInBackground": "Lcom/android/browser/IntentHandler$1;->doInBackground"
                },
                "IntentHandler": {
                    "onNewIntent": "Lcom/android/browser/IntentHandler;->onNewIntent"
                },
                "NavigationBarBase": {
                    "onAction": "Lcom/android/browser/NavigationBarBase;->onAction",
                    "onClick": "Lcom/android/browser/NavigationBarBase;->onClick"
                },
                "NavigationBarPhone": {
                    "onMenuItemClick": "Lcom/android/browser/NavigationBarPhone;->onMenuItemClick",
                    "onAction": "Lcom/android/browser/NavigationBarPhone;->onAction",
                    "onClick": "Lcom/android/browser/NavigationBarPhone;->onClick"
                },
                "NavigationBarTablet": {
                    "onAction": "Lcom/android/browser/NavigationBarTablet;->onAction",
                    "onClick": "Lcom/android/browser/NavigationBarTablet;->onClick"
                },
                "NavScreen$1": {
                    "onRemovePosition": "Lcom/android/browser/NavScreen$1;->onRemovePosition"
                },
                "NavScreen$2": {
                    "onLayout": "Lcom/android/browser/NavScreen$2;->onLayout"
                },
                "NavScreen$TabAdapter$1": {
                    "onClick": "Lcom/android/browser/NavScreen$TabAdapter$1;->onClick"
                },
                "NavScreen": {
                    "onMenuItemClick": "Lcom/android/browser/NavScreen;->onMenuItemClick",
                    "close": "Lcom/android/browser/NavScreen;->close",
                    "onClick": "Lcom/android/browser/NavScreen;->onClick",
                    "onCloseTab": "Lcom/android/browser/NavScreen;->onCloseTab",
                    "openNewTab": "Lcom/android/browser/NavScreen;->openNewTab",
                    "switchToTab": "Lcom/android/browser/NavScreen;->switchToTab"
                },
                "NavTabScroller$2": {
                    "onAnimationEnd": "Lcom/android/browser/NavTabScroller$2;->onAnimationEnd"
                },
                "NavTabScroller$OnLayoutListener": {
                    "onLayout": "Lcom/android/browser/NavTabScroller$OnLayoutListener;->onLayout"
                },
                "NavTabScroller$OnRemoveListener": {
                    "onRemovePosition": "Lcom/android/browser/NavTabScroller$OnRemoveListener;->onRemovePosition"
                },
                "NavTabScroller": {
                    "onLayout": "Lcom/android/browser/NavTabScroller;->onLayout"
                },
                "NetworkStateHandler$1": {
                    "onReceive": "Lcom/android/browser/NetworkStateHandler$1;->onReceive"
                },
                "NetworkStateHandler": {
                    "<init>": "Lcom/android/browser/NetworkStateHandler;-><init>",
                    "onResume": "Lcom/android/browser/NetworkStateHandler;->onResume"
                },
                "NfcHandler": {
                    "register": "Lcom/android/browser/NfcHandler;->register",
                    "unregister": "Lcom/android/browser/NfcHandler;->unregister"
                },
                "OpenDownloadReceiver$1": {
                    "run": "Lcom/android/browser/OpenDownloadReceiver$1;->run"
                },
                "OpenDownloadReceiver": {
                    "onReceiveAsync": "Lcom/android/browser/OpenDownloadReceiver;->onReceiveAsync"
                },
                "PhoneUi": {
                    "onBackKey": "Lcom/android/browser/PhoneUi;->onBackKey",
                    "onOptionsItemSelected": "Lcom/android/browser/PhoneUi;->onOptionsItemSelected",
                    "hideNavScreen": "Lcom/android/browser/PhoneUi;->hideNavScreen",
                    "<init>": "Lcom/android/browser/PhoneUi;-><init>",
                    "setUseQuickControls": "Lcom/android/browser/PhoneUi;->setUseQuickControls",
                    "showNavScreen": "Lcom/android/browser/PhoneUi;->showNavScreen",
                    "showWeb": "Lcom/android/browser/PhoneUi;->showWeb",
                    "toggleNavScreen": "Lcom/android/browser/PhoneUi;->toggleNavScreen"
                },
                "PieControl$1": {
                    "onLayout": "Lcom/android/browser/PieControl$1;->onLayout"
                },
                "PieControl$TabAdapter$1": {
                    "onClick": "Lcom/android/browser/PieControl$TabAdapter$1;->onClick"
                },
                "PieControl": {
                    "buildTabs": "Lcom/android/browser/PieControl;->buildTabs",
                    "onClick": "Lcom/android/browser/PieControl;->onClick"
                },
                "preferences": {
                    "AccessibilityPreferencesFragment": {
                        "onCreate": "Lcom/android/browser/preferences/AccessibilityPreferencesFragment;->onCreate"
                    },
                    "WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask": {
                        "doInBackground": "Lcom/android/browser/preferences/WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask;->doInBackground"
                    }
                },
                "Preloader$PreloaderSession": {
                    "<init>": "Lcom/android/browser/Preloader$PreloaderSession;-><init>"
                },
                "Preloader": {
                    "getSession": "Lcom/android/browser/Preloader;->getSession",
                    "cancelSearchBoxPreload": "Lcom/android/browser/Preloader;->cancelSearchBoxPreload",
                    "handlePreloadRequest": "Lcom/android/browser/Preloader;->handlePreloadRequest"
                },
                "PreloadRequestReceiver": {
                    "isOnWifi": "Lcom/android/browser/PreloadRequestReceiver;->isOnWifi",
                    "isPreloadEnabledOnCurrentNetwork": "Lcom/android/browser/PreloadRequestReceiver;->isPreloadEnabledOnCurrentNetwork",
                    "handlePreload": "Lcom/android/browser/PreloadRequestReceiver;->handlePreload",
                    "onReceive": "Lcom/android/browser/PreloadRequestReceiver;->onReceive"
                },
                "provider": {
                    "BrowserProvider2$DatabaseHelper": {
                        "enableSync": "Lcom/android/browser/provider/BrowserProvider2$DatabaseHelper;->enableSync",
                        "onCreate": "Lcom/android/browser/provider/BrowserProvider2$DatabaseHelper;->onCreate",
                        "onUpgrade": "Lcom/android/browser/provider/BrowserProvider2$DatabaseHelper;->onUpgrade"
                    },
                    "BrowserProvider2": {
                        "query": "Lcom/android/browser/provider/BrowserProvider2;->query",
                        "insertInTransaction": "Lcom/android/browser/provider/BrowserProvider2;->insertInTransaction",
                        "isValidParent": "Lcom/android/browser/provider/BrowserProvider2;->isValidParent",
                        "setParentValues": "Lcom/android/browser/provider/BrowserProvider2;->setParentValues",
                        "deleteBookmarks": "Lcom/android/browser/provider/BrowserProvider2;->deleteBookmarks",
                        "deleteInTransaction": "Lcom/android/browser/provider/BrowserProvider2;->deleteInTransaction",
                        "getUrlCount": "Lcom/android/browser/provider/BrowserProvider2;->getUrlCount",
                        "updateBookmarksInTransaction": "Lcom/android/browser/provider/BrowserProvider2;->updateBookmarksInTransaction",
                        "updateHistoryInTransaction": "Lcom/android/browser/provider/BrowserProvider2;->updateHistoryInTransaction",
                        "updateInTransaction": "Lcom/android/browser/provider/BrowserProvider2;->updateInTransaction",
                        "getAccountNameAndType": "Lcom/android/browser/provider/BrowserProvider2;->getAccountNameAndType"
                    },
                    "BrowserProvider": {
                        "doSuggestQuery": "Lcom/android/browser/provider/BrowserProvider;->doSuggestQuery",
                        "query": "Lcom/android/browser/provider/BrowserProvider;->query",
                        "insert": "Lcom/android/browser/provider/BrowserProvider;->insert",
                        "delete": "Lcom/android/browser/provider/BrowserProvider;->delete",
                        "update": "Lcom/android/browser/provider/BrowserProvider;->update"
                    },
                    "SnapshotProvider": {
                        "query": "Lcom/android/browser/provider/SnapshotProvider;->query"
                    }
                },
                "search": {
                    "OpenSearchSearchEngine": {
                        "getSuggestions": "Lcom/android/browser/search/OpenSearchSearchEngine;->getSuggestions",
                        "getActiveNetworkInfo": "Lcom/android/browser/search/OpenSearchSearchEngine;->getActiveNetworkInfo",
                        "isNetworkConnected": "Lcom/android/browser/search/OpenSearchSearchEngine;->isNetworkConnected"
                    },
                    "SearchEngine": {
                        "getSuggestions": "Lcom/android/browser/search/SearchEngine;->getSuggestions"
                    }
                },
                "SnapshotBar": {
                    "onClick": "Lcom/android/browser/SnapshotBar;->onClick"
                },
                "SnapshotTab$LoadData": {
                    "doInBackground": "Lcom/android/browser/SnapshotTab$LoadData;->doInBackground",
                    "onPostExecute": "Lcom/android/browser/SnapshotTab$LoadData;->onPostExecute"
                },
                "SnapshotTab": {
                    "createSubWindow": "Lcom/android/browser/SnapshotTab;->createSubWindow",
                    "capture": "Lcom/android/browser/SnapshotTab;->capture",
                    "deleteThumbnail": "Lcom/android/browser/SnapshotTab;->deleteThumbnail",
                    "<init>": "Lcom/android/browser/SnapshotTab;-><init>",
                    "onNewPicture": "Lcom/android/browser/SnapshotTab;->onNewPicture",
                    "persistThumbnail": "Lcom/android/browser/SnapshotTab;->persistThumbnail",
                    "postCapture": "Lcom/android/browser/SnapshotTab;->postCapture",
                    "putInBackground": "Lcom/android/browser/SnapshotTab;->putInBackground",
                    "putInForeground": "Lcom/android/browser/SnapshotTab;->putInForeground",
                    "removeFromTree": "Lcom/android/browser/SnapshotTab;->removeFromTree",
                    "restoreState": "Lcom/android/browser/SnapshotTab;->restoreState",
                    "setController": "Lcom/android/browser/SnapshotTab;->setController",
                    "updateShouldCaptureThumbnails": "Lcom/android/browser/SnapshotTab;->updateShouldCaptureThumbnails"
                },
                "SuggestionsAdapter$CombinedCursor": {
                    "runQuery": "Lcom/android/browser/SuggestionsAdapter$CombinedCursor;->runQuery"
                },
                "SuggestionsAdapter$CompletionListener": {
                    "onSelect": "Lcom/android/browser/SuggestionsAdapter$CompletionListener;->onSelect"
                },
                "SuggestionsAdapter$CursorSource": {
                    "runQuery": "Lcom/android/browser/SuggestionsAdapter$CursorSource;->runQuery"
                },
                "SuggestionsAdapter$SlowFilterTask": {
                    "doInBackground": "Lcom/android/browser/SuggestionsAdapter$SlowFilterTask;->doInBackground"
                },
                "SuggestionsAdapter$SuggestCursor": {
                    "runQuery": "Lcom/android/browser/SuggestionsAdapter$SuggestCursor;->runQuery"
                },
                "SuggestionsAdapter$SuggestFilter": {
                    "performFiltering": "Lcom/android/browser/SuggestionsAdapter$SuggestFilter;->performFiltering"
                },
                "SuggestionsAdapter": {
                    "onClick": "Lcom/android/browser/SuggestionsAdapter;->onClick"
                },
                "SystemAllowGeolocationOrigins": {
                    "start": "Lcom/android/browser/SystemAllowGeolocationOrigins;->start"
                },
                "Tab$2": {
                    "shouldOverrideUrlLoading": "Lcom/android/browser/Tab$2;->shouldOverrideUrlLoading",
                    "doUpdateVisitedHistory": "Lcom/android/browser/Tab$2;->doUpdateVisitedHistory",
                    "onPageFinished": "Lcom/android/browser/Tab$2;->onPageFinished",
                    "onReceivedLoginRequest": "Lcom/android/browser/Tab$2;->onReceivedLoginRequest"
                },
                "Tab$3$1": {
                    "onClick": "Lcom/android/browser/Tab$3$1;->onClick"
                },
                "Tab$3": {
                    "onCreateWindow": "Lcom/android/browser/Tab$3;->onCreateWindow",
                    "createWindow": "Lcom/android/browser/Tab$3;->createWindow",
                    "onCloseWindow": "Lcom/android/browser/Tab$3;->onCloseWindow",
                    "onExceededDatabaseQuota": "Lcom/android/browser/Tab$3;->onExceededDatabaseQuota",
                    "onReachedMaxAppCacheSize": "Lcom/android/browser/Tab$3;->onReachedMaxAppCacheSize",
                    "onReceivedTitle": "Lcom/android/browser/Tab$3;->onReceivedTitle",
                    "onRequestFocus": "Lcom/android/browser/Tab$3;->onRequestFocus"
                },
                "Tab$4": {
                    "onDownloadStart": "Lcom/android/browser/Tab$4;->onDownloadStart"
                },
                "Tab$7": {
                    "onDownloadStart": "Lcom/android/browser/Tab$7;->onDownloadStart"
                },
                "TabBar$TabView": {
                    "closeTab": "Lcom/android/browser/TabBar$TabView;->closeTab",
                    "onClick": "Lcom/android/browser/TabBar$TabView;->onClick"
                },
                "TabBar": {
                    "onClick": "Lcom/android/browser/TabBar;->onClick"
                },
                "Tab": {
                    "createSubWindow": "Lcom/android/browser/Tab;->createSubWindow",
                    "capture": "Lcom/android/browser/Tab;->capture",
                    "deleteThumbnail": "Lcom/android/browser/Tab;->deleteThumbnail",
                    "<init>": "Lcom/android/browser/Tab;-><init>",
                    "onNewPicture": "Lcom/android/browser/Tab;->onNewPicture",
                    "persistThumbnail": "Lcom/android/browser/Tab;->persistThumbnail",
                    "postCapture": "Lcom/android/browser/Tab;->postCapture",
                    "putInBackground": "Lcom/android/browser/Tab;->putInBackground",
                    "putInForeground": "Lcom/android/browser/Tab;->putInForeground",
                    "removeFromTree": "Lcom/android/browser/Tab;->removeFromTree",
                    "restoreState": "Lcom/android/browser/Tab;->restoreState",
                    "setController": "Lcom/android/browser/Tab;->setController",
                    "updateShouldCaptureThumbnails": "Lcom/android/browser/Tab;->updateShouldCaptureThumbnails"
                },
                "TabControl": {
                    "createNewWebView": "Lcom/android/browser/TabControl;->createNewWebView",
                    "removeTab": "Lcom/android/browser/TabControl;->removeTab",
                    "setCurrentTab": "Lcom/android/browser/TabControl;->setCurrentTab",
                    "createSnapshotTab": "Lcom/android/browser/TabControl;->createSnapshotTab",
                    "createNewTab": "Lcom/android/browser/TabControl;->createNewTab",
                    "addPreloadedTab": "Lcom/android/browser/TabControl;->addPreloadedTab",
                    "recreateWebView": "Lcom/android/browser/TabControl;->recreateWebView",
                    "removeParentChildRelationShips": "Lcom/android/browser/TabControl;->removeParentChildRelationShips",
                    "restoreState": "Lcom/android/browser/TabControl;->restoreState",
                    "saveState": "Lcom/android/browser/TabControl;->saveState"
                },
                "UI": {
                    "onBackKey": "Lcom/android/browser/UI;->onBackKey",
                    "onOptionsItemSelected": "Lcom/android/browser/UI;->onOptionsItemSelected",
                    "setUseQuickControls": "Lcom/android/browser/UI;->setUseQuickControls",
                    "showWeb": "Lcom/android/browser/UI;->showWeb"
                },
                "UiController": {
                    "onOptionsItemSelected": "Lcom/android/browser/UiController;->onOptionsItemSelected",
                    "switchToTab": "Lcom/android/browser/UiController;->switchToTab",
                    "createNewSnapshotTab": "Lcom/android/browser/UiController;->createNewSnapshotTab",
                    "openIncognitoTab": "Lcom/android/browser/UiController;->openIncognitoTab",
                    "openTab": "Lcom/android/browser/UiController;->openTab",
                    "openTabToHomePage": "Lcom/android/browser/UiController;->openTabToHomePage",
                    "closeCurrentTab": "Lcom/android/browser/UiController;->closeCurrentTab",
                    "closeTab": "Lcom/android/browser/UiController;->closeTab",
                    "handleNewIntent": "Lcom/android/browser/UiController;->handleNewIntent",
                    "setActiveTab": "Lcom/android/browser/UiController;->setActiveTab"
                },
                "UrlHandler$RLZTask": {
                    "onPostExecute": "Lcom/android/browser/UrlHandler$RLZTask;->onPostExecute"
                },
                "UrlHandler": {
                    "handleMenuClick": "Lcom/android/browser/UrlHandler;->handleMenuClick",
                    "shouldOverrideUrlLoading": "Lcom/android/browser/UrlHandler;->shouldOverrideUrlLoading",
                    "startActivityForUrl": "Lcom/android/browser/UrlHandler;->startActivityForUrl"
                },
                "UrlInputView$UrlInputListener": {
                    "onAction": "Lcom/android/browser/UrlInputView$UrlInputListener;->onAction"
                },
                "UrlInputView": {
                    "onEditorAction": "Lcom/android/browser/UrlInputView;->onEditorAction",
                    "onKeyDown": "Lcom/android/browser/UrlInputView;->onKeyDown",
                    "finishInput": "Lcom/android/browser/UrlInputView;->finishInput",
                    "onItemClick": "Lcom/android/browser/UrlInputView;->onItemClick",
                    "onSelect": "Lcom/android/browser/UrlInputView;->onSelect"
                },
                "view": {
                    "BasePieView": {
                        "layout": "Lcom/android/browser/view/BasePieView;->layout"
                    },
                    "BookmarkExpandableView": {
                        "onTop": "Lcom/android/browser/view/BookmarkExpandableView;->onTop"
                    },
                    "PieListView": {
                        "layout": "Lcom/android/browser/view/PieListView;->layout"
                    },
                    "PieMenu$PieView$OnLayoutListener": {
                        "onLayout": "Lcom/android/browser/view/PieMenu$PieView$OnLayoutListener;->onLayout"
                    },
                    "PieMenu$PieView": {
                        "layout": "Lcom/android/browser/view/PieMenu$PieView;->layout"
                    },
                    "PieMenu": {
                        "onTouchEvent": "Lcom/android/browser/view/PieMenu;->onTouchEvent",
                        "layoutPieView": "Lcom/android/browser/view/PieMenu;->layoutPieView"
                    },
                    "PieStackView": {
                        "layout": "Lcom/android/browser/view/PieStackView;->layout"
                    },
                    "ScrollerView": {
                        "onLayout": "Lcom/android/browser/view/ScrollerView;->onLayout"
                    }
                },
                "WallpaperHandler": {
                    "onMenuItemClick": "Lcom/android/browser/WallpaperHandler;->onMenuItemClick",
                    "openStream": "Lcom/android/browser/WallpaperHandler;->openStream",
                    "run": "Lcom/android/browser/WallpaperHandler;->run"
                },
                "WebStorageSizeManager": {
                    "onExceededDatabaseQuota": "Lcom/android/browser/WebStorageSizeManager;->onExceededDatabaseQuota",
                    "onReachedMaxAppCacheSize": "Lcom/android/browser/WebStorageSizeManager;->onReachedMaxAppCacheSize",
                    "scheduleOutOfSpaceNotification": "Lcom/android/browser/WebStorageSizeManager;->scheduleOutOfSpaceNotification"
                },
                "WebViewController": {
                    "shouldOverrideUrlLoading": "Lcom/android/browser/WebViewController;->shouldOverrideUrlLoading",
                    "switchToTab": "Lcom/android/browser/WebViewController;->switchToTab",
                    "openTab": "Lcom/android/browser/WebViewController;->openTab",
                    "closeTab": "Lcom/android/browser/WebViewController;->closeTab",
                    "createSubWindow": "Lcom/android/browser/WebViewController;->createSubWindow",
                    "doUpdateVisitedHistory": "Lcom/android/browser/WebViewController;->doUpdateVisitedHistory",
                    "onDownloadStart": "Lcom/android/browser/WebViewController;->onDownloadStart",
                    "onPageFinished": "Lcom/android/browser/WebViewController;->onPageFinished",
                    "onReceivedTitle": "Lcom/android/browser/WebViewController;->onReceivedTitle"
                },
                "WebViewFactory": {
                    "createSubWebView": "Lcom/android/browser/WebViewFactory;->createSubWebView",
                    "createWebView": "Lcom/android/browser/WebViewFactory;->createWebView"
                },
                "widget": {
                    "BookmarkThumbnailWidgetService$BookmarkFactory": {
                        "loadBookmarks": "Lcom/android/browser/widget/BookmarkThumbnailWidgetService$BookmarkFactory;->loadBookmarks"
                    }
                },
                "XLargeUi": {
                    "onBackKey": "Lcom/android/browser/XLargeUi;->onBackKey",
                    "onOptionsItemSelected": "Lcom/android/browser/XLargeUi;->onOptionsItemSelected",
                    "<init>": "Lcom/android/browser/XLargeUi;-><init>",
                    "setUseQuickControls": "Lcom/android/browser/XLargeUi;->setUseQuickControls",
                    "showWeb": "Lcom/android/browser/XLargeUi;->showWeb"
                }
            },
            "calendar": {
                "agenda": {
                    "AgendaAdapter": {
                        "bindView": "Lcom/android/calendar/agenda/AgendaAdapter;->bindView"
                    },
                    "AgendaByDayAdapter$1": {
                        "run": "Lcom/android/calendar/agenda/AgendaByDayAdapter$1;->run"
                    },
                    "AgendaByDayAdapter": {
                        "getView": "Lcom/android/calendar/agenda/AgendaByDayAdapter;->getView",
                        "<init>": "Lcom/android/calendar/agenda/AgendaByDayAdapter;-><init>"
                    },
                    "AgendaFragment$1": {
                        "run": "Lcom/android/calendar/agenda/AgendaFragment$1;->run"
                    },
                    "AgendaFragment$2": {
                        "run": "Lcom/android/calendar/agenda/AgendaFragment$2;->run"
                    },
                    "AgendaFragment": {
                        "eventsChanged": "Lcom/android/calendar/agenda/AgendaFragment;->eventsChanged",
                        "goTo": "Lcom/android/calendar/agenda/AgendaFragment;->goTo",
                        "handleEvent": "Lcom/android/calendar/agenda/AgendaFragment;->handleEvent",
                        "onAttach": "Lcom/android/calendar/agenda/AgendaFragment;->onAttach",
                        "onResume": "Lcom/android/calendar/agenda/AgendaFragment;->onResume",
                        "search": "Lcom/android/calendar/agenda/AgendaFragment;->search"
                    },
                    "AgendaListView$1": {
                        "run": "Lcom/android/calendar/agenda/AgendaListView$1;->run"
                    },
                    "AgendaListView$2": {
                        "run": "Lcom/android/calendar/agenda/AgendaListView$2;->run"
                    },
                    "AgendaListView$3": {
                        "run": "Lcom/android/calendar/agenda/AgendaListView$3;->run"
                    },
                    "AgendaListView": {
                        "deleteSelectedEvent": "Lcom/android/calendar/agenda/AgendaListView;->deleteSelectedEvent",
                        "goTo": "Lcom/android/calendar/agenda/AgendaListView;->goTo",
                        "<init>": "Lcom/android/calendar/agenda/AgendaListView;-><init>",
                        "initView": "Lcom/android/calendar/agenda/AgendaListView;->initView",
                        "onItemClick": "Lcom/android/calendar/agenda/AgendaListView;->onItemClick",
                        "refresh": "Lcom/android/calendar/agenda/AgendaListView;->refresh"
                    },
                    "AgendaWindowAdapter$1": {
                        "run": "Lcom/android/calendar/agenda/AgendaWindowAdapter$1;->run"
                    },
                    "AgendaWindowAdapter$DayAdapterInfo": {
                        "<init>": "Lcom/android/calendar/agenda/AgendaWindowAdapter$DayAdapterInfo;-><init>"
                    },
                    "AgendaWindowAdapter$QueryHandler$1": {
                        "onClick": "Lcom/android/calendar/agenda/AgendaWindowAdapter$QueryHandler$1;->onClick"
                    },
                    "AgendaWindowAdapter$QueryHandler": {
                        "processNewCursor": "Lcom/android/calendar/agenda/AgendaWindowAdapter$QueryHandler;->processNewCursor",
                        "onQueryComplete": "Lcom/android/calendar/agenda/AgendaWindowAdapter$QueryHandler;->onQueryComplete"
                    },
                    "AgendaWindowAdapter": {
                        "buildQueryUri": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->buildQueryUri",
                        "getView": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->getView",
                        "queueQuery": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->queueQuery",
                        "doQuery": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->doQuery",
                        "<init>": "Lcom/android/calendar/agenda/AgendaWindowAdapter;-><init>",
                        "refresh": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->refresh",
                        "setHideDeclinedEvents": "Lcom/android/calendar/agenda/AgendaWindowAdapter;->setHideDeclinedEvents"
                    }
                },
                "AgendaWindowAdapter": {
                    "buildQueryUri": "Lcom/android/calendar/AgendaWindowAdapter;->buildQueryUri"
                },
                "alerts": {
                    "AlertActivity$1": {
                        "onItemClick": "Lcom/android/calendar/alerts/AlertActivity$1;->onItemClick"
                    },
                    "AlertActivity": {
                        "dismissAlarm": "Lcom/android/calendar/alerts/AlertActivity;->dismissAlarm",
                        "dismissFiredAlarms": "Lcom/android/calendar/alerts/AlertActivity;->dismissFiredAlarms",
                        "onClick": "Lcom/android/calendar/alerts/AlertActivity;->onClick",
                        "onResume": "Lcom/android/calendar/alerts/AlertActivity;->onResume",
                        "onStop": "Lcom/android/calendar/alerts/AlertActivity;->onStop"
                    },
                    "AlertAdapter": {
                        "bindView": "Lcom/android/calendar/alerts/AlertAdapter;->bindView",
                        "updateView": "Lcom/android/calendar/alerts/AlertAdapter;->updateView"
                    },
                    "AlertReceiver": {
                        "makeBasicNotificationBuilder": "Lcom/android/calendar/alerts/AlertReceiver;->makeBasicNotificationBuilder",
                        "createBroadcastMailIntent": "Lcom/android/calendar/alerts/AlertReceiver;->createBroadcastMailIntent",
                        "createEmailIntent": "Lcom/android/calendar/alerts/AlertReceiver;->createEmailIntent",
                        "getAttendeesCursor": "Lcom/android/calendar/alerts/AlertReceiver;->getAttendeesCursor",
                        "getEventCursor": "Lcom/android/calendar/alerts/AlertReceiver;->getEventCursor",
                        "makeBasicNotification": "Lcom/android/calendar/alerts/AlertReceiver;->makeBasicNotification",
                        "makeDigestNotification": "Lcom/android/calendar/alerts/AlertReceiver;->makeDigestNotification",
                        "makeExpandingNotification": "Lcom/android/calendar/alerts/AlertReceiver;->makeExpandingNotification",
                        "beginStartingService": "Lcom/android/calendar/alerts/AlertReceiver;->beginStartingService",
                        "finishStartingService": "Lcom/android/calendar/alerts/AlertReceiver;->finishStartingService",
                        "onReceive": "Lcom/android/calendar/alerts/AlertReceiver;->onReceive"
                    },
                    "AlertService$NotificationMgrWrapper": {
                        "notify": "Lcom/android/calendar/alerts/AlertService$NotificationMgrWrapper;->notify"
                    },
                    "AlertService": {
                        "generateAlerts": "Lcom/android/calendar/alerts/AlertService;->generateAlerts",
                        "updateAlertNotification": "Lcom/android/calendar/alerts/AlertService;->updateAlertNotification",
                        "processQuery": "Lcom/android/calendar/alerts/AlertService;->processQuery",
                        "dismissOldAlerts": "Lcom/android/calendar/alerts/AlertService;->dismissOldAlerts",
                        "doTimeChanged": "Lcom/android/calendar/alerts/AlertService;->doTimeChanged",
                        "postNotification": "Lcom/android/calendar/alerts/AlertService;->postNotification",
                        "processMessage": "Lcom/android/calendar/alerts/AlertService;->processMessage",
                        "rescheduleMissedAlarms": "Lcom/android/calendar/alerts/AlertService;->rescheduleMissedAlarms"
                    },
                    "AlertUtils": {
                        "formatTimeLocation": "Lcom/android/calendar/alerts/AlertUtils;->formatTimeLocation"
                    },
                    "DismissAlarmsService": {
                        "onHandleIntent": "Lcom/android/calendar/alerts/DismissAlarmsService;->onHandleIntent"
                    },
                    "NotificationMgr": {
                        "notify": "Lcom/android/calendar/alerts/NotificationMgr;->notify"
                    },
                    "QuickResponseActivity$QueryThread": {
                        "run": "Lcom/android/calendar/alerts/QuickResponseActivity$QueryThread;->run"
                    },
                    "QuickResponseActivity": {
                        "onItemClick": "Lcom/android/calendar/alerts/QuickResponseActivity;->onItemClick"
                    },
                    "SnoozeAlarmsService": {
                        "onHandleIntent": "Lcom/android/calendar/alerts/SnoozeAlarmsService;->onHandleIntent"
                    }
                },
                "AllInOneActivity$2": {
                    "run": "Lcom/android/calendar/AllInOneActivity$2;->run"
                },
                "AllInOneActivity$3": {
                    "run": "Lcom/android/calendar/AllInOneActivity$3;->run"
                },
                "AllInOneActivity$4": {
                    "onChange": "Lcom/android/calendar/AllInOneActivity$4;->onChange"
                },
                "AllInOneActivity$QueryHandler": {
                    "onQueryComplete": "Lcom/android/calendar/AllInOneActivity$QueryHandler;->onQueryComplete"
                },
                "AllInOneActivity": {
                    "onNavigationItemSelected": "Lcom/android/calendar/AllInOneActivity;->onNavigationItemSelected",
                    "onOptionsItemSelected": "Lcom/android/calendar/AllInOneActivity;->onOptionsItemSelected",
                    "onQueryTextSubmit": "Lcom/android/calendar/AllInOneActivity;->onQueryTextSubmit",
                    "configureActionBar": "Lcom/android/calendar/AllInOneActivity;->configureActionBar",
                    "createButtonsSpinner": "Lcom/android/calendar/AllInOneActivity;->createButtonsSpinner",
                    "eventsChanged": "Lcom/android/calendar/AllInOneActivity;->eventsChanged",
                    "handleEvent": "Lcom/android/calendar/AllInOneActivity;->handleEvent",
                    "handleSelectSyncedCalendarsClicked": "Lcom/android/calendar/AllInOneActivity;->handleSelectSyncedCalendarsClicked",
                    "initFragments": "Lcom/android/calendar/AllInOneActivity;->initFragments",
                    "onBackPressed": "Lcom/android/calendar/AllInOneActivity;->onBackPressed",
                    "onCreate": "Lcom/android/calendar/AllInOneActivity;->onCreate",
                    "onNewIntent": "Lcom/android/calendar/AllInOneActivity;->onNewIntent",
                    "onResume": "Lcom/android/calendar/AllInOneActivity;->onResume",
                    "onSharedPreferenceChanged": "Lcom/android/calendar/AllInOneActivity;->onSharedPreferenceChanged",
                    "onTabSelected": "Lcom/android/calendar/AllInOneActivity;->onTabSelected",
                    "onUserLeaveHint": "Lcom/android/calendar/AllInOneActivity;->onUserLeaveHint",
                    "setMainPane": "Lcom/android/calendar/AllInOneActivity;->setMainPane",
                    "setTitleInActionBar": "Lcom/android/calendar/AllInOneActivity;->setTitleInActionBar",
                    "updateSecondaryTitleFields": "Lcom/android/calendar/AllInOneActivity;->updateSecondaryTitleFields"
                },
                "AsyncQueryService": {
                    "onQueryComplete": "Lcom/android/calendar/AsyncQueryService;->onQueryComplete"
                },
                "CalendarController$1": {
                    "run": "Lcom/android/calendar/CalendarController$1;->run"
                },
                "CalendarController$EventHandler": {
                    "eventsChanged": "Lcom/android/calendar/CalendarController$EventHandler;->eventsChanged",
                    "handleEvent": "Lcom/android/calendar/CalendarController$EventHandler;->handleEvent"
                },
                "CalendarController": {
                    "launchDeleteEventAndFinish": "Lcom/android/calendar/CalendarController;->launchDeleteEventAndFinish",
                    "launchDeleteEvent": "Lcom/android/calendar/CalendarController;->launchDeleteEvent",
                    "refreshCalendars": "Lcom/android/calendar/CalendarController;->refreshCalendars",
                    "sendEvent": "Lcom/android/calendar/CalendarController;->sendEvent",
                    "sendEventRelatedEvent": "Lcom/android/calendar/CalendarController;->sendEventRelatedEvent",
                    "sendEventRelatedEventWithExtra": "Lcom/android/calendar/CalendarController;->sendEventRelatedEventWithExtra"
                },
                "CalendarEventModel": {
                    "<init>": "Lcom/android/calendar/CalendarEventModel;-><init>"
                },
                "CalendarSettingsActivity$1": {
                    "run": "Lcom/android/calendar/CalendarSettingsActivity$1;->run"
                },
                "CalendarSettingsActivity": {
                    "onBuildHeaders": "Lcom/android/calendar/CalendarSettingsActivity;->onBuildHeaders"
                },
                "CalendarUtils$TimeZoneUtils": {
                    "formatDateRange": "Lcom/android/calendar/CalendarUtils$TimeZoneUtils;->formatDateRange",
                    "getTimeZone": "Lcom/android/calendar/CalendarUtils$TimeZoneUtils;->getTimeZone",
                    "forceDBRequery": "Lcom/android/calendar/CalendarUtils$TimeZoneUtils;->forceDBRequery",
                    "setTimeZone": "Lcom/android/calendar/CalendarUtils$TimeZoneUtils;->setTimeZone"
                },
                "CalendarViewAdapter$1": {
                    "run": "Lcom/android/calendar/CalendarViewAdapter$1;->run"
                },
                "CalendarViewAdapter": {
                    "getView": "Lcom/android/calendar/CalendarViewAdapter;->getView",
                    "buildWeekNum": "Lcom/android/calendar/CalendarViewAdapter;->buildWeekNum",
                    "<init>": "Lcom/android/calendar/CalendarViewAdapter;-><init>",
                    "refresh": "Lcom/android/calendar/CalendarViewAdapter;->refresh"
                },
                "DayFragment$1": {
                    "run": "Lcom/android/calendar/DayFragment$1;->run"
                },
                "DayFragment": {
                    "makeView": "Lcom/android/calendar/DayFragment;->makeView",
                    "onCreateView": "Lcom/android/calendar/DayFragment;->onCreateView",
                    "eventsChanged": "Lcom/android/calendar/DayFragment;->eventsChanged",
                    "goTo": "Lcom/android/calendar/DayFragment;->goTo",
                    "handleEvent": "Lcom/android/calendar/DayFragment;->handleEvent",
                    "onResume": "Lcom/android/calendar/DayFragment;->onResume"
                },
                "DayView$1": {
                    "run": "Lcom/android/calendar/DayView$1;->run"
                },
                "DayView$3": {
                    "run": "Lcom/android/calendar/DayView$3;->run"
                },
                "DayView$8": {
                    "onClick": "Lcom/android/calendar/DayView$8;->onClick"
                },
                "DayView$CalendarGestureListener": {
                    "onDown": "Lcom/android/calendar/DayView$CalendarGestureListener;->onDown",
                    "onFling": "Lcom/android/calendar/DayView$CalendarGestureListener;->onFling",
                    "onScroll": "Lcom/android/calendar/DayView$CalendarGestureListener;->onScroll",
                    "onSingleTapUp": "Lcom/android/calendar/DayView$CalendarGestureListener;->onSingleTapUp",
                    "onLongPress": "Lcom/android/calendar/DayView$CalendarGestureListener;->onLongPress"
                },
                "DayView$ContextMenuHandler": {
                    "onMenuItemClick": "Lcom/android/calendar/DayView$ContextMenuHandler;->onMenuItemClick"
                },
                "DayView$GotoBroadcaster": {
                    "onAnimationEnd": "Lcom/android/calendar/DayView$GotoBroadcaster;->onAnimationEnd"
                },
                "DayView": {
                    "switchViews": "Lcom/android/calendar/DayView;->switchViews",
                    "initNextView": "Lcom/android/calendar/DayView;->initNextView",
                    "onHoverEvent": "Lcom/android/calendar/DayView;->onHoverEvent",
                    "onKeyDown": "Lcom/android/calendar/DayView;->onKeyDown",
                    "onKeyUp": "Lcom/android/calendar/DayView;->onKeyUp",
                    "onLongClick": "Lcom/android/calendar/DayView;->onLongClick",
                    "onTouchEvent": "Lcom/android/calendar/DayView;->onTouchEvent",
                    "setSelectionFromPosition": "Lcom/android/calendar/DayView;->setSelectionFromPosition",
                    "getEventAccessLevel": "Lcom/android/calendar/DayView;->getEventAccessLevel",
                    "appendEventAccessibilityString": "Lcom/android/calendar/DayView;->appendEventAccessibilityString",
                    "doDown": "Lcom/android/calendar/DayView;->doDown",
                    "doFling": "Lcom/android/calendar/DayView;->doFling",
                    "doLongPress": "Lcom/android/calendar/DayView;->doLongPress",
                    "doScroll": "Lcom/android/calendar/DayView;->doScroll",
                    "doSingleTapUp": "Lcom/android/calendar/DayView;->doSingleTapUp",
                    "init": "Lcom/android/calendar/DayView;->init",
                    "<init>": "Lcom/android/calendar/DayView;-><init>",
                    "onClick": "Lcom/android/calendar/DayView;->onClick",
                    "onCreateContextMenu": "Lcom/android/calendar/DayView;->onCreateContextMenu",
                    "onDraw": "Lcom/android/calendar/DayView;->onDraw",
                    "reloadEvents": "Lcom/android/calendar/DayView;->reloadEvents",
                    "sendAccessibilityEventAsNeeded": "Lcom/android/calendar/DayView;->sendAccessibilityEventAsNeeded",
                    "setSelected": "Lcom/android/calendar/DayView;->setSelected",
                    "updateEventDetails": "Lcom/android/calendar/DayView;->updateEventDetails",
                    "updateTitle": "Lcom/android/calendar/DayView;->updateTitle"
                },
                "DeleteEventHelper$2": {
                    "onClick": "Lcom/android/calendar/DeleteEventHelper$2;->onClick"
                },
                "DeleteEventHelper$3": {
                    "onClick": "Lcom/android/calendar/DeleteEventHelper$3;->onClick"
                },
                "DeleteEventHelper$5": {
                    "onClick": "Lcom/android/calendar/DeleteEventHelper$5;->onClick"
                },
                "DeleteEventHelper": {
                    "deleteExceptionEvent": "Lcom/android/calendar/DeleteEventHelper;->deleteExceptionEvent",
                    "delete": "Lcom/android/calendar/DeleteEventHelper;->delete",
                    "deleteRepeatingEvent": "Lcom/android/calendar/DeleteEventHelper;->deleteRepeatingEvent"
                },
                "EmailAddressAdapter": {
                    "getView": "Lcom/android/calendar/EmailAddressAdapter;->getView"
                },
                "Event": {
                    "instancesQuery": "Lcom/android/calendar/Event;->instancesQuery",
                    "loadEvents": "Lcom/android/calendar/Event;->loadEvents"
                },
                "event": {
                    "AttendeesView$PresenceQueryHandler$1": {
                        "run": "Lcom/android/calendar/event/AttendeesView$PresenceQueryHandler$1;->run"
                    },
                    "AttendeesView$PresenceQueryHandler": {
                        "onQueryComplete": "Lcom/android/calendar/event/AttendeesView$PresenceQueryHandler;->onQueryComplete"
                    },
                    "AttendeesView": {
                        "constructAttendeeView": "Lcom/android/calendar/event/AttendeesView;->constructAttendeeView",
                        "updateAttendeeView": "Lcom/android/calendar/event/AttendeesView;->updateAttendeeView",
                        "addAttendees": "Lcom/android/calendar/event/AttendeesView;->addAttendees",
                        "addOneAttendee": "Lcom/android/calendar/event/AttendeesView;->addOneAttendee",
                        "onClick": "Lcom/android/calendar/event/AttendeesView;->onClick"
                    },
                    "EditEventFragment$1": {
                        "onClick": "Lcom/android/calendar/event/EditEventFragment$1;->onClick"
                    },
                    "EditEventFragment$2": {
                        "onClick": "Lcom/android/calendar/event/EditEventFragment$2;->onClick"
                    },
                    "EditEventFragment$Done": {
                        "run": "Lcom/android/calendar/event/EditEventFragment$Done;->run"
                    },
                    "EditEventFragment$QueryHandler": {
                        "onQueryComplete": "Lcom/android/calendar/event/EditEventFragment$QueryHandler;->onQueryComplete"
                    },
                    "EditEventFragment": {
                        "onCreateView": "Lcom/android/calendar/event/EditEventFragment;->onCreateView",
                        "onActionBarItemSelected": "Lcom/android/calendar/event/EditEventFragment;->onActionBarItemSelected",
                        "onOptionsItemSelected": "Lcom/android/calendar/event/EditEventFragment;->onOptionsItemSelected",
                        "handleEvent": "Lcom/android/calendar/event/EditEventFragment;->handleEvent",
                        "onAttach": "Lcom/android/calendar/event/EditEventFragment;->onAttach",
                        "onDestroy": "Lcom/android/calendar/event/EditEventFragment;->onDestroy",
                        "onPause": "Lcom/android/calendar/event/EditEventFragment;->onPause",
                        "saveReminders": "Lcom/android/calendar/event/EditEventFragment;->saveReminders",
                        "setModelIfDone": "Lcom/android/calendar/event/EditEventFragment;->setModelIfDone",
                        "startQuery": "Lcom/android/calendar/event/EditEventFragment;->startQuery"
                    },
                    "EditEventHelper$EditDoneRunnable": {
                        "run": "Lcom/android/calendar/event/EditEventHelper$EditDoneRunnable;->run"
                    },
                    "EditEventHelper": {
                        "saveEvent": "Lcom/android/calendar/event/EditEventHelper;->saveEvent",
                        "saveReminders": "Lcom/android/calendar/event/EditEventHelper;->saveReminders",
                        "saveRemindersWithBackRef": "Lcom/android/calendar/event/EditEventHelper;->saveRemindersWithBackRef"
                    },
                    "EditEventView$3": {
                        "onCheckedChanged": "Lcom/android/calendar/event/EditEventView$3;->onCheckedChanged"
                    },
                    "EditEventView$DateListener": {
                        "onDateSet": "Lcom/android/calendar/event/EditEventView$DateListener;->onDateSet"
                    },
                    "EditEventView$TimeListener": {
                        "onTimeSet": "Lcom/android/calendar/event/EditEventView$TimeListener;->onTimeSet"
                    },
                    "EditEventView": {
                        "<init>": "Lcom/android/calendar/event/EditEventView;-><init>",
                        "onCancel": "Lcom/android/calendar/event/EditEventView;->onCancel",
                        "onClick": "Lcom/android/calendar/event/EditEventView;->onClick",
                        "setAllDayViewsVisibility": "Lcom/android/calendar/event/EditEventView;->setAllDayViewsVisibility",
                        "setCalendarsCursor": "Lcom/android/calendar/event/EditEventView;->setCalendarsCursor",
                        "setModel": "Lcom/android/calendar/event/EditEventView;->setModel",
                        "setModification": "Lcom/android/calendar/event/EditEventView;->setModification",
                        "setViewStates": "Lcom/android/calendar/event/EditEventView;->setViewStates",
                        "updateHomeTime": "Lcom/android/calendar/event/EditEventView;->updateHomeTime",
                        "updateView": "Lcom/android/calendar/event/EditEventView;->updateView"
                    }
                },
                "EventInfoFragment$11": {
                    "onClick": "Lcom/android/calendar/EventInfoFragment$11;->onClick"
                },
                "EventInfoFragment$1": {
                    "run": "Lcom/android/calendar/EventInfoFragment$1;->run"
                },
                "EventInfoFragment$5": {
                    "onClick": "Lcom/android/calendar/EventInfoFragment$5;->onClick"
                },
                "EventInfoFragment$QueryHandler": {
                    "onQueryComplete": "Lcom/android/calendar/EventInfoFragment$QueryHandler;->onQueryComplete"
                },
                "EventInfoFragment": {
                    "onOptionsItemSelected": "Lcom/android/calendar/EventInfoFragment;->onOptionsItemSelected",
                    "saveReminders": "Lcom/android/calendar/EventInfoFragment;->saveReminders",
                    "saveResponse": "Lcom/android/calendar/EventInfoFragment;->saveResponse",
                    "createExceptionResponse": "Lcom/android/calendar/EventInfoFragment;->createExceptionResponse",
                    "doEdit": "Lcom/android/calendar/EventInfoFragment;->doEdit",
                    "initAttendeesCursor": "Lcom/android/calendar/EventInfoFragment;->initAttendeesCursor",
                    "onDestroyView": "Lcom/android/calendar/EventInfoFragment;->onDestroyView",
                    "onResume": "Lcom/android/calendar/EventInfoFragment;->onResume",
                    "showContactInfo": "Lcom/android/calendar/EventInfoFragment;->showContactInfo",
                    "updateAttendees": "Lcom/android/calendar/EventInfoFragment;->updateAttendees",
                    "updateCalendar": "Lcom/android/calendar/EventInfoFragment;->updateCalendar",
                    "updateEvent": "Lcom/android/calendar/EventInfoFragment;->updateEvent",
                    "updateResponse": "Lcom/android/calendar/EventInfoFragment;->updateResponse"
                },
                "EventLoader$LoaderThread": {
                    "run": "Lcom/android/calendar/EventLoader$LoaderThread;->run"
                },
                "EventLoader$LoadEventDaysRequest": {
                    "processRequest": "Lcom/android/calendar/EventLoader$LoadEventDaysRequest;->processRequest"
                },
                "EventLoader$LoadEventsRequest": {
                    "processRequest": "Lcom/android/calendar/EventLoader$LoadEventsRequest;->processRequest"
                },
                "EventLoader$LoadRequest": {
                    "processRequest": "Lcom/android/calendar/EventLoader$LoadRequest;->processRequest"
                },
                "EventLoader": {
                    "startBackgroundThread": "Lcom/android/calendar/EventLoader;->startBackgroundThread"
                },
                "GeneralPreferences": {
                    "onPreferenceChange": "Lcom/android/calendar/GeneralPreferences;->onPreferenceChange",
                    "onCreate": "Lcom/android/calendar/GeneralPreferences;->onCreate"
                },
                "GoogleCalendarUriIntentFilter": {
                    "onCreate": "Lcom/android/calendar/GoogleCalendarUriIntentFilter;->onCreate"
                },
                "month": {
                    "MonthByWeekAdapter$2": {
                        "run": "Lcom/android/calendar/month/MonthByWeekAdapter$2;->run"
                    },
                    "MonthByWeekAdapter": {
                        "onTouch": "Lcom/android/calendar/month/MonthByWeekAdapter;->onTouch",
                        "init": "Lcom/android/calendar/month/MonthByWeekAdapter;->init",
                        "<init>": "Lcom/android/calendar/month/MonthByWeekAdapter;-><init>",
                        "onDayTapped": "Lcom/android/calendar/month/MonthByWeekAdapter;->onDayTapped",
                        "refresh": "Lcom/android/calendar/month/MonthByWeekAdapter;->refresh",
                        "setEvents": "Lcom/android/calendar/month/MonthByWeekAdapter;->setEvents",
                        "updateParams": "Lcom/android/calendar/month/MonthByWeekAdapter;->updateParams"
                    },
                    "MonthByWeekFragment$1": {
                        "run": "Lcom/android/calendar/month/MonthByWeekFragment$1;->run"
                    },
                    "MonthByWeekFragment$2": {
                        "run": "Lcom/android/calendar/month/MonthByWeekFragment$2;->run"
                    },
                    "MonthByWeekFragment": {
                        "onCreateLoader": "Lcom/android/calendar/month/MonthByWeekFragment;->onCreateLoader",
                        "updateUri": "Lcom/android/calendar/month/MonthByWeekFragment;->updateUri",
                        "goTo": "Lcom/android/calendar/month/MonthByWeekFragment;->goTo",
                        "doResumeUpdates": "Lcom/android/calendar/month/MonthByWeekFragment;->doResumeUpdates",
                        "handleEvent": "Lcom/android/calendar/month/MonthByWeekFragment;->handleEvent",
                        "<init>": "Lcom/android/calendar/month/MonthByWeekFragment;-><init>",
                        "onActivityCreated": "Lcom/android/calendar/month/MonthByWeekFragment;->onActivityCreated",
                        "onAttach": "Lcom/android/calendar/month/MonthByWeekFragment;->onAttach",
                        "onCreate": "Lcom/android/calendar/month/MonthByWeekFragment;->onCreate",
                        "onLoadFinished": "Lcom/android/calendar/month/MonthByWeekFragment;->onLoadFinished",
                        "onResume": "Lcom/android/calendar/month/MonthByWeekFragment;->onResume",
                        "onScroll": "Lcom/android/calendar/month/MonthByWeekFragment;->onScroll",
                        "setMonthDisplayed": "Lcom/android/calendar/month/MonthByWeekFragment;->setMonthDisplayed",
                        "setUpAdapter": "Lcom/android/calendar/month/MonthByWeekFragment;->setUpAdapter",
                        "updateMonthHighlight": "Lcom/android/calendar/month/MonthByWeekFragment;->updateMonthHighlight"
                    },
                    "MonthListView$1": {
                        "run": "Lcom/android/calendar/month/MonthListView$1;->run"
                    },
                    "MonthListView": {
                        "<init>": "Lcom/android/calendar/month/MonthListView;-><init>",
                        "init": "Lcom/android/calendar/month/MonthListView;->init"
                    },
                    "MonthWeekEventsView": {
                        "onHoverEvent": "Lcom/android/calendar/month/MonthWeekEventsView;->onHoverEvent",
                        "drawEvent": "Lcom/android/calendar/month/MonthWeekEventsView;->drawEvent",
                        "drawEvents": "Lcom/android/calendar/month/MonthWeekEventsView;->drawEvents",
                        "onDraw": "Lcom/android/calendar/month/MonthWeekEventsView;->onDraw"
                    },
                    "SimpleDayPickerFragment$2": {
                        "onChanged": "Lcom/android/calendar/month/SimpleDayPickerFragment$2;->onChanged"
                    },
                    "SimpleDayPickerFragment": {
                        "goTo": "Lcom/android/calendar/month/SimpleDayPickerFragment;->goTo",
                        "doResumeUpdates": "Lcom/android/calendar/month/SimpleDayPickerFragment;->doResumeUpdates",
                        "<init>": "Lcom/android/calendar/month/SimpleDayPickerFragment;-><init>",
                        "onActivityCreated": "Lcom/android/calendar/month/SimpleDayPickerFragment;->onActivityCreated",
                        "onAttach": "Lcom/android/calendar/month/SimpleDayPickerFragment;->onAttach",
                        "onCreate": "Lcom/android/calendar/month/SimpleDayPickerFragment;->onCreate",
                        "onResume": "Lcom/android/calendar/month/SimpleDayPickerFragment;->onResume",
                        "onScroll": "Lcom/android/calendar/month/SimpleDayPickerFragment;->onScroll",
                        "setMonthDisplayed": "Lcom/android/calendar/month/SimpleDayPickerFragment;->setMonthDisplayed",
                        "setUpAdapter": "Lcom/android/calendar/month/SimpleDayPickerFragment;->setUpAdapter",
                        "updateMonthHighlight": "Lcom/android/calendar/month/SimpleDayPickerFragment;->updateMonthHighlight"
                    },
                    "SimpleWeeksAdapter": {
                        "onTouch": "Lcom/android/calendar/month/SimpleWeeksAdapter;->onTouch",
                        "init": "Lcom/android/calendar/month/SimpleWeeksAdapter;->init",
                        "<init>": "Lcom/android/calendar/month/SimpleWeeksAdapter;-><init>",
                        "onDayTapped": "Lcom/android/calendar/month/SimpleWeeksAdapter;->onDayTapped",
                        "refresh": "Lcom/android/calendar/month/SimpleWeeksAdapter;->refresh",
                        "updateParams": "Lcom/android/calendar/month/SimpleWeeksAdapter;->updateParams"
                    },
                    "SimpleWeekView": {
                        "onHoverEvent": "Lcom/android/calendar/month/SimpleWeekView;->onHoverEvent",
                        "onDraw": "Lcom/android/calendar/month/SimpleWeekView;->onDraw"
                    }
                },
                "SearchActivity$1": {
                    "onChange": "Lcom/android/calendar/SearchActivity$1;->onChange"
                },
                "SearchActivity$2": {
                    "run": "Lcom/android/calendar/SearchActivity$2;->run"
                },
                "SearchActivity": {
                    "onCreateOptionsMenu": "Lcom/android/calendar/SearchActivity;->onCreateOptionsMenu",
                    "onOptionsItemSelected": "Lcom/android/calendar/SearchActivity;->onOptionsItemSelected",
                    "onQueryTextSubmit": "Lcom/android/calendar/SearchActivity;->onQueryTextSubmit",
                    "deleteEvent": "Lcom/android/calendar/SearchActivity;->deleteEvent",
                    "eventsChanged": "Lcom/android/calendar/SearchActivity;->eventsChanged",
                    "handleEvent": "Lcom/android/calendar/SearchActivity;->handleEvent",
                    "handleIntent": "Lcom/android/calendar/SearchActivity;->handleIntent",
                    "initFragments": "Lcom/android/calendar/SearchActivity;->initFragments",
                    "onCreate": "Lcom/android/calendar/SearchActivity;->onCreate",
                    "onNewIntent": "Lcom/android/calendar/SearchActivity;->onNewIntent",
                    "onResume": "Lcom/android/calendar/SearchActivity;->onResume",
                    "search": "Lcom/android/calendar/SearchActivity;->search"
                },
                "selectcalendars": {
                    "SelectCalendarsSyncFragment": {
                        "onPause": "Lcom/android/calendar/selectcalendars/SelectCalendarsSyncFragment;->onPause",
                        "onResume": "Lcom/android/calendar/selectcalendars/SelectCalendarsSyncFragment;->onResume"
                    },
                    "SelectSyncedCalendarsMultiAccountActivity": {
                        "onClick": "Lcom/android/calendar/selectcalendars/SelectSyncedCalendarsMultiAccountActivity;->onClick",
                        "onCreate": "Lcom/android/calendar/selectcalendars/SelectSyncedCalendarsMultiAccountActivity;->onCreate"
                    },
                    "SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars": {
                        "run": "Lcom/android/calendar/selectcalendars/SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars;->run"
                    },
                    "SelectSyncedCalendarsMultiAccountAdapter": {
                        "getChildrenCursor": "Lcom/android/calendar/selectcalendars/SelectSyncedCalendarsMultiAccountAdapter;->getChildrenCursor",
                        "doSaveAction": "Lcom/android/calendar/selectcalendars/SelectSyncedCalendarsMultiAccountAdapter;->doSaveAction"
                    },
                    "SelectVisibleCalendarsFragment": {
                        "eventsChanged": "Lcom/android/calendar/selectcalendars/SelectVisibleCalendarsFragment;->eventsChanged",
                        "handleEvent": "Lcom/android/calendar/selectcalendars/SelectVisibleCalendarsFragment;->handleEvent",
                        "onItemClick": "Lcom/android/calendar/selectcalendars/SelectVisibleCalendarsFragment;->onItemClick",
                        "onResume": "Lcom/android/calendar/selectcalendars/SelectVisibleCalendarsFragment;->onResume",
                        "toggleVisibility": "Lcom/android/calendar/selectcalendars/SelectVisibleCalendarsFragment;->toggleVisibility"
                    }
                },
                "Utils": {
                    "getWeekNumberFromTime": "Lcom/android/calendar/Utils;->getWeekNumberFromTime",
                    "formatDateRange": "Lcom/android/calendar/Utils;->formatDateRange",
                    "formatMonthYear": "Lcom/android/calendar/Utils;->formatMonthYear",
                    "getDayOfWeekString": "Lcom/android/calendar/Utils;->getDayOfWeekString",
                    "getDisplayedDatetime": "Lcom/android/calendar/Utils;->getDisplayedDatetime",
                    "getTimeZone": "Lcom/android/calendar/Utils;->getTimeZone",
                    "setSharedPreference": "Lcom/android/calendar/Utils;->setSharedPreference",
                    "setTimeZone": "Lcom/android/calendar/Utils;->setTimeZone"
                },
                "widget": {
                    "CalendarAppWidgetModel": {
                        "populateDayInfo": "Lcom/android/calendar/widget/CalendarAppWidgetModel;->populateDayInfo",
                        "populateEventInfo": "Lcom/android/calendar/widget/CalendarAppWidgetModel;->populateEventInfo",
                        "buildFromCursor": "Lcom/android/calendar/widget/CalendarAppWidgetModel;->buildFromCursor"
                    },
                    "CalendarAppWidgetProvider": {
                        "onReceive": "Lcom/android/calendar/widget/CalendarAppWidgetProvider;->onReceive",
                        "onUpdate": "Lcom/android/calendar/widget/CalendarAppWidgetProvider;->onUpdate",
                        "performUpdate": "Lcom/android/calendar/widget/CalendarAppWidgetProvider;->performUpdate"
                    },
                    "CalendarAppWidgetService$CalendarFactory$2": {
                        "run": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory$2;->run"
                    },
                    "CalendarAppWidgetService$CalendarFactory$3$1": {
                        "run": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory$3$1;->run"
                    },
                    "CalendarAppWidgetService$CalendarFactory$3": {
                        "run": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory$3;->run"
                    },
                    "CalendarAppWidgetService$CalendarFactory": {
                        "createLoaderUri": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->createLoaderUri",
                        "getViewAt": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->getViewAt",
                        "buildAppWidgetModel": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->buildAppWidgetModel",
                        "initLoader": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->initLoader",
                        "onCreate": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->onCreate",
                        "onLoadComplete": "Lcom/android/calendar/widget/CalendarAppWidgetService$CalendarFactory;->onLoadComplete"
                    }
                }
            },
            "camera": {
                "ActivityBase$MyAppBridge": {
                    "onPreviewTextureCopied": "Lcom/android/camera/ActivityBase$MyAppBridge;->onPreviewTextureCopied",
                    "switchWithCaptureAnimation": "Lcom/android/camera/ActivityBase$MyAppBridge;->switchWithCaptureAnimation"
                },
                "ActivityBase": {
                    "onCreateOptionsMenu": "Lcom/android/camera/ActivityBase;->onCreateOptionsMenu",
                    "onOptionsItemSelected": "Lcom/android/camera/ActivityBase;->onOptionsItemSelected",
                    "createCameraScreenNail": "Lcom/android/camera/ActivityBase;->createCameraScreenNail",
                    "gotoGallery": "Lcom/android/camera/ActivityBase;->gotoGallery",
                    "onBackPressed": "Lcom/android/camera/ActivityBase;->onBackPressed",
                    "onConfigurationChanged": "Lcom/android/camera/ActivityBase;->onConfigurationChanged",
                    "onCreate": "Lcom/android/camera/ActivityBase;->onCreate",
                    "onPause": "Lcom/android/camera/ActivityBase;->onPause",
                    "onPreviewTextureCopied": "Lcom/android/camera/ActivityBase;->onPreviewTextureCopied",
                    "onResume": "Lcom/android/camera/ActivityBase;->onResume"
                },
                "Camera$4": {
                    "run": "Lcom/android/camera/Camera$4;->run"
                },
                "Camera": {
                    "onCreateOptionsMenu": "Lcom/android/camera/Camera;->onCreateOptionsMenu",
                    "onOptionsItemSelected": "Lcom/android/camera/Camera;->onOptionsItemSelected",
                    "createCameraScreenNail": "Lcom/android/camera/Camera;->createCameraScreenNail",
                    "gotoGallery": "Lcom/android/camera/Camera;->gotoGallery",
                    "initializeFirstTime": "Lcom/android/camera/Camera;->initializeFirstTime",
                    "initializeSecondTime": "Lcom/android/camera/Camera;->initializeSecondTime",
                    "onBackPressed": "Lcom/android/camera/Camera;->onBackPressed",
                    "onConfigurationChanged": "Lcom/android/camera/Camera;->onConfigurationChanged",
                    "onCreate": "Lcom/android/camera/Camera;->onCreate",
                    "onPause": "Lcom/android/camera/Camera;->onPause",
                    "onResume": "Lcom/android/camera/Camera;->onResume",
                    "onSharedPreferenceChanged": "Lcom/android/camera/Camera;->onSharedPreferenceChanged",
                    "onThumbnailClicked": "Lcom/android/camera/Camera;->onThumbnailClicked",
                    "restorePreferences": "Lcom/android/camera/Camera;->restorePreferences"
                },
                "CameraPreference$OnPreferenceChangedListener": {
                    "onSharedPreferenceChanged": "Lcom/android/camera/CameraPreference$OnPreferenceChangedListener;->onSharedPreferenceChanged"
                },
                "CameraScreenNail$Listener": {
                    "onPreviewTextureCopied": "Lcom/android/camera/CameraScreenNail$Listener;->onPreviewTextureCopied"
                },
                "CameraScreenNail": {
                    "directDraw": "Lcom/android/camera/CameraScreenNail;->directDraw",
                    "draw": "Lcom/android/camera/CameraScreenNail;->draw"
                },
                "CaptureAnimManager": {
                    "drawAnimation": "Lcom/android/camera/CaptureAnimManager;->drawAnimation"
                },
                "EffectsRecorder$4": {
                    "onRunnerDone": "Lcom/android/camera/EffectsRecorder$4;->onRunnerDone"
                },
                "EffectsRecorder$5": {
                    "run": "Lcom/android/camera/EffectsRecorder$5;->run"
                },
                "EffectsRecorder$EffectsListener": {
                    "onEffectsUpdate": "Lcom/android/camera/EffectsRecorder$EffectsListener;->onEffectsUpdate"
                },
                "EffectsRecorder": {
                    "setPreviewSurfaceTexture": "Lcom/android/camera/EffectsRecorder;->setPreviewSurfaceTexture",
                    "startPreview": "Lcom/android/camera/EffectsRecorder;->startPreview",
                    "startRecording": "Lcom/android/camera/EffectsRecorder;->startRecording"
                },
                "ListPreference": {
                    "getKey": "Lcom/android/camera/ListPreference;->getKey"
                },
                "LocationManager": {
                    "recordLocation": "Lcom/android/camera/LocationManager;->recordLocation",
                    "startReceivingLocationUpdates": "Lcom/android/camera/LocationManager;->startReceivingLocationUpdates"
                },
                "PanoramaActivity$8": {
                    "run": "Lcom/android/camera/PanoramaActivity$8;->run"
                },
                "PanoramaActivity": {
                    "onCreateOptionsMenu": "Lcom/android/camera/PanoramaActivity;->onCreateOptionsMenu",
                    "onOptionsItemSelected": "Lcom/android/camera/PanoramaActivity;->onOptionsItemSelected",
                    "createCameraScreenNail": "Lcom/android/camera/PanoramaActivity;->createCameraScreenNail",
                    "gotoGallery": "Lcom/android/camera/PanoramaActivity;->gotoGallery",
                    "onBackPressed": "Lcom/android/camera/PanoramaActivity;->onBackPressed",
                    "onConfigurationChanged": "Lcom/android/camera/PanoramaActivity;->onConfigurationChanged",
                    "onCreate": "Lcom/android/camera/PanoramaActivity;->onCreate",
                    "onPause": "Lcom/android/camera/PanoramaActivity;->onPause",
                    "onPreviewTextureCopied": "Lcom/android/camera/PanoramaActivity;->onPreviewTextureCopied",
                    "onResume": "Lcom/android/camera/PanoramaActivity;->onResume",
                    "onThumbnailClicked": "Lcom/android/camera/PanoramaActivity;->onThumbnailClicked"
                },
                "ShutterButton$OnShutterButtonListener": {
                    "onShutterButtonClick": "Lcom/android/camera/ShutterButton$OnShutterButtonListener;->onShutterButtonClick"
                },
                "ShutterButton": {
                    "performClick": "Lcom/android/camera/ShutterButton;->performClick"
                },
                "SwitchAnimManager": {
                    "drawAnimation": "Lcom/android/camera/SwitchAnimManager;->drawAnimation"
                },
                "ui": {
                    "BasicSettingPopup$Listener": {
                        "onSettingChanged": "Lcom/android/camera/ui/BasicSettingPopup$Listener;->onSettingChanged"
                    },
                    "BasicSettingPopup": {
                        "onItemClick": "Lcom/android/camera/ui/BasicSettingPopup;->onItemClick"
                    },
                    "EffectSettingPopup$Listener": {
                        "onSettingChanged": "Lcom/android/camera/ui/EffectSettingPopup$Listener;->onSettingChanged"
                    },
                    "EffectSettingPopup": {
                        "onClick": "Lcom/android/camera/ui/EffectSettingPopup;->onClick",
                        "onItemClick": "Lcom/android/camera/ui/EffectSettingPopup;->onItemClick"
                    },
                    "IndicatorButton$Listener": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorButton$Listener;->onSettingChanged"
                    },
                    "IndicatorButton": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorButton;->onSettingChanged"
                    },
                    "IndicatorControlBarContainer": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControlBarContainer;->onSettingChanged"
                    },
                    "IndicatorControlBar": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControlBar;->onSettingChanged"
                    },
                    "IndicatorControlContainer": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControlContainer;->onSettingChanged"
                    },
                    "IndicatorControl": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControl;->onSettingChanged"
                    },
                    "IndicatorControlWheelContainer": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControlWheelContainer;->onSettingChanged"
                    },
                    "IndicatorControlWheel": {
                        "onSettingChanged": "Lcom/android/camera/ui/IndicatorControlWheel;->onSettingChanged"
                    },
                    "InLineSettingItem$Listener": {
                        "onSettingChanged": "Lcom/android/camera/ui/InLineSettingItem$Listener;->onSettingChanged"
                    },
                    "InLineSettingItem": {
                        "changeIndex": "Lcom/android/camera/ui/InLineSettingItem;->changeIndex"
                    },
                    "InLineSettingKnob$1": {
                        "run": "Lcom/android/camera/ui/InLineSettingKnob$1;->run"
                    },
                    "InLineSettingKnob$2": {
                        "onTouch": "Lcom/android/camera/ui/InLineSettingKnob$2;->onTouch"
                    },
                    "InLineSettingKnob$3": {
                        "onTouch": "Lcom/android/camera/ui/InLineSettingKnob$3;->onTouch"
                    },
                    "InLineSettingKnob": {
                        "changeIndex": "Lcom/android/camera/ui/InLineSettingKnob;->changeIndex"
                    },
                    "InLineSettingRestore": {
                        "changeIndex": "Lcom/android/camera/ui/InLineSettingRestore;->changeIndex"
                    },
                    "InLineSettingSwitch$1": {
                        "onCheckedChanged": "Lcom/android/camera/ui/InLineSettingSwitch$1;->onCheckedChanged"
                    },
                    "InLineSettingSwitch": {
                        "changeIndex": "Lcom/android/camera/ui/InLineSettingSwitch;->changeIndex"
                    },
                    "OtherSettingsPopup$Listener": {
                        "onSettingChanged": "Lcom/android/camera/ui/OtherSettingsPopup$Listener;->onSettingChanged"
                    },
                    "OtherSettingsPopup": {
                        "onSettingChanged": "Lcom/android/camera/ui/OtherSettingsPopup;->onSettingChanged"
                    },
                    "SecondLevelIndicatorControlBar": {
                        "onSettingChanged": "Lcom/android/camera/ui/SecondLevelIndicatorControlBar;->onSettingChanged"
                    }
                },
                "VideoCamera$1": {
                    "run": "Lcom/android/camera/VideoCamera$1;->run"
                },
                "VideoCamera$3": {
                    "run": "Lcom/android/camera/VideoCamera$3;->run"
                },
                "VideoCamera$MyBroadcastReceiver": {
                    "onReceive": "Lcom/android/camera/VideoCamera$MyBroadcastReceiver;->onReceive"
                },
                "VideoCamera": {
                    "onCreateOptionsMenu": "Lcom/android/camera/VideoCamera;->onCreateOptionsMenu",
                    "onKeyDown": "Lcom/android/camera/VideoCamera;->onKeyDown",
                    "onOptionsItemSelected": "Lcom/android/camera/VideoCamera;->onOptionsItemSelected",
                    "stopVideoRecording": "Lcom/android/camera/VideoCamera;->stopVideoRecording",
                    "updateEffectSelection": "Lcom/android/camera/VideoCamera;->updateEffectSelection",
                    "checkQualityAndStartPreview": "Lcom/android/camera/VideoCamera;->checkQualityAndStartPreview",
                    "createCameraScreenNail": "Lcom/android/camera/VideoCamera;->createCameraScreenNail",
                    "gotoGallery": "Lcom/android/camera/VideoCamera;->gotoGallery",
                    "initializeEffectsPreview": "Lcom/android/camera/VideoCamera;->initializeEffectsPreview",
                    "initializeRecorder": "Lcom/android/camera/VideoCamera;->initializeRecorder",
                    "initializeVideoSnapshot": "Lcom/android/camera/VideoCamera;->initializeVideoSnapshot",
                    "keepScreenOnAwhile": "Lcom/android/camera/VideoCamera;->keepScreenOnAwhile",
                    "onBackPressed": "Lcom/android/camera/VideoCamera;->onBackPressed",
                    "onCancelBgTraining": "Lcom/android/camera/VideoCamera;->onCancelBgTraining",
                    "onConfigurationChanged": "Lcom/android/camera/VideoCamera;->onConfigurationChanged",
                    "onCreate": "Lcom/android/camera/VideoCamera;->onCreate",
                    "onEffectsUpdate": "Lcom/android/camera/VideoCamera;->onEffectsUpdate",
                    "onError": "Lcom/android/camera/VideoCamera;->onError",
                    "onInfo": "Lcom/android/camera/VideoCamera;->onInfo",
                    "onPause": "Lcom/android/camera/VideoCamera;->onPause",
                    "onPreviewTextureCopied": "Lcom/android/camera/VideoCamera;->onPreviewTextureCopied",
                    "onResume": "Lcom/android/camera/VideoCamera;->onResume",
                    "onReviewCancelClicked": "Lcom/android/camera/VideoCamera;->onReviewCancelClicked",
                    "onSharedPreferenceChanged": "Lcom/android/camera/VideoCamera;->onSharedPreferenceChanged",
                    "onShutterButtonClick": "Lcom/android/camera/VideoCamera;->onShutterButtonClick",
                    "onStopVideoRecording": "Lcom/android/camera/VideoCamera;->onStopVideoRecording",
                    "onThumbnailClicked": "Lcom/android/camera/VideoCamera;->onThumbnailClicked",
                    "onUserInteraction": "Lcom/android/camera/VideoCamera;->onUserInteraction",
                    "restorePreferences": "Lcom/android/camera/VideoCamera;->restorePreferences",
                    "setPreviewTexture": "Lcom/android/camera/VideoCamera;->setPreviewTexture",
                    "startPreview": "Lcom/android/camera/VideoCamera;->startPreview",
                    "startVideoRecording": "Lcom/android/camera/VideoCamera;->startVideoRecording",
                    "switchCamera": "Lcom/android/camera/VideoCamera;->switchCamera",
                    "updateRecordingTime": "Lcom/android/camera/VideoCamera;->updateRecordingTime"
                }
            },
            "commands": {
                "am": {
                    "Am": {
                        "main": "Lcom/android/commands/am/Am;->main",
                        "runClearDebugApp": "Lcom/android/commands/am/Am;->runClearDebugApp",
                        "runDisplaySize": "Lcom/android/commands/am/Am;->runDisplaySize",
                        "run": "Lcom/android/commands/am/Am;->run",
                        "runKill": "Lcom/android/commands/am/Am;->runKill",
                        "runKillAll": "Lcom/android/commands/am/Am;->runKillAll",
                        "runSetDebugApp": "Lcom/android/commands/am/Am;->runSetDebugApp"
                    }
                },
                "bmgr": {
                    "Bmgr": {
                        "doEnable": "Lcom/android/commands/bmgr/Bmgr;->doEnable",
                        "doTransport": "Lcom/android/commands/bmgr/Bmgr;->doTransport",
                        "doWipe": "Lcom/android/commands/bmgr/Bmgr;->doWipe",
                        "main": "Lcom/android/commands/bmgr/Bmgr;->main",
                        "run": "Lcom/android/commands/bmgr/Bmgr;->run"
                    }
                },
                "monkey": {
                    "Monkey": {
                        "getSystemInterfaces": "Lcom/android/commands/monkey/Monkey;->getSystemInterfaces",
                        "run": "Lcom/android/commands/monkey/Monkey;->run",
                        "runMonkeyCycles": "Lcom/android/commands/monkey/Monkey;->runMonkeyCycles",
                        "main": "Lcom/android/commands/monkey/Monkey;->main"
                    },
                    "MonkeyEvent": {
                        "injectEvent": "Lcom/android/commands/monkey/MonkeyEvent;->injectEvent"
                    },
                    "MonkeyNetworkMonitor": {
                        "register": "Lcom/android/commands/monkey/MonkeyNetworkMonitor;->register"
                    },
                    "MonkeyRotationEvent": {
                        "injectEvent": "Lcom/android/commands/monkey/MonkeyRotationEvent;->injectEvent"
                    }
                },
                "pm": {
                    "Pm": {
                        "main": "Lcom/android/commands/pm/Pm;->main",
                        "run": "Lcom/android/commands/pm/Pm;->run",
                        "runSetInstallLocation": "Lcom/android/commands/pm/Pm;->runSetInstallLocation"
                    }
                },
                "svc": {
                    "DataCommand": {
                        "run": "Lcom/android/commands/svc/DataCommand;->run"
                    },
                    "PowerCommand": {
                        "run": "Lcom/android/commands/svc/PowerCommand;->run"
                    },
                    "Svc$Command": {
                        "run": "Lcom/android/commands/svc/Svc$Command;->run"
                    },
                    "Svc": {
                        "main": "Lcom/android/commands/svc/Svc;->main"
                    },
                    "WifiCommand": {
                        "run": "Lcom/android/commands/svc/WifiCommand;->run"
                    }
                },
                "uiautomator": {
                    "DumpCommand": {
                        "run": "Lcom/android/commands/uiautomator/DumpCommand;->run"
                    },
                    "EventsCommand$1": {
                        "disconnect": "Lcom/android/commands/uiautomator/EventsCommand$1;->disconnect"
                    },
                    "Launcher$Command": {
                        "run": "Lcom/android/commands/uiautomator/Launcher$Command;->run"
                    },
                    "Launcher": {
                        "main": "Lcom/android/commands/uiautomator/Launcher;->main"
                    }
                }
            },
            "common": {
                "contacts": {
                    "BaseEmailAddressAdapter$DefaultPartitionFilter": {
                        "performFiltering": "Lcom/android/common/contacts/BaseEmailAddressAdapter$DefaultPartitionFilter;->performFiltering"
                    },
                    "BaseEmailAddressAdapter$DirectoryPartitionFilter": {
                        "performFiltering": "Lcom/android/common/contacts/BaseEmailAddressAdapter$DirectoryPartitionFilter;->performFiltering"
                    },
                    "BaseEmailAddressAdapter": {
                        "getView": "Lcom/android/common/contacts/BaseEmailAddressAdapter;->getView"
                    },
                    "DataUsageStatUpdater": {
                        "update": "Lcom/android/common/contacts/DataUsageStatUpdater;->update",
                        "updateWithAddress": "Lcom/android/common/contacts/DataUsageStatUpdater;->updateWithAddress",
                        "updateWithPhoneNumber": "Lcom/android/common/contacts/DataUsageStatUpdater;->updateWithPhoneNumber",
                        "updateWithRfc822Address": "Lcom/android/common/contacts/DataUsageStatUpdater;->updateWithRfc822Address"
                    }
                },
                "widget": {
                    "CompositeCursorAdapter": {
                        "getView": "Lcom/android/common/widget/CompositeCursorAdapter;->getView",
                        "bindView": "Lcom/android/common/widget/CompositeCursorAdapter;->bindView"
                    },
                    "GroupingListAdapter$1": {
                        "onChange": "Lcom/android/common/widget/GroupingListAdapter$1;->onChange"
                    },
                    "GroupingListAdapter": {
                        "getView": "Lcom/android/common/widget/GroupingListAdapter;->getView",
                        "bindChildView": "Lcom/android/common/widget/GroupingListAdapter;->bindChildView",
                        "bindGroupView": "Lcom/android/common/widget/GroupingListAdapter;->bindGroupView",
                        "bindStandAloneView": "Lcom/android/common/widget/GroupingListAdapter;->bindStandAloneView",
                        "onContentChanged": "Lcom/android/common/widget/GroupingListAdapter;->onContentChanged"
                    }
                }
            },
            "contacts": {
                "activities": {
                    "ActionBarAdapter$Listener": {
                        "onAction": "Lcom/android/contacts/activities/ActionBarAdapter$Listener;->onAction",
                        "onSelectedTabChanged": "Lcom/android/contacts/activities/ActionBarAdapter$Listener;->onSelectedTabChanged"
                    },
                    "ActionBarAdapter$MyNavigationListener": {
                        "onNavigationItemSelected": "Lcom/android/contacts/activities/ActionBarAdapter$MyNavigationListener;->onNavigationItemSelected"
                    },
                    "ActionBarAdapter$MyTabListener": {
                        "onTabSelected": "Lcom/android/contacts/activities/ActionBarAdapter$MyTabListener;->onTabSelected"
                    },
                    "ActionBarAdapter": {
                        "onClose": "Lcom/android/contacts/activities/ActionBarAdapter;->onClose",
                        "onQueryTextChange": "Lcom/android/contacts/activities/ActionBarAdapter;->onQueryTextChange",
                        "initialize": "Lcom/android/contacts/activities/ActionBarAdapter;->initialize",
                        "setCurrentTab": "Lcom/android/contacts/activities/ActionBarAdapter;->setCurrentTab",
                        "setSearchMode": "Lcom/android/contacts/activities/ActionBarAdapter;->setSearchMode",
                        "update": "Lcom/android/contacts/activities/ActionBarAdapter;->update"
                    },
                    "AttachPhotoActivity$1": {
                        "onContactLoaded": "Lcom/android/contacts/activities/AttachPhotoActivity$1;->onContactLoaded"
                    },
                    "AttachPhotoActivity$2": {
                        "onLoadComplete": "Lcom/android/contacts/activities/AttachPhotoActivity$2;->onLoadComplete"
                    },
                    "AttachPhotoActivity$Listener": {
                        "onContactLoaded": "Lcom/android/contacts/activities/AttachPhotoActivity$Listener;->onContactLoaded"
                    },
                    "AttachPhotoActivity": {
                        "onCreate": "Lcom/android/contacts/activities/AttachPhotoActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/AttachPhotoActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/AttachPhotoActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/AttachPhotoActivity;->onStart",
                        "saveContact": "Lcom/android/contacts/activities/AttachPhotoActivity;->saveContact"
                    },
                    "ConfirmAddDetailActivity$PersistTask": {
                        "doInBackground": "Lcom/android/contacts/activities/ConfirmAddDetailActivity$PersistTask;->doInBackground"
                    },
                    "ConfirmAddDetailActivity$QueryEntitiesTask": {
                        "doInBackground": "Lcom/android/contacts/activities/ConfirmAddDetailActivity$QueryEntitiesTask;->doInBackground",
                        "queryForContactId": "Lcom/android/contacts/activities/ConfirmAddDetailActivity$QueryEntitiesTask;->queryForContactId",
                        "onPostExecute": "Lcom/android/contacts/activities/ConfirmAddDetailActivity$QueryEntitiesTask;->onPostExecute"
                    },
                    "ConfirmAddDetailActivity$QueryHandler": {
                        "onQueryComplete": "Lcom/android/contacts/activities/ConfirmAddDetailActivity$QueryHandler;->onQueryComplete"
                    },
                    "ConfirmAddDetailActivity": {
                        "addEditableRawContact": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->addEditableRawContact",
                        "onCreate": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->onCreate",
                        "setEntityDeltaList": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->setEntityDeltaList",
                        "startDisambiguationQuery": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->startDisambiguationQuery",
                        "startExtraInfoQuery": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->startExtraInfoQuery",
                        "startPhotoQuery": "Lcom/android/contacts/activities/ConfirmAddDetailActivity;->startPhotoQuery"
                    },
                    "ContactDetailActivity$3$1": {
                        "run": "Lcom/android/contacts/activities/ContactDetailActivity$3$1;->run"
                    },
                    "ContactDetailActivity": {
                        "onAttachFragment": "Lcom/android/contacts/activities/ContactDetailActivity;->onAttachFragment",
                        "onCreate": "Lcom/android/contacts/activities/ContactDetailActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/ContactDetailActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/ContactDetailActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/ContactDetailActivity;->onStart"
                    },
                    "ContactEditorAccountsChangedActivity": {
                        "onCreate": "Lcom/android/contacts/activities/ContactEditorAccountsChangedActivity;->onCreate"
                    },
                    "ContactEditorActivity$1": {
                        "onClick": "Lcom/android/contacts/activities/ContactEditorActivity$1;->onClick"
                    },
                    "ContactEditorActivity": {
                        "onBackPressed": "Lcom/android/contacts/activities/ContactEditorActivity;->onBackPressed",
                        "onCreate": "Lcom/android/contacts/activities/ContactEditorActivity;->onCreate",
                        "onNewIntent": "Lcom/android/contacts/activities/ContactEditorActivity;->onNewIntent",
                        "onResume": "Lcom/android/contacts/activities/ContactEditorActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/ContactEditorActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/ContactEditorActivity;->onStart"
                    },
                    "ContactSelectionActivity": {
                        "onOptionsItemSelected": "Lcom/android/contacts/activities/ContactSelectionActivity;->onOptionsItemSelected",
                        "onQueryTextChange": "Lcom/android/contacts/activities/ContactSelectionActivity;->onQueryTextChange",
                        "onCreate": "Lcom/android/contacts/activities/ContactSelectionActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/ContactSelectionActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/ContactSelectionActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/ContactSelectionActivity;->onStart"
                    },
                    "DialtactsActivity$11": {
                        "onCallNumberDirectly": "Lcom/android/contacts/activities/DialtactsActivity$11;->onCallNumberDirectly"
                    },
                    "DialtactsActivity$7": {
                        "onQueryTextChange": "Lcom/android/contacts/activities/DialtactsActivity$7;->onQueryTextChange"
                    },
                    "DialtactsActivity": {
                        "onBackPressed": "Lcom/android/contacts/activities/DialtactsActivity;->onBackPressed",
                        "onCreate": "Lcom/android/contacts/activities/DialtactsActivity;->onCreate",
                        "onNewIntent": "Lcom/android/contacts/activities/DialtactsActivity;->onNewIntent",
                        "onResume": "Lcom/android/contacts/activities/DialtactsActivity;->onResume",
                        "onStart": "Lcom/android/contacts/activities/DialtactsActivity;->onStart"
                    },
                    "GroupBrowserActivity": {
                        "onCreate": "Lcom/android/contacts/activities/GroupBrowserActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/GroupBrowserActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/GroupBrowserActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/GroupBrowserActivity;->onStart"
                    },
                    "GroupDetailActivity": {
                        "onOptionsItemSelected": "Lcom/android/contacts/activities/GroupDetailActivity;->onOptionsItemSelected",
                        "onPrepareOptionsMenu": "Lcom/android/contacts/activities/GroupDetailActivity;->onPrepareOptionsMenu",
                        "onCreate": "Lcom/android/contacts/activities/GroupDetailActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/GroupDetailActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/GroupDetailActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/GroupDetailActivity;->onStart"
                    },
                    "GroupEditorActivity$1": {
                        "onClick": "Lcom/android/contacts/activities/GroupEditorActivity$1;->onClick"
                    },
                    "GroupEditorActivity": {
                        "onBackPressed": "Lcom/android/contacts/activities/GroupEditorActivity;->onBackPressed",
                        "onCreate": "Lcom/android/contacts/activities/GroupEditorActivity;->onCreate",
                        "onNewIntent": "Lcom/android/contacts/activities/GroupEditorActivity;->onNewIntent",
                        "onResume": "Lcom/android/contacts/activities/GroupEditorActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/GroupEditorActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/GroupEditorActivity;->onStart"
                    },
                    "JoinContactActivity": {
                        "onOptionsItemSelected": "Lcom/android/contacts/activities/JoinContactActivity;->onOptionsItemSelected",
                        "onQueryTextChange": "Lcom/android/contacts/activities/JoinContactActivity;->onQueryTextChange",
                        "onCreate": "Lcom/android/contacts/activities/JoinContactActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/JoinContactActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/JoinContactActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/JoinContactActivity;->onStart"
                    },
                    "NonPhoneActivity": {
                        "onCreate": "Lcom/android/contacts/activities/NonPhoneActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/activities/NonPhoneActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/NonPhoneActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/NonPhoneActivity;->onStart"
                    },
                    "PeopleActivity$ContactBrowserActionListener": {
                        "onFinishAction": "Lcom/android/contacts/activities/PeopleActivity$ContactBrowserActionListener;->onFinishAction",
                        "onInvalidSelection": "Lcom/android/contacts/activities/PeopleActivity$ContactBrowserActionListener;->onInvalidSelection",
                        "onSelectionChange": "Lcom/android/contacts/activities/PeopleActivity$ContactBrowserActionListener;->onSelectionChange",
                        "onViewContactAction": "Lcom/android/contacts/activities/PeopleActivity$ContactBrowserActionListener;->onViewContactAction"
                    },
                    "PeopleActivity$ContactDetailLoaderFragmentListener$1": {
                        "run": "Lcom/android/contacts/activities/PeopleActivity$ContactDetailLoaderFragmentListener$1;->run"
                    },
                    "PeopleActivity$ContactDetailLoaderFragmentListener": {
                        "onDetailsLoaded": "Lcom/android/contacts/activities/PeopleActivity$ContactDetailLoaderFragmentListener;->onDetailsLoaded"
                    },
                    "PeopleActivity$TabPagerListener": {
                        "onPageSelected": "Lcom/android/contacts/activities/PeopleActivity$TabPagerListener;->onPageSelected"
                    },
                    "PeopleActivity": {
                        "areContactWritableAccountsAvailable": "Lcom/android/contacts/activities/PeopleActivity;->areContactWritableAccountsAvailable",
                        "areGroupWritableAccountsAvailable": "Lcom/android/contacts/activities/PeopleActivity;->areGroupWritableAccountsAvailable",
                        "onOptionsItemSelected": "Lcom/android/contacts/activities/PeopleActivity;->onOptionsItemSelected",
                        "onPrepareOptionsMenu": "Lcom/android/contacts/activities/PeopleActivity;->onPrepareOptionsMenu",
                        "onSearchRequested": "Lcom/android/contacts/activities/PeopleActivity;->onSearchRequested",
                        "processIntent": "Lcom/android/contacts/activities/PeopleActivity;->processIntent",
                        "configureContactListFragment": "Lcom/android/contacts/activities/PeopleActivity;->configureContactListFragment",
                        "configureContactListFragmentForRequest": "Lcom/android/contacts/activities/PeopleActivity;->configureContactListFragmentForRequest",
                        "configureFragments": "Lcom/android/contacts/activities/PeopleActivity;->configureFragments",
                        "createViewsAndFragments": "Lcom/android/contacts/activities/PeopleActivity;->createViewsAndFragments",
                        "onAction": "Lcom/android/contacts/activities/PeopleActivity;->onAction",
                        "onBackPressed": "Lcom/android/contacts/activities/PeopleActivity;->onBackPressed",
                        "onContactListFilterChanged": "Lcom/android/contacts/activities/PeopleActivity;->onContactListFilterChanged",
                        "onCreate": "Lcom/android/contacts/activities/PeopleActivity;->onCreate",
                        "onNewIntent": "Lcom/android/contacts/activities/PeopleActivity;->onNewIntent",
                        "onProviderStatusChange": "Lcom/android/contacts/activities/PeopleActivity;->onProviderStatusChange",
                        "onResume": "Lcom/android/contacts/activities/PeopleActivity;->onResume",
                        "onSelectedTabChanged": "Lcom/android/contacts/activities/PeopleActivity;->onSelectedTabChanged",
                        "onServiceCompleted": "Lcom/android/contacts/activities/PeopleActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/PeopleActivity;->onStart",
                        "setQueryTextToFragment": "Lcom/android/contacts/activities/PeopleActivity;->setQueryTextToFragment",
                        "setupContactDetailFragment": "Lcom/android/contacts/activities/PeopleActivity;->setupContactDetailFragment",
                        "showEmptyStateForTab": "Lcom/android/contacts/activities/PeopleActivity;->showEmptyStateForTab",
                        "updateFragmentsVisibility": "Lcom/android/contacts/activities/PeopleActivity;->updateFragmentsVisibility",
                        "updateViewConfiguration": "Lcom/android/contacts/activities/PeopleActivity;->updateViewConfiguration"
                    },
                    "PhotoSelectionActivity$2": {
                        "run": "Lcom/android/contacts/activities/PhotoSelectionActivity$2;->run"
                    },
                    "PhotoSelectionActivity$4": {
                        "onAnimationEnd": "Lcom/android/contacts/activities/PhotoSelectionActivity$4;->onAnimationEnd"
                    },
                    "PhotoSelectionActivity$PhotoHandler$PhotoListener": {
                        "onPhotoSelected": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler$PhotoListener;->onPhotoSelected",
                        "onRemovePictureChosen": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler$PhotoListener;->onRemovePictureChosen",
                        "onUseAsPrimaryChosen": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler$PhotoListener;->onUseAsPrimaryChosen"
                    },
                    "PhotoSelectionActivity$PhotoHandler": {
                        "getDeltaForAttachingPhotoToContact": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;->getDeltaForAttachingPhotoToContact",
                        "getPhotoPickSize": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;->getPhotoPickSize",
                        "getWritableEntityIndex": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;->getWritableEntityIndex",
                        "getWritableEntityId": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;->getWritableEntityId",
                        "<init>": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;-><init>",
                        "onClick": "Lcom/android/contacts/activities/PhotoSelectionActivity$PhotoHandler;->onClick"
                    },
                    "PhotoSelectionActivity": {
                        "attachPhotoHandler": "Lcom/android/contacts/activities/PhotoSelectionActivity;->attachPhotoHandler",
                        "displayPhoto": "Lcom/android/contacts/activities/PhotoSelectionActivity;->displayPhoto"
                    },
                    "ShowOrCreateActivity": {
                        "onCreate": "Lcom/android/contacts/activities/ShowOrCreateActivity;->onCreate",
                        "onQueryComplete": "Lcom/android/contacts/activities/ShowOrCreateActivity;->onQueryComplete",
                        "onResume": "Lcom/android/contacts/activities/ShowOrCreateActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/activities/ShowOrCreateActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/activities/ShowOrCreateActivity;->onStart"
                    },
                    "TransactionSafeActivity": {
                        "onCreateDialog": "Lcom/android/contacts/activities/TransactionSafeActivity;->onCreateDialog",
                        "onOptionsItemSelected": "Lcom/android/contacts/activities/TransactionSafeActivity;->onOptionsItemSelected",
                        "onPrepareOptionsMenu": "Lcom/android/contacts/activities/TransactionSafeActivity;->onPrepareOptionsMenu",
                        "onSearchRequested": "Lcom/android/contacts/activities/TransactionSafeActivity;->onSearchRequested",
                        "onAttachFragment": "Lcom/android/contacts/activities/TransactionSafeActivity;->onAttachFragment",
                        "onBackPressed": "Lcom/android/contacts/activities/TransactionSafeActivity;->onBackPressed",
                        "onCreate": "Lcom/android/contacts/activities/TransactionSafeActivity;->onCreate",
                        "onNewIntent": "Lcom/android/contacts/activities/TransactionSafeActivity;->onNewIntent",
                        "onResume": "Lcom/android/contacts/activities/TransactionSafeActivity;->onResume",
                        "onStart": "Lcom/android/contacts/activities/TransactionSafeActivity;->onStart"
                    }
                },
                "CallContactActivity": {
                    "onCreate": "Lcom/android/contacts/CallContactActivity;->onCreate",
                    "onResume": "Lcom/android/contacts/CallContactActivity;->onResume",
                    "onServiceCompleted": "Lcom/android/contacts/CallContactActivity;->onServiceCompleted",
                    "onStart": "Lcom/android/contacts/CallContactActivity;->onStart"
                },
                "CallDetailActivity$1UpdateContactDetailsTask": {
                    "doInBackground": "Lcom/android/contacts/CallDetailActivity$1UpdateContactDetailsTask;->doInBackground",
                    "onPostExecute": "Lcom/android/contacts/CallDetailActivity$1UpdateContactDetailsTask;->onPostExecute"
                },
                "CallDetailActivity$6": {
                    "doInBackground": "Lcom/android/contacts/CallDetailActivity$6;->doInBackground"
                },
                "CallDetailActivity": {
                    "getPhoneCallDetailsForUri": "Lcom/android/contacts/CallDetailActivity;->getPhoneCallDetailsForUri",
                    "onMenuEditNumberBeforeCall": "Lcom/android/contacts/CallDetailActivity;->onMenuEditNumberBeforeCall"
                },
                "CallDetailActivityQueryHandler": {
                    "onQueryComplete": "Lcom/android/contacts/CallDetailActivityQueryHandler;->onQueryComplete"
                },
                "calllog": {
                    "CallLogAdapter$1": {
                        "onClick": "Lcom/android/contacts/calllog/CallLogAdapter$1;->onClick"
                    },
                    "CallLogAdapter$2": {
                        "onClick": "Lcom/android/contacts/calllog/CallLogAdapter$2;->onClick"
                    },
                    "CallLogAdapter$CallFetcher": {
                        "fetchCalls": "Lcom/android/contacts/calllog/CallLogAdapter$CallFetcher;->fetchCalls"
                    },
                    "CallLogAdapter$QueryThread": {
                        "run": "Lcom/android/contacts/calllog/CallLogAdapter$QueryThread;->run"
                    },
                    "CallLogAdapter": {
                        "getView": "Lcom/android/contacts/calllog/CallLogAdapter;->getView",
                        "queryContactInfo": "Lcom/android/contacts/calllog/CallLogAdapter;->queryContactInfo",
                        "getBetterNumberFromContacts": "Lcom/android/contacts/calllog/CallLogAdapter;->getBetterNumberFromContacts",
                        "bindChildView": "Lcom/android/contacts/calllog/CallLogAdapter;->bindChildView",
                        "bindGroupView": "Lcom/android/contacts/calllog/CallLogAdapter;->bindGroupView",
                        "bindStandAloneView": "Lcom/android/contacts/calllog/CallLogAdapter;->bindStandAloneView",
                        "bindView": "Lcom/android/contacts/calllog/CallLogAdapter;->bindView",
                        "enqueueRequest": "Lcom/android/contacts/calllog/CallLogAdapter;->enqueueRequest",
                        "onContentChanged": "Lcom/android/contacts/calllog/CallLogAdapter;->onContentChanged",
                        "startRequestProcessing": "Lcom/android/contacts/calllog/CallLogAdapter;->startRequestProcessing",
                        "updateCallLogContactInfoCache": "Lcom/android/contacts/calllog/CallLogAdapter;->updateCallLogContactInfoCache"
                    },
                    "CallLogFragment": {
                        "onOptionsItemSelected": "Lcom/android/contacts/calllog/CallLogFragment;->onOptionsItemSelected",
                        "callSelectedEntry": "Lcom/android/contacts/calllog/CallLogFragment;->callSelectedEntry",
                        "fetchCalls": "Lcom/android/contacts/calllog/CallLogFragment;->fetchCalls",
                        "onResume": "Lcom/android/contacts/calllog/CallLogFragment;->onResume",
                        "onStop": "Lcom/android/contacts/calllog/CallLogFragment;->onStop",
                        "refreshData": "Lcom/android/contacts/calllog/CallLogFragment;->refreshData",
                        "setMenuVisibility": "Lcom/android/contacts/calllog/CallLogFragment;->setMenuVisibility",
                        "startCallsQuery": "Lcom/android/contacts/calllog/CallLogFragment;->startCallsQuery",
                        "startVoicemailStatusQuery": "Lcom/android/contacts/calllog/CallLogFragment;->startVoicemailStatusQuery",
                        "updateOnEntry": "Lcom/android/contacts/calllog/CallLogFragment;->updateOnEntry",
                        "updateOnExit": "Lcom/android/contacts/calllog/CallLogFragment;->updateOnExit",
                        "updateOnTransition": "Lcom/android/contacts/calllog/CallLogFragment;->updateOnTransition"
                    },
                    "CallLogListItemHelper": {
                        "getCallActionDescription": "Lcom/android/contacts/calllog/CallLogListItemHelper;->getCallActionDescription",
                        "configureCallSecondaryAction": "Lcom/android/contacts/calllog/CallLogListItemHelper;->configureCallSecondaryAction",
                        "setPhoneCallDetails": "Lcom/android/contacts/calllog/CallLogListItemHelper;->setPhoneCallDetails"
                    },
                    "CallLogNotificationsService": {
                        "onHandleIntent": "Lcom/android/contacts/calllog/CallLogNotificationsService;->onHandleIntent"
                    },
                    "CallLogQueryHandler": {
                        "fetchAllCalls": "Lcom/android/contacts/calllog/CallLogQueryHandler;->fetchAllCalls",
                        "fetchCalls": "Lcom/android/contacts/calllog/CallLogQueryHandler;->fetchCalls",
                        "fetchVoicemailOnly": "Lcom/android/contacts/calllog/CallLogQueryHandler;->fetchVoicemailOnly",
                        "fetchVoicemailStatus": "Lcom/android/contacts/calllog/CallLogQueryHandler;->fetchVoicemailStatus",
                        "markMissedCallsAsRead": "Lcom/android/contacts/calllog/CallLogQueryHandler;->markMissedCallsAsRead",
                        "markNewCallsAsOld": "Lcom/android/contacts/calllog/CallLogQueryHandler;->markNewCallsAsOld",
                        "markNewVoicemailsAsOld": "Lcom/android/contacts/calllog/CallLogQueryHandler;->markNewVoicemailsAsOld"
                    },
                    "ClearCallLogDialog$1$1": {
                        "doInBackground": "Lcom/android/contacts/calllog/ClearCallLogDialog$1$1;->doInBackground"
                    },
                    "ContactInfoHelper": {
                        "lookupContactFromUri": "Lcom/android/contacts/calllog/ContactInfoHelper;->lookupContactFromUri",
                        "lookupNumber": "Lcom/android/contacts/calllog/ContactInfoHelper;->lookupNumber",
                        "queryContactInfoForPhoneNumber": "Lcom/android/contacts/calllog/ContactInfoHelper;->queryContactInfoForPhoneNumber",
                        "queryContactInfoForSipAddress": "Lcom/android/contacts/calllog/ContactInfoHelper;->queryContactInfoForSipAddress"
                    },
                    "DefaultVoicemailNotifier$DefaultNameLookupQuery": {
                        "query": "Lcom/android/contacts/calllog/DefaultVoicemailNotifier$DefaultNameLookupQuery;->query"
                    },
                    "DefaultVoicemailNotifier$DefaultNewCallsQuery": {
                        "query": "Lcom/android/contacts/calllog/DefaultVoicemailNotifier$DefaultNewCallsQuery;->query"
                    },
                    "DefaultVoicemailNotifier$NameLookupQuery": {
                        "query": "Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NameLookupQuery;->query"
                    },
                    "DefaultVoicemailNotifier$NewCallsQuery": {
                        "query": "Lcom/android/contacts/calllog/DefaultVoicemailNotifier$NewCallsQuery;->query"
                    },
                    "DefaultVoicemailNotifier": {
                        "updateNotification": "Lcom/android/contacts/calllog/DefaultVoicemailNotifier;->updateNotification"
                    },
                    "IntentProvider$1": {
                        "getIntent": "Lcom/android/contacts/calllog/IntentProvider$1;->getIntent"
                    },
                    "IntentProvider": {
                        "getIntent": "Lcom/android/contacts/calllog/IntentProvider;->getIntent"
                    },
                    "PhoneNumberHelper": {
                        "canSendSmsTo": "Lcom/android/contacts/calllog/PhoneNumberHelper;->canSendSmsTo",
                        "isVoicemailNumber": "Lcom/android/contacts/calllog/PhoneNumberHelper;->isVoicemailNumber",
                        "getDisplayNumber": "Lcom/android/contacts/calllog/PhoneNumberHelper;->getDisplayNumber"
                    },
                    "VoicemailNotifier": {
                        "updateNotification": "Lcom/android/contacts/calllog/VoicemailNotifier;->updateNotification"
                    }
                },
                "ContactListEmptyView": {
                    "isSyncActive": "Lcom/android/contacts/ContactListEmptyView;->isSyncActive",
                    "show": "Lcom/android/contacts/ContactListEmptyView;->show"
                },
                "ContactLoader$Result": {
                    "isWritableContact": "Lcom/android/contacts/ContactLoader$Result;->isWritableContact",
                    "getFirstWritableRawContactId": "Lcom/android/contacts/ContactLoader$Result;->getFirstWritableRawContactId"
                },
                "ContactLoader": {
                    "loadInBackground": "Lcom/android/contacts/ContactLoader;->loadInBackground",
                    "deliverResult": "Lcom/android/contacts/ContactLoader;->deliverResult",
                    "loadDirectoryMetaData": "Lcom/android/contacts/ContactLoader;->loadDirectoryMetaData",
                    "loadGroupMetaData": "Lcom/android/contacts/ContactLoader;->loadGroupMetaData",
                    "loadInvitableAccountTypes": "Lcom/android/contacts/ContactLoader;->loadInvitableAccountTypes",
                    "loadStreamItems": "Lcom/android/contacts/ContactLoader;->loadStreamItems",
                    "onStartLoading": "Lcom/android/contacts/ContactLoader;->onStartLoading",
                    "postViewNotificationToSyncAdapter": "Lcom/android/contacts/ContactLoader;->postViewNotificationToSyncAdapter"
                },
                "ContactPhotoManagerImpl$LoaderThread": {
                    "loadPhotosInBackground": "Lcom/android/contacts/ContactPhotoManagerImpl$LoaderThread;->loadPhotosInBackground",
                    "loadThumbnails": "Lcom/android/contacts/ContactPhotoManagerImpl$LoaderThread;->loadThumbnails",
                    "preloadPhotosInBackground": "Lcom/android/contacts/ContactPhotoManagerImpl$LoaderThread;->preloadPhotosInBackground",
                    "queryPhotosForPreload": "Lcom/android/contacts/ContactPhotoManagerImpl$LoaderThread;->queryPhotosForPreload"
                },
                "ContactsActivity": {
                    "onCreateDialog": "Lcom/android/contacts/ContactsActivity;->onCreateDialog",
                    "onOptionsItemSelected": "Lcom/android/contacts/ContactsActivity;->onOptionsItemSelected",
                    "onPrepareOptionsMenu": "Lcom/android/contacts/ContactsActivity;->onPrepareOptionsMenu",
                    "onSearchRequested": "Lcom/android/contacts/ContactsActivity;->onSearchRequested",
                    "onAttachFragment": "Lcom/android/contacts/ContactsActivity;->onAttachFragment",
                    "onBackPressed": "Lcom/android/contacts/ContactsActivity;->onBackPressed",
                    "onCreate": "Lcom/android/contacts/ContactsActivity;->onCreate",
                    "onNewIntent": "Lcom/android/contacts/ContactsActivity;->onNewIntent",
                    "onResume": "Lcom/android/contacts/ContactsActivity;->onResume",
                    "onServiceCompleted": "Lcom/android/contacts/ContactsActivity;->onServiceCompleted",
                    "onStart": "Lcom/android/contacts/ContactsActivity;->onStart"
                },
                "ContactsApplication$DelayedInitializer": {
                    "doInBackground": "Lcom/android/contacts/ContactsApplication$DelayedInitializer;->doInBackground"
                },
                "ContactsApplication": {
                    "getSystemService": "Lcom/android/contacts/ContactsApplication;->getSystemService"
                },
                "ContactSaveService$2": {
                    "run": "Lcom/android/contacts/ContactSaveService$2;->run"
                },
                "ContactSaveService$Listener": {
                    "onServiceCompleted": "Lcom/android/contacts/ContactSaveService$Listener;->onServiceCompleted"
                },
                "ContactSaveService": {
                    "addMembersToGroup": "Lcom/android/contacts/ContactSaveService;->addMembersToGroup",
                    "buildJoinContactDiff": "Lcom/android/contacts/ContactSaveService;->buildJoinContactDiff",
                    "clearPrimary": "Lcom/android/contacts/ContactSaveService;->clearPrimary",
                    "createGroup": "Lcom/android/contacts/ContactSaveService;->createGroup",
                    "createRawContact": "Lcom/android/contacts/ContactSaveService;->createRawContact",
                    "deleteGroup": "Lcom/android/contacts/ContactSaveService;->deleteGroup",
                    "deliverCallbackOnUiThread": "Lcom/android/contacts/ContactSaveService;->deliverCallbackOnUiThread",
                    "joinContacts": "Lcom/android/contacts/ContactSaveService;->joinContacts",
                    "onHandleIntent": "Lcom/android/contacts/ContactSaveService;->onHandleIntent",
                    "removeMembersFromGroup": "Lcom/android/contacts/ContactSaveService;->removeMembersFromGroup",
                    "renameGroup": "Lcom/android/contacts/ContactSaveService;->renameGroup",
                    "saveContact": "Lcom/android/contacts/ContactSaveService;->saveContact",
                    "setSuperPrimary": "Lcom/android/contacts/ContactSaveService;->setSuperPrimary",
                    "updateGroup": "Lcom/android/contacts/ContactSaveService;->updateGroup"
                },
                "ContactsListActivity": {
                    "getContactUri": "Lcom/android/contacts/ContactsListActivity;->getContactUri",
                    "getSelectedUri": "Lcom/android/contacts/ContactsListActivity;->getSelectedUri",
                    "getUriToQuery": "Lcom/android/contacts/ContactsListActivity;->getUriToQuery"
                },
                "ContactsUtils": {
                    "getCallIntent": "Lcom/android/contacts/ContactsUtils;->getCallIntent",
                    "getCallUri": "Lcom/android/contacts/ContactsUtils;->getCallUri",
                    "areContactWritableAccountsAvailable": "Lcom/android/contacts/ContactsUtils;->areContactWritableAccountsAvailable",
                    "areGroupWritableAccountsAvailable": "Lcom/android/contacts/ContactsUtils;->areGroupWritableAccountsAvailable",
                    "getThumbnailSize": "Lcom/android/contacts/ContactsUtils;->getThumbnailSize"
                },
                "datepicker": {
                    "DatePickerDialog$OnDateSetListener": {
                        "onDateSet": "Lcom/android/contacts/datepicker/DatePickerDialog$OnDateSetListener;->onDateSet"
                    },
                    "DatePickerDialog": {
                        "onClick": "Lcom/android/contacts/datepicker/DatePickerDialog;->onClick"
                    }
                },
                "detail": {
                    "ContactDetailDisplayUtils$StreamPhotoTag": {
                        "getStreamItemPhotoUri": "Lcom/android/contacts/detail/ContactDetailDisplayUtils$StreamPhotoTag;->getStreamItemPhotoUri"
                    },
                    "ContactDetailFragment$3": {
                        "onClick": "Lcom/android/contacts/detail/ContactDetailFragment$3;->onClick"
                    },
                    "ContactDetailFragment$AddToMyContactsQuickFix": {
                        "isApplicable": "Lcom/android/contacts/detail/ContactDetailFragment$AddToMyContactsQuickFix;->isApplicable",
                        "execute": "Lcom/android/contacts/detail/ContactDetailFragment$AddToMyContactsQuickFix;->execute"
                    },
                    "ContactDetailFragment$MakeLocalCopyQuickFix": {
                        "execute": "Lcom/android/contacts/detail/ContactDetailFragment$MakeLocalCopyQuickFix;->execute"
                    },
                    "ContactDetailFragment$QuickFix": {
                        "isApplicable": "Lcom/android/contacts/detail/ContactDetailFragment$QuickFix;->isApplicable",
                        "execute": "Lcom/android/contacts/detail/ContactDetailFragment$QuickFix;->execute"
                    },
                    "ContactDetailFragment$ViewAdapter": {
                        "getHeaderEntryView": "Lcom/android/contacts/detail/ContactDetailFragment$ViewAdapter;->getHeaderEntryView",
                        "getView": "Lcom/android/contacts/detail/ContactDetailFragment$ViewAdapter;->getView"
                    },
                    "ContactDetailFragment": {
                        "onCreateView": "Lcom/android/contacts/detail/ContactDetailFragment;->onCreateView",
                        "bindData": "Lcom/android/contacts/detail/ContactDetailFragment;->bindData",
                        "buildEntries": "Lcom/android/contacts/detail/ContactDetailFragment;->buildEntries",
                        "configureQuickFix": "Lcom/android/contacts/detail/ContactDetailFragment;->configureQuickFix",
                        "setData": "Lcom/android/contacts/detail/ContactDetailFragment;->setData",
                        "showEmptyState": "Lcom/android/contacts/detail/ContactDetailFragment;->showEmptyState"
                    },
                    "ContactDetailLayoutController": {
                        "<init>": "Lcom/android/contacts/detail/ContactDetailLayoutController;-><init>",
                        "initialize": "Lcom/android/contacts/detail/ContactDetailLayoutController;->initialize",
                        "setContactData": "Lcom/android/contacts/detail/ContactDetailLayoutController;->setContactData",
                        "showContactWithoutUpdates": "Lcom/android/contacts/detail/ContactDetailLayoutController;->showContactWithoutUpdates",
                        "showContactWithUpdates": "Lcom/android/contacts/detail/ContactDetailLayoutController;->showContactWithUpdates",
                        "showEmptyState": "Lcom/android/contacts/detail/ContactDetailLayoutController;->showEmptyState"
                    },
                    "ContactDetailTabCarousel": {
                        "loadData": "Lcom/android/contacts/detail/ContactDetailTabCarousel;->loadData"
                    },
                    "ContactDetailUpdatesFragment$1": {
                        "onClick": "Lcom/android/contacts/detail/ContactDetailUpdatesFragment$1;->onClick"
                    },
                    "ContactDetailUpdatesFragment$2": {
                        "onClick": "Lcom/android/contacts/detail/ContactDetailUpdatesFragment$2;->onClick"
                    },
                    "ContactDetailUpdatesFragment": {
                        "getAccountTypeForStreamItemEntry": "Lcom/android/contacts/detail/ContactDetailUpdatesFragment;->getAccountTypeForStreamItemEntry"
                    },
                    "ContactLoaderFragment$1": {
                        "onLoadFinished": "Lcom/android/contacts/detail/ContactLoaderFragment$1;->onLoadFinished"
                    },
                    "ContactLoaderFragment$ContactLoaderFragmentListener": {
                        "onDetailsLoaded": "Lcom/android/contacts/detail/ContactLoaderFragment$ContactLoaderFragmentListener;->onDetailsLoaded"
                    },
                    "ContactLoaderFragment": {
                        "getPreAuthorizedUri": "Lcom/android/contacts/detail/ContactLoaderFragment;->getPreAuthorizedUri",
                        "onOptionsItemSelected": "Lcom/android/contacts/detail/ContactLoaderFragment;->onOptionsItemSelected",
                        "loadUri": "Lcom/android/contacts/detail/ContactLoaderFragment;->loadUri"
                    },
                    "PhotoSelectionHandler$PhotoActionListener": {
                        "onPhotoSelected": "Lcom/android/contacts/detail/PhotoSelectionHandler$PhotoActionListener;->onPhotoSelected",
                        "onRemovePictureChosen": "Lcom/android/contacts/detail/PhotoSelectionHandler$PhotoActionListener;->onRemovePictureChosen",
                        "onUseAsPrimaryChosen": "Lcom/android/contacts/detail/PhotoSelectionHandler$PhotoActionListener;->onUseAsPrimaryChosen"
                    },
                    "PhotoSelectionHandler": {
                        "handlePhotoActivityResult": "Lcom/android/contacts/detail/PhotoSelectionHandler;->handlePhotoActivityResult",
                        "getDeltaForAttachingPhotoToContact": "Lcom/android/contacts/detail/PhotoSelectionHandler;->getDeltaForAttachingPhotoToContact",
                        "getPhotoPickSize": "Lcom/android/contacts/detail/PhotoSelectionHandler;->getPhotoPickSize",
                        "getWritableEntityIndex": "Lcom/android/contacts/detail/PhotoSelectionHandler;->getWritableEntityIndex",
                        "getWritableEntityId": "Lcom/android/contacts/detail/PhotoSelectionHandler;->getWritableEntityId",
                        "<init>": "Lcom/android/contacts/detail/PhotoSelectionHandler;-><init>",
                        "onClick": "Lcom/android/contacts/detail/PhotoSelectionHandler;->onClick"
                    },
                    "StreamItemAdapter": {
                        "getView": "Lcom/android/contacts/detail/StreamItemAdapter;->getView"
                    }
                },
                "dialog": {
                    "ClearFrequentsDialog$1$1": {
                        "doInBackground": "Lcom/android/contacts/dialog/ClearFrequentsDialog$1$1;->doInBackground",
                        "onPostExecute": "Lcom/android/contacts/dialog/ClearFrequentsDialog$1$1;->onPostExecute"
                    }
                },
                "dialpad": {
                    "DialpadFragment": {
                        "newFlashIntent": "Lcom/android/contacts/dialpad/DialpadFragment;->newFlashIntent",
                        "onCreateView": "Lcom/android/contacts/dialpad/DialpadFragment;->onCreateView",
                        "fillDigitsIfNecessary": "Lcom/android/contacts/dialpad/DialpadFragment;->fillDigitsIfNecessary",
                        "isVoicemailAvailable": "Lcom/android/contacts/dialpad/DialpadFragment;->isVoicemailAvailable",
                        "onKey": "Lcom/android/contacts/dialpad/DialpadFragment;->onKey",
                        "onLongClick": "Lcom/android/contacts/dialpad/DialpadFragment;->onLongClick",
                        "afterTextChanged": "Lcom/android/contacts/dialpad/DialpadFragment;->afterTextChanged",
                        "configureScreenFromIntent": "Lcom/android/contacts/dialpad/DialpadFragment;->configureScreenFromIntent",
                        "dialButtonPressed": "Lcom/android/contacts/dialpad/DialpadFragment;->dialButtonPressed",
                        "handleDialButtonClickWithEmptyDigits": "Lcom/android/contacts/dialpad/DialpadFragment;->handleDialButtonClickWithEmptyDigits",
                        "keyPressed": "Lcom/android/contacts/dialpad/DialpadFragment;->keyPressed",
                        "onClick": "Lcom/android/contacts/dialpad/DialpadFragment;->onClick",
                        "onPause": "Lcom/android/contacts/dialpad/DialpadFragment;->onPause",
                        "onPressed": "Lcom/android/contacts/dialpad/DialpadFragment;->onPressed",
                        "onResume": "Lcom/android/contacts/dialpad/DialpadFragment;->onResume",
                        "setFormattedDigits": "Lcom/android/contacts/dialpad/DialpadFragment;->setFormattedDigits"
                    },
                    "DialpadImageButton$OnPressedListener": {
                        "onPressed": "Lcom/android/contacts/dialpad/DialpadImageButton$OnPressedListener;->onPressed"
                    },
                    "DialpadImageButton": {
                        "setPressed": "Lcom/android/contacts/dialpad/DialpadImageButton;->setPressed"
                    }
                },
                "editor": {
                    "AggregationSuggestionEngine": {
                        "buildAggregationSuggestionUri": "Lcom/android/contacts/editor/AggregationSuggestionEngine;->buildAggregationSuggestionUri",
                        "loadAggregationSuggestions": "Lcom/android/contacts/editor/AggregationSuggestionEngine;->loadAggregationSuggestions",
                        "onNameChange": "Lcom/android/contacts/editor/AggregationSuggestionEngine;->onNameChange"
                    },
                    "AggregationSuggestionView": {
                        "canEditSuggestedContact": "Lcom/android/contacts/editor/AggregationSuggestionView;->canEditSuggestedContact",
                        "handleItemClickEvent": "Lcom/android/contacts/editor/AggregationSuggestionView;->handleItemClickEvent"
                    },
                    "BaseRawContactEditorView": {
                        "setPhotoBitmap": "Lcom/android/contacts/editor/BaseRawContactEditorView;->setPhotoBitmap"
                    },
                    "ContactEditorFragment$1": {
                        "onItemClick": "Lcom/android/contacts/editor/ContactEditorFragment$1;->onItemClick"
                    },
                    "ContactEditorFragment$2": {
                        "onRequest": "Lcom/android/contacts/editor/ContactEditorFragment$2;->onRequest"
                    },
                    "ContactEditorFragment$3$1": {
                        "onItemClick": "Lcom/android/contacts/editor/ContactEditorFragment$3$1;->onItemClick"
                    },
                    "ContactEditorFragment$3": {
                        "onClick": "Lcom/android/contacts/editor/ContactEditorFragment$3;->onClick"
                    },
                    "ContactEditorFragment$4": {
                        "onLoadFinished": "Lcom/android/contacts/editor/ContactEditorFragment$4;->onLoadFinished"
                    },
                    "ContactEditorFragment$5": {
                        "onCreateLoader": "Lcom/android/contacts/editor/ContactEditorFragment$5;->onCreateLoader"
                    },
                    "ContactEditorFragment$EntityDeltaComparator": {
                        "compare": "Lcom/android/contacts/editor/ContactEditorFragment$EntityDeltaComparator;->compare"
                    },
                    "ContactEditorFragment$JoinSuggestedContactDialogFragment$1": {
                        "onClick": "Lcom/android/contacts/editor/ContactEditorFragment$JoinSuggestedContactDialogFragment$1;->onClick"
                    },
                    "ContactEditorFragment$PhotoHandler$PhotoEditorListener": {
                        "onPhotoSelected": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler$PhotoEditorListener;->onPhotoSelected",
                        "onRemovePictureChosen": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler$PhotoEditorListener;->onRemovePictureChosen",
                        "onRequest": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler$PhotoEditorListener;->onRequest",
                        "onUseAsPrimaryChosen": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler$PhotoEditorListener;->onUseAsPrimaryChosen"
                    },
                    "ContactEditorFragment$PhotoHandler": {
                        "handlePhotoActivityResult": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->handlePhotoActivityResult",
                        "getDeltaForAttachingPhotoToContact": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->getDeltaForAttachingPhotoToContact",
                        "getPhotoPickSize": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->getPhotoPickSize",
                        "getWritableEntityIndex": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->getWritableEntityIndex",
                        "getWritableEntityId": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->getWritableEntityId",
                        "<init>": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;-><init>",
                        "onClick": "Lcom/android/contacts/editor/ContactEditorFragment$PhotoHandler;->onClick"
                    },
                    "ContactEditorFragment": {
                        "onCreateView": "Lcom/android/contacts/editor/ContactEditorFragment;->onCreateView",
                        "doJoinContactAction": "Lcom/android/contacts/editor/ContactEditorFragment;->doJoinContactAction",
                        "hasPendingChanges": "Lcom/android/contacts/editor/ContactEditorFragment;->hasPendingChanges",
                        "isContactWritable": "Lcom/android/contacts/editor/ContactEditorFragment;->isContactWritable",
                        "onOptionsItemSelected": "Lcom/android/contacts/editor/ContactEditorFragment;->onOptionsItemSelected",
                        "revert": "Lcom/android/contacts/editor/ContactEditorFragment;->revert",
                        "save": "Lcom/android/contacts/editor/ContactEditorFragment;->save",
                        "acquireAggregationSuggestions": "Lcom/android/contacts/editor/ContactEditorFragment;->acquireAggregationSuggestions",
                        "bindEditors": "Lcom/android/contacts/editor/ContactEditorFragment;->bindEditors",
                        "bindEditorsForExistingContact": "Lcom/android/contacts/editor/ContactEditorFragment;->bindEditorsForExistingContact",
                        "bindEditorsForNewContact": "Lcom/android/contacts/editor/ContactEditorFragment;->bindEditorsForNewContact",
                        "bindPhotoHandler": "Lcom/android/contacts/editor/ContactEditorFragment;->bindPhotoHandler",
                        "createContact": "Lcom/android/contacts/editor/ContactEditorFragment;->createContact",
                        "doJoinSuggestedContact": "Lcom/android/contacts/editor/ContactEditorFragment;->doJoinSuggestedContact",
                        "doSaveAction": "Lcom/android/contacts/editor/ContactEditorFragment;->doSaveAction",
                        "onActivityCreated": "Lcom/android/contacts/editor/ContactEditorFragment;->onActivityCreated",
                        "onActivityResult": "Lcom/android/contacts/editor/ContactEditorFragment;->onActivityResult",
                        "onAttach": "Lcom/android/contacts/editor/ContactEditorFragment;->onAttach",
                        "onJoinCompleted": "Lcom/android/contacts/editor/ContactEditorFragment;->onJoinCompleted",
                        "onSaveCompleted": "Lcom/android/contacts/editor/ContactEditorFragment;->onSaveCompleted",
                        "onSplitContactConfirmed": "Lcom/android/contacts/editor/ContactEditorFragment;->onSplitContactConfirmed",
                        "onStop": "Lcom/android/contacts/editor/ContactEditorFragment;->onStop",
                        "rebindEditorsForNewContact": "Lcom/android/contacts/editor/ContactEditorFragment;->rebindEditorsForNewContact",
                        "selectAccountAndCreateContact": "Lcom/android/contacts/editor/ContactEditorFragment;->selectAccountAndCreateContact",
                        "setData": "Lcom/android/contacts/editor/ContactEditorFragment;->setData",
                        "setIntentExtras": "Lcom/android/contacts/editor/ContactEditorFragment;->setIntentExtras",
                        "setPhoto": "Lcom/android/contacts/editor/ContactEditorFragment;->setPhoto",
                        "showJoinAggregateActivity": "Lcom/android/contacts/editor/ContactEditorFragment;->showJoinAggregateActivity"
                    },
                    "ContactEditorUtils": {
                        "getInstance": "Lcom/android/contacts/editor/ContactEditorUtils;->getInstance",
                        "<init>": "Lcom/android/contacts/editor/ContactEditorUtils;-><init>"
                    },
                    "Editor$EditorListener": {
                        "onRequest": "Lcom/android/contacts/editor/Editor$EditorListener;->onRequest"
                    },
                    "Editor": {
                        "onFieldChanged": "Lcom/android/contacts/editor/Editor;->onFieldChanged"
                    },
                    "EventFieldEditorView$2": {
                        "onDateSet": "Lcom/android/contacts/editor/EventFieldEditorView$2;->onDateSet"
                    },
                    "EventFieldEditorView": {
                        "clearAllFields": "Lcom/android/contacts/editor/EventFieldEditorView;->clearAllFields",
                        "notifyEditorListener": "Lcom/android/contacts/editor/EventFieldEditorView;->notifyEditorListener",
                        "onFieldChanged": "Lcom/android/contacts/editor/EventFieldEditorView;->onFieldChanged",
                        "onLabelRebuilt": "Lcom/android/contacts/editor/EventFieldEditorView;->onLabelRebuilt",
                        "onOptionalFieldVisibilityChange": "Lcom/android/contacts/editor/EventFieldEditorView;->onOptionalFieldVisibilityChange",
                        "onTypeSelectionChange": "Lcom/android/contacts/editor/EventFieldEditorView;->onTypeSelectionChange",
                        "setValues": "Lcom/android/contacts/editor/EventFieldEditorView;->setValues"
                    },
                    "LabeledEditorView$1": {
                        "onItemSelected": "Lcom/android/contacts/editor/LabeledEditorView$1;->onItemSelected"
                    },
                    "LabeledEditorView$3": {
                        "onClick": "Lcom/android/contacts/editor/LabeledEditorView$3;->onClick"
                    },
                    "LabeledEditorView": {
                        "notifyEditorListener": "Lcom/android/contacts/editor/LabeledEditorView;->notifyEditorListener",
                        "onFieldChanged": "Lcom/android/contacts/editor/LabeledEditorView;->onFieldChanged",
                        "onLabelRebuilt": "Lcom/android/contacts/editor/LabeledEditorView;->onLabelRebuilt",
                        "onOptionalFieldVisibilityChange": "Lcom/android/contacts/editor/LabeledEditorView;->onOptionalFieldVisibilityChange",
                        "onTypeSelectionChange": "Lcom/android/contacts/editor/LabeledEditorView;->onTypeSelectionChange"
                    },
                    "PhoneticNameEditorView": {
                        "notifyEditorListener": "Lcom/android/contacts/editor/PhoneticNameEditorView;->notifyEditorListener",
                        "onFieldChanged": "Lcom/android/contacts/editor/PhoneticNameEditorView;->onFieldChanged",
                        "onLabelRebuilt": "Lcom/android/contacts/editor/PhoneticNameEditorView;->onLabelRebuilt",
                        "onOptionalFieldVisibilityChange": "Lcom/android/contacts/editor/PhoneticNameEditorView;->onOptionalFieldVisibilityChange",
                        "onTypeSelectionChange": "Lcom/android/contacts/editor/PhoneticNameEditorView;->onTypeSelectionChange"
                    },
                    "PhotoActionPopup$1": {
                        "onItemClick": "Lcom/android/contacts/editor/PhotoActionPopup$1;->onItemClick"
                    },
                    "PhotoActionPopup$Listener": {
                        "onRemovePictureChosen": "Lcom/android/contacts/editor/PhotoActionPopup$Listener;->onRemovePictureChosen",
                        "onUseAsPrimaryChosen": "Lcom/android/contacts/editor/PhotoActionPopup$Listener;->onUseAsPrimaryChosen"
                    },
                    "PhotoEditorView$1": {
                        "onClick": "Lcom/android/contacts/editor/PhotoEditorView$1;->onClick"
                    },
                    "PhotoEditorView": {
                        "setPhotoBitmap": "Lcom/android/contacts/editor/PhotoEditorView;->setPhotoBitmap"
                    },
                    "RawContactEditorView": {
                        "setPhotoBitmap": "Lcom/android/contacts/editor/RawContactEditorView;->setPhotoBitmap"
                    },
                    "RawContactReadOnlyEditorView": {
                        "setPhotoBitmap": "Lcom/android/contacts/editor/RawContactReadOnlyEditorView;->setPhotoBitmap"
                    },
                    "SelectAccountDialogFragment$1": {
                        "onClick": "Lcom/android/contacts/editor/SelectAccountDialogFragment$1;->onClick"
                    },
                    "SelectAccountDialogFragment$Listener": {
                        "onAccountChosen": "Lcom/android/contacts/editor/SelectAccountDialogFragment$Listener;->onAccountChosen"
                    },
                    "SelectAccountDialogFragment": {
                        "onCreateDialog": "Lcom/android/contacts/editor/SelectAccountDialogFragment;->onCreateDialog",
                        "onAccountSelected": "Lcom/android/contacts/editor/SelectAccountDialogFragment;->onAccountSelected"
                    },
                    "SplitContactConfirmationDialogFragment$1": {
                        "onClick": "Lcom/android/contacts/editor/SplitContactConfirmationDialogFragment$1;->onClick"
                    },
                    "SplitContactConfirmationDialogFragment$Listener": {
                        "onSplitContactConfirmed": "Lcom/android/contacts/editor/SplitContactConfirmationDialogFragment$Listener;->onSplitContactConfirmed"
                    },
                    "StructuredNameEditorView": {
                        "notifyEditorListener": "Lcom/android/contacts/editor/StructuredNameEditorView;->notifyEditorListener",
                        "onFieldChanged": "Lcom/android/contacts/editor/StructuredNameEditorView;->onFieldChanged",
                        "onLabelRebuilt": "Lcom/android/contacts/editor/StructuredNameEditorView;->onLabelRebuilt",
                        "onOptionalFieldVisibilityChange": "Lcom/android/contacts/editor/StructuredNameEditorView;->onOptionalFieldVisibilityChange",
                        "onTypeSelectionChange": "Lcom/android/contacts/editor/StructuredNameEditorView;->onTypeSelectionChange",
                        "rebuildFullName": "Lcom/android/contacts/editor/StructuredNameEditorView;->rebuildFullName",
                        "rebuildStructuredName": "Lcom/android/contacts/editor/StructuredNameEditorView;->rebuildStructuredName",
                        "switchFromFullNameToStructuredName": "Lcom/android/contacts/editor/StructuredNameEditorView;->switchFromFullNameToStructuredName",
                        "switchFromStructuredNameToFullName": "Lcom/android/contacts/editor/StructuredNameEditorView;->switchFromStructuredNameToFullName"
                    },
                    "TextFieldsEditorView$1": {
                        "onClick": "Lcom/android/contacts/editor/TextFieldsEditorView$1;->onClick"
                    },
                    "TextFieldsEditorView$2": {
                        "afterTextChanged": "Lcom/android/contacts/editor/TextFieldsEditorView$2;->afterTextChanged"
                    },
                    "TextFieldsEditorView": {
                        "notifyEditorListener": "Lcom/android/contacts/editor/TextFieldsEditorView;->notifyEditorListener",
                        "onFieldChanged": "Lcom/android/contacts/editor/TextFieldsEditorView;->onFieldChanged",
                        "onLabelRebuilt": "Lcom/android/contacts/editor/TextFieldsEditorView;->onLabelRebuilt",
                        "onOptionalFieldVisibilityChange": "Lcom/android/contacts/editor/TextFieldsEditorView;->onOptionalFieldVisibilityChange",
                        "onTypeSelectionChange": "Lcom/android/contacts/editor/TextFieldsEditorView;->onTypeSelectionChange"
                    }
                },
                "group": {
                    "GroupBrowseListAdapter": {
                        "getGroupUriFromId": "Lcom/android/contacts/group/GroupBrowseListAdapter;->getGroupUriFromId",
                        "getView": "Lcom/android/contacts/group/GroupBrowseListAdapter;->getView",
                        "getSelectedGroupPosition": "Lcom/android/contacts/group/GroupBrowseListAdapter;->getSelectedGroupPosition",
                        "<init>": "Lcom/android/contacts/group/GroupBrowseListAdapter;-><init>",
                        "setCursor": "Lcom/android/contacts/group/GroupBrowseListAdapter;->setCursor"
                    },
                    "GroupBrowseListFragment$3": {
                        "onLoadFinished": "Lcom/android/contacts/group/GroupBrowseListFragment$3;->onLoadFinished"
                    },
                    "GroupBrowseListFragment": {
                        "onCreateView": "Lcom/android/contacts/group/GroupBrowseListFragment;->onCreateView",
                        "bindGroupList": "Lcom/android/contacts/group/GroupBrowseListFragment;->bindGroupList",
                        "requestSelectionToScreen": "Lcom/android/contacts/group/GroupBrowseListFragment;->requestSelectionToScreen"
                    },
                    "GroupDetailDisplayUtils": {
                        "bindGroupSourceView": "Lcom/android/contacts/group/GroupDetailDisplayUtils;->bindGroupSourceView"
                    },
                    "GroupDetailFragment$2": {
                        "onCreateLoader": "Lcom/android/contacts/group/GroupDetailFragment$2;->onCreateLoader",
                        "onLoadFinished": "Lcom/android/contacts/group/GroupDetailFragment$2;->onLoadFinished"
                    },
                    "GroupDetailFragment$3": {
                        "onCreateLoader": "Lcom/android/contacts/group/GroupDetailFragment$3;->onCreateLoader"
                    },
                    "GroupDetailFragment": {
                        "bindGroupMetaData": "Lcom/android/contacts/group/GroupDetailFragment;->bindGroupMetaData",
                        "onAttach": "Lcom/android/contacts/group/GroupDetailFragment;->onAttach",
                        "updateAccountType": "Lcom/android/contacts/group/GroupDetailFragment;->updateAccountType"
                    },
                    "GroupEditorFragment$2": {
                        "onCreateLoader": "Lcom/android/contacts/group/GroupEditorFragment$2;->onCreateLoader",
                        "onLoadFinished": "Lcom/android/contacts/group/GroupEditorFragment$2;->onLoadFinished"
                    },
                    "GroupEditorFragment$3": {
                        "onCreateLoader": "Lcom/android/contacts/group/GroupEditorFragment$3;->onCreateLoader",
                        "onLoadFinished": "Lcom/android/contacts/group/GroupEditorFragment$3;->onLoadFinished"
                    },
                    "GroupEditorFragment$4": {
                        "onLoadFinished": "Lcom/android/contacts/group/GroupEditorFragment$4;->onLoadFinished"
                    },
                    "GroupEditorFragment$Member": {
                        "<init>": "Lcom/android/contacts/group/GroupEditorFragment$Member;-><init>"
                    },
                    "GroupEditorFragment": {
                        "isGroupMembershipEditable": "Lcom/android/contacts/group/GroupEditorFragment;->isGroupMembershipEditable",
                        "getAccountType": "Lcom/android/contacts/group/GroupEditorFragment;->getAccountType",
                        "bindGroupMetaData": "Lcom/android/contacts/group/GroupEditorFragment;->bindGroupMetaData",
                        "onAccountChosen": "Lcom/android/contacts/group/GroupEditorFragment;->onAccountChosen",
                        "onActivityCreated": "Lcom/android/contacts/group/GroupEditorFragment;->onActivityCreated",
                        "onDoneClicked": "Lcom/android/contacts/group/GroupEditorFragment;->onDoneClicked",
                        "selectAccountAndCreateGroup": "Lcom/android/contacts/group/GroupEditorFragment;->selectAccountAndCreateGroup",
                        "setupEditorForAccount": "Lcom/android/contacts/group/GroupEditorFragment;->setupEditorForAccount"
                    },
                    "SuggestedMemberListAdapter$SuggestedMemberFilter": {
                        "performFiltering": "Lcom/android/contacts/group/SuggestedMemberListAdapter$SuggestedMemberFilter;->performFiltering"
                    }
                },
                "GroupMemberLoader": {
                    "createUri": "Lcom/android/contacts/GroupMemberLoader;->createUri",
                    "constructLoaderForGroupDetailQuery": "Lcom/android/contacts/GroupMemberLoader;->constructLoaderForGroupDetailQuery",
                    "constructLoaderForGroupEditorQuery": "Lcom/android/contacts/GroupMemberLoader;->constructLoaderForGroupEditorQuery",
                    "<init>": "Lcom/android/contacts/GroupMemberLoader;-><init>"
                },
                "GroupMetaDataLoader": {
                    "ensureIsGroupUri": "Lcom/android/contacts/GroupMetaDataLoader;->ensureIsGroupUri",
                    "<init>": "Lcom/android/contacts/GroupMetaDataLoader;-><init>"
                },
                "interactions": {
                    "ContactDeletionInteraction": {
                        "onLoadFinished": "Lcom/android/contacts/interactions/ContactDeletionInteraction;->onLoadFinished"
                    },
                    "ImportExportDialogFragment$2": {
                        "onClick": "Lcom/android/contacts/interactions/ImportExportDialogFragment$2;->onClick"
                    },
                    "ImportExportDialogFragment": {
                        "handleImportRequest": "Lcom/android/contacts/interactions/ImportExportDialogFragment;->handleImportRequest",
                        "doShareVisibleContacts": "Lcom/android/contacts/interactions/ImportExportDialogFragment;->doShareVisibleContacts"
                    },
                    "PhoneNumberInteraction$PhoneDisambiguationDialogFragment": {
                        "onCreateDialog": "Lcom/android/contacts/interactions/PhoneNumberInteraction$PhoneDisambiguationDialogFragment;->onCreateDialog",
                        "onClick": "Lcom/android/contacts/interactions/PhoneNumberInteraction$PhoneDisambiguationDialogFragment;->onClick"
                    },
                    "PhoneNumberInteraction$PhoneItemAdapter": {
                        "<init>": "Lcom/android/contacts/interactions/PhoneNumberInteraction$PhoneItemAdapter;-><init>"
                    },
                    "PhoneNumberInteraction": {
                        "onLoadComplete": "Lcom/android/contacts/interactions/PhoneNumberInteraction;->onLoadComplete",
                        "performAction": "Lcom/android/contacts/interactions/PhoneNumberInteraction;->performAction"
                    }
                },
                "list": {
                    "AccountFilterActivity$FilterListAdapter": {
                        "<init>": "Lcom/android/contacts/list/AccountFilterActivity$FilterListAdapter;-><init>"
                    },
                    "AccountFilterActivity$FilterLoader": {
                        "loadInBackground": "Lcom/android/contacts/list/AccountFilterActivity$FilterLoader;->loadInBackground"
                    },
                    "AccountFilterActivity$MyLoaderCallbacks": {
                        "onLoadFinished": "Lcom/android/contacts/list/AccountFilterActivity$MyLoaderCallbacks;->onLoadFinished"
                    },
                    "AccountFilterActivity": {
                        "onOptionsItemSelected": "Lcom/android/contacts/list/AccountFilterActivity;->onOptionsItemSelected",
                        "loadAccountFilters": "Lcom/android/contacts/list/AccountFilterActivity;->loadAccountFilters",
                        "onCreate": "Lcom/android/contacts/list/AccountFilterActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/list/AccountFilterActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/list/AccountFilterActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/list/AccountFilterActivity;->onStart"
                    },
                    "ContactBrowseListFragment$ContactLookupTask": {
                        "doInBackground": "Lcom/android/contacts/list/ContactBrowseListFragment$ContactLookupTask;->doInBackground",
                        "onPostExecute": "Lcom/android/contacts/list/ContactBrowseListFragment$ContactLookupTask;->onPostExecute"
                    },
                    "ContactBrowseListFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/ContactBrowseListFragment;->isSyncActive",
                        "checkSelection": "Lcom/android/contacts/list/ContactBrowseListFragment;->checkSelection",
                        "finish": "Lcom/android/contacts/list/ContactBrowseListFragment;->finish",
                        "notifyInvalidSelection": "Lcom/android/contacts/list/ContactBrowseListFragment;->notifyInvalidSelection",
                        "onAttach": "Lcom/android/contacts/list/ContactBrowseListFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/ContactBrowseListFragment;->onClose",
                        "onContactUriQueryFinished": "Lcom/android/contacts/list/ContactBrowseListFragment;->onContactUriQueryFinished",
                        "onItemClick": "Lcom/android/contacts/list/ContactBrowseListFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/ContactBrowseListFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/ContactBrowseListFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/ContactBrowseListFragment;->prepareEmptyView",
                        "refreshSelectedContactUri": "Lcom/android/contacts/list/ContactBrowseListFragment;->refreshSelectedContactUri",
                        "reloadDataAndSetSelectedUri": "Lcom/android/contacts/list/ContactBrowseListFragment;->reloadDataAndSetSelectedUri",
                        "restoreSelectedUri": "Lcom/android/contacts/list/ContactBrowseListFragment;->restoreSelectedUri",
                        "selectDefaultContact": "Lcom/android/contacts/list/ContactBrowseListFragment;->selectDefaultContact",
                        "selectFirstFoundContactAfterDelay": "Lcom/android/contacts/list/ContactBrowseListFragment;->selectFirstFoundContactAfterDelay",
                        "setFilter": "Lcom/android/contacts/list/ContactBrowseListFragment;->setFilter",
                        "setQueryString": "Lcom/android/contacts/list/ContactBrowseListFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/ContactBrowseListFragment;->setSearchMode",
                        "setSelectedContactUri": "Lcom/android/contacts/list/ContactBrowseListFragment;->setSelectedContactUri",
                        "viewContact": "Lcom/android/contacts/list/ContactBrowseListFragment;->viewContact"
                    },
                    "ContactEntryListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/ContactEntryListAdapter;->getContactUri",
                        "getView": "Lcom/android/contacts/list/ContactEntryListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/ContactEntryListAdapter;->bindQuickContact"
                    },
                    "ContactEntryListFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/ContactEntryListFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/ContactEntryListFragment;->finish",
                        "onActivityResult": "Lcom/android/contacts/list/ContactEntryListFragment;->onActivityResult",
                        "onAttach": "Lcom/android/contacts/list/ContactEntryListFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/ContactEntryListFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/ContactEntryListFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/ContactEntryListFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/ContactEntryListFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/ContactEntryListFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/ContactEntryListFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/ContactEntryListFragment;->setSearchMode"
                    },
                    "ContactListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/ContactListAdapter;->getContactUri",
                        "getFirstContactUri": "Lcom/android/contacts/list/ContactListAdapter;->getFirstContactUri",
                        "getView": "Lcom/android/contacts/list/ContactListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/ContactListAdapter;->bindQuickContact"
                    },
                    "ContactListFilterController$ContactListFilterListener": {
                        "onContactListFilterChanged": "Lcom/android/contacts/list/ContactListFilterController$ContactListFilterListener;->onContactListFilterChanged"
                    },
                    "ContactListFilterController": {
                        "createContactListFilterController": "Lcom/android/contacts/list/ContactListFilterController;->createContactListFilterController",
                        "checkFilterValidity": "Lcom/android/contacts/list/ContactListFilterController;->checkFilterValidity",
                        "selectCustomFilter": "Lcom/android/contacts/list/ContactListFilterController;->selectCustomFilter",
                        "setContactListFilter": "Lcom/android/contacts/list/ContactListFilterController;->setContactListFilter"
                    },
                    "ContactListFilterControllerImpl": {
                        "filterAccountExists": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->filterAccountExists",
                        "createContactListFilterController": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->createContactListFilterController",
                        "checkFilterValidity": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->checkFilterValidity",
                        "<init>": "Lcom/android/contacts/list/ContactListFilterControllerImpl;-><init>",
                        "notifyContactListFilterChanged": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->notifyContactListFilterChanged",
                        "selectCustomFilter": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->selectCustomFilter",
                        "setContactListFilter": "Lcom/android/contacts/list/ContactListFilterControllerImpl;->setContactListFilter"
                    },
                    "ContactPickerFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/ContactPickerFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/ContactPickerFragment;->finish",
                        "onAttach": "Lcom/android/contacts/list/ContactPickerFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/ContactPickerFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/ContactPickerFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/ContactPickerFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/ContactPickerFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/ContactPickerFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/ContactPickerFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/ContactPickerFragment;->setSearchMode"
                    },
                    "ContactsIntentResolver": {
                        "resolveIntent": "Lcom/android/contacts/list/ContactsIntentResolver;->resolveIntent"
                    },
                    "ContactTileListFragment": {
                        "access$400": "Lcom/android/contacts/list/ContactTileListFragment;->access$400"
                    },
                    "ContactTilePhoneFrequentView$1": {
                        "onClick": "Lcom/android/contacts/list/ContactTilePhoneFrequentView$1;->onClick"
                    },
                    "ContactTileView$Listener": {
                        "onCallNumberDirectly": "Lcom/android/contacts/list/ContactTileView$Listener;->onCallNumberDirectly"
                    },
                    "CustomContactListFilterActivity$AccountDisplay": {
                        "buildDiff": "Lcom/android/contacts/list/CustomContactListFilterActivity$AccountDisplay;->buildDiff"
                    },
                    "CustomContactListFilterActivity$AccountSet": {
                        "buildDiff": "Lcom/android/contacts/list/CustomContactListFilterActivity$AccountSet;->buildDiff"
                    },
                    "CustomContactListFilterActivity$CustomFilterConfigurationLoader": {
                        "loadInBackground": "Lcom/android/contacts/list/CustomContactListFilterActivity$CustomFilterConfigurationLoader;->loadInBackground"
                    },
                    "CustomContactListFilterActivity$DisplayAdapter": {
                        "<init>": "Lcom/android/contacts/list/CustomContactListFilterActivity$DisplayAdapter;-><init>"
                    },
                    "CustomContactListFilterActivity$GroupDelta": {
                        "buildDiff": "Lcom/android/contacts/list/CustomContactListFilterActivity$GroupDelta;->buildDiff",
                        "fromSettings": "Lcom/android/contacts/list/CustomContactListFilterActivity$GroupDelta;->fromSettings"
                    },
                    "CustomContactListFilterActivity": {
                        "onOptionsItemSelected": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onOptionsItemSelected",
                        "doSaveAction": "Lcom/android/contacts/list/CustomContactListFilterActivity;->doSaveAction",
                        "onClick": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onClick",
                        "onCreate": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/list/CustomContactListFilterActivity;->onStart"
                    },
                    "DefaultContactBrowseListFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->isSyncActive",
                        "checkSelection": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->checkSelection",
                        "finish": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->finish",
                        "notifyInvalidSelection": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->notifyInvalidSelection",
                        "onActivityResult": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onActivityResult",
                        "onAttach": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onClose",
                        "onContactUriQueryFinished": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onContactUriQueryFinished",
                        "onItemClick": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->prepareEmptyView",
                        "refreshSelectedContactUri": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->refreshSelectedContactUri",
                        "reloadDataAndSetSelectedUri": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->reloadDataAndSetSelectedUri",
                        "restoreSelectedUri": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->restoreSelectedUri",
                        "selectDefaultContact": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->selectDefaultContact",
                        "selectFirstFoundContactAfterDelay": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->selectFirstFoundContactAfterDelay",
                        "setFilter": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->setFilter",
                        "setQueryString": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->setSearchMode",
                        "setSelectedContactUri": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->setSelectedContactUri",
                        "viewContact": "Lcom/android/contacts/list/DefaultContactBrowseListFragment;->viewContact"
                    },
                    "DefaultContactListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/DefaultContactListAdapter;->getContactUri",
                        "getFirstContactUri": "Lcom/android/contacts/list/DefaultContactListAdapter;->getFirstContactUri",
                        "getView": "Lcom/android/contacts/list/DefaultContactListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/DefaultContactListAdapter;->bindQuickContact",
                        "bindView": "Lcom/android/contacts/list/DefaultContactListAdapter;->bindView"
                    },
                    "DirectoryListLoader": {
                        "loadInBackground": "Lcom/android/contacts/list/DirectoryListLoader;->loadInBackground"
                    },
                    "EmailAddressListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/EmailAddressListAdapter;->getContactUri",
                        "getDataUri": "Lcom/android/contacts/list/EmailAddressListAdapter;->getDataUri",
                        "getView": "Lcom/android/contacts/list/EmailAddressListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/EmailAddressListAdapter;->bindQuickContact"
                    },
                    "EmailAddressPickerFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/EmailAddressPickerFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/EmailAddressPickerFragment;->finish",
                        "onAttach": "Lcom/android/contacts/list/EmailAddressPickerFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/EmailAddressPickerFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/EmailAddressPickerFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/EmailAddressPickerFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/EmailAddressPickerFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/EmailAddressPickerFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/EmailAddressPickerFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/EmailAddressPickerFragment;->setSearchMode"
                    },
                    "JoinContactListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/JoinContactListAdapter;->getContactUri",
                        "getFirstContactUri": "Lcom/android/contacts/list/JoinContactListAdapter;->getFirstContactUri",
                        "getView": "Lcom/android/contacts/list/JoinContactListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/JoinContactListAdapter;->bindQuickContact"
                    },
                    "JoinContactListFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/JoinContactListFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/JoinContactListFragment;->finish",
                        "onAttach": "Lcom/android/contacts/list/JoinContactListFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/JoinContactListFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/JoinContactListFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/JoinContactListFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/JoinContactListFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/JoinContactListFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/JoinContactListFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/JoinContactListFragment;->setSearchMode"
                    },
                    "LegacyContactListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/LegacyContactListAdapter;->getContactUri",
                        "getPersonUri": "Lcom/android/contacts/list/LegacyContactListAdapter;->getPersonUri",
                        "getView": "Lcom/android/contacts/list/LegacyContactListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/LegacyContactListAdapter;->bindQuickContact"
                    },
                    "LegacyPhoneNumberListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/LegacyPhoneNumberListAdapter;->getContactUri",
                        "getPhoneUri": "Lcom/android/contacts/list/LegacyPhoneNumberListAdapter;->getPhoneUri",
                        "getView": "Lcom/android/contacts/list/LegacyPhoneNumberListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/LegacyPhoneNumberListAdapter;->bindQuickContact"
                    },
                    "LegacyPostalAddressListAdapter": {
                        "getContactMethodUri": "Lcom/android/contacts/list/LegacyPostalAddressListAdapter;->getContactMethodUri",
                        "getContactUri": "Lcom/android/contacts/list/LegacyPostalAddressListAdapter;->getContactUri",
                        "getView": "Lcom/android/contacts/list/LegacyPostalAddressListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/LegacyPostalAddressListAdapter;->bindQuickContact"
                    },
                    "OnContactBrowserActionListener": {
                        "onFinishAction": "Lcom/android/contacts/list/OnContactBrowserActionListener;->onFinishAction",
                        "onInvalidSelection": "Lcom/android/contacts/list/OnContactBrowserActionListener;->onInvalidSelection",
                        "onSelectionChange": "Lcom/android/contacts/list/OnContactBrowserActionListener;->onSelectionChange",
                        "onViewContactAction": "Lcom/android/contacts/list/OnContactBrowserActionListener;->onViewContactAction"
                    },
                    "PhoneFavoriteFragment$ContactTileAdapterListener": {
                        "onCallNumberDirectly": "Lcom/android/contacts/list/PhoneFavoriteFragment$ContactTileAdapterListener;->onCallNumberDirectly"
                    },
                    "PhoneFavoriteFragment$Listener": {
                        "onCallNumberDirectly": "Lcom/android/contacts/list/PhoneFavoriteFragment$Listener;->onCallNumberDirectly"
                    },
                    "PhoneFavoriteFragment": {
                        "onActivityResult": "Lcom/android/contacts/list/PhoneFavoriteFragment;->onActivityResult",
                        "onItemClick": "Lcom/android/contacts/list/PhoneFavoriteFragment;->onItemClick",
                        "onStart": "Lcom/android/contacts/list/PhoneFavoriteFragment;->onStart"
                    },
                    "PhoneFavoriteMergedAdapter": {
                        "getView": "Lcom/android/contacts/list/PhoneFavoriteMergedAdapter;->getView"
                    },
                    "PhoneNumberListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/PhoneNumberListAdapter;->getContactUri",
                        "getDataUri": "Lcom/android/contacts/list/PhoneNumberListAdapter;->getDataUri",
                        "getView": "Lcom/android/contacts/list/PhoneNumberListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/PhoneNumberListAdapter;->bindQuickContact",
                        "bindView": "Lcom/android/contacts/list/PhoneNumberListAdapter;->bindView"
                    },
                    "PhoneNumberPickerFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->finish",
                        "onActivityResult": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onActivityResult",
                        "onAttach": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/PhoneNumberPickerFragment;->setSearchMode"
                    },
                    "PostalAddressListAdapter": {
                        "getContactUri": "Lcom/android/contacts/list/PostalAddressListAdapter;->getContactUri",
                        "getDataUri": "Lcom/android/contacts/list/PostalAddressListAdapter;->getDataUri",
                        "getView": "Lcom/android/contacts/list/PostalAddressListAdapter;->getView",
                        "bindQuickContact": "Lcom/android/contacts/list/PostalAddressListAdapter;->bindQuickContact"
                    },
                    "PostalAddressPickerFragment": {
                        "isSyncActive": "Lcom/android/contacts/list/PostalAddressPickerFragment;->isSyncActive",
                        "finish": "Lcom/android/contacts/list/PostalAddressPickerFragment;->finish",
                        "onAttach": "Lcom/android/contacts/list/PostalAddressPickerFragment;->onAttach",
                        "onClose": "Lcom/android/contacts/list/PostalAddressPickerFragment;->onClose",
                        "onItemClick": "Lcom/android/contacts/list/PostalAddressPickerFragment;->onItemClick",
                        "onLoadFinished": "Lcom/android/contacts/list/PostalAddressPickerFragment;->onLoadFinished",
                        "onStart": "Lcom/android/contacts/list/PostalAddressPickerFragment;->onStart",
                        "prepareEmptyView": "Lcom/android/contacts/list/PostalAddressPickerFragment;->prepareEmptyView",
                        "setQueryString": "Lcom/android/contacts/list/PostalAddressPickerFragment;->setQueryString",
                        "setSearchMode": "Lcom/android/contacts/list/PostalAddressPickerFragment;->setSearchMode"
                    },
                    "ProfileAndContactsLoader": {
                        "loadInBackground": "Lcom/android/contacts/list/ProfileAndContactsLoader;->loadInBackground",
                        "loadProfile": "Lcom/android/contacts/list/ProfileAndContactsLoader;->loadProfile"
                    },
                    "ProviderStatusWatcher$2": {
                        "doInBackground": "Lcom/android/contacts/list/ProviderStatusWatcher$2;->doInBackground"
                    },
                    "ProviderStatusWatcher$LoaderTask": {
                        "doInBackground": "Lcom/android/contacts/list/ProviderStatusWatcher$LoaderTask;->doInBackground",
                        "onPostExecute": "Lcom/android/contacts/list/ProviderStatusWatcher$LoaderTask;->onPostExecute"
                    },
                    "ProviderStatusWatcher$ProviderStatusListener": {
                        "onProviderStatusChange": "Lcom/android/contacts/list/ProviderStatusWatcher$ProviderStatusListener;->onProviderStatusChange"
                    },
                    "ProviderStatusWatcher": {
                        "notifyListeners": "Lcom/android/contacts/list/ProviderStatusWatcher;->notifyListeners"
                    },
                    "ShortcutIntentBuilder$ContactLoadingAsyncTask": {
                        "doInBackground": "Lcom/android/contacts/list/ShortcutIntentBuilder$ContactLoadingAsyncTask;->doInBackground",
                        "loadPhoto": "Lcom/android/contacts/list/ShortcutIntentBuilder$ContactLoadingAsyncTask;->loadPhoto"
                    },
                    "ShortcutIntentBuilder$LoadingAsyncTask": {
                        "doInBackground": "Lcom/android/contacts/list/ShortcutIntentBuilder$LoadingAsyncTask;->doInBackground",
                        "loadPhoto": "Lcom/android/contacts/list/ShortcutIntentBuilder$LoadingAsyncTask;->loadPhoto"
                    },
                    "ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask": {
                        "doInBackground": "Lcom/android/contacts/list/ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask;->doInBackground",
                        "loadPhoto": "Lcom/android/contacts/list/ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask;->loadPhoto"
                    }
                },
                "model": {
                    "account": {
                        "BaseAccountType$RelationshipKindBuilder": {
                            "getTagName": "Lcom/android/contacts/model/account/BaseAccountType$RelationshipKindBuilder;->getTagName"
                        }
                    },
                    "AccountTypeManager": {
                        "createAccountTypeManager": "Lcom/android/contacts/model/AccountTypeManager;->createAccountTypeManager",
                        "getInstance": "Lcom/android/contacts/model/AccountTypeManager;->getInstance",
                        "getUsableInvitableAccountTypes": "Lcom/android/contacts/model/AccountTypeManager;->getUsableInvitableAccountTypes"
                    },
                    "AccountTypeManagerImpl$1": {
                        "run": "Lcom/android/contacts/model/AccountTypeManagerImpl$1;->run"
                    },
                    "AccountTypeManagerImpl$FindInvitablesTask": {
                        "doInBackground": "Lcom/android/contacts/model/AccountTypeManagerImpl$FindInvitablesTask;->doInBackground"
                    },
                    "AccountTypeManagerImpl": {
                        "createAccountTypeManager": "Lcom/android/contacts/model/AccountTypeManagerImpl;->createAccountTypeManager",
                        "getInstance": "Lcom/android/contacts/model/AccountTypeManagerImpl;->getInstance",
                        "findUsableInvitableAccountTypes": "Lcom/android/contacts/model/AccountTypeManagerImpl;->findUsableInvitableAccountTypes",
                        "getUsableInvitableAccountTypes": "Lcom/android/contacts/model/AccountTypeManagerImpl;->getUsableInvitableAccountTypes",
                        "<init>": "Lcom/android/contacts/model/AccountTypeManagerImpl;-><init>",
                        "loadAccountsInBackground": "Lcom/android/contacts/model/AccountTypeManagerImpl;->loadAccountsInBackground",
                        "onAccountsUpdated": "Lcom/android/contacts/model/AccountTypeManagerImpl;->onAccountsUpdated",
                        "onStatusChanged": "Lcom/android/contacts/model/AccountTypeManagerImpl;->onStatusChanged",
                        "processBroadcastIntent": "Lcom/android/contacts/model/AccountTypeManagerImpl;->processBroadcastIntent"
                    },
                    "AccountTypeWithDataSet": {
                        "hasData": "Lcom/android/contacts/model/AccountTypeWithDataSet;->hasData"
                    },
                    "AccountWithDataSet": {
                        "hasData": "Lcom/android/contacts/model/AccountWithDataSet;->hasData"
                    },
                    "EntityDelta": {
                        "getRawContactAccountType": "Lcom/android/contacts/model/EntityDelta;->getRawContactAccountType",
                        "buildDiff": "Lcom/android/contacts/model/EntityDelta;->buildDiff"
                    },
                    "EntityDeltaList": {
                        "beginKeepTogether": "Lcom/android/contacts/model/EntityDeltaList;->beginKeepTogether",
                        "getFirstWritableRawContact": "Lcom/android/contacts/model/EntityDeltaList;->getFirstWritableRawContact",
                        "indexOfFirstWritableRawContact": "Lcom/android/contacts/model/EntityDeltaList;->indexOfFirstWritableRawContact",
                        "buildDiff": "Lcom/android/contacts/model/EntityDeltaList;->buildDiff",
                        "buildSplitContactDiff": "Lcom/android/contacts/model/EntityDeltaList;->buildSplitContactDiff"
                    },
                    "EntityModifier": {
                        "migrateStateForNewContact": "Lcom/android/contacts/model/EntityModifier;->migrateStateForNewContact",
                        "migrateStructuredName": "Lcom/android/contacts/model/EntityModifier;->migrateStructuredName",
                        "parseExtras": "Lcom/android/contacts/model/EntityModifier;->parseExtras",
                        "parseStructuredNameExtra": "Lcom/android/contacts/model/EntityModifier;->parseStructuredNameExtra"
                    }
                },
                "NfcHandler": {
                    "register": "Lcom/android/contacts/NfcHandler;->register"
                },
                "PhoneCallDetailsHelper": {
                    "setCallDetailsHeader": "Lcom/android/contacts/PhoneCallDetailsHelper;->setCallDetailsHeader",
                    "setPhoneCallDetails": "Lcom/android/contacts/PhoneCallDetailsHelper;->setPhoneCallDetails"
                },
                "preference": {
                    "ContactsPreferences": {
                        "registerChangeListener": "Lcom/android/contacts/preference/ContactsPreferences;->registerChangeListener",
                        "setDisplayOrder": "Lcom/android/contacts/preference/ContactsPreferences;->setDisplayOrder",
                        "setSortOrder": "Lcom/android/contacts/preference/ContactsPreferences;->setSortOrder"
                    },
                    "DisplayOrderPreference": {
                        "persistString": "Lcom/android/contacts/preference/DisplayOrderPreference;->persistString"
                    },
                    "SortOrderPreference": {
                        "persistString": "Lcom/android/contacts/preference/SortOrderPreference;->persistString"
                    }
                },
                "quickcontact": {
                    "DataAction": {
                        "<init>": "Lcom/android/contacts/quickcontact/DataAction;-><init>"
                    },
                    "QuickContactActivity$5": {
                        "onLoadFinished": "Lcom/android/contacts/quickcontact/QuickContactActivity$5;->onLoadFinished"
                    },
                    "QuickContactActivity": {
                        "bindData": "Lcom/android/contacts/quickcontact/QuickContactActivity;->bindData",
                        "onCreate": "Lcom/android/contacts/quickcontact/QuickContactActivity;->onCreate"
                    }
                },
                "socialwidget": {
                    "SocialWidgetProvider$1": {
                        "onLoadComplete": "Lcom/android/contacts/socialwidget/SocialWidgetProvider$1;->onLoadComplete"
                    },
                    "SocialWidgetProvider": {
                        "bindRemoteViews": "Lcom/android/contacts/socialwidget/SocialWidgetProvider;->bindRemoteViews",
                        "setDisplayNameAndSnippet": "Lcom/android/contacts/socialwidget/SocialWidgetProvider;->setDisplayNameAndSnippet"
                    }
                },
                "SpecialCharSequenceMgr": {
                    "handleChars": "Lcom/android/contacts/SpecialCharSequenceMgr;->handleChars",
                    "handleIMEIDisplay": "Lcom/android/contacts/SpecialCharSequenceMgr;->handleIMEIDisplay",
                    "showIMEIPanel": "Lcom/android/contacts/SpecialCharSequenceMgr;->showIMEIPanel",
                    "showMEIDPanel": "Lcom/android/contacts/SpecialCharSequenceMgr;->showMEIDPanel"
                },
                "SplitAggregateView": {
                    "<init>": "Lcom/android/contacts/SplitAggregateView;-><init>"
                },
                "test": {
                    "FragmentTestActivity": {
                        "onCreate": "Lcom/android/contacts/test/FragmentTestActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/test/FragmentTestActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/test/FragmentTestActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/test/FragmentTestActivity;->onStart"
                    }
                },
                "util": {
                    "AccountFilterUtil": {
                        "handleAccountFilterResult": "Lcom/android/contacts/util/AccountFilterUtil;->handleAccountFilterResult"
                    },
                    "AccountPromptUtils": {
                        "launchAccountPrompt": "Lcom/android/contacts/util/AccountPromptUtils;->launchAccountPrompt"
                    },
                    "AccountSelectionUtil": {
                        "getSelectAccountDialog": "Lcom/android/contacts/util/AccountSelectionUtil;->getSelectAccountDialog"
                    },
                    "AccountsListAdapter": {
                        "<init>": "Lcom/android/contacts/util/AccountsListAdapter;-><init>"
                    },
                    "ContactLoaderUtils": {
                        "ensureIsContactUri": "Lcom/android/contacts/util/ContactLoaderUtils;->ensureIsContactUri"
                    },
                    "ExpirableCache": {
                        "get": "Lcom/android/contacts/util/ExpirableCache;->get"
                    },
                    "NameConverter": {
                        "displayNameToStructuredName": "Lcom/android/contacts/util/NameConverter;->displayNameToStructuredName",
                        "structuredNameToDisplayName": "Lcom/android/contacts/util/NameConverter;->structuredNameToDisplayName"
                    },
                    "NotifyingAsyncQueryHandler$AsyncQueryListener": {
                        "onQueryComplete": "Lcom/android/contacts/util/NotifyingAsyncQueryHandler$AsyncQueryListener;->onQueryComplete"
                    },
                    "NotifyingAsyncQueryHandler": {
                        "onQueryComplete": "Lcom/android/contacts/util/NotifyingAsyncQueryHandler;->onQueryComplete"
                    },
                    "StreamItemEntry": {
                        "decodeHtml": "Lcom/android/contacts/util/StreamItemEntry;->decodeHtml"
                    }
                },
                "vcard": {
                    "CancelActivity": {
                        "onServiceConnected": "Lcom/android/contacts/vcard/CancelActivity;->onServiceConnected"
                    },
                    "ExportProcessor": {
                        "doCancelNotification": "Lcom/android/contacts/vcard/ExportProcessor;->doCancelNotification",
                        "doFinishNotification": "Lcom/android/contacts/vcard/ExportProcessor;->doFinishNotification",
                        "doProgressNotification": "Lcom/android/contacts/vcard/ExportProcessor;->doProgressNotification",
                        "run": "Lcom/android/contacts/vcard/ExportProcessor;->run",
                        "runInternal": "Lcom/android/contacts/vcard/ExportProcessor;->runInternal"
                    },
                    "ExportVCardActivity$ExportConfirmationListener": {
                        "onClick": "Lcom/android/contacts/vcard/ExportVCardActivity$ExportConfirmationListener;->onClick"
                    },
                    "ImportProcessor": {
                        "readOneVCard": "Lcom/android/contacts/vcard/ImportProcessor;->readOneVCard",
                        "onEntryCreated": "Lcom/android/contacts/vcard/ImportProcessor;->onEntryCreated",
                        "run": "Lcom/android/contacts/vcard/ImportProcessor;->run",
                        "runInternal": "Lcom/android/contacts/vcard/ImportProcessor;->runInternal"
                    },
                    "ImportVCardActivity$ImportRequestConnection": {
                        "onServiceConnected": "Lcom/android/contacts/vcard/ImportVCardActivity$ImportRequestConnection;->onServiceConnected",
                        "sendImportRequest": "Lcom/android/contacts/vcard/ImportVCardActivity$ImportRequestConnection;->sendImportRequest"
                    },
                    "ImportVCardActivity$VCardCacheThread": {
                        "constructImportRequest": "Lcom/android/contacts/vcard/ImportVCardActivity$VCardCacheThread;->constructImportRequest",
                        "finalize": "Lcom/android/contacts/vcard/ImportVCardActivity$VCardCacheThread;->finalize",
                        "run": "Lcom/android/contacts/vcard/ImportVCardActivity$VCardCacheThread;->run"
                    },
                    "ImportVCardActivity$VCardScanThread": {
                        "run": "Lcom/android/contacts/vcard/ImportVCardActivity$VCardScanThread;->run"
                    },
                    "ImportVCardActivity": {
                        "onCreateDialog": "Lcom/android/contacts/vcard/ImportVCardActivity;->onCreateDialog",
                        "onCreate": "Lcom/android/contacts/vcard/ImportVCardActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/vcard/ImportVCardActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/vcard/ImportVCardActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/vcard/ImportVCardActivity;->onStart",
                        "showFailureNotification": "Lcom/android/contacts/vcard/ImportVCardActivity;->showFailureNotification"
                    },
                    "NfcImportVCardActivity$ImportTask": {
                        "doInBackground": "Lcom/android/contacts/vcard/NfcImportVCardActivity$ImportTask;->doInBackground"
                    },
                    "NfcImportVCardActivity": {
                        "createImportRequest": "Lcom/android/contacts/vcard/NfcImportVCardActivity;->createImportRequest",
                        "onCreate": "Lcom/android/contacts/vcard/NfcImportVCardActivity;->onCreate",
                        "onImportFinished": "Lcom/android/contacts/vcard/NfcImportVCardActivity;->onImportFinished"
                    },
                    "NotificationImportExportListener": {
                        "onCancelRequest": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onCancelRequest",
                        "onExportProcessed": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onExportProcessed",
                        "onImportCanceled": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onImportCanceled",
                        "onImportFinished": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onImportFinished",
                        "onImportParsed": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onImportParsed",
                        "onImportProcessed": "Lcom/android/contacts/vcard/NotificationImportExportListener;->onImportProcessed"
                    },
                    "ProcessorBase": {
                        "run": "Lcom/android/contacts/vcard/ProcessorBase;->run"
                    },
                    "SelectAccountActivity": {
                        "onCreateDialog": "Lcom/android/contacts/vcard/SelectAccountActivity;->onCreateDialog",
                        "onCreate": "Lcom/android/contacts/vcard/SelectAccountActivity;->onCreate",
                        "onResume": "Lcom/android/contacts/vcard/SelectAccountActivity;->onResume",
                        "onServiceCompleted": "Lcom/android/contacts/vcard/SelectAccountActivity;->onServiceCompleted",
                        "onStart": "Lcom/android/contacts/vcard/SelectAccountActivity;->onStart"
                    },
                    "VCardImportExportListener": {
                        "onCancelRequest": "Lcom/android/contacts/vcard/VCardImportExportListener;->onCancelRequest",
                        "onExportProcessed": "Lcom/android/contacts/vcard/VCardImportExportListener;->onExportProcessed",
                        "onImportCanceled": "Lcom/android/contacts/vcard/VCardImportExportListener;->onImportCanceled",
                        "onImportFinished": "Lcom/android/contacts/vcard/VCardImportExportListener;->onImportFinished",
                        "onImportParsed": "Lcom/android/contacts/vcard/VCardImportExportListener;->onImportParsed",
                        "onImportProcessed": "Lcom/android/contacts/vcard/VCardImportExportListener;->onImportProcessed"
                    },
                    "VCardService": {
                        "handleCancelRequest": "Lcom/android/contacts/vcard/VCardService;->handleCancelRequest",
                        "handleExportRequest": "Lcom/android/contacts/vcard/VCardService;->handleExportRequest",
                        "handleImportRequest": "Lcom/android/contacts/vcard/VCardService;->handleImportRequest"
                    }
                },
                "voicemail": {
                    "VoicemailPlaybackFragment$PlaybackViewImpl": {
                        "setSpeakerPhoneOn": "Lcom/android/contacts/voicemail/VoicemailPlaybackFragment$PlaybackViewImpl;->setSpeakerPhoneOn"
                    },
                    "VoicemailPlaybackFragment": {
                        "onDestroy": "Lcom/android/contacts/voicemail/VoicemailPlaybackFragment;->onDestroy",
                        "onPause": "Lcom/android/contacts/voicemail/VoicemailPlaybackFragment;->onPause"
                    },
                    "VoicemailPlaybackPresenter$2": {
                        "doInBackground": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$2;->doInBackground",
                        "onPostExecute": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$2;->onPostExecute"
                    },
                    "VoicemailPlaybackPresenter$3": {
                        "doInBackground": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$3;->doInBackground",
                        "onPostExecute": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$3;->onPostExecute"
                    },
                    "VoicemailPlaybackPresenter$MediaPlayerCompletionListener$1": {
                        "run": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$MediaPlayerCompletionListener$1;->run"
                    },
                    "VoicemailPlaybackPresenter$PlaybackPositionListener": {
                        "onStartTrackingTouch": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$PlaybackPositionListener;->onStartTrackingTouch",
                        "onStopTrackingTouch": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$PlaybackPositionListener;->onStopTrackingTouch"
                    },
                    "VoicemailPlaybackPresenter$PlaybackView": {
                        "setSpeakerPhoneOn": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$PlaybackView;->setSpeakerPhoneOn"
                    },
                    "VoicemailPlaybackPresenter$SpeakerphoneListener": {
                        "onClick": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$SpeakerphoneListener;->onClick"
                    },
                    "VoicemailPlaybackPresenter$StartStopButtonListener": {
                        "onClick": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter$StartStopButtonListener;->onClick"
                    },
                    "VoicemailPlaybackPresenter": {
                        "handleCompletion": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;->handleCompletion",
                        "onDestroy": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;->onDestroy",
                        "onPause": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;->onPause",
                        "postSuccessfulPrepareActions": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;->postSuccessfulPrepareActions",
                        "stopPlaybackAtPosition": "Lcom/android/contacts/voicemail/VoicemailPlaybackPresenter;->stopPlaybackAtPosition"
                    }
                },
                "widget": {
                    "IndexerListAdapter": {
                        "getView": "Lcom/android/contacts/widget/IndexerListAdapter;->getView"
                    },
                    "LayoutSuppressingQuickContactBadge": {
                        "assignContactFromEmail": "Lcom/android/contacts/widget/LayoutSuppressingQuickContactBadge;->assignContactFromEmail",
                        "assignContactFromPhone": "Lcom/android/contacts/widget/LayoutSuppressingQuickContactBadge;->assignContactFromPhone",
                        "onClick": "Lcom/android/contacts/widget/LayoutSuppressingQuickContactBadge;->onClick"
                    },
                    "PinnedHeaderListAdapter": {
                        "getView": "Lcom/android/contacts/widget/PinnedHeaderListAdapter;->getView"
                    },
                    "PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter": {
                        "getView": "Lcom/android/contacts/widget/PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter;->getView"
                    },
                    "TransitionAnimationView": {
                        "onFinishInflate": "Lcom/android/contacts/widget/TransitionAnimationView;->onFinishInflate"
                    }
                }
            },
            "deskclock": {
                "AlarmAlert": {
                    "dispatchKeyEvent": "Lcom/android/deskclock/AlarmAlert;->dispatchKeyEvent",
                    "snooze": "Lcom/android/deskclock/AlarmAlert;->snooze"
                },
                "AlarmAlertFullScreen$1": {
                    "onReceive": "Lcom/android/deskclock/AlarmAlertFullScreen$1;->onReceive"
                },
                "AlarmAlertFullScreen$2": {
                    "onClick": "Lcom/android/deskclock/AlarmAlertFullScreen$2;->onClick"
                },
                "AlarmAlertFullScreen": {
                    "dispatchKeyEvent": "Lcom/android/deskclock/AlarmAlertFullScreen;->dispatchKeyEvent",
                    "snooze": "Lcom/android/deskclock/AlarmAlertFullScreen;->snooze"
                },
                "AlarmAlertWakeLock": {
                    "acquireCpuWakeLock": "Lcom/android/deskclock/AlarmAlertWakeLock;->acquireCpuWakeLock",
                    "releaseCpuLock": "Lcom/android/deskclock/AlarmAlertWakeLock;->releaseCpuLock"
                },
                "AlarmClock$1": {
                    "onClick": "Lcom/android/deskclock/AlarmClock$1;->onClick"
                },
                "AlarmClock$AlarmTimeAdapter$1": {
                    "onClick": "Lcom/android/deskclock/AlarmClock$AlarmTimeAdapter$1;->onClick"
                },
                "AlarmClock": {
                    "onContextItemSelected": "Lcom/android/deskclock/AlarmClock;->onContextItemSelected",
                    "updateAlarm": "Lcom/android/deskclock/AlarmClock;->updateAlarm"
                },
                "AlarmInitReceiver$1": {
                    "run": "Lcom/android/deskclock/AlarmInitReceiver$1;->run"
                },
                "AlarmInitReceiver": {
                    "onReceive": "Lcom/android/deskclock/AlarmInitReceiver;->onReceive"
                },
                "AlarmKlaxon$3": {
                    "onError": "Lcom/android/deskclock/AlarmKlaxon$3;->onError"
                },
                "AlarmKlaxon": {
                    "onStartCommand": "Lcom/android/deskclock/AlarmKlaxon;->onStartCommand",
                    "onCreate": "Lcom/android/deskclock/AlarmKlaxon;->onCreate",
                    "onDestroy": "Lcom/android/deskclock/AlarmKlaxon;->onDestroy",
                    "play": "Lcom/android/deskclock/AlarmKlaxon;->play",
                    "startAlarm": "Lcom/android/deskclock/AlarmKlaxon;->startAlarm",
                    "stop": "Lcom/android/deskclock/AlarmKlaxon;->stop"
                },
                "AlarmPreference$1": {
                    "doInBackground": "Lcom/android/deskclock/AlarmPreference$1;->doInBackground"
                },
                "AlarmPreference": {
                    "onSaveRingtone": "Lcom/android/deskclock/AlarmPreference;->onSaveRingtone"
                },
                "AlarmReceiver$1": {
                    "run": "Lcom/android/deskclock/AlarmReceiver$1;->run"
                },
                "AlarmReceiver": {
                    "handleIntent": "Lcom/android/deskclock/AlarmReceiver;->handleIntent",
                    "onReceive": "Lcom/android/deskclock/AlarmReceiver;->onReceive",
                    "updateNotification": "Lcom/android/deskclock/AlarmReceiver;->updateNotification"
                },
                "Alarms": {
                    "addAlarm": "Lcom/android/deskclock/Alarms;->addAlarm",
                    "setAlarm": "Lcom/android/deskclock/Alarms;->setAlarm",
                    "deleteAlarm": "Lcom/android/deskclock/Alarms;->deleteAlarm",
                    "disableAlert": "Lcom/android/deskclock/Alarms;->disableAlert",
                    "enableAlarm": "Lcom/android/deskclock/Alarms;->enableAlarm",
                    "enableAlert": "Lcom/android/deskclock/Alarms;->enableAlert",
                    "saveNextAlarm": "Lcom/android/deskclock/Alarms;->saveNextAlarm",
                    "saveSnoozeAlert": "Lcom/android/deskclock/Alarms;->saveSnoozeAlert",
                    "setNextAlert": "Lcom/android/deskclock/Alarms;->setNextAlert"
                },
                "HandleSetAlarm": {
                    "handleCursorResult": "Lcom/android/deskclock/HandleSetAlarm;->handleCursorResult",
                    "onCreate": "Lcom/android/deskclock/HandleSetAlarm;->onCreate"
                },
                "SetAlarm$1": {
                    "onClick": "Lcom/android/deskclock/SetAlarm$1;->onClick"
                },
                "SetAlarm$2": {
                    "onClick": "Lcom/android/deskclock/SetAlarm$2;->onClick"
                },
                "SetAlarm$3": {
                    "onClick": "Lcom/android/deskclock/SetAlarm$3;->onClick"
                },
                "SetAlarm$5": {
                    "run": "Lcom/android/deskclock/SetAlarm$5;->run"
                },
                "SetAlarm$6": {
                    "onClick": "Lcom/android/deskclock/SetAlarm$6;->onClick"
                },
                "SetAlarm": {
                    "saveAlarm": "Lcom/android/deskclock/SetAlarm;->saveAlarm",
                    "onBackPressed": "Lcom/android/deskclock/SetAlarm;->onBackPressed",
                    "onTimeSet": "Lcom/android/deskclock/SetAlarm;->onTimeSet",
                    "revert": "Lcom/android/deskclock/SetAlarm;->revert",
                    "saveAndExit": "Lcom/android/deskclock/SetAlarm;->saveAndExit"
                },
                "SettingsActivity": {
                    "onPreferenceTreeClick": "Lcom/android/deskclock/SettingsActivity;->onPreferenceTreeClick"
                },
                "widget": {
                    "multiwaveview": {
                        "TargetDrawable": {
                            "getHeight": "Lcom/android/deskclock/widget/multiwaveview/TargetDrawable;->getHeight"
                        }
                    }
                }
            },
            "development": {
                "AccountsTester$2": {
                    "onClick": "Lcom/android/development/AccountsTester$2;->onClick"
                },
                "AccountsTester$3": {
                    "onClick": "Lcom/android/development/AccountsTester$3;->onClick"
                },
                "AccountsTester$ButtonClickListener": {
                    "onClick": "Lcom/android/development/AccountsTester$ButtonClickListener;->onClick"
                },
                "AccountsTester$GetAndInvalidateAuthTokenCallback": {
                    "run": "Lcom/android/development/AccountsTester$GetAndInvalidateAuthTokenCallback;->run"
                },
                "AccountsTester": {
                    "onContextItemSelected": "Lcom/android/development/AccountsTester;->onContextItemSelected",
                    "onStart": "Lcom/android/development/AccountsTester;->onStart"
                },
                "Connectivity$1": {
                    "onReceive": "Lcom/android/development/Connectivity$1;->onReceive"
                },
                "Connectivity$3": {
                    "onClick": "Lcom/android/development/Connectivity$3;->onClick"
                },
                "Connectivity": {
                    "onCrash": "Lcom/android/development/Connectivity;->onCrash",
                    "onRoutedHttpRequest": "Lcom/android/development/Connectivity;->onRoutedHttpRequest",
                    "onRoutedRequest": "Lcom/android/development/Connectivity;->onRoutedRequest",
                    "onRoutedSocketRequest": "Lcom/android/development/Connectivity;->onRoutedSocketRequest",
                    "onStartDelayedCycle": "Lcom/android/development/Connectivity;->onStartDelayedCycle",
                    "onStartScreenCycle": "Lcom/android/development/Connectivity;->onStartScreenCycle",
                    "onStopDelayedCycle": "Lcom/android/development/Connectivity;->onStopDelayedCycle"
                },
                "PackageSummary$1": {
                    "onClick": "Lcom/android/development/PackageSummary$1;->onClick"
                },
                "SyncAdapterDriver": {
                    "onItemClick": "Lcom/android/development/SyncAdapterDriver;->onItemClick",
                    "startSync": "Lcom/android/development/SyncAdapterDriver;->startSync",
                    "startSyncSelected": "Lcom/android/development/SyncAdapterDriver;->startSyncSelected"
                }
            },
            "email": {
                "activity": {
                    "ActionBarController$2": {
                        "run": "Lcom/android/email/activity/ActionBarController$2;->run"
                    },
                    "ActionBarController$3": {
                        "onLoaderReset": "Lcom/android/email/activity/ActionBarController$3;->onLoaderReset",
                        "onLoadFinished": "Lcom/android/email/activity/ActionBarController$3;->onLoadFinished"
                    },
                    "ActionBarController$AccountDropdownPopup$1": {
                        "onItemClick": "Lcom/android/email/activity/ActionBarController$AccountDropdownPopup$1;->onItemClick"
                    },
                    "ActionBarController$Callback": {
                        "onAccountSelected": "Lcom/android/email/activity/ActionBarController$Callback;->onAccountSelected"
                    },
                    "ActionBarController": {
                        "onAccountSpinnerItemClicked": "Lcom/android/email/activity/ActionBarController;->onAccountSpinnerItemClicked",
                        "refreshInernal": "Lcom/android/email/activity/ActionBarController;->refreshInernal",
                        "updateTitle": "Lcom/android/email/activity/ActionBarController;->updateTitle"
                    },
                    "ContactStatusLoader": {
                        "getContactInfo": "Lcom/android/email/activity/ContactStatusLoader;->getContactInfo",
                        "loadInBackground": "Lcom/android/email/activity/ContactStatusLoader;->loadInBackground"
                    },
                    "EmailActivity": {
                        "createOpenMailboxIntent": "Lcom/android/email/activity/EmailActivity;->createOpenMailboxIntent",
                        "onOptionsItemSelected": "Lcom/android/email/activity/EmailActivity;->onOptionsItemSelected",
                        "onBackPressed": "Lcom/android/email/activity/EmailActivity;->onBackPressed",
                        "onCreate": "Lcom/android/email/activity/EmailActivity;->onCreate",
                        "onInstallFragment": "Lcom/android/email/activity/EmailActivity;->onInstallFragment",
                        "onResume": "Lcom/android/email/activity/EmailActivity;->onResume",
                        "onStart": "Lcom/android/email/activity/EmailActivity;->onStart"
                    },
                    "FragmentInstallable": {
                        "onInstallFragment": "Lcom/android/email/activity/FragmentInstallable;->onInstallFragment"
                    },
                    "MailboxFinder$ControllerResults": {
                        "serviceCheckMailCallback": "Lcom/android/email/activity/MailboxFinder$ControllerResults;->serviceCheckMailCallback",
                        "updateMailboxCallback": "Lcom/android/email/activity/MailboxFinder$ControllerResults;->updateMailboxCallback"
                    },
                    "MailboxFinder$FindMailboxTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MailboxFinder$FindMailboxTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MailboxFinder$FindMailboxTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MailboxFinder$FindMailboxTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MailboxFinder$FindMailboxTask;->onCancelled"
                    },
                    "MailboxFinder": {
                        "<init>": "Lcom/android/email/activity/MailboxFinder;-><init>"
                    },
                    "MailboxListFragment$FindParentMailboxTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MailboxListFragment$FindParentMailboxTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MailboxListFragment$FindParentMailboxTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MailboxListFragment$FindParentMailboxTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MailboxListFragment$FindParentMailboxTask;->onCancelled"
                    },
                    "MailboxListFragment": {
                        "onActivityCreated": "Lcom/android/email/activity/MailboxListFragment;->onActivityCreated"
                    },
                    "MessageCompose$6": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageCompose$6;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageCompose$6;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageCompose$6;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageCompose$6;->onCancelled"
                    },
                    "MessageCompose$LoadMessageTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageCompose$LoadMessageTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageCompose$LoadMessageTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageCompose$LoadMessageTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageCompose$LoadMessageTask;->onCancelled"
                    },
                    "MessageCompose$QuickResponseChecker": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageCompose$QuickResponseChecker;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageCompose$QuickResponseChecker;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageCompose$QuickResponseChecker;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageCompose$QuickResponseChecker;->onCancelled"
                    },
                    "MessageCompose$SendOrSaveMessageTask": {
                        "doInBackground": "Lcom/android/email/activity/MessageCompose$SendOrSaveMessageTask;->doInBackground",
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageCompose$SendOrSaveMessageTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageCompose$SendOrSaveMessageTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageCompose$SendOrSaveMessageTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageCompose$SendOrSaveMessageTask;->onCancelled"
                    },
                    "MessageFileView$LoadFilenameTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageFileView$LoadFilenameTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageFileView$LoadFilenameTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageFileView$LoadFilenameTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageFileView$LoadFilenameTask;->onCancelled"
                    },
                    "MessageFileViewFragment": {
                        "performAttachmentSave": "Lcom/android/email/activity/MessageFileViewFragment;->performAttachmentSave",
                        "addAttachment": "Lcom/android/email/activity/MessageFileViewFragment;->addAttachment",
                        "onActivityCreated": "Lcom/android/email/activity/MessageFileViewFragment;->onActivityCreated",
                        "onClick": "Lcom/android/email/activity/MessageFileViewFragment;->onClick",
                        "onOpenAttachment": "Lcom/android/email/activity/MessageFileViewFragment;->onOpenAttachment",
                        "onPostLoadBody": "Lcom/android/email/activity/MessageFileViewFragment;->onPostLoadBody",
                        "onResume": "Lcom/android/email/activity/MessageFileViewFragment;->onResume",
                        "onSaveAttachment": "Lcom/android/email/activity/MessageFileViewFragment;->onSaveAttachment",
                        "reloadUiFromMessage": "Lcom/android/email/activity/MessageFileViewFragment;->reloadUiFromMessage",
                        "updateAttachmentTab": "Lcom/android/email/activity/MessageFileViewFragment;->updateAttachmentTab"
                    },
                    "MessageList$1": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageList$1;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageList$1;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageList$1;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageList$1;->onCancelled"
                    },
                    "MessageListFragment$4": {
                        "onLoadFinished": "Lcom/android/email/activity/MessageListFragment$4;->onLoadFinished"
                    },
                    "MessageListFragment$MessageOpenTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageListFragment$MessageOpenTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageListFragment$MessageOpenTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageListFragment$MessageOpenTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageListFragment$MessageOpenTask;->onCancelled"
                    },
                    "MessageListFragment": {
                        "onOptionsItemSelected": "Lcom/android/email/activity/MessageListFragment;->onOptionsItemSelected",
                        "autoRefreshStaleMailbox": "Lcom/android/email/activity/MessageListFragment;->autoRefreshStaleMailbox",
                        "doFooterClick": "Lcom/android/email/activity/MessageListFragment;->doFooterClick",
                        "onActivityCreated": "Lcom/android/email/activity/MessageListFragment;->onActivityCreated",
                        "onListItemClick": "Lcom/android/email/activity/MessageListFragment;->onListItemClick",
                        "onLoadMoreMessages": "Lcom/android/email/activity/MessageListFragment;->onLoadMoreMessages",
                        "onRefresh": "Lcom/android/email/activity/MessageListFragment;->onRefresh",
                        "onSendPendingMessages": "Lcom/android/email/activity/MessageListFragment;->onSendPendingMessages"
                    },
                    "MessageOrderManager$Callback": {
                        "onMessageNotFound": "Lcom/android/email/activity/MessageOrderManager$Callback;->onMessageNotFound"
                    },
                    "MessageOrderManager$LoadMessageListTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageOrderManager$LoadMessageListTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageOrderManager$LoadMessageListTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageOrderManager$LoadMessageListTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageOrderManager$LoadMessageListTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/MessageOrderManager$LoadMessageListTask;->onSuccess"
                    },
                    "MessageOrderManager$PostingCallback$2": {
                        "run": "Lcom/android/email/activity/MessageOrderManager$PostingCallback$2;->run"
                    },
                    "MessageOrderManager": {
                        "adjustCursorPosition": "Lcom/android/email/activity/MessageOrderManager;->adjustCursorPosition",
                        "moveTo": "Lcom/android/email/activity/MessageOrderManager;->moveTo",
                        "onCursorOpenDone": "Lcom/android/email/activity/MessageOrderManager;->onCursorOpenDone"
                    },
                    "MessagesAdapter$MessagesCursorLoader": {
                        "loadInBackground": "Lcom/android/email/activity/MessagesAdapter$MessagesCursorLoader;->loadInBackground"
                    },
                    "MessagesAdapter$SearchCursorLoader": {
                        "loadInBackground": "Lcom/android/email/activity/MessagesAdapter$SearchCursorLoader;->loadInBackground"
                    },
                    "MessageViewFragment$Callback": {
                        "onBeforeMessageGone": "Lcom/android/email/activity/MessageViewFragment$Callback;->onBeforeMessageGone",
                        "onMessageSetUnread": "Lcom/android/email/activity/MessageViewFragment$Callback;->onMessageSetUnread",
                        "onRespondedToInvite": "Lcom/android/email/activity/MessageViewFragment$Callback;->onRespondedToInvite"
                    },
                    "MessageViewFragmentBase$1": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$1;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$1;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$1;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$1;->onCancelled"
                    },
                    "MessageViewFragmentBase$Callback": {
                        "onMessageNotExists": "Lcom/android/email/activity/MessageViewFragmentBase$Callback;->onMessageNotExists"
                    },
                    "MessageViewFragmentBase$ControllerResults": {
                        "serviceCheckMailCallback": "Lcom/android/email/activity/MessageViewFragmentBase$ControllerResults;->serviceCheckMailCallback",
                        "updateMailboxCallback": "Lcom/android/email/activity/MessageViewFragmentBase$ControllerResults;->updateMailboxCallback"
                    },
                    "MessageViewFragmentBase$LoadAttachmentsTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadAttachmentsTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadAttachmentsTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadAttachmentsTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$LoadAttachmentsTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/MessageViewFragmentBase$LoadAttachmentsTask;->onSuccess"
                    },
                    "MessageViewFragmentBase$LoadBodyTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadBodyTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadBodyTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadBodyTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$LoadBodyTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/MessageViewFragmentBase$LoadBodyTask;->onSuccess"
                    },
                    "MessageViewFragmentBase$LoadMessageTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadMessageTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadMessageTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$LoadMessageTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$LoadMessageTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/MessageViewFragmentBase$LoadMessageTask;->onSuccess"
                    },
                    "MessageViewFragmentBase$MessageViewAttachmentInfo": {
                        "<init>": "Lcom/android/email/activity/MessageViewFragmentBase$MessageViewAttachmentInfo;-><init>"
                    },
                    "MessageViewFragmentBase$ReloadMessageTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$ReloadMessageTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$ReloadMessageTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$ReloadMessageTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$ReloadMessageTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/MessageViewFragmentBase$ReloadMessageTask;->onSuccess"
                    },
                    "MessageViewFragmentBase$UpdatePreviewIconTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/MessageViewFragmentBase$UpdatePreviewIconTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/MessageViewFragmentBase$UpdatePreviewIconTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/MessageViewFragmentBase$UpdatePreviewIconTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/MessageViewFragmentBase$UpdatePreviewIconTask;->onCancelled"
                    },
                    "MessageViewFragmentBase": {
                        "onOptionsItemSelected": "Lcom/android/email/activity/MessageViewFragmentBase;->onOptionsItemSelected",
                        "performAttachmentSave": "Lcom/android/email/activity/MessageViewFragmentBase;->performAttachmentSave",
                        "addAttachment": "Lcom/android/email/activity/MessageViewFragmentBase;->addAttachment",
                        "onActivityCreated": "Lcom/android/email/activity/MessageViewFragmentBase;->onActivityCreated",
                        "onClick": "Lcom/android/email/activity/MessageViewFragmentBase;->onClick",
                        "onOpenAttachment": "Lcom/android/email/activity/MessageViewFragmentBase;->onOpenAttachment",
                        "onPostLoadBody": "Lcom/android/email/activity/MessageViewFragmentBase;->onPostLoadBody",
                        "onResume": "Lcom/android/email/activity/MessageViewFragmentBase;->onResume",
                        "onSaveAttachment": "Lcom/android/email/activity/MessageViewFragmentBase;->onSaveAttachment",
                        "reloadUiFromMessage": "Lcom/android/email/activity/MessageViewFragmentBase;->reloadUiFromMessage",
                        "updateAttachmentTab": "Lcom/android/email/activity/MessageViewFragmentBase;->updateAttachmentTab"
                    },
                    "MessageViewFragment": {
                        "onOptionsItemSelected": "Lcom/android/email/activity/MessageViewFragment;->onOptionsItemSelected",
                        "performAttachmentSave": "Lcom/android/email/activity/MessageViewFragment;->performAttachmentSave",
                        "addAttachment": "Lcom/android/email/activity/MessageViewFragment;->addAttachment",
                        "onActivityCreated": "Lcom/android/email/activity/MessageViewFragment;->onActivityCreated",
                        "onClick": "Lcom/android/email/activity/MessageViewFragment;->onClick",
                        "onDelete": "Lcom/android/email/activity/MessageViewFragment;->onDelete",
                        "onMarkAsUnread": "Lcom/android/email/activity/MessageViewFragment;->onMarkAsUnread",
                        "onMarkMessageAsRead": "Lcom/android/email/activity/MessageViewFragment;->onMarkMessageAsRead",
                        "onMoveToMailboxSelected": "Lcom/android/email/activity/MessageViewFragment;->onMoveToMailboxSelected",
                        "onOpenAttachment": "Lcom/android/email/activity/MessageViewFragment;->onOpenAttachment",
                        "onPostLoadBody": "Lcom/android/email/activity/MessageViewFragment;->onPostLoadBody",
                        "onRespondToInvite": "Lcom/android/email/activity/MessageViewFragment;->onRespondToInvite",
                        "onResume": "Lcom/android/email/activity/MessageViewFragment;->onResume",
                        "onSaveAttachment": "Lcom/android/email/activity/MessageViewFragment;->onSaveAttachment",
                        "reloadUiFromMessage": "Lcom/android/email/activity/MessageViewFragment;->reloadUiFromMessage",
                        "updateAttachmentTab": "Lcom/android/email/activity/MessageViewFragment;->updateAttachmentTab"
                    },
                    "MoveMessageToDialog$Callback": {
                        "onMoveToMailboxSelected": "Lcom/android/email/activity/MoveMessageToDialog$Callback;->onMoveToMailboxSelected"
                    },
                    "MoveMessageToDialog": {
                        "onClick": "Lcom/android/email/activity/MoveMessageToDialog;->onClick"
                    },
                    "NfcHandler": {
                        "register": "Lcom/android/email/activity/NfcHandler;->register"
                    },
                    "setup": {
                        "AccountCheckSettingsFragment$AccountCheckTask": {
                            "doInBackground": "Lcom/android/email/activity/setup/AccountCheckSettingsFragment$AccountCheckTask;->doInBackground"
                        },
                        "AccountSecurity$1": {
                            "run": "Lcom/android/email/activity/setup/AccountSecurity$1;->run"
                        },
                        "AccountServerBaseFragment$4": {
                            "doInBackground": "Lcom/android/email/activity/setup/AccountServerBaseFragment$4;->doInBackground"
                        },
                        "AccountServerBaseFragment": {
                            "saveSettingsAfterEdit": "Lcom/android/email/activity/setup/AccountServerBaseFragment;->saveSettingsAfterEdit"
                        },
                        "AccountSettingsEditQuickResponsesFragment$QuickResponseFinder": {
                            "callDoInBackgroundForTest": "Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment$QuickResponseFinder;->callDoInBackgroundForTest",
                            "callOnCancelledForTest": "Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment$QuickResponseFinder;->callOnCancelledForTest",
                            "callOnPostExecuteForTest": "Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment$QuickResponseFinder;->callOnPostExecuteForTest",
                            "onCancelled": "Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment$QuickResponseFinder;->onCancelled"
                        },
                        "AccountSettingsFragment$LoadAccountTask": {
                            "onPostExecute": "Lcom/android/email/activity/setup/AccountSettingsFragment$LoadAccountTask;->onPostExecute"
                        },
                        "AccountSettingsFragment": {
                            "access$1402": "Lcom/android/email/activity/setup/AccountSettingsFragment;->access$1402",
                            "loadSettings": "Lcom/android/email/activity/setup/AccountSettingsFragment;->loadSettings",
                            "onPause": "Lcom/android/email/activity/setup/AccountSettingsFragment;->onPause",
                            "onStart": "Lcom/android/email/activity/setup/AccountSettingsFragment;->onStart",
                            "saveSettings": "Lcom/android/email/activity/setup/AccountSettingsFragment;->saveSettings"
                        },
                        "AccountSetupAccountType": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupAccountType;->onCreate"
                        },
                        "AccountSetupActivity": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupActivity;->onCreate"
                        },
                        "AccountSetupBasics": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupBasics;->onCreate"
                        },
                        "AccountSetupExchangeFragment": {
                            "onCreateView": "Lcom/android/email/activity/setup/AccountSetupExchangeFragment;->onCreateView",
                            "saveSettingsAfterEdit": "Lcom/android/email/activity/setup/AccountSetupExchangeFragment;->saveSettingsAfterEdit"
                        },
                        "AccountSetupExchange": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupExchange;->onCreate"
                        },
                        "AccountSetupIncoming": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupIncoming;->onCreate"
                        },
                        "AccountSetupNames$2": {
                            "callDoInBackgroundForTest": "Lcom/android/email/activity/setup/AccountSetupNames$2;->callDoInBackgroundForTest",
                            "doInBackground": "Lcom/android/email/activity/setup/AccountSetupNames$2;->doInBackground",
                            "callOnCancelledForTest": "Lcom/android/email/activity/setup/AccountSetupNames$2;->callOnCancelledForTest",
                            "callOnPostExecuteForTest": "Lcom/android/email/activity/setup/AccountSetupNames$2;->callOnPostExecuteForTest",
                            "onCancelled": "Lcom/android/email/activity/setup/AccountSetupNames$2;->onCancelled"
                        },
                        "AccountSetupNames": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupNames;->onCreate"
                        },
                        "AccountSetupOptions$1": {
                            "run": "Lcom/android/email/activity/setup/AccountSetupOptions$1;->run"
                        },
                        "AccountSetupOptions": {
                            "onCreate": "Lcom/android/email/activity/setup/AccountSetupOptions;->onCreate"
                        },
                        "DebugFragment": {
                            "onCreateView": "Lcom/android/email/activity/setup/DebugFragment;->onCreateView",
                            "clearWebViewCache": "Lcom/android/email/activity/setup/DebugFragment;->clearWebViewCache",
                            "onCheckedChanged": "Lcom/android/email/activity/setup/DebugFragment;->onCheckedChanged",
                            "onClick": "Lcom/android/email/activity/setup/DebugFragment;->onClick"
                        },
                        "MailboxSettings$2": {
                            "callDoInBackgroundForTest": "Lcom/android/email/activity/setup/MailboxSettings$2;->callDoInBackgroundForTest",
                            "callOnCancelledForTest": "Lcom/android/email/activity/setup/MailboxSettings$2;->callOnCancelledForTest",
                            "callOnPostExecuteForTest": "Lcom/android/email/activity/setup/MailboxSettings$2;->callOnPostExecuteForTest",
                            "onCancelled": "Lcom/android/email/activity/setup/MailboxSettings$2;->onCancelled",
                            "onSuccess": "Lcom/android/email/activity/setup/MailboxSettings$2;->onSuccess"
                        },
                        "MailboxSettings$LoadMailboxTask": {
                            "callDoInBackgroundForTest": "Lcom/android/email/activity/setup/MailboxSettings$LoadMailboxTask;->callDoInBackgroundForTest",
                            "callOnCancelledForTest": "Lcom/android/email/activity/setup/MailboxSettings$LoadMailboxTask;->callOnCancelledForTest",
                            "callOnPostExecuteForTest": "Lcom/android/email/activity/setup/MailboxSettings$LoadMailboxTask;->callOnPostExecuteForTest",
                            "onCancelled": "Lcom/android/email/activity/setup/MailboxSettings$LoadMailboxTask;->onCancelled"
                        }
                    },
                    "UIControllerBase$MessageOrderManagerCallback": {
                        "onMessageNotFound": "Lcom/android/email/activity/UIControllerBase$MessageOrderManagerCallback;->onMessageNotFound"
                    },
                    "UIControllerBase": {
                        "onBackPressed": "Lcom/android/email/activity/UIControllerBase;->onBackPressed",
                        "onOptionsItemSelected": "Lcom/android/email/activity/UIControllerBase;->onOptionsItemSelected",
                        "doAutoAdvance": "Lcom/android/email/activity/UIControllerBase;->doAutoAdvance",
                        "installMessageViewFragment": "Lcom/android/email/activity/UIControllerBase;->installMessageViewFragment",
                        "onActivityCreated": "Lcom/android/email/activity/UIControllerBase;->onActivityCreated",
                        "onActivityResume": "Lcom/android/email/activity/UIControllerBase;->onActivityResume",
                        "onActivityStart": "Lcom/android/email/activity/UIControllerBase;->onActivityStart",
                        "onBeforeMessageGone": "Lcom/android/email/activity/UIControllerBase;->onBeforeMessageGone",
                        "onInstallFragment": "Lcom/android/email/activity/UIControllerBase;->onInstallFragment",
                        "onMessageNotExists": "Lcom/android/email/activity/UIControllerBase;->onMessageNotExists",
                        "onMessageSetUnread": "Lcom/android/email/activity/UIControllerBase;->onMessageSetUnread",
                        "onRefresh": "Lcom/android/email/activity/UIControllerBase;->onRefresh",
                        "onRespondedToInvite": "Lcom/android/email/activity/UIControllerBase;->onRespondedToInvite",
                        "showAccountSpecificWarning": "Lcom/android/email/activity/UIControllerBase;->showAccountSpecificWarning",
                        "switchAccount": "Lcom/android/email/activity/UIControllerBase;->switchAccount",
                        "updateMessageOrderManager": "Lcom/android/email/activity/UIControllerBase;->updateMessageOrderManager"
                    },
                    "UIControllerOnePane$ActionBarControllerCallback": {
                        "onAccountSelected": "Lcom/android/email/activity/UIControllerOnePane$ActionBarControllerCallback;->onAccountSelected"
                    },
                    "UIControllerOnePane": {
                        "onBackPressed": "Lcom/android/email/activity/UIControllerOnePane;->onBackPressed",
                        "onOptionsItemSelected": "Lcom/android/email/activity/UIControllerOnePane;->onOptionsItemSelected",
                        "doAutoAdvance": "Lcom/android/email/activity/UIControllerOnePane;->doAutoAdvance",
                        "installMessageViewFragment": "Lcom/android/email/activity/UIControllerOnePane;->installMessageViewFragment",
                        "onAccountSelected": "Lcom/android/email/activity/UIControllerOnePane;->onAccountSelected",
                        "onActivityCreated": "Lcom/android/email/activity/UIControllerOnePane;->onActivityCreated",
                        "onActivityResume": "Lcom/android/email/activity/UIControllerOnePane;->onActivityResume",
                        "onActivityStart": "Lcom/android/email/activity/UIControllerOnePane;->onActivityStart",
                        "onBeforeMessageGone": "Lcom/android/email/activity/UIControllerOnePane;->onBeforeMessageGone",
                        "onInstallFragment": "Lcom/android/email/activity/UIControllerOnePane;->onInstallFragment",
                        "onMessageNotExists": "Lcom/android/email/activity/UIControllerOnePane;->onMessageNotExists",
                        "onMessageSetUnread": "Lcom/android/email/activity/UIControllerOnePane;->onMessageSetUnread",
                        "onRefresh": "Lcom/android/email/activity/UIControllerOnePane;->onRefresh",
                        "onRespondedToInvite": "Lcom/android/email/activity/UIControllerOnePane;->onRespondedToInvite",
                        "showAccountSpecificWarning": "Lcom/android/email/activity/UIControllerOnePane;->showAccountSpecificWarning",
                        "switchAccount": "Lcom/android/email/activity/UIControllerOnePane;->switchAccount",
                        "updateMessageOrderManager": "Lcom/android/email/activity/UIControllerOnePane;->updateMessageOrderManager"
                    },
                    "UIControllerSearchTwoPane": {
                        "onOptionsItemSelected": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onOptionsItemSelected",
                        "doAutoAdvance": "Lcom/android/email/activity/UIControllerSearchTwoPane;->doAutoAdvance",
                        "installMessageViewFragment": "Lcom/android/email/activity/UIControllerSearchTwoPane;->installMessageViewFragment",
                        "onAccountSelected": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onAccountSelected",
                        "onActivityCreated": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onActivityCreated",
                        "onActivityResume": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onActivityResume",
                        "onActivityStart": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onActivityStart",
                        "onBeforeMessageGone": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onBeforeMessageGone",
                        "onInstallFragment": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onInstallFragment",
                        "onMessageNotExists": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onMessageNotExists",
                        "onMessageSetUnread": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onMessageSetUnread",
                        "onRespondedToInvite": "Lcom/android/email/activity/UIControllerSearchTwoPane;->onRespondedToInvite",
                        "showAccountSpecificWarning": "Lcom/android/email/activity/UIControllerSearchTwoPane;->showAccountSpecificWarning",
                        "switchAccount": "Lcom/android/email/activity/UIControllerSearchTwoPane;->switchAccount",
                        "updateMessageOrderManager": "Lcom/android/email/activity/UIControllerSearchTwoPane;->updateMessageOrderManager"
                    },
                    "UIControllerTwoPane$ActionBarControllerCallback": {
                        "onAccountSelected": "Lcom/android/email/activity/UIControllerTwoPane$ActionBarControllerCallback;->onAccountSelected"
                    },
                    "UIControllerTwoPane$RefreshTask": {
                        "callDoInBackgroundForTest": "Lcom/android/email/activity/UIControllerTwoPane$RefreshTask;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/email/activity/UIControllerTwoPane$RefreshTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/email/activity/UIControllerTwoPane$RefreshTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/email/activity/UIControllerTwoPane$RefreshTask;->onCancelled",
                        "onSuccess": "Lcom/android/email/activity/UIControllerTwoPane$RefreshTask;->onSuccess"
                    },
                    "UIControllerTwoPane": {
                        "onOptionsItemSelected": "Lcom/android/email/activity/UIControllerTwoPane;->onOptionsItemSelected",
                        "doAutoAdvance": "Lcom/android/email/activity/UIControllerTwoPane;->doAutoAdvance",
                        "installMessageViewFragment": "Lcom/android/email/activity/UIControllerTwoPane;->installMessageViewFragment",
                        "onAccountSelected": "Lcom/android/email/activity/UIControllerTwoPane;->onAccountSelected",
                        "onActivityCreated": "Lcom/android/email/activity/UIControllerTwoPane;->onActivityCreated",
                        "onActivityResume": "Lcom/android/email/activity/UIControllerTwoPane;->onActivityResume",
                        "onActivityStart": "Lcom/android/email/activity/UIControllerTwoPane;->onActivityStart",
                        "onBeforeMessageGone": "Lcom/android/email/activity/UIControllerTwoPane;->onBeforeMessageGone",
                        "onInstallFragment": "Lcom/android/email/activity/UIControllerTwoPane;->onInstallFragment",
                        "onMessageNotExists": "Lcom/android/email/activity/UIControllerTwoPane;->onMessageNotExists",
                        "onMessageSetUnread": "Lcom/android/email/activity/UIControllerTwoPane;->onMessageSetUnread",
                        "onRespondedToInvite": "Lcom/android/email/activity/UIControllerTwoPane;->onRespondedToInvite",
                        "showAccountSpecificWarning": "Lcom/android/email/activity/UIControllerTwoPane;->showAccountSpecificWarning",
                        "switchAccount": "Lcom/android/email/activity/UIControllerTwoPane;->switchAccount",
                        "updateMessageOrderManager": "Lcom/android/email/activity/UIControllerTwoPane;->updateMessageOrderManager"
                    },
                    "UiUtilities": {
                        "installFragment": "Lcom/android/email/activity/UiUtilities;->installFragment"
                    },
                    "Welcome$1": {
                        "run": "Lcom/android/email/activity/Welcome$1;->run"
                    }
                },
                "AttachmentInfo": {
                    "<init>": "Lcom/android/email/AttachmentInfo;-><init>"
                },
                "Controller$14": {
                    "run": "Lcom/android/email/Controller$14;->run"
                },
                "Controller$15$1": {
                    "call": "Lcom/android/email/Controller$15$1;->call"
                },
                "Controller$15": {
                    "onTransact": "Lcom/android/email/Controller$15;->onTransact",
                    "broadcastCallback": "Lcom/android/email/Controller$15;->broadcastCallback",
                    "loadAttachmentStatus": "Lcom/android/email/Controller$15;->loadAttachmentStatus"
                },
                "Controller$1": {
                    "run": "Lcom/android/email/Controller$1;->run"
                },
                "Controller$2": {
                    "run": "Lcom/android/email/Controller$2;->run"
                },
                "Controller$3": {
                    "run": "Lcom/android/email/Controller$3;->run"
                },
                "Controller$7": {
                    "run": "Lcom/android/email/Controller$7;->run"
                },
                "Controller$ControllerService$1": {
                    "onTransact": "Lcom/android/email/Controller$ControllerService$1;->onTransact",
                    "loadAttachment": "Lcom/android/email/Controller$ControllerService$1;->loadAttachment"
                },
                "Controller$LegacyListener": {
                    "checkMailFinished": "Lcom/android/email/Controller$LegacyListener;->checkMailFinished",
                    "checkMailStarted": "Lcom/android/email/Controller$LegacyListener;->checkMailStarted",
                    "loadAttachmentFailed": "Lcom/android/email/Controller$LegacyListener;->loadAttachmentFailed",
                    "loadAttachmentFinished": "Lcom/android/email/Controller$LegacyListener;->loadAttachmentFinished",
                    "loadAttachmentStarted": "Lcom/android/email/Controller$LegacyListener;->loadAttachmentStarted",
                    "synchronizeMailboxFailed": "Lcom/android/email/Controller$LegacyListener;->synchronizeMailboxFailed",
                    "synchronizeMailboxFinished": "Lcom/android/email/Controller$LegacyListener;->synchronizeMailboxFinished",
                    "synchronizeMailboxStarted": "Lcom/android/email/Controller$LegacyListener;->synchronizeMailboxStarted"
                },
                "Controller$Result": {
                    "serviceCheckMailCallback": "Lcom/android/email/Controller$Result;->serviceCheckMailCallback",
                    "updateMailboxCallback": "Lcom/android/email/Controller$Result;->updateMailboxCallback"
                },
                "Controller$ServiceCallback": {
                    "onTransact": "Lcom/android/email/Controller$ServiceCallback;->onTransact",
                    "syncMailboxStatus": "Lcom/android/email/Controller$ServiceCallback;->syncMailboxStatus"
                },
                "Controller$ServiceCallbackWrapper": {
                    "call": "Lcom/android/email/Controller$ServiceCallbackWrapper;->call"
                },
                "Controller": {
                    "getExchangeEmailService": "Lcom/android/email/Controller;->getExchangeEmailService",
                    "getServiceForAccount": "Lcom/android/email/Controller;->getServiceForAccount",
                    "getServiceForMessage": "Lcom/android/email/Controller;->getServiceForMessage",
                    "searchMessages": "Lcom/android/email/Controller;->searchMessages",
                    "deleteAccountSync": "Lcom/android/email/Controller;->deleteAccountSync",
                    "deleteSyncedDataSync": "Lcom/android/email/Controller;->deleteSyncedDataSync",
                    "loadMessageForView": "Lcom/android/email/Controller;->loadMessageForView",
                    "searchMore": "Lcom/android/email/Controller;->searchMore",
                    "sendMeetingResponse": "Lcom/android/email/Controller;->sendMeetingResponse",
                    "sendMessage": "Lcom/android/email/Controller;->sendMessage",
                    "sendPendingMessages": "Lcom/android/email/Controller;->sendPendingMessages",
                    "serviceCheckMail": "Lcom/android/email/Controller;->serviceCheckMail",
                    "serviceLogging": "Lcom/android/email/Controller;->serviceLogging",
                    "updateMailbox": "Lcom/android/email/Controller;->updateMailbox"
                },
                "ControllerResultUiThreadWrapper$4": {
                    "run": "Lcom/android/email/ControllerResultUiThreadWrapper$4;->run"
                },
                "ControllerResultUiThreadWrapper$5": {
                    "run": "Lcom/android/email/ControllerResultUiThreadWrapper$5;->run"
                },
                "EmailAddressAdapter": {
                    "getView": "Lcom/android/email/EmailAddressAdapter;->getView"
                },
                "EmailConnectivityManager": {
                    "hasConnectivity": "Lcom/android/email/EmailConnectivityManager;->hasConnectivity",
                    "isAutoSyncAllowed": "Lcom/android/email/EmailConnectivityManager;->isAutoSyncAllowed",
                    "getActiveNetworkType": "Lcom/android/email/EmailConnectivityManager;->getActiveNetworkType",
                    "waitForConnectivity": "Lcom/android/email/EmailConnectivityManager;->waitForConnectivity"
                },
                "Email": {
                    "onCreate": "Lcom/android/email/Email;->onCreate",
                    "updateLoggingFlags": "Lcom/android/email/Email;->updateLoggingFlags"
                },
                "GroupMessagingListener": {
                    "checkMailFinished": "Lcom/android/email/GroupMessagingListener;->checkMailFinished",
                    "checkMailStarted": "Lcom/android/email/GroupMessagingListener;->checkMailStarted",
                    "loadAttachmentFailed": "Lcom/android/email/GroupMessagingListener;->loadAttachmentFailed",
                    "loadAttachmentFinished": "Lcom/android/email/GroupMessagingListener;->loadAttachmentFinished",
                    "loadAttachmentStarted": "Lcom/android/email/GroupMessagingListener;->loadAttachmentStarted",
                    "synchronizeMailboxFailed": "Lcom/android/email/GroupMessagingListener;->synchronizeMailboxFailed",
                    "synchronizeMailboxFinished": "Lcom/android/email/GroupMessagingListener;->synchronizeMailboxFinished",
                    "synchronizeMailboxStarted": "Lcom/android/email/GroupMessagingListener;->synchronizeMailboxStarted"
                },
                "mail": {
                    "Store": {
                        "autoDiscover": "Lcom/android/email/mail/Store;->autoDiscover",
                        "checkSettings": "Lcom/android/email/mail/Store;->checkSettings"
                    },
                    "store": {
                        "ExchangeStore": {
                            "autoDiscover": "Lcom/android/email/mail/store/ExchangeStore;->autoDiscover",
                            "checkSettings": "Lcom/android/email/mail/store/ExchangeStore;->checkSettings",
                            "getService": "Lcom/android/email/mail/store/ExchangeStore;->getService"
                        },
                        "ImapStore": {
                            "autoDiscover": "Lcom/android/email/mail/store/ImapStore;->autoDiscover"
                        },
                        "Pop3Store": {
                            "autoDiscover": "Lcom/android/email/mail/store/Pop3Store;->autoDiscover"
                        },
                        "ServiceStore": {
                            "autoDiscover": "Lcom/android/email/mail/store/ServiceStore;->autoDiscover",
                            "checkSettings": "Lcom/android/email/mail/store/ServiceStore;->checkSettings",
                            "getService": "Lcom/android/email/mail/store/ServiceStore;->getService"
                        }
                    }
                },
                "MessagingController$11": {
                    "run": "Lcom/android/email/MessagingController$11;->run"
                },
                "MessagingController$12": {
                    "run": "Lcom/android/email/MessagingController$12;->run"
                },
                "MessagingController$13": {
                    "run": "Lcom/android/email/MessagingController$13;->run"
                },
                "MessagingController$2": {
                    "run": "Lcom/android/email/MessagingController$2;->run"
                },
                "MessagingController": {
                    "searchMailboxImpl": "Lcom/android/email/MessagingController;->searchMailboxImpl",
                    "searchMailbox": "Lcom/android/email/MessagingController;->searchMailbox",
                    "checkMail": "Lcom/android/email/MessagingController;->checkMail",
                    "loadAttachment": "Lcom/android/email/MessagingController;->loadAttachment",
                    "sendPendingMessagesSynchronous": "Lcom/android/email/MessagingController;->sendPendingMessagesSynchronous",
                    "synchronizeMailbox": "Lcom/android/email/MessagingController;->synchronizeMailbox",
                    "synchronizeMailboxSynchronous": "Lcom/android/email/MessagingController;->synchronizeMailboxSynchronous"
                },
                "MessagingListener": {
                    "checkMailFinished": "Lcom/android/email/MessagingListener;->checkMailFinished",
                    "checkMailStarted": "Lcom/android/email/MessagingListener;->checkMailStarted",
                    "loadAttachmentFailed": "Lcom/android/email/MessagingListener;->loadAttachmentFailed",
                    "loadAttachmentFinished": "Lcom/android/email/MessagingListener;->loadAttachmentFinished",
                    "loadAttachmentStarted": "Lcom/android/email/MessagingListener;->loadAttachmentStarted",
                    "synchronizeMailboxFailed": "Lcom/android/email/MessagingListener;->synchronizeMailboxFailed",
                    "synchronizeMailboxFinished": "Lcom/android/email/MessagingListener;->synchronizeMailboxFinished",
                    "synchronizeMailboxStarted": "Lcom/android/email/MessagingListener;->synchronizeMailboxStarted"
                },
                "NotificationController$MessageContentObserver": {
                    "onChange": "Lcom/android/email/NotificationController$MessageContentObserver;->onChange"
                },
                "NotificationController": {
                    "createNewMessageNotification": "Lcom/android/email/NotificationController;->createNewMessageNotification",
                    "getSenderPhoto": "Lcom/android/email/NotificationController;->getSenderPhoto",
                    "showAccountNotification": "Lcom/android/email/NotificationController;->showAccountNotification",
                    "showDownloadForwardFailedNotification": "Lcom/android/email/NotificationController;->showDownloadForwardFailedNotification",
                    "showLoginFailedNotification": "Lcom/android/email/NotificationController;->showLoginFailedNotification",
                    "showPasswordExpiredNotification": "Lcom/android/email/NotificationController;->showPasswordExpiredNotification",
                    "showPasswordExpiringNotification": "Lcom/android/email/NotificationController;->showPasswordExpiringNotification",
                    "showSecurityNeededNotification": "Lcom/android/email/NotificationController;->showSecurityNeededNotification"
                },
                "Preferences": {
                    "shouldShowRequireManualSync": "Lcom/android/email/Preferences;->shouldShowRequireManualSync"
                },
                "provider": {
                    "AccountReconciler": {
                        "accountsNeedReconciling": "Lcom/android/email/provider/AccountReconciler;->accountsNeedReconciling",
                        "reconcileAccountsInternal": "Lcom/android/email/provider/AccountReconciler;->reconcileAccountsInternal",
                        "reconcileAccounts": "Lcom/android/email/provider/AccountReconciler;->reconcileAccounts"
                    },
                    "DBHelper$DatabaseHelper": {
                        "onUpgrade": "Lcom/android/email/provider/DBHelper$DatabaseHelper;->onUpgrade"
                    },
                    "DBHelper": {
                        "createAccountManagerAccount": "Lcom/android/email/provider/DBHelper;->createAccountManagerAccount",
                        "upgradeFromVersion21ToVersion22": "Lcom/android/email/provider/DBHelper;->upgradeFromVersion21ToVersion22"
                    },
                    "AttachmentProvider": {
                        "openFile": "Lcom/android/email/provider/AttachmentProvider;->openFile"
                    },
                    "EmailProvider": "Lcom/android/email/provider;->EmailProvider"
                },
                "RefreshManager$SendPendingMessagesForAllAccountsImpl": {
                    "onPostExecute": "Lcom/android/email/RefreshManager$SendPendingMessagesForAllAccountsImpl;->onPostExecute",
                    "performAction": "Lcom/android/email/RefreshManager$SendPendingMessagesForAllAccountsImpl;->performAction"
                },
                "RefreshManager": {
                    "loadMoreMessages": "Lcom/android/email/RefreshManager;->loadMoreMessages",
                    "refreshMessageList": "Lcom/android/email/RefreshManager;->refreshMessageList",
                    "sendPendingMessages": "Lcom/android/email/RefreshManager;->sendPendingMessages"
                },
                "SecurityPolicy": {
                    "wipeExpiredAccounts": "Lcom/android/email/SecurityPolicy;->wipeExpiredAccounts",
                    "deleteSecuredAccounts": "Lcom/android/email/SecurityPolicy;->deleteSecuredAccounts",
                    "onAdminEnabled": "Lcom/android/email/SecurityPolicy;->onAdminEnabled",
                    "onDeviceAdminReceiverMessage": "Lcom/android/email/SecurityPolicy;->onDeviceAdminReceiverMessage",
                    "onPasswordExpiring": "Lcom/android/email/SecurityPolicy;->onPasswordExpiring",
                    "policiesRequired": "Lcom/android/email/SecurityPolicy;->policiesRequired",
                    "setAccountPolicy": "Lcom/android/email/SecurityPolicy;->setAccountPolicy"
                },
                "service": {
                    "AccountService$1$1": {
                        "run": "Lcom/android/email/service/AccountService$1$1;->run"
                    },
                    "AccountService$1": {
                        "onTransact": "Lcom/android/email/service/AccountService$1;->onTransact",
                        "getDeviceId": "Lcom/android/email/service/AccountService$1;->getDeviceId",
                        "notifyLoginFailed": "Lcom/android/email/service/AccountService$1;->notifyLoginFailed",
                        "reconcileAccounts": "Lcom/android/email/service/AccountService$1;->reconcileAccounts"
                    },
                    "AccountService": {
                        "onBind": "Lcom/android/email/service/AccountService;->onBind"
                    },
                    "AttachmentDownloadService$AccountManagerStub": {
                        "getNumberOfAccounts": "Lcom/android/email/service/AttachmentDownloadService$AccountManagerStub;->getNumberOfAccounts"
                    },
                    "AttachmentDownloadService$DownloadSet": {
                        "tryStartDownload": "Lcom/android/email/service/AttachmentDownloadService$DownloadSet;->tryStartDownload",
                        "endDownload": "Lcom/android/email/service/AttachmentDownloadService$DownloadSet;->endDownload",
                        "onWatchdogAlarm": "Lcom/android/email/service/AttachmentDownloadService$DownloadSet;->onWatchdogAlarm",
                        "processQueue": "Lcom/android/email/service/AttachmentDownloadService$DownloadSet;->processQueue",
                        "startDownload": "Lcom/android/email/service/AttachmentDownloadService$DownloadSet;->startDownload"
                    },
                    "AttachmentDownloadService$ServiceCallback": {
                        "onTransact": "Lcom/android/email/service/AttachmentDownloadService$ServiceCallback;->onTransact",
                        "loadAttachmentStatus": "Lcom/android/email/service/AttachmentDownloadService$ServiceCallback;->loadAttachmentStatus"
                    },
                    "AttachmentDownloadService$Watchdog$1": {
                        "run": "Lcom/android/email/service/AttachmentDownloadService$Watchdog$1;->run"
                    },
                    "AttachmentDownloadService": {
                        "canPrefetchForAccount": "Lcom/android/email/service/AttachmentDownloadService;->canPrefetchForAccount",
                        "run": "Lcom/android/email/service/AttachmentDownloadService;->run",
                        "watchdogAlarm": "Lcom/android/email/service/AttachmentDownloadService;->watchdogAlarm"
                    },
                    "EasAuthenticatorService$EasAuthenticator": {
                        "addAccount": "Lcom/android/email/service/EasAuthenticatorService$EasAuthenticator;->addAccount"
                    },
                    "EasTestAuthenticatorService$EasAuthenticator": {
                        "addAccount": "Lcom/android/email/service/EasTestAuthenticatorService$EasAuthenticator;->addAccount"
                    },
                    "EmailBroadcastProcessorService": {
                        "onHandleIntent": "Lcom/android/email/service/EmailBroadcastProcessorService;->onHandleIntent",
                        "onSystemAccountChanged": "Lcom/android/email/service/EmailBroadcastProcessorService;->onSystemAccountChanged"
                    },
                    "EmailServiceUtils": {
                        "isExchangeAvailable": "Lcom/android/email/service/EmailServiceUtils;->isExchangeAvailable",
                        "isServiceAvailable": "Lcom/android/email/service/EmailServiceUtils;->isServiceAvailable",
                        "getExchangeService": "Lcom/android/email/service/EmailServiceUtils;->getExchangeService",
                        "getService": "Lcom/android/email/service/EmailServiceUtils;->getService"
                    },
                    "MailService$1": {
                        "run": "Lcom/android/email/service/MailService$1;->run"
                    },
                    "MailService$2": {
                        "run": "Lcom/android/email/service/MailService$2;->run"
                    },
                    "MailService$3": {
                        "run": "Lcom/android/email/service/MailService$3;->run"
                    },
                    "MailService$4": {
                        "run": "Lcom/android/email/service/MailService$4;->run"
                    },
                    "MailService$5": {
                        "run": "Lcom/android/email/service/MailService$5;->run"
                    },
                    "MailService$6": {
                        "runInternal": "Lcom/android/email/service/MailService$6;->runInternal",
                        "run": "Lcom/android/email/service/MailService$6;->run"
                    },
                    "MailService$ControllerResults": {
                        "serviceCheckMailCallback": "Lcom/android/email/service/MailService$ControllerResults;->serviceCheckMailCallback",
                        "updateMailboxCallback": "Lcom/android/email/service/MailService$ControllerResults;->updateMailboxCallback"
                    },
                    "MailService": {
                        "hasMismatchInPopImapAccounts": "Lcom/android/email/service/MailService;->hasMismatchInPopImapAccounts",
                        "syncOneAccount": "Lcom/android/email/service/MailService;->syncOneAccount",
                        "updateAccountReport": "Lcom/android/email/service/MailService;->updateAccountReport",
                        "reconcileAccountsWithAccountManager": "Lcom/android/email/service/MailService;->reconcileAccountsWithAccountManager",
                        "reconcilePopImapAccountsSync": "Lcom/android/email/service/MailService;->reconcilePopImapAccountsSync",
                        "refreshSyncReports": "Lcom/android/email/service/MailService;->refreshSyncReports",
                        "reschedule": "Lcom/android/email/service/MailService;->reschedule",
                        "restoreSyncReports": "Lcom/android/email/service/MailService;->restoreSyncReports",
                        "setupAccountManagerAccount": "Lcom/android/email/service/MailService;->setupAccountManagerAccount",
                        "setupSyncReportsLocked": "Lcom/android/email/service/MailService;->setupSyncReportsLocked",
                        "setupSyncReports": "Lcom/android/email/service/MailService;->setupSyncReports"
                    },
                    "PolicyService$1": {
                        "onTransact": "Lcom/android/email/service/PolicyService$1;->onTransact",
                        "policiesRequired": "Lcom/android/email/service/PolicyService$1;->policiesRequired",
                        "setAccountPolicy": "Lcom/android/email/service/PolicyService$1;->setAccountPolicy"
                    },
                    "PopImapAuthenticatorService$PopImapAuthenticator": {
                        "addAccount": "Lcom/android/email/service/PopImapAuthenticatorService$PopImapAuthenticator;->addAccount"
                    },
                    "PopImapSyncAdapterService$SyncAdapterImpl": {
                        "onPerformSync": "Lcom/android/email/service/PopImapSyncAdapterService$SyncAdapterImpl;->onPerformSync"
                    },
                    "PopImapSyncAdapterService": {
                        "performSync": "Lcom/android/email/service/PopImapSyncAdapterService;->performSync"
                    }
                },
                "SingleRunningTask": {
                    "runInternal": "Lcom/android/email/SingleRunningTask;->runInternal",
                    "run": "Lcom/android/email/SingleRunningTask;->run"
                },
                "view": {
                    "RigidWebView": {
                        "<init>": "Lcom/android/email/view/RigidWebView;-><init>"
                    }
                }
            },
            "emailcommon": {
                "Device": {
                    "getConsistentDeviceId": "Lcom/android/emailcommon/Device;->getConsistentDeviceId",
                    "getDeviceId": "Lcom/android/emailcommon/Device;->getDeviceId",
                    "getDeviceIdInternal": "Lcom/android/emailcommon/Device;->getDeviceIdInternal"
                },
                "provider": {
                    "Account": {
                        "isAutomaticSyncDisabledByRoaming": "Lcom/android/emailcommon/provider/Account;->isAutomaticSyncDisabledByRoaming"
                    }
                },
                "service": {
                    "AccountServiceProxy$1": {
                        "run": "Lcom/android/emailcommon/service/AccountServiceProxy$1;->run"
                    },
                    "AccountServiceProxy$3": {
                        "run": "Lcom/android/emailcommon/service/AccountServiceProxy$3;->run"
                    },
                    "AccountServiceProxy$6": {
                        "run": "Lcom/android/emailcommon/service/AccountServiceProxy$6;->run"
                    },
                    "EmailServiceProxy$10": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$10;->run"
                    },
                    "EmailServiceProxy$12": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$12;->run"
                    },
                    "EmailServiceProxy$13": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$13;->run"
                    },
                    "EmailServiceProxy$1": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$1;->run"
                    },
                    "EmailServiceProxy$2": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$2;->run"
                    },
                    "EmailServiceProxy$3": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$3;->run"
                    },
                    "EmailServiceProxy$4": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$4;->run"
                    },
                    "EmailServiceProxy$6": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$6;->run"
                    },
                    "EmailServiceProxy$9": {
                        "run": "Lcom/android/emailcommon/service/EmailServiceProxy$9;->run"
                    },
                    "EmailServiceProxy": {
                        "<init>": "Lcom/android/emailcommon/service/EmailServiceProxy;-><init>"
                    },
                    "IAccountService$Stub$Proxy": {
                        "getDeviceId": "Lcom/android/emailcommon/service/IAccountService$Stub$Proxy;->getDeviceId",
                        "notifyLoginFailed": "Lcom/android/emailcommon/service/IAccountService$Stub$Proxy;->notifyLoginFailed",
                        "reconcileAccounts": "Lcom/android/emailcommon/service/IAccountService$Stub$Proxy;->reconcileAccounts"
                    },
                    "IAccountService$Stub": {
                        "onTransact": "Lcom/android/emailcommon/service/IAccountService$Stub;->onTransact",
                        "getDeviceId": "Lcom/android/emailcommon/service/IAccountService$Stub;->getDeviceId",
                        "notifyLoginFailed": "Lcom/android/emailcommon/service/IAccountService$Stub;->notifyLoginFailed",
                        "reconcileAccounts": "Lcom/android/emailcommon/service/IAccountService$Stub;->reconcileAccounts"
                    },
                    "IAccountService": {
                        "getDeviceId": "Lcom/android/emailcommon/service/IAccountService;->getDeviceId",
                        "notifyLoginFailed": "Lcom/android/emailcommon/service/IAccountService;->notifyLoginFailed",
                        "reconcileAccounts": "Lcom/android/emailcommon/service/IAccountService;->reconcileAccounts"
                    },
                    "IEmailService$Stub$Proxy": {
                        "autoDiscover": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->autoDiscover",
                        "validate": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->validate",
                        "searchMessages": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->searchMessages",
                        "deleteAccountPIMData": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->deleteAccountPIMData",
                        "hostChanged": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->hostChanged",
                        "loadAttachment": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->loadAttachment",
                        "sendMeetingResponse": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->sendMeetingResponse",
                        "startSync": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->startSync",
                        "stopSync": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->stopSync",
                        "updateFolderList": "Lcom/android/emailcommon/service/IEmailService$Stub$Proxy;->updateFolderList"
                    },
                    "IEmailService$Stub": {
                        "autoDiscover": "Lcom/android/emailcommon/service/IEmailService$Stub;->autoDiscover",
                        "validate": "Lcom/android/emailcommon/service/IEmailService$Stub;->validate",
                        "onTransact": "Lcom/android/emailcommon/service/IEmailService$Stub;->onTransact",
                        "searchMessages": "Lcom/android/emailcommon/service/IEmailService$Stub;->searchMessages",
                        "deleteAccountPIMData": "Lcom/android/emailcommon/service/IEmailService$Stub;->deleteAccountPIMData",
                        "hostChanged": "Lcom/android/emailcommon/service/IEmailService$Stub;->hostChanged",
                        "loadAttachment": "Lcom/android/emailcommon/service/IEmailService$Stub;->loadAttachment",
                        "sendMeetingResponse": "Lcom/android/emailcommon/service/IEmailService$Stub;->sendMeetingResponse",
                        "startSync": "Lcom/android/emailcommon/service/IEmailService$Stub;->startSync",
                        "stopSync": "Lcom/android/emailcommon/service/IEmailService$Stub;->stopSync",
                        "updateFolderList": "Lcom/android/emailcommon/service/IEmailService$Stub;->updateFolderList"
                    },
                    "IEmailService": {
                        "autoDiscover": "Lcom/android/emailcommon/service/IEmailService;->autoDiscover",
                        "validate": "Lcom/android/emailcommon/service/IEmailService;->validate",
                        "searchMessages": "Lcom/android/emailcommon/service/IEmailService;->searchMessages",
                        "deleteAccountPIMData": "Lcom/android/emailcommon/service/IEmailService;->deleteAccountPIMData",
                        "hostChanged": "Lcom/android/emailcommon/service/IEmailService;->hostChanged",
                        "loadAttachment": "Lcom/android/emailcommon/service/IEmailService;->loadAttachment",
                        "sendMeetingResponse": "Lcom/android/emailcommon/service/IEmailService;->sendMeetingResponse",
                        "startSync": "Lcom/android/emailcommon/service/IEmailService;->startSync",
                        "stopSync": "Lcom/android/emailcommon/service/IEmailService;->stopSync",
                        "updateFolderList": "Lcom/android/emailcommon/service/IEmailService;->updateFolderList"
                    },
                    "IEmailServiceCallback$Stub$Proxy": {
                        "loadAttachmentStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub$Proxy;->loadAttachmentStatus",
                        "sendMessageStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub$Proxy;->sendMessageStatus",
                        "syncMailboxListStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub$Proxy;->syncMailboxListStatus",
                        "syncMailboxStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub$Proxy;->syncMailboxStatus"
                    },
                    "IEmailServiceCallback$Stub": {
                        "onTransact": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub;->onTransact",
                        "loadAttachmentStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub;->loadAttachmentStatus",
                        "sendMessageStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub;->sendMessageStatus",
                        "syncMailboxListStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub;->syncMailboxListStatus",
                        "syncMailboxStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback$Stub;->syncMailboxStatus"
                    },
                    "IEmailServiceCallback": {
                        "loadAttachmentStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback;->loadAttachmentStatus",
                        "sendMessageStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback;->sendMessageStatus",
                        "syncMailboxListStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback;->syncMailboxListStatus",
                        "syncMailboxStatus": "Lcom/android/emailcommon/service/IEmailServiceCallback;->syncMailboxStatus"
                    },
                    "IPolicyService$Stub$Proxy": {
                        "setAccountPolicy": "Lcom/android/emailcommon/service/IPolicyService$Stub$Proxy;->setAccountPolicy"
                    },
                    "IPolicyService$Stub": {
                        "onTransact": "Lcom/android/emailcommon/service/IPolicyService$Stub;->onTransact",
                        "setAccountPolicy": "Lcom/android/emailcommon/service/IPolicyService$Stub;->setAccountPolicy"
                    },
                    "IPolicyService": {
                        "setAccountPolicy": "Lcom/android/emailcommon/service/IPolicyService;->setAccountPolicy"
                    },
                    "PolicyServiceProxy$2": {
                        "run": "Lcom/android/emailcommon/service/PolicyServiceProxy$2;->run"
                    },
                    "ServiceProxy$ProxyRunnable": {
                        "run": "Lcom/android/emailcommon/service/ServiceProxy$ProxyRunnable;->run"
                    },
                    "ServiceProxy$ProxyTask": {
                        "run": "Lcom/android/emailcommon/service/ServiceProxy$ProxyTask;->run"
                    }
                },
                "utility": {
                    "AttachmentUtilities": {
                        "saveAttachment": "Lcom/android/emailcommon/utility/AttachmentUtilities;->saveAttachment"
                    },
                    "EmailAsyncTask$1": {
                        "callDoInBackgroundForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask$1;->callDoInBackgroundForTest",
                        "callOnCancelledForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask$1;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask$1;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/emailcommon/utility/EmailAsyncTask$1;->onCancelled",
                        "onSuccess": "Lcom/android/emailcommon/utility/EmailAsyncTask$1;->onSuccess"
                    },
                    "EmailAsyncTask$InnerTask": {
                        "doInBackground": "Lcom/android/emailcommon/utility/EmailAsyncTask$InnerTask;->doInBackground",
                        "onCancelled": "Lcom/android/emailcommon/utility/EmailAsyncTask$InnerTask;->onCancelled",
                        "onPostExecute": "Lcom/android/emailcommon/utility/EmailAsyncTask$InnerTask;->onPostExecute"
                    },
                    "EmailAsyncTask": {
                        "callDoInBackgroundForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask;->callDoInBackgroundForTest",
                        "doInBackground": "Lcom/android/emailcommon/utility/EmailAsyncTask;->doInBackground",
                        "callOnCancelledForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask;->callOnCancelledForTest",
                        "callOnPostExecuteForTest": "Lcom/android/emailcommon/utility/EmailAsyncTask;->callOnPostExecuteForTest",
                        "onCancelled": "Lcom/android/emailcommon/utility/EmailAsyncTask;->onCancelled",
                        "onSuccess": "Lcom/android/emailcommon/utility/EmailAsyncTask;->onSuccess"
                    },
                    "Utility$ForEachAccount": {
                        "onPostExecute": "Lcom/android/emailcommon/utility/Utility$ForEachAccount;->onPostExecute",
                        "performAction": "Lcom/android/emailcommon/utility/Utility$ForEachAccount;->performAction"
                    }
                }
            },
            "exchange": {
                "AbstractSyncService": {
                    "validateAccount": "Lcom/android/exchange/AbstractSyncService;->validateAccount",
                    "validate": "Lcom/android/exchange/AbstractSyncService;->validate",
                    "hasConnectivity": "Lcom/android/exchange/AbstractSyncService;->hasConnectivity"
                },
                "adapter": {
                    "AbstractSyncAdapter": {
                        "isSyncable": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->isSyncable",
                        "parse": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->parse",
                        "sendLocalChanges": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->sendLocalChanges",
                        "getSyncKey": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->getSyncKey",
                        "cleanup": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->cleanup",
                        "<init>": "Lcom/android/exchange/adapter/AbstractSyncAdapter;-><init>",
                        "setSyncKey": "Lcom/android/exchange/adapter/AbstractSyncAdapter;->setSyncKey"
                    },
                    "AbstractSyncParser": {
                        "parse": "Lcom/android/exchange/adapter/AbstractSyncParser;->parse",
                        "commandsParser": "Lcom/android/exchange/adapter/AbstractSyncParser;->commandsParser",
                        "commit": "Lcom/android/exchange/adapter/AbstractSyncParser;->commit"
                    },
                    "AccountSyncAdapter": {
                        "getSyncKey": "Lcom/android/exchange/adapter/AccountSyncAdapter;->getSyncKey",
                        "<init>": "Lcom/android/exchange/adapter/AccountSyncAdapter;-><init>",
                        "setSyncKey": "Lcom/android/exchange/adapter/AccountSyncAdapter;->setSyncKey"
                    },
                    "AttachmentLoader": {
                        "doProgressCallback": "Lcom/android/exchange/adapter/AttachmentLoader;->doProgressCallback",
                        "doStatusCallback": "Lcom/android/exchange/adapter/AttachmentLoader;->doStatusCallback",
                        "finishLoadAttachment": "Lcom/android/exchange/adapter/AttachmentLoader;->finishLoadAttachment",
                        "loadAttachment": "Lcom/android/exchange/adapter/AttachmentLoader;->loadAttachment",
                        "readChunked": "Lcom/android/exchange/adapter/AttachmentLoader;->readChunked"
                    },
                    "CalendarSyncAdapter$CalendarOperations": {
                        "updatedExtendedProperty": "Lcom/android/exchange/adapter/CalendarSyncAdapter$CalendarOperations;->updatedExtendedProperty"
                    },
                    "CalendarSyncAdapter$EasCalendarSyncParser": {
                        "parse": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->parse",
                        "addEvent": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->addEvent",
                        "addParser": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->addParser",
                        "changeParser": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->changeParser",
                        "commandsParser": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->commandsParser",
                        "commit": "Lcom/android/exchange/adapter/CalendarSyncAdapter$EasCalendarSyncParser;->commit"
                    },
                    "CalendarSyncAdapter": {
                        "isSyncable": "Lcom/android/exchange/adapter/CalendarSyncAdapter;->isSyncable",
                        "parse": "Lcom/android/exchange/adapter/CalendarSyncAdapter;->parse",
                        "sendLocalChanges": "Lcom/android/exchange/adapter/CalendarSyncAdapter;->sendLocalChanges",
                        "<init>": "Lcom/android/exchange/adapter/CalendarSyncAdapter;-><init>"
                    },
                    "ContactsSyncAdapter$ContactOperations": {
                        "delete": "Lcom/android/exchange/adapter/ContactsSyncAdapter$ContactOperations;->delete"
                    },
                    "ContactsSyncAdapter$EasContactsSyncParser": {
                        "parse": "Lcom/android/exchange/adapter/ContactsSyncAdapter$EasContactsSyncParser;->parse",
                        "changeParser": "Lcom/android/exchange/adapter/ContactsSyncAdapter$EasContactsSyncParser;->changeParser",
                        "commandsParser": "Lcom/android/exchange/adapter/ContactsSyncAdapter$EasContactsSyncParser;->commandsParser",
                        "commit": "Lcom/android/exchange/adapter/ContactsSyncAdapter$EasContactsSyncParser;->commit",
                        "deleteParser": "Lcom/android/exchange/adapter/ContactsSyncAdapter$EasContactsSyncParser;->deleteParser"
                    },
                    "ContactsSyncAdapter": {
                        "isSyncable": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->isSyncable",
                        "parse": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->parse",
                        "sendLocalChanges": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->sendLocalChanges",
                        "getSyncKey": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->getSyncKey",
                        "cleanup": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->cleanup",
                        "dirtyContactsWithinDirtyGroups": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->dirtyContactsWithinDirtyGroups",
                        "<init>": "Lcom/android/exchange/adapter/ContactsSyncAdapter;-><init>",
                        "setSyncKey": "Lcom/android/exchange/adapter/ContactsSyncAdapter;->setSyncKey"
                    },
                    "EmailSyncAdapter$EasEmailSyncParser": {
                        "parse": "Lcom/android/exchange/adapter/EmailSyncAdapter$EasEmailSyncParser;->parse"
                    },
                    "EmailSyncAdapter": {
                        "parse": "Lcom/android/exchange/adapter/EmailSyncAdapter;->parse",
                        "sendLocalChanges": "Lcom/android/exchange/adapter/EmailSyncAdapter;->sendLocalChanges",
                        "getEstimate": "Lcom/android/exchange/adapter/EmailSyncAdapter;->getEstimate",
                        "getSyncKey": "Lcom/android/exchange/adapter/EmailSyncAdapter;->getSyncKey",
                        "getAutomaticLookback": "Lcom/android/exchange/adapter/EmailSyncAdapter;->getAutomaticLookback",
                        "<init>": "Lcom/android/exchange/adapter/EmailSyncAdapter;-><init>",
                        "setSyncKey": "Lcom/android/exchange/adapter/EmailSyncAdapter;->setSyncKey"
                    },
                    "FolderSyncParser": {
                        "parse": "Lcom/android/exchange/adapter/FolderSyncParser;->parse"
                    },
                    "ItemOperationsParser": {
                        "parse": "Lcom/android/exchange/adapter/ItemOperationsParser;->parse",
                        "parseFetch": "Lcom/android/exchange/adapter/ItemOperationsParser;->parseFetch",
                        "parseProperties": "Lcom/android/exchange/adapter/ItemOperationsParser;->parseProperties",
                        "parseResponse": "Lcom/android/exchange/adapter/ItemOperationsParser;->parseResponse"
                    },
                    "Parser": {
                        "parse": "Lcom/android/exchange/adapter/Parser;->parse"
                    },
                    "Search$SearchParser": {
                        "parse": "Lcom/android/exchange/adapter/Search$SearchParser;->parse",
                        "parseResponse": "Lcom/android/exchange/adapter/Search$SearchParser;->parseResponse",
                        "parseStore": "Lcom/android/exchange/adapter/Search$SearchParser;->parseStore"
                    },
                    "Search": {
                        "searchMessages": "Lcom/android/exchange/adapter/Search;->searchMessages"
                    }
                },
                "CalendarSyncAdapterService$SyncAdapterImpl": {
                    "onPerformSync": "Lcom/android/exchange/CalendarSyncAdapterService$SyncAdapterImpl;->onPerformSync"
                },
                "CalendarSyncAdapterService": {
                    "performSync": "Lcom/android/exchange/CalendarSyncAdapterService;->performSync"
                },
                "CalendarSyncEnabler": {
                    "enableEasCalendarSyncInternalForTest": "Lcom/android/exchange/CalendarSyncEnabler;->enableEasCalendarSyncInternalForTest",
                    "enableEasCalendarSync": "Lcom/android/exchange/CalendarSyncEnabler;->enableEasCalendarSync",
                    "showNotificationForTest": "Lcom/android/exchange/CalendarSyncEnabler;->showNotificationForTest"
                },
                "ContactsSyncAdapterService$SyncAdapterImpl": {
                    "onPerformSync": "Lcom/android/exchange/ContactsSyncAdapterService$SyncAdapterImpl;->onPerformSync"
                },
                "ContactsSyncAdapterService": {
                    "performSync": "Lcom/android/exchange/ContactsSyncAdapterService;->performSync"
                },
                "EasAccountService": {
                    "tryAutodiscover": "Lcom/android/exchange/EasAccountService;->tryAutodiscover",
                    "validateAccount": "Lcom/android/exchange/EasAccountService;->validateAccount",
                    "validate": "Lcom/android/exchange/EasAccountService;->validate",
                    "hasConnectivity": "Lcom/android/exchange/EasAccountService;->hasConnectivity",
                    "sendSettings": "Lcom/android/exchange/EasAccountService;->sendSettings",
                    "setupService": "Lcom/android/exchange/EasAccountService;->setupService",
                    "tryProvision": "Lcom/android/exchange/EasAccountService;->tryProvision",
                    "canProvision": "Lcom/android/exchange/EasAccountService;->canProvision",
                    "executePostWithTimeout": "Lcom/android/exchange/EasAccountService;->executePostWithTimeout",
                    "postAutodiscover": "Lcom/android/exchange/EasAccountService;->postAutodiscover",
                    "sendHttpClientPost": "Lcom/android/exchange/EasAccountService;->sendHttpClientPost",
                    "sendPing": "Lcom/android/exchange/EasAccountService;->sendPing",
                    "searchGal": "Lcom/android/exchange/EasAccountService;->searchGal",
                    "parsePingResult": "Lcom/android/exchange/EasAccountService;->parsePingResult",
                    "acknowledgeProvision": "Lcom/android/exchange/EasAccountService;->acknowledgeProvision",
                    "acknowledgeProvisionImpl": "Lcom/android/exchange/EasAccountService;->acknowledgeProvisionImpl",
                    "acknowledgeRemoteWipe": "Lcom/android/exchange/EasAccountService;->acknowledgeRemoteWipe",
                    "messageMoveRequest": "Lcom/android/exchange/EasAccountService;->messageMoveRequest",
                    "run": "Lcom/android/exchange/EasAccountService;->run",
                    "runPingLoop": "Lcom/android/exchange/EasAccountService;->runPingLoop",
                    "sendMeetingResponse": "Lcom/android/exchange/EasAccountService;->sendMeetingResponse",
                    "sleep": "Lcom/android/exchange/EasAccountService;->sleep",
                    "sync": "Lcom/android/exchange/EasAccountService;->sync"
                },
                "EasOutboxService": {
                    "tryAutodiscover": "Lcom/android/exchange/EasOutboxService;->tryAutodiscover",
                    "validateAccount": "Lcom/android/exchange/EasOutboxService;->validateAccount",
                    "validate": "Lcom/android/exchange/EasOutboxService;->validate",
                    "hasConnectivity": "Lcom/android/exchange/EasOutboxService;->hasConnectivity",
                    "sendSettings": "Lcom/android/exchange/EasOutboxService;->sendSettings",
                    "setupService": "Lcom/android/exchange/EasOutboxService;->setupService",
                    "tryProvision": "Lcom/android/exchange/EasOutboxService;->tryProvision",
                    "canProvision": "Lcom/android/exchange/EasOutboxService;->canProvision",
                    "executePostWithTimeout": "Lcom/android/exchange/EasOutboxService;->executePostWithTimeout",
                    "postAutodiscover": "Lcom/android/exchange/EasOutboxService;->postAutodiscover",
                    "sendHttpClientPost": "Lcom/android/exchange/EasOutboxService;->sendHttpClientPost",
                    "sendPing": "Lcom/android/exchange/EasOutboxService;->sendPing",
                    "searchGal": "Lcom/android/exchange/EasOutboxService;->searchGal",
                    "sendMessage": "Lcom/android/exchange/EasOutboxService;->sendMessage",
                    "acknowledgeProvision": "Lcom/android/exchange/EasOutboxService;->acknowledgeProvision",
                    "acknowledgeProvisionImpl": "Lcom/android/exchange/EasOutboxService;->acknowledgeProvisionImpl",
                    "acknowledgeRemoteWipe": "Lcom/android/exchange/EasOutboxService;->acknowledgeRemoteWipe",
                    "messageMoveRequest": "Lcom/android/exchange/EasOutboxService;->messageMoveRequest",
                    "run": "Lcom/android/exchange/EasOutboxService;->run",
                    "sendCallback": "Lcom/android/exchange/EasOutboxService;->sendCallback",
                    "sendFailed": "Lcom/android/exchange/EasOutboxService;->sendFailed",
                    "sendMeetingResponse": "Lcom/android/exchange/EasOutboxService;->sendMeetingResponse",
                    "sync": "Lcom/android/exchange/EasOutboxService;->sync"
                },
                "EasSyncService": {
                    "tryAutodiscover": "Lcom/android/exchange/EasSyncService;->tryAutodiscover",
                    "validateAccount": "Lcom/android/exchange/EasSyncService;->validateAccount",
                    "validate": "Lcom/android/exchange/EasSyncService;->validate",
                    "hasConnectivity": "Lcom/android/exchange/EasSyncService;->hasConnectivity",
                    "sendSettings": "Lcom/android/exchange/EasSyncService;->sendSettings",
                    "setupService": "Lcom/android/exchange/EasSyncService;->setupService",
                    "tryProvision": "Lcom/android/exchange/EasSyncService;->tryProvision",
                    "canProvision": "Lcom/android/exchange/EasSyncService;->canProvision",
                    "executePostWithTimeout": "Lcom/android/exchange/EasSyncService;->executePostWithTimeout",
                    "postAutodiscover": "Lcom/android/exchange/EasSyncService;->postAutodiscover",
                    "sendHttpClientPost": "Lcom/android/exchange/EasSyncService;->sendHttpClientPost",
                    "sendPing": "Lcom/android/exchange/EasSyncService;->sendPing",
                    "searchGal": "Lcom/android/exchange/EasSyncService;->searchGal",
                    "acknowledgeProvision": "Lcom/android/exchange/EasSyncService;->acknowledgeProvision",
                    "acknowledgeProvisionImpl": "Lcom/android/exchange/EasSyncService;->acknowledgeProvisionImpl",
                    "acknowledgeRemoteWipe": "Lcom/android/exchange/EasSyncService;->acknowledgeRemoteWipe",
                    "messageMoveRequest": "Lcom/android/exchange/EasSyncService;->messageMoveRequest",
                    "run": "Lcom/android/exchange/EasSyncService;->run",
                    "sendMeetingResponse": "Lcom/android/exchange/EasSyncService;->sendMeetingResponse",
                    "sync": "Lcom/android/exchange/EasSyncService;->sync"
                },
                "EmailSyncAdapterService$SyncAdapterImpl": {
                    "onPerformSync": "Lcom/android/exchange/EmailSyncAdapterService$SyncAdapterImpl;->onPerformSync"
                },
                "EmailSyncAdapterService": {
                    "performSync": "Lcom/android/exchange/EmailSyncAdapterService;->performSync"
                },
                "EmailSyncAlarmReceiver$1": {
                    "run": "Lcom/android/exchange/EmailSyncAlarmReceiver$1;->run"
                },
                "EmailSyncAlarmReceiver": {
                    "handleReceive": "Lcom/android/exchange/EmailSyncAlarmReceiver;->handleReceive"
                },
                "ExchangeService$1$1": {
                    "call": "Lcom/android/exchange/ExchangeService$1$1;->call"
                },
                "ExchangeService$1$2": {
                    "call": "Lcom/android/exchange/ExchangeService$1$2;->call"
                },
                "ExchangeService$1$3": {
                    "call": "Lcom/android/exchange/ExchangeService$1$3;->call"
                },
                "ExchangeService$1$4": {
                    "call": "Lcom/android/exchange/ExchangeService$1$4;->call"
                },
                "ExchangeService$1": {
                    "onTransact": "Lcom/android/exchange/ExchangeService$1;->onTransact",
                    "broadcastCallback": "Lcom/android/exchange/ExchangeService$1;->broadcastCallback",
                    "loadAttachmentStatus": "Lcom/android/exchange/ExchangeService$1;->loadAttachmentStatus",
                    "sendMessageStatus": "Lcom/android/exchange/ExchangeService$1;->sendMessageStatus",
                    "syncMailboxListStatus": "Lcom/android/exchange/ExchangeService$1;->syncMailboxListStatus",
                    "syncMailboxStatus": "Lcom/android/exchange/ExchangeService$1;->syncMailboxStatus"
                },
                "ExchangeService$2": {
                    "autoDiscover": "Lcom/android/exchange/ExchangeService$2;->autoDiscover",
                    "validate": "Lcom/android/exchange/ExchangeService$2;->validate",
                    "onTransact": "Lcom/android/exchange/ExchangeService$2;->onTransact",
                    "searchMessages": "Lcom/android/exchange/ExchangeService$2;->searchMessages",
                    "deleteAccountPIMData": "Lcom/android/exchange/ExchangeService$2;->deleteAccountPIMData",
                    "hostChanged": "Lcom/android/exchange/ExchangeService$2;->hostChanged",
                    "loadAttachment": "Lcom/android/exchange/ExchangeService$2;->loadAttachment",
                    "sendMeetingResponse": "Lcom/android/exchange/ExchangeService$2;->sendMeetingResponse",
                    "startSync": "Lcom/android/exchange/ExchangeService$2;->startSync",
                    "stopSync": "Lcom/android/exchange/ExchangeService$2;->stopSync",
                    "updateFolderList": "Lcom/android/exchange/ExchangeService$2;->updateFolderList"
                },
                "ExchangeService$5": {
                    "run": "Lcom/android/exchange/ExchangeService$5;->run"
                },
                "ExchangeService$AccountObserver$2": {
                    "run": "Lcom/android/exchange/ExchangeService$AccountObserver$2;->run"
                },
                "ExchangeService$AccountObserver": {
                    "onAccountChanged": "Lcom/android/exchange/ExchangeService$AccountObserver;->onAccountChanged"
                },
                "ExchangeService$CalendarObserver$1": {
                    "run": "Lcom/android/exchange/ExchangeService$CalendarObserver$1;->run"
                },
                "ExchangeService$CalendarObserver": {
                    "<init>": "Lcom/android/exchange/ExchangeService$CalendarObserver;-><init>"
                },
                "ExchangeService$ConnectivityReceiver$1": {
                    "run": "Lcom/android/exchange/ExchangeService$ConnectivityReceiver$1;->run"
                },
                "ExchangeService$ServiceCallbackWrapper": {
                    "call": "Lcom/android/exchange/ExchangeService$ServiceCallbackWrapper;->call"
                },
                "ExchangeService": {
                    "canSyncEmail": "Lcom/android/exchange/ExchangeService;->canSyncEmail",
                    "isMailboxSyncable": "Lcom/android/exchange/ExchangeService;->isMailboxSyncable",
                    "checkMailboxes": "Lcom/android/exchange/ExchangeService;->checkMailboxes",
                    "acquireWakeLock": "Lcom/android/exchange/ExchangeService;->acquireWakeLock",
                    "deleteAccountPIMData": "Lcom/android/exchange/ExchangeService;->deleteAccountPIMData",
                    "done": "Lcom/android/exchange/ExchangeService;->done",
                    "registerCalendarObserver": "Lcom/android/exchange/ExchangeService;->registerCalendarObserver",
                    "releaseMailbox": "Lcom/android/exchange/ExchangeService;->releaseMailbox",
                    "releaseWakeLock": "Lcom/android/exchange/ExchangeService;->releaseWakeLock",
                    "reloadFolderList": "Lcom/android/exchange/ExchangeService;->reloadFolderList",
                    "reloadFolderListFailed": "Lcom/android/exchange/ExchangeService;->reloadFolderListFailed",
                    "requestSync": "Lcom/android/exchange/ExchangeService;->requestSync",
                    "run": "Lcom/android/exchange/ExchangeService;->run",
                    "runAsleep": "Lcom/android/exchange/ExchangeService;->runAsleep",
                    "runAwake": "Lcom/android/exchange/ExchangeService;->runAwake",
                    "sendMessageRequest": "Lcom/android/exchange/ExchangeService;->sendMessageRequest",
                    "serviceRequest": "Lcom/android/exchange/ExchangeService;->serviceRequest",
                    "shutdown": "Lcom/android/exchange/ExchangeService;->shutdown",
                    "startManualSync": "Lcom/android/exchange/ExchangeService;->startManualSync",
                    "startServiceThread": "Lcom/android/exchange/ExchangeService;->startServiceThread",
                    "stopAccountSyncs": "Lcom/android/exchange/ExchangeService;->stopAccountSyncs",
                    "stopManualSync": "Lcom/android/exchange/ExchangeService;->stopManualSync",
                    "stopNonAccountMailboxSyncsForAccount": "Lcom/android/exchange/ExchangeService;->stopNonAccountMailboxSyncsForAccount",
                    "stopServiceThreads": "Lcom/android/exchange/ExchangeService;->stopServiceThreads",
                    "waitForConnectivity": "Lcom/android/exchange/ExchangeService;->waitForConnectivity"
                },
                "provider": {
                    "ExchangeDirectoryProvider": {
                        "query": "Lcom/android/exchange/provider/ExchangeDirectoryProvider;->query"
                    }
                },
                "utility": {
                    "CalendarUtilities": {
                        "createMessageForEventId": "Lcom/android/exchange/utility/CalendarUtilities;->createMessageForEventId"
                    }
                }
            },
            "ex": {
                "chips": {
                    "BaseRecipientAdapter$DefaultFilter": {
                        "performFiltering": "Lcom/android/ex/chips/BaseRecipientAdapter$DefaultFilter;->performFiltering"
                    }
                },
                "variablespeed": {
                    "MediaPlayerProxy": {
                        "prepare": "Lcom/android/ex/variablespeed/MediaPlayerProxy;->prepare",
                        "seekTo": "Lcom/android/ex/variablespeed/MediaPlayerProxy;->seekTo",
                        "start": "Lcom/android/ex/variablespeed/MediaPlayerProxy;->start"
                    },
                    "SingleThreadedMediaPlayerProxy": {
                        "prepare": "Lcom/android/ex/variablespeed/SingleThreadedMediaPlayerProxy;->prepare",
                        "seekTo": "Lcom/android/ex/variablespeed/SingleThreadedMediaPlayerProxy;->seekTo",
                        "start": "Lcom/android/ex/variablespeed/SingleThreadedMediaPlayerProxy;->start"
                    },
                    "VariableSpeed": {
                        "prepare": "Lcom/android/ex/variablespeed/VariableSpeed;->prepare",
                        "seekTo": "Lcom/android/ex/variablespeed/VariableSpeed;->seekTo",
                        "start": "Lcom/android/ex/variablespeed/VariableSpeed;->start",
                        "stopAndStartPlayingAgain": "Lcom/android/ex/variablespeed/VariableSpeed;->stopAndStartPlayingAgain"
                    }
                }
            },
            "gallery3d": {
                "app": {
                    "AbstractGalleryActivity": {
                        "onOptionsItemSelected": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onOptionsItemSelected",
                        "onBackPressed": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onBackPressed",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onResume",
                        "onUserInteraction": "Lcom/android/gallery3d/app/AbstractGalleryActivity;->onUserInteraction"
                    },
                    "ActivityState": {
                        "onCreateActionBar": "Lcom/android/gallery3d/app/ActivityState;->onCreateActionBar",
                        "onItemSelected": "Lcom/android/gallery3d/app/ActivityState;->onItemSelected",
                        "onBackPressed": "Lcom/android/gallery3d/app/ActivityState;->onBackPressed",
                        "onCreate": "Lcom/android/gallery3d/app/ActivityState;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/ActivityState;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/ActivityState;->onResume",
                        "onStateResult": "Lcom/android/gallery3d/app/ActivityState;->onStateResult",
                        "resume": "Lcom/android/gallery3d/app/ActivityState;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/ActivityState;->setContentPane"
                    },
                    "AlbumDataLoader$ReloadTask": {
                        "run": "Lcom/android/gallery3d/app/AlbumDataLoader$ReloadTask;->run"
                    },
                    "AlbumDataLoader": {
                        "executeAndWait": "Lcom/android/gallery3d/app/AlbumDataLoader;->executeAndWait",
                        "resume": "Lcom/android/gallery3d/app/AlbumDataLoader;->resume"
                    },
                    "AlbumPage$2": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/app/AlbumPage$2;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/app/AlbumPage$2;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/app/AlbumPage$2;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/app/AlbumPage$2;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/app/AlbumPage$2;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/app/AlbumPage$2;->renderChild",
                        "render": "Lcom/android/gallery3d/app/AlbumPage$2;->render"
                    },
                    "AlbumPage$4": {
                        "onLongTap": "Lcom/android/gallery3d/app/AlbumPage$4;->onLongTap",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/AlbumPage$4;->onSingleTapUp"
                    },
                    "AlbumPage$5": {
                        "onActionItemClicked": "Lcom/android/gallery3d/app/AlbumPage$5;->onActionItemClicked"
                    },
                    "AlbumPage$7": {
                        "run": "Lcom/android/gallery3d/app/AlbumPage$7;->run"
                    },
                    "AlbumPage$MyLoadingListener": {
                        "onLoadingFinished": "Lcom/android/gallery3d/app/AlbumPage$MyLoadingListener;->onLoadingFinished"
                    },
                    "AlbumPage": {
                        "onItemSelected": "Lcom/android/gallery3d/app/AlbumPage;->onItemSelected",
                        "clearLoadingBit": "Lcom/android/gallery3d/app/AlbumPage;->clearLoadingBit",
                        "doCluster": "Lcom/android/gallery3d/app/AlbumPage;->doCluster",
                        "onBackPressed": "Lcom/android/gallery3d/app/AlbumPage;->onBackPressed",
                        "onCreate": "Lcom/android/gallery3d/app/AlbumPage;->onCreate",
                        "onLongTap": "Lcom/android/gallery3d/app/AlbumPage;->onLongTap",
                        "onPause": "Lcom/android/gallery3d/app/AlbumPage;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/AlbumPage;->onResume",
                        "onSelectionModeChange": "Lcom/android/gallery3d/app/AlbumPage;->onSelectionModeChange",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/AlbumPage;->onSingleTapUp",
                        "onUpPressed": "Lcom/android/gallery3d/app/AlbumPage;->onUpPressed",
                        "pickPhoto": "Lcom/android/gallery3d/app/AlbumPage;->pickPhoto",
                        "resume": "Lcom/android/gallery3d/app/AlbumPage;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/AlbumPage;->setContentPane"
                    },
                    "AlbumPicker": {
                        "onOptionsItemSelected": "Lcom/android/gallery3d/app/AlbumPicker;->onOptionsItemSelected",
                        "onBackPressed": "Lcom/android/gallery3d/app/AlbumPicker;->onBackPressed",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/AlbumPicker;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/AlbumPicker;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/AlbumPicker;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/AlbumPicker;->onResume"
                    },
                    "AlbumSetDataLoader$ReloadTask": {
                        "run": "Lcom/android/gallery3d/app/AlbumSetDataLoader$ReloadTask;->run"
                    },
                    "AlbumSetDataLoader": {
                        "executeAndWait": "Lcom/android/gallery3d/app/AlbumSetDataLoader;->executeAndWait",
                        "resume": "Lcom/android/gallery3d/app/AlbumSetDataLoader;->resume"
                    },
                    "AlbumSetPage$1": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/app/AlbumSetPage$1;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/app/AlbumSetPage$1;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/app/AlbumSetPage$1;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/app/AlbumSetPage$1;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/app/AlbumSetPage$1;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/app/AlbumSetPage$1;->renderChild",
                        "render": "Lcom/android/gallery3d/app/AlbumSetPage$1;->render"
                    },
                    "AlbumSetPage$3": {
                        "onLongTap": "Lcom/android/gallery3d/app/AlbumSetPage$3;->onLongTap",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/AlbumSetPage$3;->onSingleTapUp"
                    },
                    "AlbumSetPage$4": {
                        "onActionItemClicked": "Lcom/android/gallery3d/app/AlbumSetPage$4;->onActionItemClicked"
                    },
                    "AlbumSetPage$6": {
                        "run": "Lcom/android/gallery3d/app/AlbumSetPage$6;->run"
                    },
                    "AlbumSetPage$MyLoadingListener": {
                        "onLoadingFinished": "Lcom/android/gallery3d/app/AlbumSetPage$MyLoadingListener;->onLoadingFinished"
                    },
                    "AlbumSetPage": {
                        "onItemSelected": "Lcom/android/gallery3d/app/AlbumSetPage;->onItemSelected",
                        "clearLoadingBit": "Lcom/android/gallery3d/app/AlbumSetPage;->clearLoadingBit",
                        "doCluster": "Lcom/android/gallery3d/app/AlbumSetPage;->doCluster",
                        "onBackPressed": "Lcom/android/gallery3d/app/AlbumSetPage;->onBackPressed",
                        "onLongTap": "Lcom/android/gallery3d/app/AlbumSetPage;->onLongTap",
                        "onPause": "Lcom/android/gallery3d/app/AlbumSetPage;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/AlbumSetPage;->onResume",
                        "onSelectionModeChange": "Lcom/android/gallery3d/app/AlbumSetPage;->onSelectionModeChange",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/AlbumSetPage;->onSingleTapUp",
                        "pickAlbum": "Lcom/android/gallery3d/app/AlbumSetPage;->pickAlbum",
                        "resume": "Lcom/android/gallery3d/app/AlbumSetPage;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/AlbumSetPage;->setContentPane"
                    },
                    "AppBridge$Server": {
                        "switchWithCaptureAnimation": "Lcom/android/gallery3d/app/AppBridge$Server;->switchWithCaptureAnimation"
                    },
                    "ControllerOverlay$Listener": {
                        "onPlayPause": "Lcom/android/gallery3d/app/ControllerOverlay$Listener;->onPlayPause",
                        "onReplay": "Lcom/android/gallery3d/app/ControllerOverlay$Listener;->onReplay"
                    },
                    "CropImage$LoadBitmapDataTask": {
                        "run": "Lcom/android/gallery3d/app/CropImage$LoadBitmapDataTask;->run"
                    },
                    "CropImage$LoadDataTask": {
                        "run": "Lcom/android/gallery3d/app/CropImage$LoadDataTask;->run"
                    },
                    "CropImage$SaveOutput": {
                        "run": "Lcom/android/gallery3d/app/CropImage$SaveOutput;->run"
                    },
                    "CropImage": {
                        "setAsWallpaper": "Lcom/android/gallery3d/app/CropImage;->setAsWallpaper",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/CropImage;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/CropImage;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/CropImage;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/CropImage;->onResume"
                    },
                    "DialogPicker": {
                        "onOptionsItemSelected": "Lcom/android/gallery3d/app/DialogPicker;->onOptionsItemSelected",
                        "onBackPressed": "Lcom/android/gallery3d/app/DialogPicker;->onBackPressed",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/DialogPicker;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/DialogPicker;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/DialogPicker;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/DialogPicker;->onResume"
                    },
                    "GalleryActionBar$1": {
                        "onClick": "Lcom/android/gallery3d/app/GalleryActionBar$1;->onClick"
                    },
                    "GalleryActionBar$ClusterRunner": {
                        "doCluster": "Lcom/android/gallery3d/app/GalleryActionBar$ClusterRunner;->doCluster"
                    },
                    "GalleryActionBar": {
                        "onNavigationItemSelected": "Lcom/android/gallery3d/app/GalleryActionBar;->onNavigationItemSelected",
                        "setSubtitle": "Lcom/android/gallery3d/app/GalleryActionBar;->setSubtitle"
                    },
                    "Gallery": {
                        "onCreateOptionsMenu": "Lcom/android/gallery3d/app/Gallery;->onCreateOptionsMenu",
                        "onOptionsItemSelected": "Lcom/android/gallery3d/app/Gallery;->onOptionsItemSelected",
                        "initializeByIntent": "Lcom/android/gallery3d/app/Gallery;->initializeByIntent",
                        "onBackPressed": "Lcom/android/gallery3d/app/Gallery;->onBackPressed",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/Gallery;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/Gallery;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/Gallery;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/Gallery;->onResume",
                        "startDefaultPage": "Lcom/android/gallery3d/app/Gallery;->startDefaultPage",
                        "startGetContent": "Lcom/android/gallery3d/app/Gallery;->startGetContent",
                        "startViewAction": "Lcom/android/gallery3d/app/Gallery;->startViewAction"
                    },
                    "LoadingListener": {
                        "onLoadingFinished": "Lcom/android/gallery3d/app/LoadingListener;->onLoadingFinished"
                    },
                    "ManageCachePage$1": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/app/ManageCachePage$1;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/app/ManageCachePage$1;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/app/ManageCachePage$1;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/app/ManageCachePage$1;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/app/ManageCachePage$1;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/app/ManageCachePage$1;->renderChild",
                        "render": "Lcom/android/gallery3d/app/ManageCachePage$1;->render"
                    },
                    "ManageCachePage$4": {
                        "onLongTap": "Lcom/android/gallery3d/app/ManageCachePage$4;->onLongTap",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/ManageCachePage$4;->onSingleTapUp"
                    },
                    "ManageCachePage": {
                        "onCreateActionBar": "Lcom/android/gallery3d/app/ManageCachePage;->onCreateActionBar",
                        "onItemSelected": "Lcom/android/gallery3d/app/ManageCachePage;->onItemSelected",
                        "initializeData": "Lcom/android/gallery3d/app/ManageCachePage;->initializeData",
                        "onBackPressed": "Lcom/android/gallery3d/app/ManageCachePage;->onBackPressed",
                        "onClick": "Lcom/android/gallery3d/app/ManageCachePage;->onClick",
                        "onCreate": "Lcom/android/gallery3d/app/ManageCachePage;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/ManageCachePage;->onPause",
                        "onProgressComplete": "Lcom/android/gallery3d/app/ManageCachePage;->onProgressComplete",
                        "onResume": "Lcom/android/gallery3d/app/ManageCachePage;->onResume",
                        "onSingleTapUp": "Lcom/android/gallery3d/app/ManageCachePage;->onSingleTapUp",
                        "onStateResult": "Lcom/android/gallery3d/app/ManageCachePage;->onStateResult",
                        "resume": "Lcom/android/gallery3d/app/ManageCachePage;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/ManageCachePage;->setContentPane"
                    },
                    "MovieActivity$1": {
                        "<init>": "Lcom/android/gallery3d/app/MovieActivity$1;-><init>",
                        "onDestroy": "Lcom/android/gallery3d/app/MovieActivity$1;->onDestroy",
                        "onPause": "Lcom/android/gallery3d/app/MovieActivity$1;->onPause",
                        "onPlayPause": "Lcom/android/gallery3d/app/MovieActivity$1;->onPlayPause",
                        "onReplay": "Lcom/android/gallery3d/app/MovieActivity$1;->onReplay",
                        "onResume": "Lcom/android/gallery3d/app/MovieActivity$1;->onResume",
                        "pauseVideo": "Lcom/android/gallery3d/app/MovieActivity$1;->pauseVideo",
                        "playVideo": "Lcom/android/gallery3d/app/MovieActivity$1;->playVideo",
                        "startVideo": "Lcom/android/gallery3d/app/MovieActivity$1;->startVideo"
                    },
                    "MovieActivity": {
                        "onCreate": "Lcom/android/gallery3d/app/MovieActivity;->onCreate",
                        "onDestroy": "Lcom/android/gallery3d/app/MovieActivity;->onDestroy",
                        "onPause": "Lcom/android/gallery3d/app/MovieActivity;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/MovieActivity;->onResume"
                    },
                    "MovieControllerOverlay": {
                        "onTouchEvent": "Lcom/android/gallery3d/app/MovieControllerOverlay;->onTouchEvent",
                        "onClick": "Lcom/android/gallery3d/app/MovieControllerOverlay;->onClick"
                    },
                    "MoviePlayer$8": {
                        "onClick": "Lcom/android/gallery3d/app/MoviePlayer$8;->onClick"
                    },
                    "MoviePlayer$9": {
                        "onClick": "Lcom/android/gallery3d/app/MoviePlayer$9;->onClick"
                    },
                    "MoviePlayer$AudioBecomingNoisyReceiver": {
                        "onReceive": "Lcom/android/gallery3d/app/MoviePlayer$AudioBecomingNoisyReceiver;->onReceive"
                    },
                    "MoviePlayer": {
                        "onKeyDown": "Lcom/android/gallery3d/app/MoviePlayer;->onKeyDown",
                        "<init>": "Lcom/android/gallery3d/app/MoviePlayer;-><init>",
                        "onDestroy": "Lcom/android/gallery3d/app/MoviePlayer;->onDestroy",
                        "onPause": "Lcom/android/gallery3d/app/MoviePlayer;->onPause",
                        "onPlayPause": "Lcom/android/gallery3d/app/MoviePlayer;->onPlayPause",
                        "onReplay": "Lcom/android/gallery3d/app/MoviePlayer;->onReplay",
                        "onResume": "Lcom/android/gallery3d/app/MoviePlayer;->onResume",
                        "pauseVideo": "Lcom/android/gallery3d/app/MoviePlayer;->pauseVideo",
                        "playVideo": "Lcom/android/gallery3d/app/MoviePlayer;->playVideo",
                        "startVideo": "Lcom/android/gallery3d/app/MoviePlayer;->startVideo"
                    },
                    "PhotoDataAdapter$DataListener": {
                        "onLoadingFinished": "Lcom/android/gallery3d/app/PhotoDataAdapter$DataListener;->onLoadingFinished",
                        "onPhotoChanged": "Lcom/android/gallery3d/app/PhotoDataAdapter$DataListener;->onPhotoChanged"
                    },
                    "PhotoDataAdapter$FullImageJob": {
                        "run": "Lcom/android/gallery3d/app/PhotoDataAdapter$FullImageJob;->run"
                    },
                    "PhotoDataAdapter$ReloadTask": {
                        "run": "Lcom/android/gallery3d/app/PhotoDataAdapter$ReloadTask;->run"
                    },
                    "PhotoDataAdapter$ScreenNailJob": {
                        "run": "Lcom/android/gallery3d/app/PhotoDataAdapter$ScreenNailJob;->run"
                    },
                    "PhotoDataAdapter$UpdateContent": {
                        "call": "Lcom/android/gallery3d/app/PhotoDataAdapter$UpdateContent;->call"
                    },
                    "PhotoDataAdapter": {
                        "executeAndWait": "Lcom/android/gallery3d/app/PhotoDataAdapter;->executeAndWait",
                        "fireDataChange": "Lcom/android/gallery3d/app/PhotoDataAdapter;->fireDataChange",
                        "moveTo": "Lcom/android/gallery3d/app/PhotoDataAdapter;->moveTo",
                        "resume": "Lcom/android/gallery3d/app/PhotoDataAdapter;->resume",
                        "setCurrentPhoto": "Lcom/android/gallery3d/app/PhotoDataAdapter;->setCurrentPhoto",
                        "updateCurrentIndex": "Lcom/android/gallery3d/app/PhotoDataAdapter;->updateCurrentIndex"
                    },
                    "PhotoPage$1": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/app/PhotoPage$1;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/app/PhotoPage$1;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/app/PhotoPage$1;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/app/PhotoPage$1;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/app/PhotoPage$1;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/app/PhotoPage$1;->renderChild",
                        "render": "Lcom/android/gallery3d/app/PhotoPage$1;->render"
                    },
                    "PhotoPage$2": {
                        "onLoadingFinished": "Lcom/android/gallery3d/app/PhotoPage$2;->onLoadingFinished",
                        "onPhotoChanged": "Lcom/android/gallery3d/app/PhotoPage$2;->onPhotoChanged"
                    },
                    "PhotoPage$Model": {
                        "resume": "Lcom/android/gallery3d/app/PhotoPage$Model;->resume",
                        "setCurrentPhoto": "Lcom/android/gallery3d/app/PhotoPage$Model;->setCurrentPhoto"
                    },
                    "PhotoPage$PreparePhotoFallback": {
                        "onGLIdle": "Lcom/android/gallery3d/app/PhotoPage$PreparePhotoFallback;->onGLIdle"
                    },
                    "PhotoPage": {
                        "onCreateActionBar": "Lcom/android/gallery3d/app/PhotoPage;->onCreateActionBar",
                        "onItemSelected": "Lcom/android/gallery3d/app/PhotoPage;->onItemSelected",
                        "switchWithCaptureAnimation": "Lcom/android/gallery3d/app/PhotoPage;->switchWithCaptureAnimation",
                        "onBackPressed": "Lcom/android/gallery3d/app/PhotoPage;->onBackPressed",
                        "onCommitDeleteImage": "Lcom/android/gallery3d/app/PhotoPage;->onCommitDeleteImage",
                        "onCreate": "Lcom/android/gallery3d/app/PhotoPage;->onCreate",
                        "onDeleteImage": "Lcom/android/gallery3d/app/PhotoPage;->onDeleteImage",
                        "onPause": "Lcom/android/gallery3d/app/PhotoPage;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/PhotoPage;->onResume",
                        "onStateResult": "Lcom/android/gallery3d/app/PhotoPage;->onStateResult",
                        "onUpPressed": "Lcom/android/gallery3d/app/PhotoPage;->onUpPressed",
                        "resume": "Lcom/android/gallery3d/app/PhotoPage;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/PhotoPage;->setContentPane",
                        "setCurrentPhotoByIntent": "Lcom/android/gallery3d/app/PhotoPage;->setCurrentPhotoByIntent",
                        "updateCurrentPhoto": "Lcom/android/gallery3d/app/PhotoPage;->updateCurrentPhoto",
                        "updateShareURI": "Lcom/android/gallery3d/app/PhotoPage;->updateShareURI"
                    },
                    "PickerActivity": {
                        "onOptionsItemSelected": "Lcom/android/gallery3d/app/PickerActivity;->onOptionsItemSelected",
                        "onBackPressed": "Lcom/android/gallery3d/app/PickerActivity;->onBackPressed",
                        "onConfigurationChanged": "Lcom/android/gallery3d/app/PickerActivity;->onConfigurationChanged",
                        "onCreate": "Lcom/android/gallery3d/app/PickerActivity;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/PickerActivity;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/PickerActivity;->onResume"
                    },
                    "SlideshowDataAdapter$ReloadTask": {
                        "run": "Lcom/android/gallery3d/app/SlideshowDataAdapter$ReloadTask;->run"
                    },
                    "SlideshowDataAdapter$SlideshowSource": {
                        "reload": "Lcom/android/gallery3d/app/SlideshowDataAdapter$SlideshowSource;->reload"
                    },
                    "SlideshowDataAdapter": {
                        "loadItem": "Lcom/android/gallery3d/app/SlideshowDataAdapter;->loadItem"
                    },
                    "SlideshowPage$1": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/app/SlideshowPage$1;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/app/SlideshowPage$1;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/app/SlideshowPage$1;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/app/SlideshowPage$1;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/app/SlideshowPage$1;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/app/SlideshowPage$1;->renderChild",
                        "render": "Lcom/android/gallery3d/app/SlideshowPage$1;->render"
                    },
                    "SlideshowPage$SequentialSource": {
                        "reload": "Lcom/android/gallery3d/app/SlideshowPage$SequentialSource;->reload"
                    },
                    "SlideshowPage$ShuffleSource": {
                        "reload": "Lcom/android/gallery3d/app/SlideshowPage$ShuffleSource;->reload"
                    },
                    "SlideshowPage": {
                        "onCreateActionBar": "Lcom/android/gallery3d/app/SlideshowPage;->onCreateActionBar",
                        "onItemSelected": "Lcom/android/gallery3d/app/SlideshowPage;->onItemSelected",
                        "initializeViews": "Lcom/android/gallery3d/app/SlideshowPage;->initializeViews",
                        "onBackPressed": "Lcom/android/gallery3d/app/SlideshowPage;->onBackPressed",
                        "onCreate": "Lcom/android/gallery3d/app/SlideshowPage;->onCreate",
                        "onPause": "Lcom/android/gallery3d/app/SlideshowPage;->onPause",
                        "onResume": "Lcom/android/gallery3d/app/SlideshowPage;->onResume",
                        "onStateResult": "Lcom/android/gallery3d/app/SlideshowPage;->onStateResult",
                        "resume": "Lcom/android/gallery3d/app/SlideshowPage;->resume",
                        "setContentPane": "Lcom/android/gallery3d/app/SlideshowPage;->setContentPane",
                        "showPendingBitmap": "Lcom/android/gallery3d/app/SlideshowPage;->showPendingBitmap"
                    },
                    "StateManager": {
                        "createOptionsMenu": "Lcom/android/gallery3d/app/StateManager;->createOptionsMenu",
                        "itemSelected": "Lcom/android/gallery3d/app/StateManager;->itemSelected",
                        "finishState": "Lcom/android/gallery3d/app/StateManager;->finishState",
                        "notifyActivityResult": "Lcom/android/gallery3d/app/StateManager;->notifyActivityResult",
                        "onBackPressed": "Lcom/android/gallery3d/app/StateManager;->onBackPressed",
                        "pause": "Lcom/android/gallery3d/app/StateManager;->pause",
                        "restoreFromState": "Lcom/android/gallery3d/app/StateManager;->restoreFromState",
                        "resume": "Lcom/android/gallery3d/app/StateManager;->resume",
                        "startStateForResult": "Lcom/android/gallery3d/app/StateManager;->startStateForResult",
                        "startState": "Lcom/android/gallery3d/app/StateManager;->startState",
                        "switchState": "Lcom/android/gallery3d/app/StateManager;->switchState"
                    }
                },
                "data": {
                    "ClusterAlbum": {
                        "reload": "Lcom/android/gallery3d/data/ClusterAlbum;->reload"
                    },
                    "ClusterAlbumSet": {
                        "reload": "Lcom/android/gallery3d/data/ClusterAlbumSet;->reload",
                        "updateClusters": "Lcom/android/gallery3d/data/ClusterAlbumSet;->updateClusters"
                    },
                    "Clustering": {
                        "run": "Lcom/android/gallery3d/data/Clustering;->run"
                    },
                    "ComboAlbum": {
                        "reload": "Lcom/android/gallery3d/data/ComboAlbum;->reload"
                    },
                    "ComboAlbumSet": {
                        "reload": "Lcom/android/gallery3d/data/ComboAlbumSet;->reload"
                    },
                    "DownloadCache$DownloadTask": {
                        "run": "Lcom/android/gallery3d/data/DownloadCache$DownloadTask;->run"
                    },
                    "DownloadUtils": {
                        "download": "Lcom/android/gallery3d/data/DownloadUtils;->download",
                        "requestDownload": "Lcom/android/gallery3d/data/DownloadUtils;->requestDownload"
                    },
                    "FilterDeleteSet": {
                        "reload": "Lcom/android/gallery3d/data/FilterDeleteSet;->reload"
                    },
                    "FilterTypeSet": {
                        "reload": "Lcom/android/gallery3d/data/FilterTypeSet;->reload",
                        "updateData": "Lcom/android/gallery3d/data/FilterTypeSet;->updateData"
                    },
                    "LocalAlbumSet": {
                        "reload": "Lcom/android/gallery3d/data/LocalAlbumSet;->reload"
                    },
                    "LocalMergeAlbum": {
                        "reload": "Lcom/android/gallery3d/data/LocalMergeAlbum;->reload"
                    },
                    "LocationClustering": {
                        "generateName": "Lcom/android/gallery3d/data/LocationClustering;->generateName",
                        "run": "Lcom/android/gallery3d/data/LocationClustering;->run"
                    },
                    "MediaSet": {
                        "reload": "Lcom/android/gallery3d/data/MediaSet;->reload"
                    },
                    "MtpDeviceSet": {
                        "reload": "Lcom/android/gallery3d/data/MtpDeviceSet;->reload"
                    },
                    "SingleItemAlbum": {
                        "getName": "Lcom/android/gallery3d/data/SingleItemAlbum;->getName"
                    },
                    "TagClustering": {
                        "getCluster": "Lcom/android/gallery3d/data/TagClustering;->getCluster"
                    }
                },
                "exif": {
                    "CountedDataInputStream": {
                        "readUnsignedInt": "Lcom/android/gallery3d/exif/CountedDataInputStream;->readUnsignedInt"
                    },
                    "ExifTag": {
                        "getLong": "Lcom/android/gallery3d/exif/ExifTag;->getLong"
                    }
                },
                "filtershow": {
                    "cache": {
                        "DirectPresetCache": {
                            "access$000": "Lcom/android/gallery3d/filtershow/cache/DirectPresetCache;->access$000"
                        }
                    },
                    "provider": {
                        "SharedImageProvider": "Lcom/android/gallery3d/filtershow/provider;->SharedImageProvider"
                    }
                },
                "gadget": {
                    "LocalPhotoSource": {
                        "getImage": "Lcom/android/gallery3d/gadget/LocalPhotoSource;->getImage"
                    },
                    "MediaSetSource": {
                        "getImage": "Lcom/android/gallery3d/gadget/MediaSetSource;->getImage",
                        "reload": "Lcom/android/gallery3d/gadget/MediaSetSource;->reload"
                    },
                    "WidgetService$PhotoRVFactory": {
                        "getViewAt": "Lcom/android/gallery3d/gadget/WidgetService$PhotoRVFactory;->getViewAt",
                        "onDataSetChanged": "Lcom/android/gallery3d/gadget/WidgetService$PhotoRVFactory;->onDataSetChanged"
                    },
                    "WidgetSource": {
                        "getImage": "Lcom/android/gallery3d/gadget/WidgetSource;->getImage",
                        "reload": "Lcom/android/gallery3d/gadget/WidgetSource;->reload"
                    },
                    "WidgetUtils": {
                        "createWidgetBitmap": "Lcom/android/gallery3d/gadget/WidgetUtils;->createWidgetBitmap"
                    }
                },
                "ui": {
                    "ActionModeHandler$1": {
                        "onMenuItemClick": "Lcom/android/gallery3d/ui/ActionModeHandler$1;->onMenuItemClick"
                    },
                    "ActionModeHandler$2": {
                        "onShareTargetSelected": "Lcom/android/gallery3d/ui/ActionModeHandler$2;->onShareTargetSelected"
                    },
                    "ActionModeHandler$3": {
                        "run": "Lcom/android/gallery3d/ui/ActionModeHandler$3;->run"
                    },
                    "ActionModeHandler$ActionModeListener": {
                        "onActionItemClicked": "Lcom/android/gallery3d/ui/ActionModeHandler$ActionModeListener;->onActionItemClicked"
                    },
                    "ActionModeHandler": {
                        "computeSharingIntent": "Lcom/android/gallery3d/ui/ActionModeHandler;->computeSharingIntent",
                        "onActionItemClicked": "Lcom/android/gallery3d/ui/ActionModeHandler;->onActionItemClicked",
                        "onDestroyActionMode": "Lcom/android/gallery3d/ui/ActionModeHandler;->onDestroyActionMode"
                    },
                    "AlbumSetSlidingWindow": {
                        "getLoadingTexture": "Lcom/android/gallery3d/ui/AlbumSetSlidingWindow;->getLoadingTexture"
                    },
                    "CropView$FaceHighlightView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->dispatchTouchEvent",
                        "removeComponent": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/CropView$FaceHighlightView;->render"
                    },
                    "CropView$HighlightRectangle": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->dispatchTouchEvent",
                        "removeComponent": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/CropView$HighlightRectangle;->render"
                    },
                    "CropView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/CropView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/CropView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/CropView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/CropView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/CropView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/CropView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/CropView;->render"
                    },
                    "DetailsAddressResolver$AddressLookupJob": {
                        "run": "Lcom/android/gallery3d/ui/DetailsAddressResolver$AddressLookupJob;->run"
                    },
                    "DownUpDetector$DownUpListener": {
                        "onDown": "Lcom/android/gallery3d/ui/DownUpDetector$DownUpListener;->onDown",
                        "onUp": "Lcom/android/gallery3d/ui/DownUpDetector$DownUpListener;->onUp"
                    },
                    "DownUpDetector": {
                        "onTouchEvent": "Lcom/android/gallery3d/ui/DownUpDetector;->onTouchEvent",
                        "setState": "Lcom/android/gallery3d/ui/DownUpDetector;->setState"
                    },
                    "EdgeView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/EdgeView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/EdgeView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/EdgeView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/EdgeView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/EdgeView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/EdgeView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/EdgeView;->render"
                    },
                    "GestureRecognizer$Listener": {
                        "onFling": "Lcom/android/gallery3d/ui/GestureRecognizer$Listener;->onFling",
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/GestureRecognizer$Listener;->onSingleTapUp",
                        "onDown": "Lcom/android/gallery3d/ui/GestureRecognizer$Listener;->onDown",
                        "onUp": "Lcom/android/gallery3d/ui/GestureRecognizer$Listener;->onUp"
                    },
                    "GestureRecognizer$MyDownUpListener": {
                        "onDown": "Lcom/android/gallery3d/ui/GestureRecognizer$MyDownUpListener;->onDown",
                        "onUp": "Lcom/android/gallery3d/ui/GestureRecognizer$MyDownUpListener;->onUp"
                    },
                    "GestureRecognizer$MyGestureListener": {
                        "onFling": "Lcom/android/gallery3d/ui/GestureRecognizer$MyGestureListener;->onFling",
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/GestureRecognizer$MyGestureListener;->onSingleTapUp"
                    },
                    "GestureRecognizer": {
                        "onTouchEvent": "Lcom/android/gallery3d/ui/GestureRecognizer;->onTouchEvent"
                    },
                    "GLRoot$OnGLIdleListener": {
                        "onGLIdle": "Lcom/android/gallery3d/ui/GLRoot$OnGLIdleListener;->onGLIdle"
                    },
                    "GLRootView$IdleRunner": {
                        "run": "Lcom/android/gallery3d/ui/GLRootView$IdleRunner;->run"
                    },
                    "GLRootView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/GLRootView;->dispatchTouchEvent",
                        "onDrawFrame": "Lcom/android/gallery3d/ui/GLRootView;->onDrawFrame",
                        "onDrawFrameLocked": "Lcom/android/gallery3d/ui/GLRootView;->onDrawFrameLocked",
                        "setContentPane": "Lcom/android/gallery3d/ui/GLRootView;->setContentPane"
                    },
                    "GLRoot": {
                        "setContentPane": "Lcom/android/gallery3d/ui/GLRoot;->setContentPane"
                    },
                    "GLView$OnClickListener": {
                        "onClick": "Lcom/android/gallery3d/ui/GLView$OnClickListener;->onClick"
                    },
                    "GLView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/GLView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/GLView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/GLView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/GLView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/GLView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/GLView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/GLView;->render"
                    },
                    "ImportCompleteListener": {
                        "goToImportedAlbum": "Lcom/android/gallery3d/ui/ImportCompleteListener;->goToImportedAlbum",
                        "onProgressComplete": "Lcom/android/gallery3d/ui/ImportCompleteListener;->onProgressComplete"
                    },
                    "MenuExecutor$ConfirmDialogListener": {
                        "onClick": "Lcom/android/gallery3d/ui/MenuExecutor$ConfirmDialogListener;->onClick"
                    },
                    "MenuExecutor$MediaOperation": {
                        "run": "Lcom/android/gallery3d/ui/MenuExecutor$MediaOperation;->run"
                    },
                    "MenuExecutor$ProgressListener": {
                        "onProgressComplete": "Lcom/android/gallery3d/ui/MenuExecutor$ProgressListener;->onProgressComplete"
                    },
                    "MenuExecutor": {
                        "onMenuClicked": "Lcom/android/gallery3d/ui/MenuExecutor;->onMenuClicked",
                        "onProgressComplete": "Lcom/android/gallery3d/ui/MenuExecutor;->onProgressComplete"
                    },
                    "PhotoView$1": {
                        "onClick": "Lcom/android/gallery3d/ui/PhotoView$1;->onClick"
                    },
                    "PhotoView$FullPicture": {
                        "draw": "Lcom/android/gallery3d/ui/PhotoView$FullPicture;->draw",
                        "drawTileView": "Lcom/android/gallery3d/ui/PhotoView$FullPicture;->drawTileView"
                    },
                    "PhotoView$Listener": {
                        "onCommitDeleteImage": "Lcom/android/gallery3d/ui/PhotoView$Listener;->onCommitDeleteImage",
                        "onDeleteImage": "Lcom/android/gallery3d/ui/PhotoView$Listener;->onDeleteImage"
                    },
                    "PhotoView$Model": {
                        "moveTo": "Lcom/android/gallery3d/ui/PhotoView$Model;->moveTo"
                    },
                    "PhotoView$MyGestureListener": {
                        "flingImages": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->flingImages",
                        "onFling": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->onFling",
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->onSingleTapUp",
                        "deleteAfterAnimation": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->deleteAfterAnimation",
                        "onDown": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->onDown",
                        "onUp": "Lcom/android/gallery3d/ui/PhotoView$MyGestureListener;->onUp"
                    },
                    "PhotoView$Picture": {
                        "draw": "Lcom/android/gallery3d/ui/PhotoView$Picture;->draw"
                    },
                    "PhotoView$ScreenNailPicture": {
                        "draw": "Lcom/android/gallery3d/ui/PhotoView$ScreenNailPicture;->draw"
                    },
                    "PhotoView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/PhotoView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/PhotoView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/PhotoView;->removeComponent",
                        "slideToNextPicture": "Lcom/android/gallery3d/ui/PhotoView;->slideToNextPicture",
                        "slideToPrevPicture": "Lcom/android/gallery3d/ui/PhotoView;->slideToPrevPicture",
                        "snapToNeighborImage": "Lcom/android/gallery3d/ui/PhotoView;->snapToNeighborImage",
                        "swipeImages": "Lcom/android/gallery3d/ui/PhotoView;->swipeImages",
                        "switchWithCaptureAnimation": "Lcom/android/gallery3d/ui/PhotoView;->switchWithCaptureAnimation",
                        "switchWithCaptureAnimationLocked": "Lcom/android/gallery3d/ui/PhotoView;->switchWithCaptureAnimationLocked",
                        "buildFallbackEffect": "Lcom/android/gallery3d/ui/PhotoView;->buildFallbackEffect",
                        "captureAnimationDone": "Lcom/android/gallery3d/ui/PhotoView;->captureAnimationDone",
                        "checkHideUndoBar": "Lcom/android/gallery3d/ui/PhotoView;->checkHideUndoBar",
                        "hideUndoBar": "Lcom/android/gallery3d/ui/PhotoView;->hideUndoBar",
                        "notifyDataChange": "Lcom/android/gallery3d/ui/PhotoView;->notifyDataChange",
                        "pause": "Lcom/android/gallery3d/ui/PhotoView;->pause",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/PhotoView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/PhotoView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/PhotoView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/PhotoView;->render",
                        "resetToFirstPicture": "Lcom/android/gallery3d/ui/PhotoView;->resetToFirstPicture",
                        "snapback": "Lcom/android/gallery3d/ui/PhotoView;->snapback",
                        "switchFocus": "Lcom/android/gallery3d/ui/PhotoView;->switchFocus",
                        "switchToFirstImage": "Lcom/android/gallery3d/ui/PhotoView;->switchToFirstImage",
                        "switchToHitPicture": "Lcom/android/gallery3d/ui/PhotoView;->switchToHitPicture",
                        "switchToNextImage": "Lcom/android/gallery3d/ui/PhotoView;->switchToNextImage",
                        "switchToPrevImage": "Lcom/android/gallery3d/ui/PhotoView;->switchToPrevImage"
                    },
                    "ScreenNail": {
                        "draw": "Lcom/android/gallery3d/ui/ScreenNail;->draw"
                    },
                    "ScrollBarView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/ScrollBarView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/ScrollBarView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/ScrollBarView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/ScrollBarView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/ScrollBarView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/ScrollBarView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/ScrollBarView;->render"
                    },
                    "SelectionManager$SelectionListener": {
                        "onSelectionModeChange": "Lcom/android/gallery3d/ui/SelectionManager$SelectionListener;->onSelectionModeChange"
                    },
                    "SelectionManager": {
                        "deSelectAll": "Lcom/android/gallery3d/ui/SelectionManager;->deSelectAll",
                        "enterSelectionMode": "Lcom/android/gallery3d/ui/SelectionManager;->enterSelectionMode",
                        "leaveSelectionMode": "Lcom/android/gallery3d/ui/SelectionManager;->leaveSelectionMode",
                        "selectAll": "Lcom/android/gallery3d/ui/SelectionManager;->selectAll",
                        "toggle": "Lcom/android/gallery3d/ui/SelectionManager;->toggle"
                    },
                    "SlideshowView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/SlideshowView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/SlideshowView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/SlideshowView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/SlideshowView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/SlideshowView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/SlideshowView;->renderChild"
                    },
                    "SlotView$Listener": {
                        "onLongTap": "Lcom/android/gallery3d/ui/SlotView$Listener;->onLongTap",
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/SlotView$Listener;->onSingleTapUp"
                    },
                    "SlotView$MyGestureListener": {
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/SlotView$MyGestureListener;->onSingleTapUp",
                        "onLongPress": "Lcom/android/gallery3d/ui/SlotView$MyGestureListener;->onLongPress"
                    },
                    "SlotView$SimpleListener": {
                        "onLongTap": "Lcom/android/gallery3d/ui/SlotView$SimpleListener;->onLongTap",
                        "onSingleTapUp": "Lcom/android/gallery3d/ui/SlotView$SimpleListener;->onSingleTapUp"
                    },
                    "SlotView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/SlotView;->dispatchTouchEvent",
                        "removeComponent": "Lcom/android/gallery3d/ui/SlotView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/SlotView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/SlotView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/SlotView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/SlotView;->render"
                    },
                    "SurfaceTextureScreenNail": {
                        "draw": "Lcom/android/gallery3d/ui/SurfaceTextureScreenNail;->draw"
                    },
                    "TileImageView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/TileImageView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/TileImageView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/TileImageView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/TileImageView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/TileImageView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/TileImageView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/TileImageView;->render"
                    },
                    "UndoBarView": {
                        "dispatchTouchEvent": "Lcom/android/gallery3d/ui/UndoBarView;->dispatchTouchEvent",
                        "onTouch": "Lcom/android/gallery3d/ui/UndoBarView;->onTouch",
                        "removeComponent": "Lcom/android/gallery3d/ui/UndoBarView;->removeComponent",
                        "removeAllComponents": "Lcom/android/gallery3d/ui/UndoBarView;->removeAllComponents",
                        "removeOneComponent": "Lcom/android/gallery3d/ui/UndoBarView;->removeOneComponent",
                        "renderChild": "Lcom/android/gallery3d/ui/UndoBarView;->renderChild",
                        "render": "Lcom/android/gallery3d/ui/UndoBarView;->render"
                    }
                },
                "util": {
                    "JobLimiter$JobWrapper": {
                        "run": "Lcom/android/gallery3d/util/JobLimiter$JobWrapper;->run"
                    },
                    "ReverseGeocoder": {
                        "lookupAddress": "Lcom/android/gallery3d/util/ReverseGeocoder;->lookupAddress",
                        "computeAddress": "Lcom/android/gallery3d/util/ReverseGeocoder;->computeAddress"
                    },
                    "ThreadPool$Job": {
                        "run": "Lcom/android/gallery3d/util/ThreadPool$Job;->run"
                    },
                    "ThreadPool$Worker": {
                        "run": "Lcom/android/gallery3d/util/ThreadPool$Worker;->run"
                    }
                },
                "provider": {
                    "GalleryProvider": "Lcom/android/gallery3d/provider;->GalleryProvider"
                }
            },
            "htmlviewer": {
                "HTMLViewerActivity": {
                    "onCreate": "Lcom/android/htmlviewer/HTMLViewerActivity;->onCreate"
                }
            },
            "i18n": {
                "phonenumbers": {
                    "Phonemetadata$PhoneMetadata": {
                        "setPreferredInternationalPrefix": "Lcom/android/i18n/phonenumbers/Phonemetadata$PhoneMetadata;->setPreferredInternationalPrefix"
                    }
                }
            },
            "inputmethod": {
                "accessibility": {
                    "AccessibilityEntityProvider": {
                        "performActionForKey": "Lcom/android/inputmethod/accessibility/AccessibilityEntityProvider;->performActionForKey",
                        "performAction": "Lcom/android/inputmethod/accessibility/AccessibilityEntityProvider;->performAction",
                        "simulateKeyPress": "Lcom/android/inputmethod/accessibility/AccessibilityEntityProvider;->simulateKeyPress"
                    },
                    "AccessibleKeyboardViewProxy": {
                        "dispatchHoverEvent": "Lcom/android/inputmethod/accessibility/AccessibleKeyboardViewProxy;->dispatchHoverEvent",
                        "onHoverKey": "Lcom/android/inputmethod/accessibility/AccessibleKeyboardViewProxy;->onHoverKey",
                        "onTransitionKey": "Lcom/android/inputmethod/accessibility/AccessibleKeyboardViewProxy;->onTransitionKey"
                    }
                },
                "keyboard": {
                    "internal": {
                        "KeyboardState$SwitchActions": {
                            "hapticAndAudioFeedback": "Lcom/android/inputmethod/keyboard/internal/KeyboardState$SwitchActions;->hapticAndAudioFeedback",
                            "startLongPressTimer": "Lcom/android/inputmethod/keyboard/internal/KeyboardState$SwitchActions;->startLongPressTimer"
                        },
                        "KeyboardState": {
                            "onLongPressTimeout": "Lcom/android/inputmethod/keyboard/internal/KeyboardState;->onLongPressTimeout",
                            "onPressKey": "Lcom/android/inputmethod/keyboard/internal/KeyboardState;->onPressKey",
                            "onPressShift": "Lcom/android/inputmethod/keyboard/internal/KeyboardState;->onPressShift"
                        },
                        "PointerTrackerQueue": {
                            "releaseAllPointersExcept": "Lcom/android/inputmethod/keyboard/internal/PointerTrackerQueue;->releaseAllPointersExcept",
                            "releaseAllPointers": "Lcom/android/inputmethod/keyboard/internal/PointerTrackerQueue;->releaseAllPointers",
                            "releaseAllPointersOlderThan": "Lcom/android/inputmethod/keyboard/internal/PointerTrackerQueue;->releaseAllPointersOlderThan"
                        }
                    },
                    "KeyboardActionListener$Adapter": {
                        "onCustomRequest": "Lcom/android/inputmethod/keyboard/KeyboardActionListener$Adapter;->onCustomRequest",
                        "onCodeInput": "Lcom/android/inputmethod/keyboard/KeyboardActionListener$Adapter;->onCodeInput",
                        "onPressKey": "Lcom/android/inputmethod/keyboard/KeyboardActionListener$Adapter;->onPressKey",
                        "onTextInput": "Lcom/android/inputmethod/keyboard/KeyboardActionListener$Adapter;->onTextInput"
                    },
                    "KeyboardActionListener": {
                        "onCustomRequest": "Lcom/android/inputmethod/keyboard/KeyboardActionListener;->onCustomRequest",
                        "onCodeInput": "Lcom/android/inputmethod/keyboard/KeyboardActionListener;->onCodeInput",
                        "onPressKey": "Lcom/android/inputmethod/keyboard/KeyboardActionListener;->onPressKey",
                        "onTextInput": "Lcom/android/inputmethod/keyboard/KeyboardActionListener;->onTextInput"
                    },
                    "KeyboardSwitcher": {
                        "hapticAndAudioFeedback": "Lcom/android/inputmethod/keyboard/KeyboardSwitcher;->hapticAndAudioFeedback",
                        "onLongPressTimeout": "Lcom/android/inputmethod/keyboard/KeyboardSwitcher;->onLongPressTimeout",
                        "onPressKey": "Lcom/android/inputmethod/keyboard/KeyboardSwitcher;->onPressKey",
                        "startLongPressTimer": "Lcom/android/inputmethod/keyboard/KeyboardSwitcher;->startLongPressTimer"
                    },
                    "KeyboardView": {
                        "dispatchHoverEvent": "Lcom/android/inputmethod/keyboard/KeyboardView;->dispatchHoverEvent",
                        "onTouchEvent": "Lcom/android/inputmethod/keyboard/KeyboardView;->onTouchEvent"
                    },
                    "LatinKeyboardView$KeyTimerHandler": {
                        "startKeyRepeatTimer": "Lcom/android/inputmethod/keyboard/LatinKeyboardView$KeyTimerHandler;->startKeyRepeatTimer",
                        "startLongPressTimer": "Lcom/android/inputmethod/keyboard/LatinKeyboardView$KeyTimerHandler;->startLongPressTimer"
                    },
                    "LatinKeyboardView": {
                        "dispatchHoverEvent": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->dispatchHoverEvent",
                        "invokeCustomRequest": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->invokeCustomRequest",
                        "onLongPress": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->onLongPress",
                        "onTouchEvent": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->onTouchEvent",
                        "openMoreKeysKeyboardIfRequired": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->openMoreKeysKeyboardIfRequired",
                        "openMoreKeysPanel": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->openMoreKeysPanel",
                        "processMotionEvent": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->processMotionEvent",
                        "invokeCodeInput": "Lcom/android/inputmethod/keyboard/LatinKeyboardView;->invokeCodeInput"
                    },
                    "MoreKeysKeyboardView$1": {
                        "onCustomRequest": "Lcom/android/inputmethod/keyboard/MoreKeysKeyboardView$1;->onCustomRequest",
                        "onCodeInput": "Lcom/android/inputmethod/keyboard/MoreKeysKeyboardView$1;->onCodeInput",
                        "onPressKey": "Lcom/android/inputmethod/keyboard/MoreKeysKeyboardView$1;->onPressKey",
                        "onTextInput": "Lcom/android/inputmethod/keyboard/MoreKeysKeyboardView$1;->onTextInput"
                    },
                    "PointerTracker$TimerProxy": {
                        "startKeyRepeatTimer": "Lcom/android/inputmethod/keyboard/PointerTracker$TimerProxy;->startKeyRepeatTimer",
                        "startLongPressTimer": "Lcom/android/inputmethod/keyboard/PointerTracker$TimerProxy;->startLongPressTimer"
                    },
                    "PointerTracker": {
                        "callListenerOnPressAndCheckKeyboardLayoutChange": "Lcom/android/inputmethod/keyboard/PointerTracker;->callListenerOnPressAndCheckKeyboardLayoutChange",
                        "callListenerOnCodeInput": "Lcom/android/inputmethod/keyboard/PointerTracker;->callListenerOnCodeInput",
                        "detectAndSendKey": "Lcom/android/inputmethod/keyboard/PointerTracker;->detectAndSendKey",
                        "onCancelEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->onCancelEvent",
                        "onDownEventInternal": "Lcom/android/inputmethod/keyboard/PointerTracker;->onDownEventInternal",
                        "onDownEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->onDownEvent",
                        "onMoveEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->onMoveEvent",
                        "onPhantomUpEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->onPhantomUpEvent",
                        "onRegisterKey": "Lcom/android/inputmethod/keyboard/PointerTracker;->onRegisterKey",
                        "onShowMoreKeysPanel": "Lcom/android/inputmethod/keyboard/PointerTracker;->onShowMoreKeysPanel",
                        "onUpEventInternal": "Lcom/android/inputmethod/keyboard/PointerTracker;->onUpEventInternal",
                        "onUpEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->onUpEvent",
                        "processMotionEvent": "Lcom/android/inputmethod/keyboard/PointerTracker;->processMotionEvent",
                        "startLongPressTimer": "Lcom/android/inputmethod/keyboard/PointerTracker;->startLongPressTimer",
                        "startRepeatKey": "Lcom/android/inputmethod/keyboard/PointerTracker;->startRepeatKey"
                    },
                    "SuddenJumpingTouchEventHandler$ProcessMotionEvent": {
                        "processMotionEvent": "Lcom/android/inputmethod/keyboard/SuddenJumpingTouchEventHandler$ProcessMotionEvent;->processMotionEvent"
                    },
                    "SuddenJumpingTouchEventHandler": {
                        "handleSuddenJumping": "Lcom/android/inputmethod/keyboard/SuddenJumpingTouchEventHandler;->handleSuddenJumping",
                        "onTouchEvent": "Lcom/android/inputmethod/keyboard/SuddenJumpingTouchEventHandler;->onTouchEvent"
                    }
                },
                "latin": {
                    "AudioAndHapticFeedbackManager": {
                        "hapticAndAudioFeedback": "Lcom/android/inputmethod/latin/AudioAndHapticFeedbackManager;->hapticAndAudioFeedback",
                        "vibrate": "Lcom/android/inputmethod/latin/AudioAndHapticFeedbackManager;->vibrate"
                    },
                    "AutoCorrection": {
                        "allowsToBeAutoCorrected": "Lcom/android/inputmethod/latin/AutoCorrection;->allowsToBeAutoCorrected",
                        "hasAutoCorrectionForConsideredWord": "Lcom/android/inputmethod/latin/AutoCorrection;->hasAutoCorrectionForConsideredWord",
                        "isValidWord": "Lcom/android/inputmethod/latin/AutoCorrection;->isValidWord",
                        "computeAutoCorrectionWord": "Lcom/android/inputmethod/latin/AutoCorrection;->computeAutoCorrectionWord"
                    },
                    "ContactsBinaryDictionary": {
                        "hasContentChanged": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->hasContentChanged",
                        "isValidWord": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->isValidWord",
                        "getContactCount": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->getContactCount",
                        "asyncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->asyncReloadDictionaryIfRequired",
                        "generateBinaryDictionary": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->generateBinaryDictionary",
                        "getBigrams": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->loadDictionaryAsync",
                        "syncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->syncReloadDictionaryIfRequired",
                        "syncReloadDictionaryInternal": "Lcom/android/inputmethod/latin/ContactsBinaryDictionary;->syncReloadDictionaryInternal"
                    },
                    "ContactsDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/ContactsDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ContactsDictionary;->reloadDictionaryIfRequired",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ContactsDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/ContactsDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/ContactsDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/ContactsDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/ContactsDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/ContactsDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/ContactsDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "Dictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/Dictionary;->isValidWord",
                        "getBigrams": "Lcom/android/inputmethod/latin/Dictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/Dictionary;->getWords"
                    },
                    "DictionaryCollection": {
                        "isValidWord": "Lcom/android/inputmethod/latin/DictionaryCollection;->isValidWord",
                        "getBigrams": "Lcom/android/inputmethod/latin/DictionaryCollection;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/DictionaryCollection;->getWords"
                    },
                    "ExpandableBinaryDictionary$AsyncReloadDictionaryTask": {
                        "run": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary$AsyncReloadDictionaryTask;->run"
                    },
                    "ExpandableBinaryDictionary": {
                        "hasContentChanged": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->hasContentChanged",
                        "isValidWord": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->isValidWord",
                        "asyncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->asyncReloadDictionaryIfRequired",
                        "generateBinaryDictionary": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->generateBinaryDictionary",
                        "getBigrams": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->getWords",
                        "loadDictionary": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->loadDictionaryAsync",
                        "syncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->syncReloadDictionaryIfRequired",
                        "syncReloadDictionaryInternal": "Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;->syncReloadDictionaryInternal"
                    },
                    "ExpandableDictionary$LoadDictionaryTask": {
                        "run": "Lcom/android/inputmethod/latin/ExpandableDictionary$LoadDictionaryTask;->run"
                    },
                    "ExpandableDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/ExpandableDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ExpandableDictionary;->reloadDictionaryIfRequired",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/ExpandableDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/ExpandableDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/ExpandableDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/ExpandableDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/ExpandableDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/ExpandableDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/ExpandableDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "LatinIME$3": {
                        "onClick": "Lcom/android/inputmethod/latin/LatinIME$3;->onClick"
                    },
                    "LatinIME$UIHandler": {
                        "onStartInputView": "Lcom/android/inputmethod/latin/LatinIME$UIHandler;->onStartInputView",
                        "postUpdateBigramPredictions": "Lcom/android/inputmethod/latin/LatinIME$UIHandler;->postUpdateBigramPredictions",
                        "postUpdateSuggestions": "Lcom/android/inputmethod/latin/LatinIME$UIHandler;->postUpdateSuggestions"
                    },
                    "LatinIME": {
                        "addWordToDictionary": "Lcom/android/inputmethod/latin/LatinIME;->addWordToDictionary",
                        "handleSeparator": "Lcom/android/inputmethod/latin/LatinIME;->handleSeparator",
                        "commitCurrentAutoCorrection": "Lcom/android/inputmethod/latin/LatinIME;->commitCurrentAutoCorrection",
                        "commitTyped": "Lcom/android/inputmethod/latin/LatinIME;->commitTyped",
                        "handleBackspace": "Lcom/android/inputmethod/latin/LatinIME;->handleBackspace",
                        "handleBackspaceWhileInBatchEdit": "Lcom/android/inputmethod/latin/LatinIME;->handleBackspaceWhileInBatchEdit",
                        "handleCharacter": "Lcom/android/inputmethod/latin/LatinIME;->handleCharacter",
                        "handleCharacterWhileInBatchEdit": "Lcom/android/inputmethod/latin/LatinIME;->handleCharacterWhileInBatchEdit",
                        "handleClose": "Lcom/android/inputmethod/latin/LatinIME;->handleClose",
                        "hapticAndAudioFeedback": "Lcom/android/inputmethod/latin/LatinIME;->hapticAndAudioFeedback",
                        "initSuggest": "Lcom/android/inputmethod/latin/LatinIME;->initSuggest",
                        "launchDebugSettings": "Lcom/android/inputmethod/latin/LatinIME;->launchDebugSettings",
                        "launchSettings": "Lcom/android/inputmethod/latin/LatinIME;->launchSettings",
                        "launchSettingsClass": "Lcom/android/inputmethod/latin/LatinIME;->launchSettingsClass",
                        "loadSettings": "Lcom/android/inputmethod/latin/LatinIME;->loadSettings",
                        "onCodeInput": "Lcom/android/inputmethod/latin/LatinIME;->onCodeInput",
                        "onConfigurationChanged": "Lcom/android/inputmethod/latin/LatinIME;->onConfigurationChanged",
                        "onCreate": "Lcom/android/inputmethod/latin/LatinIME;->onCreate",
                        "onCurrentInputMethodSubtypeChanged": "Lcom/android/inputmethod/latin/LatinIME;->onCurrentInputMethodSubtypeChanged",
                        "onPressKey": "Lcom/android/inputmethod/latin/LatinIME;->onPressKey",
                        "onRefreshKeyboard": "Lcom/android/inputmethod/latin/LatinIME;->onRefreshKeyboard",
                        "onStartInputView": "Lcom/android/inputmethod/latin/LatinIME;->onStartInputView",
                        "onStartInputViewInternal": "Lcom/android/inputmethod/latin/LatinIME;->onStartInputViewInternal",
                        "onTextInput": "Lcom/android/inputmethod/latin/LatinIME;->onTextInput",
                        "onUpdateSelection": "Lcom/android/inputmethod/latin/LatinIME;->onUpdateSelection",
                        "pickSuggestionManually": "Lcom/android/inputmethod/latin/LatinIME;->pickSuggestionManually",
                        "pickSuggestionManuallyWhileInBatchEdit": "Lcom/android/inputmethod/latin/LatinIME;->pickSuggestionManuallyWhileInBatchEdit",
                        "resetContactsDictionary": "Lcom/android/inputmethod/latin/LatinIME;->resetContactsDictionary",
                        "resetEntireInputState": "Lcom/android/inputmethod/latin/LatinIME;->resetEntireInputState",
                        "restartSuggestionsOnWordBeforeCursor": "Lcom/android/inputmethod/latin/LatinIME;->restartSuggestionsOnWordBeforeCursor",
                        "restartSuggestionsOnWordBeforeCursorIfAtEndOfWord": "Lcom/android/inputmethod/latin/LatinIME;->restartSuggestionsOnWordBeforeCursorIfAtEndOfWord",
                        "revertCommit": "Lcom/android/inputmethod/latin/LatinIME;->revertCommit",
                        "switchToKeyboardView": "Lcom/android/inputmethod/latin/LatinIME;->switchToKeyboardView",
                        "updateBigramPredictions": "Lcom/android/inputmethod/latin/LatinIME;->updateBigramPredictions",
                        "updateSuggestions": "Lcom/android/inputmethod/latin/LatinIME;->updateSuggestions"
                    },
                    "Settings$5": {
                        "onStopTrackingTouch": "Lcom/android/inputmethod/latin/Settings$5;->onStopTrackingTouch"
                    },
                    "spellcheck": {
                        "AndroidSpellCheckerService$AndroidSpellCheckerSession": {
                            "onGetSuggestions": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService$AndroidSpellCheckerSession;->onGetSuggestions",
                            "onGetSuggestionsMultiple": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService$AndroidSpellCheckerSession;->onGetSuggestionsMultiple"
                        },
                        "AndroidSpellCheckerService": {
                            "createDictAndProximity": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService;->createDictAndProximity",
                            "onCreate": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService;->onCreate",
                            "onSharedPreferenceChanged": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService;->onSharedPreferenceChanged",
                            "startUsingContactsDictionaryLocked": "Lcom/android/inputmethod/latin/spellcheck/AndroidSpellCheckerService;->startUsingContactsDictionaryLocked"
                        },
                        "DictionaryPool": {
                            "take": "Lcom/android/inputmethod/latin/spellcheck/DictionaryPool;->take",
                            "takeOrGetNull": "Lcom/android/inputmethod/latin/spellcheck/DictionaryPool;->takeOrGetNull"
                        }
                    },
                    "SubtypeSwitcher": {
                        "init": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->init",
                        "initialize": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->initialize",
                        "onConfigurationChanged": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->onConfigurationChanged",
                        "updateAllParameters": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->updateAllParameters",
                        "updateEnabledSubtypes": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->updateEnabledSubtypes",
                        "updateParametersOnStartInputView": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->updateParametersOnStartInputView",
                        "updateSubtype": "Lcom/android/inputmethod/latin/SubtypeSwitcher;->updateSubtype"
                    },
                    "Suggest": {
                        "getBigramPredictions": "Lcom/android/inputmethod/latin/Suggest;->getBigramPredictions",
                        "getSuggestedWords": "Lcom/android/inputmethod/latin/Suggest;->getSuggestedWords",
                        "getAllBigrams": "Lcom/android/inputmethod/latin/Suggest;->getAllBigrams",
                        "<init>": "Lcom/android/inputmethod/latin/Suggest;-><init>",
                        "initAsynchronously": "Lcom/android/inputmethod/latin/Suggest;->initAsynchronously",
                        "initWhitelistAndAutocorrectAndPool": "Lcom/android/inputmethod/latin/Suggest;->initWhitelistAndAutocorrectAndPool"
                    },
                    "suggestions": {
                        "MoreSuggestionsView$1": {
                            "onCustomRequest": "Lcom/android/inputmethod/latin/suggestions/MoreSuggestionsView$1;->onCustomRequest",
                            "onCodeInput": "Lcom/android/inputmethod/latin/suggestions/MoreSuggestionsView$1;->onCodeInput",
                            "onPressKey": "Lcom/android/inputmethod/latin/suggestions/MoreSuggestionsView$1;->onPressKey",
                            "onTextInput": "Lcom/android/inputmethod/latin/suggestions/MoreSuggestionsView$1;->onTextInput"
                        },
                        "MoreSuggestionsView": {
                            "onTouchEvent": "Lcom/android/inputmethod/latin/suggestions/MoreSuggestionsView;->onTouchEvent"
                        },
                        "SuggestionsView$2": {
                            "onCustomRequest": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$2;->onCustomRequest",
                            "onCodeInput": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$2;->onCodeInput",
                            "onPressKey": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$2;->onPressKey",
                            "onTextInput": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$2;->onTextInput"
                        },
                        "SuggestionsView$Listener": {
                            "addWordToDictionary": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$Listener;->addWordToDictionary",
                            "pickSuggestionManually": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView$Listener;->pickSuggestionManually"
                        },
                        "SuggestionsView": {
                            "dispatchTouchEvent": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView;->dispatchTouchEvent",
                            "addToDictionary": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView;->addToDictionary",
                            "onClick": "Lcom/android/inputmethod/latin/suggestions/SuggestionsView;->onClick"
                        }
                    },
                    "SynchronouslyLoadedContactsBinaryDictionary": {
                        "hasContentChanged": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->hasContentChanged",
                        "isValidWord": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->isValidWord",
                        "getContactCount": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->getContactCount",
                        "asyncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->asyncReloadDictionaryIfRequired",
                        "generateBinaryDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->generateBinaryDictionary",
                        "getBigrams": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->loadDictionaryAsync",
                        "syncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->syncReloadDictionaryIfRequired",
                        "syncReloadDictionaryInternal": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsBinaryDictionary;->syncReloadDictionaryInternal"
                    },
                    "SynchronouslyLoadedContactsDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->reloadDictionaryIfRequired",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/SynchronouslyLoadedContactsDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "SynchronouslyLoadedUserBinaryDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->isValidWord",
                        "asyncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->asyncReloadDictionaryIfRequired",
                        "generateBinaryDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->generateBinaryDictionary",
                        "getBigrams": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->loadDictionaryAsync",
                        "syncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->syncReloadDictionaryIfRequired",
                        "syncReloadDictionaryInternal": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserBinaryDictionary;->syncReloadDictionaryInternal"
                    },
                    "SynchronouslyLoadedUserDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->reloadDictionaryIfRequired",
                        "addWordToUserDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->addWordToUserDictionary",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/SynchronouslyLoadedUserDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "UserBinaryDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->isValidWord",
                        "asyncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->asyncReloadDictionaryIfRequired",
                        "generateBinaryDictionary": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->generateBinaryDictionary",
                        "getBigrams": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/UserBinaryDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->loadDictionaryAsync",
                        "syncReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->syncReloadDictionaryIfRequired",
                        "syncReloadDictionaryInternal": "Lcom/android/inputmethod/latin/UserBinaryDictionary;->syncReloadDictionaryInternal"
                    },
                    "UserDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/UserDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserDictionary;->reloadDictionaryIfRequired",
                        "addWordToUserDictionary": "Lcom/android/inputmethod/latin/UserDictionary;->addWordToUserDictionary",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/UserDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/UserDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/UserDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/UserDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/UserDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/UserDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "UserHistoryDictionary": {
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->reloadDictionaryIfRequired",
                        "getInstance": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->getInstance",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/UserHistoryDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->loadDictionary",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/UserHistoryDictionary;->startDictionaryLoadingTaskLocked"
                    },
                    "Utils$UsabilityStudyLogUtils$2": {
                        "run": "Lcom/android/inputmethod/latin/Utils$UsabilityStudyLogUtils$2;->run"
                    },
                    "VibratorUtils": {
                        "vibrate": "Lcom/android/inputmethod/latin/VibratorUtils;->vibrate"
                    },
                    "WhitelistDictionary": {
                        "isValidWord": "Lcom/android/inputmethod/latin/WhitelistDictionary;->isValidWord",
                        "reloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/WhitelistDictionary;->reloadDictionaryIfRequired",
                        "blockingReloadDictionaryIfRequired": "Lcom/android/inputmethod/latin/WhitelistDictionary;->blockingReloadDictionaryIfRequired",
                        "getBigrams": "Lcom/android/inputmethod/latin/WhitelistDictionary;->getBigrams",
                        "getWords": "Lcom/android/inputmethod/latin/WhitelistDictionary;->getWords",
                        "<init>": "Lcom/android/inputmethod/latin/WhitelistDictionary;-><init>",
                        "loadDictionary": "Lcom/android/inputmethod/latin/WhitelistDictionary;->loadDictionary",
                        "loadDictionaryAsync": "Lcom/android/inputmethod/latin/WhitelistDictionary;->loadDictionaryAsync",
                        "startDictionaryLoadingTaskLocked": "Lcom/android/inputmethod/latin/WhitelistDictionary;->startDictionaryLoadingTaskLocked"
                    }
                },
                "pinyin": {
                    "SkbContainer": {
                        "onTouch": "Lcom/android/inputmethod/pinyin/SkbContainer;->onTouch",
                        "onTouchEvent": "Lcom/android/inputmethod/pinyin/SkbContainer;->onTouchEvent"
                    },
                    "SoftKeyboardView": {
                        "onKeyMove": "Lcom/android/inputmethod/pinyin/SoftKeyboardView;->onKeyMove",
                        "onKeyPress": "Lcom/android/inputmethod/pinyin/SoftKeyboardView;->onKeyPress",
                        "tryVibrate": "Lcom/android/inputmethod/pinyin/SoftKeyboardView;->tryVibrate"
                    }
                }
            },
            "internal": {
                "app": {
                    "AlertActivity": {
                        "onCreate": "Lcom/android/internal/app/AlertActivity;->onCreate",
                        "onPause": "Lcom/android/internal/app/AlertActivity;->onPause",
                        "onStop": "Lcom/android/internal/app/AlertActivity;->onStop"
                    },
                    "ChooserActivity": {
                        "onCreate": "Lcom/android/internal/app/ChooserActivity;->onCreate",
                        "onStop": "Lcom/android/internal/app/ChooserActivity;->onStop"
                    },
                    "ExternalMediaFormatActivity": {
                        "onCreate": "Lcom/android/internal/app/ExternalMediaFormatActivity;->onCreate",
                        "onPause": "Lcom/android/internal/app/ExternalMediaFormatActivity;->onPause"
                    },
                    "HeavyWeightSwitcherActivity$1": {
                        "onClick": "Lcom/android/internal/app/HeavyWeightSwitcherActivity$1;->onClick"
                    },
                    "IBatteryStats$Stub$Proxy": {
                        "getStatistics": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->getStatistics",
                        "getAwakeTimeBattery": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->getAwakeTimeBattery",
                        "getAwakeTimePlugged": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->getAwakeTimePlugged",
                        "noteBluetoothOn": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->noteBluetoothOn",
                        "notePhoneOn": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->notePhoneOn",
                        "noteStopWakelockFromSource": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->noteStopWakelockFromSource",
                        "setBatteryState": "Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->setBatteryState"
                    },
                    "IBatteryStats$Stub": {
                        "onTransact": "Lcom/android/internal/app/IBatteryStats$Stub;->onTransact",
                        "getStatistics": "Lcom/android/internal/app/IBatteryStats$Stub;->getStatistics",
                        "getAwakeTimeBattery": "Lcom/android/internal/app/IBatteryStats$Stub;->getAwakeTimeBattery",
                        "getAwakeTimePlugged": "Lcom/android/internal/app/IBatteryStats$Stub;->getAwakeTimePlugged",
                        "noteBluetoothOn": "Lcom/android/internal/app/IBatteryStats$Stub;->noteBluetoothOn",
                        "setBatteryState": "Lcom/android/internal/app/IBatteryStats$Stub;->setBatteryState"
                    },
                    "IBatteryStats": {
                        "getStatistics": "Lcom/android/internal/app/IBatteryStats;->getStatistics",
                        "getAwakeTimeBattery": "Lcom/android/internal/app/IBatteryStats;->getAwakeTimeBattery",
                        "getAwakeTimePlugged": "Lcom/android/internal/app/IBatteryStats;->getAwakeTimePlugged",
                        "noteBluetoothOn": "Lcom/android/internal/app/IBatteryStats;->noteBluetoothOn",
                        "setBatteryState": "Lcom/android/internal/app/IBatteryStats;->setBatteryState"
                    },
                    "LocalePicker$LocaleSelectionListener": {
                        "onLocaleSelected": "Lcom/android/internal/app/LocalePicker$LocaleSelectionListener;->onLocaleSelected"
                    },
                    "LocalePicker": {
                        "onListItemClick": "Lcom/android/internal/app/LocalePicker;->onListItemClick",
                        "updateLocale": "Lcom/android/internal/app/LocalePicker;->updateLocale"
                    },
                    "NetInitiatedActivity": {
                        "onCreate": "Lcom/android/internal/app/NetInitiatedActivity;->onCreate",
                        "onPause": "Lcom/android/internal/app/NetInitiatedActivity;->onPause"
                    },
                    "ResolverActivity$1": {
                        "onHandleForceStop": "Lcom/android/internal/app/ResolverActivity$1;->onHandleForceStop",
                        "onPackageRemoved": "Lcom/android/internal/app/ResolverActivity$1;->onPackageRemoved",
                        "onReceive": "Lcom/android/internal/app/ResolverActivity$1;->onReceive"
                    },
                    "ResolverActivity": {
                        "onCreate": "Lcom/android/internal/app/ResolverActivity;->onCreate",
                        "onStop": "Lcom/android/internal/app/ResolverActivity;->onStop"
                    }
                },
                "content": {
                    "PackageMonitor": {
                        "onHandleForceStop": "Lcom/android/internal/content/PackageMonitor;->onHandleForceStop",
                        "onPackageChanged": "Lcom/android/internal/content/PackageMonitor;->onPackageChanged",
                        "onPackageRemoved": "Lcom/android/internal/content/PackageMonitor;->onPackageRemoved",
                        "onReceive": "Lcom/android/internal/content/PackageMonitor;->onReceive",
                        "onSomePackagesChanged": "Lcom/android/internal/content/PackageMonitor;->onSomePackagesChanged"
                    }
                },
                "location": {
                    "GpsNetInitiatedHandler": {
                        "handleNiNotification": "Lcom/android/internal/location/GpsNetInitiatedHandler;->handleNiNotification",
                        "setNiNotification": "Lcom/android/internal/location/GpsNetInitiatedHandler;->setNiNotification",
                        "getDialogTitle": "Lcom/android/internal/location/GpsNetInitiatedHandler;->getDialogTitle"
                    },
                    "DummyLocationProvider": {
                        "getAccuracy": "Lcom/android/internal/location/DummyLocationProvider;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/internal/location/DummyLocationProvider;->getPowerRequirement"
                    },
                    "GpsLocationProvider": {
                        "getGpsStatusProvider": "Lcom/android/internal/location/GpsLocationProvider;->getGpsStatusProvider",
                        "getNetInitiatedListener": "Lcom/android/internal/location/GpsLocationProvider;->getNetInitiatedListener",
                        "isEnabled": "Lcom/android/internal/location/GpsLocationProvider;->isEnabled",
                        "isSupported": "Lcom/android/internal/location/GpsLocationProvider;->isSupported",
                        "getAccuracy": "Lcom/android/internal/location/GpsLocationProvider;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/internal/location/GpsLocationProvider;->getPowerRequirement",
                        "getStatus": "Lcom/android/internal/location/GpsLocationProvider;->getStatus",
                        "getStatusUpdateTime": "Lcom/android/internal/location/GpsLocationProvider;->getStatusUpdateTime"
                    },
                    "LocationProviderProxy": {
                        "isDead": "Lcom/android/internal/location/LocationProviderProxy;->isDead",
                        "isEnabled": "Lcom/android/internal/location/LocationProviderProxy;->isEnabled",
                        "isLocationTracking": "Lcom/android/internal/location/LocationProviderProxy;->isLocationTracking",
                        "getAccuracy": "Lcom/android/internal/location/LocationProviderProxy;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/internal/location/LocationProviderProxy;->getPowerRequirement",
                        "getStatus": "Lcom/android/internal/location/LocationProviderProxy;->getStatus",
                        "getName": "Lcom/android/internal/location/LocationProviderProxy;->getName",
                        "getMinTime": "Lcom/android/internal/location/LocationProviderProxy;->getMinTime",
                        "getStatusUpdateTime": "Lcom/android/internal/location/LocationProviderProxy;->getStatusUpdateTime"
                    }
                },
                "os": {
                    "BatteryStatsImpl": {
                        "getBluetoothPingCount": "Lcom/android/internal/os/BatteryStatsImpl;->getBluetoothPingCount",
                        "getCurrentBluetoothPingCount": "Lcom/android/internal/os/BatteryStatsImpl;->getCurrentBluetoothPingCount",
                        "getRadioDataUptimeMs": "Lcom/android/internal/os/BatteryStatsImpl;->getRadioDataUptimeMs",
                        "doPlugLocked": "Lcom/android/internal/os/BatteryStatsImpl;->doPlugLocked",
                        "doUnplugLocked": "Lcom/android/internal/os/BatteryStatsImpl;->doUnplugLocked",
                        "setBatteryState": "Lcom/android/internal/os/BatteryStatsImpl;->setBatteryState",
                        "setBtHeadset": "Lcom/android/internal/os/BatteryStatsImpl;->setBtHeadset",
                        "setOnBattery": "Lcom/android/internal/os/BatteryStatsImpl;->setOnBattery",
                        "setOnBatteryLocked": "Lcom/android/internal/os/BatteryStatsImpl;->setOnBatteryLocked",
                        "writeToParcel": "Lcom/android/internal/os/BatteryStatsImpl;->writeToParcel",
                        "writeToParcelLocked": "Lcom/android/internal/os/BatteryStatsImpl;->writeToParcelLocked",
                        "writeToParcelWithoutUids": "Lcom/android/internal/os/BatteryStatsImpl;->writeToParcelWithoutUids"
                    },
                    "RuntimeInit$UncaughtHandler": {
                        "uncaughtException": "Lcom/android/internal/os/RuntimeInit$UncaughtHandler;->uncaughtException"
                    },
                    "RuntimeInit": {
                        "wtf": "Lcom/android/internal/os/RuntimeInit;->wtf"
                    },
                    "storage": {
                        "ExternalStorageFormatter$1": {
                            "onStorageStateChanged": "Lcom/android/internal/os/storage/ExternalStorageFormatter$1;->onStorageStateChanged"
                        },
                        "ExternalStorageFormatter$2": {
                            "run": "Lcom/android/internal/os/storage/ExternalStorageFormatter$2;->run"
                        },
                        "ExternalStorageFormatter": {
                            "onStartCommand": "Lcom/android/internal/os/storage/ExternalStorageFormatter;->onStartCommand",
                            "onCancel": "Lcom/android/internal/os/storage/ExternalStorageFormatter;->onCancel",
                            "onCreate": "Lcom/android/internal/os/storage/ExternalStorageFormatter;->onCreate",
                            "onDestroy": "Lcom/android/internal/os/storage/ExternalStorageFormatter;->onDestroy",
                            "updateProgressState": "Lcom/android/internal/os/storage/ExternalStorageFormatter;->updateProgressState"
                        }
                    }
                },
                "policy": {
                    "impl": {
                        "AccountUnlockScreen$1": {
                            "run": "Lcom/android/internal/policy/impl/AccountUnlockScreen$1;->run"
                        },
                        "AccountUnlockScreen$2": {
                            "run": "Lcom/android/internal/policy/impl/AccountUnlockScreen$2;->run"
                        },
                        "AccountUnlockScreen": {
                            "findIntendedAccount": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->findIntendedAccount",
                            "dispatchKeyEvent": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->dispatchKeyEvent",
                            "asyncCheckPassword": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->asyncCheckPassword",
                            "<init>": "Lcom/android/internal/policy/impl/AccountUnlockScreen;-><init>",
                            "onClick": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->onClick",
                            "onResume": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->onResume",
                            "onTextChanged": "Lcom/android/internal/policy/impl/AccountUnlockScreen;->onTextChanged"
                        },
                        "FaceUnlock": {
                            "handleCancel": "Lcom/android/internal/policy/impl/FaceUnlock;->handleCancel",
                            "handlePokeWakelock": "Lcom/android/internal/policy/impl/FaceUnlock;->handlePokeWakelock",
                            "handleServiceConnected": "Lcom/android/internal/policy/impl/FaceUnlock;->handleServiceConnected",
                            "handleUnlock": "Lcom/android/internal/policy/impl/FaceUnlock;->handleUnlock"
                        },
                        "GlobalActions$1": {
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$1;->onPress",
                            "onToggle": "Lcom/android/internal/policy/impl/GlobalActions$1;->onToggle"
                        },
                        "GlobalActions$2": {
                            "onLongPress": "Lcom/android/internal/policy/impl/GlobalActions$2;->onLongPress",
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$2;->onPress"
                        },
                        "GlobalActions$3": {
                            "onLongPress": "Lcom/android/internal/policy/impl/GlobalActions$3;->onLongPress"
                        },
                        "GlobalActions$4": {
                            "onItemLongClick": "Lcom/android/internal/policy/impl/GlobalActions$4;->onItemLongClick"
                        },
                        "GlobalActions$5": {
                            "onReceive": "Lcom/android/internal/policy/impl/GlobalActions$5;->onReceive"
                        },
                        "GlobalActions$Action": {
                            "onLongPress": "Lcom/android/internal/policy/impl/GlobalActions$Action;->onLongPress",
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$Action;->onPress"
                        },
                        "GlobalActions$SilentModeToggleAction": {
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$SilentModeToggleAction;->onPress"
                        },
                        "GlobalActions$SinglePressAction": {
                            "onLongPress": "Lcom/android/internal/policy/impl/GlobalActions$SinglePressAction;->onLongPress",
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$SinglePressAction;->onPress"
                        },
                        "GlobalActions$ToggleAction": {
                            "onPress": "Lcom/android/internal/policy/impl/GlobalActions$ToggleAction;->onPress",
                            "onToggle": "Lcom/android/internal/policy/impl/GlobalActions$ToggleAction;->onToggle"
                        },
                        "GlobalActions": {
                            "changeAirplaneModeSystemSetting": "Lcom/android/internal/policy/impl/GlobalActions;->changeAirplaneModeSystemSetting",
                            "<init>": "Lcom/android/internal/policy/impl/GlobalActions;-><init>",
                            "onClick": "Lcom/android/internal/policy/impl/GlobalActions;->onClick"
                        },
                        "keyguard": {
                            "KeyguardMultiUserAvatar": {
                                "setPressed": "Lcom/android/internal/policy/impl/keyguard/KeyguardMultiUserAvatar;->setPressed"
                            },
                            "KeyguardUpdateMonitor$BatteryStatus": {
                                "<init>": "Lcom/android/internal/policy/impl/keyguard/KeyguardUpdateMonitor$BatteryStatus;-><init>"
                            }
                        },
                        "KeyguardScreenCallback": {
                            "forgotPattern": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->forgotPattern",
                            "goToLockScreen": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->goToLockScreen",
                            "goToUnlockScreen": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->goToUnlockScreen",
                            "keyguardDone": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->keyguardDone",
                            "pokeWakelock": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->pokeWakelock",
                            "reportFailedUnlockAttempt": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->reportFailedUnlockAttempt",
                            "takeEmergencyCallAction": "Lcom/android/internal/policy/impl/KeyguardScreenCallback;->takeEmergencyCallAction"
                        },
                        "KeyguardScreen": {
                            "onResume": "Lcom/android/internal/policy/impl/KeyguardScreen;->onResume"
                        },
                        "KeyguardStatusViewManager$1": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/KeyguardStatusViewManager$1;->onUserChanged"
                        },
                        "KeyguardStatusViewManager": {
                            "<init>": "Lcom/android/internal/policy/impl/KeyguardStatusViewManager;-><init>",
                            "onClick": "Lcom/android/internal/policy/impl/KeyguardStatusViewManager;->onClick",
                            "onResume": "Lcom/android/internal/policy/impl/KeyguardStatusViewManager;->onResume"
                        },
                        "KeyguardUpdateMonitor$InfoCallbackImpl": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$InfoCallbackImpl;->onUserChanged"
                        },
                        "KeyguardUpdateMonitor$InfoCallback": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$InfoCallback;->onUserChanged"
                        },
                        "KeyguardUpdateMonitor$SimStateCallback": {
                            "onSimStateChanged": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor$SimStateCallback;->onSimStateChanged"
                        },
                        "KeyguardUpdateMonitor": {
                            "handleSimStateChange": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;->handleSimStateChange",
                            "handleUserChanged": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;->handleUserChanged",
                            "<init>": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;-><init>",
                            "registerSimStateCallback": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;->registerSimStateCallback",
                            "reportSimUnlocked": "Lcom/android/internal/policy/impl/KeyguardUpdateMonitor;->reportSimUnlocked"
                        },
                        "KeyguardViewBase": {
                            "dispatchKeyEvent": "Lcom/android/internal/policy/impl/KeyguardViewBase;->dispatchKeyEvent",
                            "interceptMediaKey": "Lcom/android/internal/policy/impl/KeyguardViewBase;->interceptMediaKey",
                            "handleMediaKeyEvent": "Lcom/android/internal/policy/impl/KeyguardViewBase;->handleMediaKeyEvent",
                            "onScreenTurnedOn": "Lcom/android/internal/policy/impl/KeyguardViewBase;->onScreenTurnedOn",
                            "show": "Lcom/android/internal/policy/impl/KeyguardViewBase;->show",
                            "verifyUnlock": "Lcom/android/internal/policy/impl/KeyguardViewBase;->verifyUnlock",
                            "wakeWhenReadyTq": "Lcom/android/internal/policy/impl/KeyguardViewBase;->wakeWhenReadyTq"
                        },
                        "KeyguardViewCallback": {
                            "keyguardDone": "Lcom/android/internal/policy/impl/KeyguardViewCallback;->keyguardDone",
                            "keyguardDoneDrawing": "Lcom/android/internal/policy/impl/KeyguardViewCallback;->keyguardDoneDrawing",
                            "pokeWakelock": "Lcom/android/internal/policy/impl/KeyguardViewCallback;->pokeWakelock"
                        },
                        "KeyguardViewManager$KeyguardViewHost": {
                            "dispatchDraw": "Lcom/android/internal/policy/impl/KeyguardViewManager$KeyguardViewHost;->dispatchDraw"
                        },
                        "KeyguardViewManager": {
                            "wakeWhenReadyTq": "Lcom/android/internal/policy/impl/KeyguardViewManager;->wakeWhenReadyTq",
                            "onScreenTurnedOn": "Lcom/android/internal/policy/impl/KeyguardViewManager;->onScreenTurnedOn",
                            "show": "Lcom/android/internal/policy/impl/KeyguardViewManager;->show",
                            "verifyUnlock": "Lcom/android/internal/policy/impl/KeyguardViewManager;->verifyUnlock"
                        },
                        "KeyguardViewMediator$1": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/KeyguardViewMediator$1;->onUserChanged"
                        },
                        "KeyguardViewMediator$2": {
                            "onReceive": "Lcom/android/internal/policy/impl/KeyguardViewMediator$2;->onReceive"
                        },
                        "KeyguardViewMediator$3": {
                            "onReceive": "Lcom/android/internal/policy/impl/KeyguardViewMediator$3;->onReceive"
                        },
                        "KeyguardViewMediator": {
                            "onWakeKeyWhenKeyguardShowingTq": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onWakeKeyWhenKeyguardShowingTq",
                            "onWakeMotionWhenKeyguardShowingTq": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onWakeMotionWhenKeyguardShowingTq",
                            "adjustUserActivityLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->adjustUserActivityLocked",
                            "doKeyguardLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->doKeyguardLocked",
                            "doKeyguardTimeout": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->doKeyguardTimeout",
                            "handleHide": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleHide",
                            "handleKeyguardDone": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleKeyguardDone",
                            "handleNotifyScreenOn": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleNotifyScreenOn",
                            "handleSetHidden": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleSetHidden",
                            "handleShow": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleShow",
                            "handleTimeout": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleTimeout",
                            "handleVerifyUnlock": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleVerifyUnlock",
                            "handleWakeWhenReady": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->handleWakeWhenReady",
                            "hideLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->hideLocked",
                            "<init>": "Lcom/android/internal/policy/impl/KeyguardViewMediator;-><init>",
                            "keyguardDone": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->keyguardDone",
                            "keyguardDoneDrawing": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->keyguardDoneDrawing",
                            "notifyScreenOffLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->notifyScreenOffLocked",
                            "notifyScreenOnLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->notifyScreenOnLocked",
                            "onScreenTurnedOff": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onScreenTurnedOff",
                            "onScreenTurnedOn": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onScreenTurnedOn",
                            "onSimStateChanged": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onSimStateChanged",
                            "onSystemReady": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onSystemReady",
                            "onUserSwitched": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->onUserSwitched",
                            "pokeWakelock": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->pokeWakelock",
                            "resetStateLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->resetStateLocked",
                            "setKeyguardEnabled": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->setKeyguardEnabled",
                            "showLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->showLocked",
                            "updateActivityLockScreenState": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->updateActivityLockScreenState",
                            "verifyUnlock": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->verifyUnlock",
                            "verifyUnlockLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->verifyUnlockLocked",
                            "wakeWhenReadyLocked": "Lcom/android/internal/policy/impl/KeyguardViewMediator;->wakeWhenReadyLocked"
                        },
                        "KeyguardViewProperties": {
                            "createKeyguardView": "Lcom/android/internal/policy/impl/KeyguardViewProperties;->createKeyguardView"
                        },
                        "LockPatternKeyguardView$1": {
                            "run": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$1;->run"
                        },
                        "LockPatternKeyguardView$2": {
                            "userActivity": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$2;->userActivity"
                        },
                        "LockPatternKeyguardView$3": {
                            "forgotPattern": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->forgotPattern",
                            "goToLockScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->goToLockScreen",
                            "goToUnlockScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->goToUnlockScreen",
                            "keyguardDone": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->keyguardDone",
                            "pokeWakelock": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->pokeWakelock",
                            "reportFailedUnlockAttempt": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->reportFailedUnlockAttempt",
                            "takeEmergencyCallAction": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$3;->takeEmergencyCallAction"
                        },
                        "LockPatternKeyguardView$4": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$4;->onUserChanged"
                        },
                        "LockPatternKeyguardView$AccountAnalyzer": {
                            "<init>": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$AccountAnalyzer;-><init>",
                            "next": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$AccountAnalyzer;->next",
                            "run": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$AccountAnalyzer;->run",
                            "start": "Lcom/android/internal/policy/impl/LockPatternKeyguardView$AccountAnalyzer;->start"
                        },
                        "LockPatternKeyguardView": {
                            "createLockScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->createLockScreen",
                            "createUnlockScreenFor": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->createUnlockScreenFor",
                            "dispatchHoverEvent": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->dispatchHoverEvent",
                            "dispatchKeyEvent": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->dispatchKeyEvent",
                            "interceptMediaKey": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->interceptMediaKey",
                            "handleMediaKeyEvent": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->handleMediaKeyEvent",
                            "<init>": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;-><init>",
                            "maybeEnableFallback": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->maybeEnableFallback",
                            "onScreenTurnedOn": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->onScreenTurnedOn",
                            "recreateLockScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->recreateLockScreen",
                            "recreateUnlockScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->recreateUnlockScreen",
                            "show": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->show",
                            "updateScreen": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->updateScreen",
                            "verifyUnlock": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->verifyUnlock",
                            "wakeWhenReadyTq": "Lcom/android/internal/policy/impl/LockPatternKeyguardView;->wakeWhenReadyTq"
                        },
                        "LockPatternKeyguardViewProperties": {
                            "createKeyguardView": "Lcom/android/internal/policy/impl/LockPatternKeyguardViewProperties;->createKeyguardView"
                        },
                        "LockScreen$1": {
                            "onUserChanged": "Lcom/android/internal/policy/impl/LockScreen$1;->onUserChanged"
                        },
                        "LockScreen$3": {
                            "run": "Lcom/android/internal/policy/impl/LockScreen$3;->run"
                        },
                        "LockScreen$GlowPadViewMethods": {
                            "onGrabbedStateChange": "Lcom/android/internal/policy/impl/LockScreen$GlowPadViewMethods;->onGrabbedStateChange",
                            "onTrigger": "Lcom/android/internal/policy/impl/LockScreen$GlowPadViewMethods;->onTrigger"
                        },
                        "LockScreen$SlidingTabMethods": {
                            "onGrabbedStateChange": "Lcom/android/internal/policy/impl/LockScreen$SlidingTabMethods;->onGrabbedStateChange",
                            "onTrigger": "Lcom/android/internal/policy/impl/LockScreen$SlidingTabMethods;->onTrigger"
                        },
                        "LockScreen$WaveViewMethods": {
                            "onGrabbedStateChange": "Lcom/android/internal/policy/impl/LockScreen$WaveViewMethods;->onGrabbedStateChange"
                        },
                        "LockScreen": {
                            "onKeyDown": "Lcom/android/internal/policy/impl/LockScreen;->onKeyDown",
                            "<init>": "Lcom/android/internal/policy/impl/LockScreen;-><init>",
                            "onResume": "Lcom/android/internal/policy/impl/LockScreen;->onResume"
                        },
                        "PasswordUnlockScreen$2": {
                            "onClick": "Lcom/android/internal/policy/impl/PasswordUnlockScreen$2;->onClick"
                        },
                        "PasswordUnlockScreen$3": {
                            "afterTextChanged": "Lcom/android/internal/policy/impl/PasswordUnlockScreen$3;->afterTextChanged"
                        },
                        "PasswordUnlockScreen$4": {
                            "onClick": "Lcom/android/internal/policy/impl/PasswordUnlockScreen$4;->onClick"
                        },
                        "PasswordUnlockScreen": {
                            "onEditorAction": "Lcom/android/internal/policy/impl/PasswordUnlockScreen;->onEditorAction",
                            "onKeyDown": "Lcom/android/internal/policy/impl/PasswordUnlockScreen;->onKeyDown",
                            "<init>": "Lcom/android/internal/policy/impl/PasswordUnlockScreen;-><init>",
                            "onResume": "Lcom/android/internal/policy/impl/PasswordUnlockScreen;->onResume",
                            "verifyPasswordAndUnlock": "Lcom/android/internal/policy/impl/PasswordUnlockScreen;->verifyPasswordAndUnlock"
                        },
                        "PatternUnlockScreen$2": {
                            "onClick": "Lcom/android/internal/policy/impl/PatternUnlockScreen$2;->onClick"
                        },
                        "PatternUnlockScreen$UnlockPatternListener": {
                            "onPatternCellAdded": "Lcom/android/internal/policy/impl/PatternUnlockScreen$UnlockPatternListener;->onPatternCellAdded",
                            "onPatternDetected": "Lcom/android/internal/policy/impl/PatternUnlockScreen$UnlockPatternListener;->onPatternDetected"
                        },
                        "PatternUnlockScreen": {
                            "<init>": "Lcom/android/internal/policy/impl/PatternUnlockScreen;-><init>",
                            "onResume": "Lcom/android/internal/policy/impl/PatternUnlockScreen;->onResume",
                            "onWindowFocusChanged": "Lcom/android/internal/policy/impl/PatternUnlockScreen;->onWindowFocusChanged"
                        },
                        "PhoneFallbackEventHandler": {
                            "dispatchKeyEvent": "Lcom/android/internal/policy/impl/PhoneFallbackEventHandler;->dispatchKeyEvent",
                            "onKeyDown": "Lcom/android/internal/policy/impl/PhoneFallbackEventHandler;->onKeyDown",
                            "onKeyUp": "Lcom/android/internal/policy/impl/PhoneFallbackEventHandler;->onKeyUp",
                            "handleMediaKeyEvent": "Lcom/android/internal/policy/impl/PhoneFallbackEventHandler;->handleMediaKeyEvent"
                        },
                        "PhoneWindowManager$15": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$15;->run"
                        },
                        "PhoneWindowManager$19": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$19;->run"
                        },
                        "PhoneWindowManager$1": {
                            "onUEvent": "Lcom/android/internal/policy/impl/PhoneWindowManager$1;->onUEvent"
                        },
                        "PhoneWindowManager$2": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$2;->run"
                        },
                        "PhoneWindowManager$4": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$4;->run"
                        },
                        "PhoneWindowManager$8": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$8;->run"
                        },
                        "PhoneWindowManager$9": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$9;->run"
                        },
                        "PhoneWindowManager$HideNavInputEventReceiver$1": {
                            "run": "Lcom/android/internal/policy/impl/PhoneWindowManager$HideNavInputEventReceiver$1;->run"
                        },
                        "PhoneWindowManager$HideNavInputEventReceiver": {
                            "onInputEvent": "Lcom/android/internal/policy/impl/PhoneWindowManager$HideNavInputEventReceiver;->onInputEvent"
                        },
                        "PhoneWindowManager$SettingsObserver": {
                            "observe": "Lcom/android/internal/policy/impl/PhoneWindowManager$SettingsObserver;->observe"
                        },
                        "PhoneWindowManager": {
                            "dispatchUnhandledKey": "Lcom/android/internal/policy/impl/PhoneWindowManager;->dispatchUnhandledKey",
                            "interceptFallback": "Lcom/android/internal/policy/impl/PhoneWindowManager;->interceptFallback",
                            "performHapticFeedbackLw": "Lcom/android/internal/policy/impl/PhoneWindowManager;->performHapticFeedbackLw",
                            "checkAddPermission": "Lcom/android/internal/policy/impl/PhoneWindowManager;->checkAddPermission",
                            "interceptKeyBeforeQueueing": "Lcom/android/internal/policy/impl/PhoneWindowManager;->interceptKeyBeforeQueueing",
                            "interceptMotionBeforeQueueingWhenScreenOff": "Lcom/android/internal/policy/impl/PhoneWindowManager;->interceptMotionBeforeQueueingWhenScreenOff",
                            "interceptKeyBeforeDispatching": "Lcom/android/internal/policy/impl/PhoneWindowManager;->interceptKeyBeforeDispatching",
                            "dispatchMediaKeyRepeatWithWakeLock": "Lcom/android/internal/policy/impl/PhoneWindowManager;->dispatchMediaKeyRepeatWithWakeLock",
                            "dispatchMediaKeyWithWakeLock": "Lcom/android/internal/policy/impl/PhoneWindowManager;->dispatchMediaKeyWithWakeLock",
                            "dispatchMediaKeyWithWakeLockToAudioService": "Lcom/android/internal/policy/impl/PhoneWindowManager;->dispatchMediaKeyWithWakeLockToAudioService",
                            "enableKeyguard": "Lcom/android/internal/policy/impl/PhoneWindowManager;->enableKeyguard",
                            "exitKeyguardSecurely": "Lcom/android/internal/policy/impl/PhoneWindowManager;->exitKeyguardSecurely",
                            "handleLongPressOnHome": "Lcom/android/internal/policy/impl/PhoneWindowManager;->handleLongPressOnHome",
                            "handleVolumeKey": "Lcom/android/internal/policy/impl/PhoneWindowManager;->handleVolumeKey",
                            "init": "Lcom/android/internal/policy/impl/PhoneWindowManager;->init",
                            "initializeHdmiState": "Lcom/android/internal/policy/impl/PhoneWindowManager;->initializeHdmiState",
                            "launchAssistLongPressAction": "Lcom/android/internal/policy/impl/PhoneWindowManager;->launchAssistLongPressAction",
                            "launchHomeFromHotKey": "Lcom/android/internal/policy/impl/PhoneWindowManager;->launchHomeFromHotKey",
                            "notifyLidSwitchChanged": "Lcom/android/internal/policy/impl/PhoneWindowManager;->notifyLidSwitchChanged",
                            "screenTurnedOff": "Lcom/android/internal/policy/impl/PhoneWindowManager;->screenTurnedOff",
                            "screenTurningOn": "Lcom/android/internal/policy/impl/PhoneWindowManager;->screenTurningOn",
                            "setHdmiPlugged": "Lcom/android/internal/policy/impl/PhoneWindowManager;->setHdmiPlugged",
                            "setSafeMode": "Lcom/android/internal/policy/impl/PhoneWindowManager;->setSafeMode",
                            "setUserRotationMode": "Lcom/android/internal/policy/impl/PhoneWindowManager;->setUserRotationMode",
                            "showGlobalActionsDialog": "Lcom/android/internal/policy/impl/PhoneWindowManager;->showGlobalActionsDialog",
                            "systemReady": "Lcom/android/internal/policy/impl/PhoneWindowManager;->systemReady"
                        },
                        "RecentApplicationsDialog": {
                            "dismissAndSwitch": "Lcom/android/internal/policy/impl/RecentApplicationsDialog;->dismissAndSwitch",
                            "onClick": "Lcom/android/internal/policy/impl/RecentApplicationsDialog;->onClick",
                            "onStart": "Lcom/android/internal/policy/impl/RecentApplicationsDialog;->onStart",
                            "reloadButtons": "Lcom/android/internal/policy/impl/RecentApplicationsDialog;->reloadButtons",
                            "switchTo": "Lcom/android/internal/policy/impl/RecentApplicationsDialog;->switchTo"
                        },
                        "SimPukUnlockScreen$1$1": {
                            "run": "Lcom/android/internal/policy/impl/SimPukUnlockScreen$1$1;->run"
                        },
                        "SimPukUnlockScreen$TouchInput": {
                            "onClick": "Lcom/android/internal/policy/impl/SimPukUnlockScreen$TouchInput;->onClick"
                        },
                        "SimPukUnlockScreen": {
                            "onKeyDown": "Lcom/android/internal/policy/impl/SimPukUnlockScreen;->onKeyDown",
                            "<init>": "Lcom/android/internal/policy/impl/SimPukUnlockScreen;-><init>",
                            "onClick": "Lcom/android/internal/policy/impl/SimPukUnlockScreen;->onClick",
                            "onResume": "Lcom/android/internal/policy/impl/SimPukUnlockScreen;->onResume"
                        },
                        "SimUnlockScreen$1$1": {
                            "run": "Lcom/android/internal/policy/impl/SimUnlockScreen$1$1;->run"
                        },
                        "SimUnlockScreen$TouchInput": {
                            "onClick": "Lcom/android/internal/policy/impl/SimUnlockScreen$TouchInput;->onClick"
                        },
                        "SimUnlockScreen": {
                            "onKeyDown": "Lcom/android/internal/policy/impl/SimUnlockScreen;->onKeyDown",
                            "checkPin": "Lcom/android/internal/policy/impl/SimUnlockScreen;->checkPin",
                            "<init>": "Lcom/android/internal/policy/impl/SimUnlockScreen;-><init>",
                            "onClick": "Lcom/android/internal/policy/impl/SimUnlockScreen;->onClick",
                            "onResume": "Lcom/android/internal/policy/impl/SimUnlockScreen;->onResume"
                        }
                    }
                },
                "preference": {
                    "YesNoPreference": {
                        "onDialogClosed": "Lcom/android/internal/preference/YesNoPreference;->onDialogClosed"
                    }
                },
                "statusbar": {
                    "IStatusBarService$Stub$Proxy": {
                        "collapse": "Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->collapse",
                        "expand": "Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->expand"
                    },
                    "IStatusBarService$Stub": {
                        "onTransact": "Lcom/android/internal/statusbar/IStatusBarService$Stub;->onTransact",
                        "collapse": "Lcom/android/internal/statusbar/IStatusBarService$Stub;->collapse",
                        "expand": "Lcom/android/internal/statusbar/IStatusBarService$Stub;->expand"
                    },
                    "IStatusBarService": {
                        "collapse": "Lcom/android/internal/statusbar/IStatusBarService;->collapse",
                        "expand": "Lcom/android/internal/statusbar/IStatusBarService;->expand"
                    },
                    "StatusBarIconList": {
                        "getViewIndex": "Lcom/android/internal/statusbar/StatusBarIconList;->getViewIndex"
                    }
                },
                "telephony": {
                    "AdnRecordCache": {
                        "requestLoadAllAdnLike": "Lcom/android/internal/telephony/AdnRecordCache;->requestLoadAllAdnLike",
                        "updateAdnByIndex": "Lcom/android/internal/telephony/AdnRecordCache;->updateAdnByIndex",
                        "updateAdnBySearch": "Lcom/android/internal/telephony/AdnRecordCache;->updateAdnBySearch"
                    },
                    "AdnRecordLoader": {
                        "loadAllFromEF": "Lcom/android/internal/telephony/AdnRecordLoader;->loadAllFromEF",
                        "loadFromEF": "Lcom/android/internal/telephony/AdnRecordLoader;->loadFromEF",
                        "updateEF": "Lcom/android/internal/telephony/AdnRecordLoader;->updateEF"
                    },
                    "BaseCommands": {
                        "onRadioAvailable": "Lcom/android/internal/telephony/BaseCommands;->onRadioAvailable",
                        "setCurrentPreferredNetworkType": "Lcom/android/internal/telephony/BaseCommands;->setCurrentPreferredNetworkType",
                        "setRadioState": "Lcom/android/internal/telephony/BaseCommands;->setRadioState"
                    },
                    "CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler": {
                        "onQueryComplete": "Lcom/android/internal/telephony/CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler;->onQueryComplete"
                    },
                    "CallerInfoAsyncQuery$OnQueryCompleteListener": {
                        "onQueryComplete": "Lcom/android/internal/telephony/CallerInfoAsyncQuery$OnQueryCompleteListener;->onQueryComplete"
                    },
                    "CallerInfoAsyncQuery": {
                        "startQuery": "Lcom/android/internal/telephony/CallerInfoAsyncQuery;->startQuery"
                    },
                    "CallerInfo": {
                        "doSecondaryLookupIfNecessary": "Lcom/android/internal/telephony/CallerInfo;->doSecondaryLookupIfNecessary",
                        "getCallerInfo": "Lcom/android/internal/telephony/CallerInfo;->getCallerInfo",
                        "markAsVoiceMail": "Lcom/android/internal/telephony/CallerInfo;->markAsVoiceMail",
                        "getCallerId": "Lcom/android/internal/telephony/CallerInfo;->getCallerId"
                    },
                    "CallManager": {
                        "sendBurstDtmf": "Lcom/android/internal/telephony/CallManager;->sendBurstDtmf",
                        "dial": "Lcom/android/internal/telephony/CallManager;->dial",
                        "acceptCall": "Lcom/android/internal/telephony/CallManager;->acceptCall",
                        "hangupForegroundResumeBackground": "Lcom/android/internal/telephony/CallManager;->hangupForegroundResumeBackground",
                        "setAudioMode": "Lcom/android/internal/telephony/CallManager;->setAudioMode"
                    },
                    "CallTracker": {
                        "handlePollCalls": "Lcom/android/internal/telephony/CallTracker;->handlePollCalls",
                        "handleRadioAvailable": "Lcom/android/internal/telephony/CallTracker;->handleRadioAvailable",
                        "pollCallsWhenSafe": "Lcom/android/internal/telephony/CallTracker;->pollCallsWhenSafe"
                    },
                    "Call": {
                        "hangup": "Lcom/android/internal/telephony/Call;->hangup",
                        "hangupIfAlive": "Lcom/android/internal/telephony/Call;->hangupIfAlive"
                    },
                    "cat": {
                        "CatService": {
                            "eventDownload": "Lcom/android/internal/telephony/cat/CatService;->eventDownload",
                            "handleCmdResponse": "Lcom/android/internal/telephony/cat/CatService;->handleCmdResponse",
                            "handleCommand": "Lcom/android/internal/telephony/cat/CatService;->handleCommand",
                            "handleRilMsg": "Lcom/android/internal/telephony/cat/CatService;->handleRilMsg",
                            "sendMenuSelection": "Lcom/android/internal/telephony/cat/CatService;->sendMenuSelection",
                            "sendTerminalResponse": "Lcom/android/internal/telephony/cat/CatService;->sendTerminalResponse"
                        },
                        "CommandParamsFactory": {
                            "processBIPClient": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processBIPClient",
                            "processDisplayText": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processDisplayText",
                            "processEventNotify": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processEventNotify",
                            "processGetInkey": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processGetInkey",
                            "processGetInput": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processGetInput",
                            "processLaunchBrowser": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processLaunchBrowser",
                            "processPlayTone": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processPlayTone",
                            "processSelectItem": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processSelectItem",
                            "processSetupCall": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processSetupCall",
                            "processSetUpIdleModeText": "Lcom/android/internal/telephony/cat/CommandParamsFactory;->processSetUpIdleModeText"
                        },
                        "IconLoader": {
                            "loadIcon": "Lcom/android/internal/telephony/cat/IconLoader;->loadIcon",
                            "loadIcons": "Lcom/android/internal/telephony/cat/IconLoader;->loadIcons",
                            "postIcon": "Lcom/android/internal/telephony/cat/IconLoader;->postIcon",
                            "readClut": "Lcom/android/internal/telephony/cat/IconLoader;->readClut",
                            "readIconData": "Lcom/android/internal/telephony/cat/IconLoader;->readIconData",
                            "readId": "Lcom/android/internal/telephony/cat/IconLoader;->readId",
                            "startLoadingIcon": "Lcom/android/internal/telephony/cat/IconLoader;->startLoadingIcon"
                        },
                        "RilMessageDecoder$StateCmdParamsReady": {
                            "enter": "Lcom/android/internal/telephony/cat/RilMessageDecoder$StateCmdParamsReady;->enter",
                            "exit": "Lcom/android/internal/telephony/cat/RilMessageDecoder$StateCmdParamsReady;->exit"
                        },
                        "RilMessageDecoder$StateStart": {
                            "enter": "Lcom/android/internal/telephony/cat/RilMessageDecoder$StateStart;->enter",
                            "exit": "Lcom/android/internal/telephony/cat/RilMessageDecoder$StateStart;->exit"
                        },
                        "ToneSettings$1": {
                            "newArray": "Lcom/android/internal/telephony/cat/ToneSettings$1;->newArray"
                        }
                    },
                    "cdma": {
                        "CdmaCallTracker": {
                            "checkMtFindNewRinging": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->checkMtFindNewRinging",
                            "dial": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->dial",
                            "dialThreeWay": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->dialThreeWay",
                            "acceptCall": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->acceptCall",
                            "conference": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->conference",
                            "dispose": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->dispose",
                            "explicitCallTransfer": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->explicitCallTransfer",
                            "flashAndSetGenericTrue": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->flashAndSetGenericTrue",
                            "handleCallWaitingInfo": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->handleCallWaitingInfo",
                            "handlePollCalls": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->handlePollCalls",
                            "handleRadioAvailable": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->handleRadioAvailable",
                            "handleRadioNotAvailable": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->handleRadioNotAvailable",
                            "hangupAllConnections": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->hangupAllConnections",
                            "hangup": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->hangup",
                            "hangupConnectionByIndex": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->hangupConnectionByIndex",
                            "hangupForegroundResumeBackground": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->hangupForegroundResumeBackground",
                            "hangupWaitingOrBackground": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->hangupWaitingOrBackground",
                            "operationComplete": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->operationComplete",
                            "pollCallsWhenSafe": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->pollCallsWhenSafe",
                            "rejectCall": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->rejectCall",
                            "separate": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->separate",
                            "setMute": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->setMute",
                            "switchWaitingOrHoldingAndActive": "Lcom/android/internal/telephony/cdma/CdmaCallTracker;->switchWaitingOrHoldingAndActive"
                        },
                        "CdmaCall": {
                            "hangup": "Lcom/android/internal/telephony/cdma/CdmaCall;->hangup",
                            "hangupIfAlive": "Lcom/android/internal/telephony/cdma/CdmaCall;->hangupIfAlive"
                        },
                        "CdmaConnection": {
                            "processPostDialChar": "Lcom/android/internal/telephony/cdma/CdmaConnection;->processPostDialChar",
                            "update": "Lcom/android/internal/telephony/cdma/CdmaConnection;->update",
                            "getCreateTime": "Lcom/android/internal/telephony/cdma/CdmaConnection;->getCreateTime",
                            "acquireWakeLock": "Lcom/android/internal/telephony/cdma/CdmaConnection;->acquireWakeLock",
                            "cancelPostDial": "Lcom/android/internal/telephony/cdma/CdmaConnection;->cancelPostDial",
                            "finalize": "Lcom/android/internal/telephony/cdma/CdmaConnection;->finalize",
                            "hangup": "Lcom/android/internal/telephony/cdma/CdmaConnection;->hangup",
                            "<init>": "Lcom/android/internal/telephony/cdma/CdmaConnection;-><init>",
                            "onConnectedInOrOut": "Lcom/android/internal/telephony/cdma/CdmaConnection;->onConnectedInOrOut",
                            "onDisconnect": "Lcom/android/internal/telephony/cdma/CdmaConnection;->onDisconnect",
                            "onLocalDisconnect": "Lcom/android/internal/telephony/cdma/CdmaConnection;->onLocalDisconnect",
                            "onRemoteDisconnect": "Lcom/android/internal/telephony/cdma/CdmaConnection;->onRemoteDisconnect",
                            "proceedAfterWaitChar": "Lcom/android/internal/telephony/cdma/CdmaConnection;->proceedAfterWaitChar",
                            "proceedAfterWildChar": "Lcom/android/internal/telephony/cdma/CdmaConnection;->proceedAfterWildChar",
                            "processNextPostDialChar": "Lcom/android/internal/telephony/cdma/CdmaConnection;->processNextPostDialChar",
                            "releaseWakeLock": "Lcom/android/internal/telephony/cdma/CdmaConnection;->releaseWakeLock",
                            "separate": "Lcom/android/internal/telephony/cdma/CdmaConnection;->separate",
                            "setPostDialState": "Lcom/android/internal/telephony/cdma/CdmaConnection;->setPostDialState"
                        },
                        "CdmaDataConnectionTracker$1": {
                            "run": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker$1;->run"
                        },
                        "CdmaDataConnectionTracker": {
                            "onTrySetupData": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onTrySetupData",
                            "setupData": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->setupData",
                            "trySetupData": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->trySetupData",
                            "cleanUpConnection": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->cleanUpConnection",
                            "dispose": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->dispose",
                            "gotoIdleAndNotifyDataConnection": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->gotoIdleAndNotifyDataConnection",
                            "<init>": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;-><init>",
                            "notifyApnIdDisconnected": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyApnIdDisconnected",
                            "notifyApnIdUpToCurrent": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyApnIdUpToCurrent",
                            "notifyDataConnection": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyDataConnection",
                            "notifyDefaultData": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyDefaultData",
                            "notifyNoData": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyNoData",
                            "notifyOffApnsOfAvailability": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->notifyOffApnsOfAvailability",
                            "onActionIntentReconnectAlarm": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onActionIntentReconnectAlarm",
                            "onCdmaDataDetached": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onCdmaDataDetached",
                            "onCleanUpAllConnections": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onCleanUpAllConnections",
                            "onCleanUpConnection": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onCleanUpConnection",
                            "onDataSetupComplete": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onDataSetupComplete",
                            "onDataStallAlarm": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onDataStallAlarm",
                            "onDataStateChanged": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onDataStateChanged",
                            "onDisconnectDone": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onDisconnectDone",
                            "onEnableApn": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onEnableApn",
                            "onEnableNewApn": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onEnableNewApn",
                            "onRadioAvailable": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onRadioAvailable",
                            "onResetDone": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onResetDone",
                            "onRestartRadio": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onRestartRadio",
                            "onRoamingOff": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onRoamingOff",
                            "onRoamingOn": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onRoamingOn",
                            "onSetDependencyMet": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onSetDependencyMet",
                            "onSetInternalDataEnabled": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onSetInternalDataEnabled",
                            "onSetPolicyDataEnabled": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onSetPolicyDataEnabled",
                            "onSetUserDataEnabled": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onSetUserDataEnabled",
                            "onVoiceCallEnded": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onVoiceCallEnded",
                            "onVoiceCallStarted": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->onVoiceCallStarted",
                            "reconnectAfterFail": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->reconnectAfterFail",
                            "restartRadio": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->restartRadio",
                            "setDataOnRoamingEnabled": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->setDataOnRoamingEnabled",
                            "startDelayedRetry": "Lcom/android/internal/telephony/cdma/CdmaDataConnectionTracker;->startDelayedRetry"
                        },
                        "CdmaDataConnection": {
                            "onConnect": "Lcom/android/internal/telephony/cdma/CdmaDataConnection;->onConnect",
                            "tearDownData": "Lcom/android/internal/telephony/cdma/CdmaDataConnection;->tearDownData"
                        },
                        "CDMALTEPhone": {
                            "handlePinMmi": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->handlePinMmi",
                            "updateCurrentCarrierInProvider": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->updateCurrentCarrierInProvider",
                            "dial": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->dial",
                            "getImei": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getImei",
                            "acceptCall": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->acceptCall",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->disableLocationUpdates",
                            "dispose": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->dispose",
                            "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->enableEnhancedVoicePrivacy",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->enableLocationUpdates",
                            "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->exitEmergencyCallbackMode",
                            "finalize": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->finalize",
                            "getAvailableNetworks": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getAvailableNetworks",
                            "getCallWaiting": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getCallWaiting",
                            "getDataCallList": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getDataCallList",
                            "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getEnhancedVoicePrivacy",
                            "getPreferredNetworkType": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getPreferredNetworkType",
                            "getSmscAddress": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->getSmscAddress",
                            "handleEnterEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->handleEnterEmergencyCallbackMode",
                            "handleExitEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->handleExitEmergencyCallbackMode",
                            "<init>": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;-><init>",
                            "init": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->init",
                            "initSstIcc": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->initSstIcc",
                            "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->invokeOemRilRequestRaw",
                            "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->invokeOemRilRequestStrings",
                            "notifyDataConnectionFailed": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->notifyDataConnectionFailed",
                            "notifyDataConnection": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->notifyDataConnection",
                            "notifyServiceStateChanged": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->notifyServiceStateChanged",
                            "notifyServiceStateChangedP": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->notifyServiceStateChangedP",
                            "notifySignalStrength": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->notifySignalStrength",
                            "queryAvailableBandMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->queryAvailableBandMode",
                            "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->queryCdmaRoamingPreference",
                            "queryTTYMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->queryTTYMode",
                            "rejectCall": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->rejectCall",
                            "requestIsimAuthentication": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->requestIsimAuthentication",
                            "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->restoreSavedNetworkSelection",
                            "selectNetworkManually": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->selectNetworkManually",
                            "sendBurstDtmf": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->sendBurstDtmf",
                            "sendDtmf": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->sendDtmf",
                            "sendEmergencyCallbackModeChange": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->sendEmergencyCallbackModeChange",
                            "setBandMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setBandMode",
                            "setCdmaRoamingPreference": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setCdmaRoamingPreference",
                            "setCdmaSubscription": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setCdmaSubscription",
                            "setDataRoamingEnabled": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setDataRoamingEnabled",
                            "setMute": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setMute",
                            "setPreferredNetworkType": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setPreferredNetworkType",
                            "setPropertiesByCarrier": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setPropertiesByCarrier",
                            "setSmscAddress": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setSmscAddress",
                            "setTTYMode": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setTTYMode",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->setVoiceMessageWaiting",
                            "startDtmf": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->startDtmf",
                            "stopDtmf": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->stopDtmf",
                            "switchHoldingAndActive": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->switchHoldingAndActive",
                            "updateServiceLocation": "Lcom/android/internal/telephony/cdma/CDMALTEPhone;->updateServiceLocation"
                        },
                        "CdmaLteServiceStateTracker": {
                            "processPendingRadioPowerOffAfterDataOff": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->processPendingRadioPowerOffAfterDataOff",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->disableLocationUpdates",
                            "disableSingleLocationUpdate": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->disableSingleLocationUpdate",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->enableLocationUpdates",
                            "enableSingleLocationUpdate": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->enableSingleLocationUpdate",
                            "fixTimeZone": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->fixTimeZone",
                            "getSubscriptionInfoAndStartPollingThreads": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->getSubscriptionInfoAndStartPollingThreads",
                            "handleCdmaSubscriptionSource": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->handleCdmaSubscriptionSource",
                            "handlePollStateResult": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->handlePollStateResult",
                            "hangupAndPowerOff": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->hangupAndPowerOff",
                            "<init>": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;-><init>",
                            "onSignalStrengthResult": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->onSignalStrengthResult",
                            "pollState": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->pollState",
                            "pollStateDone": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->pollStateDone",
                            "powerOffRadioSafely": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->powerOffRadioSafely",
                            "queueNextSignalStrengthPoll": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->queueNextSignalStrengthPoll",
                            "reRegisterNetwork": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->reRegisterNetwork",
                            "revertToNitzTime": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->revertToNitzTime",
                            "revertToNitzTimeZone": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->revertToNitzTimeZone",
                            "saveCdmaSubscriptionSource": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->saveCdmaSubscriptionSource",
                            "setAndBroadcastNetworkSetTime": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->setAndBroadcastNetworkSetTime",
                            "setAndBroadcastNetworkSetTimeZone": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->setAndBroadcastNetworkSetTimeZone",
                            "setPowerStateToDesired": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->setPowerStateToDesired",
                            "setRadioPower": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->setRadioPower",
                            "setTimeFromNITZString": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->setTimeFromNITZString",
                            "updateSpnDisplay": "Lcom/android/internal/telephony/cdma/CdmaLteServiceStateTracker;->updateSpnDisplay"
                        },
                        "CdmaLteUiccFileHandler": {
                            "getEFLinearRecordSize": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->getEFLinearRecordSize",
                            "loadEFImgLinearFixed": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->loadEFImgLinearFixed",
                            "loadEFImgTransparent": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->loadEFImgTransparent",
                            "loadEFLinearFixedAll": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->loadEFLinearFixedAll",
                            "loadEFLinearFixed": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->loadEFLinearFixed",
                            "loadEFTransparent": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->loadEFTransparent",
                            "updateEFLinearFixed": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->updateEFLinearFixed",
                            "updateEFTransparent": "Lcom/android/internal/telephony/cdma/CdmaLteUiccFileHandler;->updateEFTransparent"
                        },
                        "CdmaLteUiccRecords": {
                            "fetchSimRecords": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->fetchSimRecords",
                            "getSpnFsm": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->getSpnFsm",
                            "handleFileUpdate": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->handleFileUpdate",
                            "handleSimRefresh": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->handleSimRefresh",
                            "onAllRecordsLoaded": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->onAllRecordsLoaded",
                            "onReady": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->onReady",
                            "onRecordLoaded": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->onRecordLoaded",
                            "onRefresh": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->onRefresh",
                            "setLocaleFromCsim": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->setLocaleFromCsim",
                            "setMsisdnNumber": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->setMsisdnNumber",
                            "setVoiceCallForwardingFlag": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->setVoiceCallForwardingFlag",
                            "setVoiceMailNumber": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->setVoiceMailNumber",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/cdma/CdmaLteUiccRecords;->setVoiceMessageWaiting"
                        },
                        "CdmaMmiCode": {
                            "processCode": "Lcom/android/internal/telephony/cdma/CdmaMmiCode;->processCode"
                        },
                        "CDMAPhone$1": {
                            "run": "Lcom/android/internal/telephony/cdma/CDMAPhone$1;->run"
                        },
                        "CDMAPhone": {
                            "handlePinMmi": "Lcom/android/internal/telephony/cdma/CDMAPhone;->handlePinMmi",
                            "updateCurrentCarrierInProvider": "Lcom/android/internal/telephony/cdma/CDMAPhone;->updateCurrentCarrierInProvider",
                            "dial": "Lcom/android/internal/telephony/cdma/CDMAPhone;->dial",
                            "acceptCall": "Lcom/android/internal/telephony/cdma/CDMAPhone;->acceptCall",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/cdma/CDMAPhone;->disableLocationUpdates",
                            "dispose": "Lcom/android/internal/telephony/cdma/CDMAPhone;->dispose",
                            "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/cdma/CDMAPhone;->enableEnhancedVoicePrivacy",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/cdma/CDMAPhone;->enableLocationUpdates",
                            "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->exitEmergencyCallbackMode",
                            "finalize": "Lcom/android/internal/telephony/cdma/CDMAPhone;->finalize",
                            "getAvailableNetworks": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getAvailableNetworks",
                            "getCallWaiting": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getCallWaiting",
                            "getDataCallList": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getDataCallList",
                            "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getEnhancedVoicePrivacy",
                            "getPreferredNetworkType": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getPreferredNetworkType",
                            "getSmscAddress": "Lcom/android/internal/telephony/cdma/CDMAPhone;->getSmscAddress",
                            "handleEnterEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->handleEnterEmergencyCallbackMode",
                            "handleExitEmergencyCallbackMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->handleExitEmergencyCallbackMode",
                            "<init>": "Lcom/android/internal/telephony/cdma/CDMAPhone;-><init>",
                            "init": "Lcom/android/internal/telephony/cdma/CDMAPhone;->init",
                            "initSstIcc": "Lcom/android/internal/telephony/cdma/CDMAPhone;->initSstIcc",
                            "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/cdma/CDMAPhone;->invokeOemRilRequestRaw",
                            "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/cdma/CDMAPhone;->invokeOemRilRequestStrings",
                            "notifyDataConnectionFailed": "Lcom/android/internal/telephony/cdma/CDMAPhone;->notifyDataConnectionFailed",
                            "notifyDataConnection": "Lcom/android/internal/telephony/cdma/CDMAPhone;->notifyDataConnection",
                            "notifyServiceStateChanged": "Lcom/android/internal/telephony/cdma/CDMAPhone;->notifyServiceStateChanged",
                            "notifyServiceStateChangedP": "Lcom/android/internal/telephony/cdma/CDMAPhone;->notifyServiceStateChangedP",
                            "notifySignalStrength": "Lcom/android/internal/telephony/cdma/CDMAPhone;->notifySignalStrength",
                            "queryAvailableBandMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->queryAvailableBandMode",
                            "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/cdma/CDMAPhone;->queryCdmaRoamingPreference",
                            "queryTTYMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->queryTTYMode",
                            "rejectCall": "Lcom/android/internal/telephony/cdma/CDMAPhone;->rejectCall",
                            "requestIsimAuthentication": "Lcom/android/internal/telephony/cdma/CDMAPhone;->requestIsimAuthentication",
                            "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/cdma/CDMAPhone;->restoreSavedNetworkSelection",
                            "selectNetworkManually": "Lcom/android/internal/telephony/cdma/CDMAPhone;->selectNetworkManually",
                            "sendBurstDtmf": "Lcom/android/internal/telephony/cdma/CDMAPhone;->sendBurstDtmf",
                            "sendDtmf": "Lcom/android/internal/telephony/cdma/CDMAPhone;->sendDtmf",
                            "sendEmergencyCallbackModeChange": "Lcom/android/internal/telephony/cdma/CDMAPhone;->sendEmergencyCallbackModeChange",
                            "setBandMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setBandMode",
                            "setCdmaRoamingPreference": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setCdmaRoamingPreference",
                            "setCdmaSubscription": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setCdmaSubscription",
                            "setDataRoamingEnabled": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setDataRoamingEnabled",
                            "setMute": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setMute",
                            "setPreferredNetworkType": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setPreferredNetworkType",
                            "setPropertiesByCarrier": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setPropertiesByCarrier",
                            "setSmscAddress": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setSmscAddress",
                            "setTTYMode": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setTTYMode",
                            "setVoiceMailNumber": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setVoiceMailNumber",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/cdma/CDMAPhone;->setVoiceMessageWaiting",
                            "startDtmf": "Lcom/android/internal/telephony/cdma/CDMAPhone;->startDtmf",
                            "stopDtmf": "Lcom/android/internal/telephony/cdma/CDMAPhone;->stopDtmf",
                            "switchHoldingAndActive": "Lcom/android/internal/telephony/cdma/CDMAPhone;->switchHoldingAndActive",
                            "updateServiceLocation": "Lcom/android/internal/telephony/cdma/CDMAPhone;->updateServiceLocation"
                        },
                        "CdmaServiceStateTracker$1": {
                            "onChange": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker$1;->onChange"
                        },
                        "CdmaServiceStateTracker$2": {
                            "onChange": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker$2;->onChange"
                        },
                        "CdmaServiceStateTracker": {
                            "processPendingRadioPowerOffAfterDataOff": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->processPendingRadioPowerOffAfterDataOff",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->disableLocationUpdates",
                            "disableSingleLocationUpdate": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->disableSingleLocationUpdate",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->enableLocationUpdates",
                            "enableSingleLocationUpdate": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->enableSingleLocationUpdate",
                            "fixTimeZone": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->fixTimeZone",
                            "getSubscriptionInfoAndStartPollingThreads": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->getSubscriptionInfoAndStartPollingThreads",
                            "handleCdmaSubscriptionSource": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->handleCdmaSubscriptionSource",
                            "handlePollStateResult": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->handlePollStateResult",
                            "hangupAndPowerOff": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->hangupAndPowerOff",
                            "<init>": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;-><init>",
                            "onSignalStrengthResult": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->onSignalStrengthResult",
                            "pollState": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->pollState",
                            "pollStateDone": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->pollStateDone",
                            "powerOffRadioSafely": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->powerOffRadioSafely",
                            "queueNextSignalStrengthPoll": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->queueNextSignalStrengthPoll",
                            "reRegisterNetwork": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->reRegisterNetwork",
                            "revertToNitzTime": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->revertToNitzTime",
                            "revertToNitzTimeZone": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->revertToNitzTimeZone",
                            "saveCdmaSubscriptionSource": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->saveCdmaSubscriptionSource",
                            "setAndBroadcastNetworkSetTime": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->setAndBroadcastNetworkSetTime",
                            "setAndBroadcastNetworkSetTimeZone": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->setAndBroadcastNetworkSetTimeZone",
                            "setPowerStateToDesired": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->setPowerStateToDesired",
                            "setRadioPower": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->setRadioPower",
                            "setTimeFromNITZString": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->setTimeFromNITZString",
                            "updateSpnDisplay": "Lcom/android/internal/telephony/cdma/CdmaServiceStateTracker;->updateSpnDisplay"
                        },
                        "CdmaSMSDispatcher$1": {
                            "onReceive": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher$1;->onReceive"
                        },
                        "CdmaSMSDispatcher": {
                            "dispatchMessage": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatchMessage",
                            "dispatchNormalMessage": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatchNormalMessage",
                            "processCdmaWapPdu": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->processCdmaWapPdu",
                            "processMessagePart": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->processMessagePart",
                            "acknowledgeLastIncomingSms": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->acknowledgeLastIncomingSms",
                            "dispatch": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatch",
                            "dispatchBroadcastMessage": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatchBroadcastMessage",
                            "dispatchPdus": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatchPdus",
                            "dispatchPortAddressedPdus": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->dispatchPortAddressedPdus",
                            "handleServiceCategoryProgramData": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->handleServiceCategoryProgramData",
                            "notifyAndAcknowledgeLastIncomingSms": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->notifyAndAcknowledgeLastIncomingSms",
                            "sendRawPdu": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->sendRawPdu",
                            "sendSms": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->sendSms",
                            "sendSubmitPdu": "Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->sendSubmitPdu"
                        },
                        "RuimFileHandler": {
                            "getEFLinearRecordSize": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->getEFLinearRecordSize",
                            "loadEFImgLinearFixed": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->loadEFImgLinearFixed",
                            "loadEFImgTransparent": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->loadEFImgTransparent",
                            "loadEFLinearFixedAll": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->loadEFLinearFixedAll",
                            "loadEFLinearFixed": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->loadEFLinearFixed",
                            "loadEFTransparent": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->loadEFTransparent",
                            "updateEFLinearFixed": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->updateEFLinearFixed",
                            "updateEFTransparent": "Lcom/android/internal/telephony/cdma/RuimFileHandler;->updateEFTransparent"
                        },
                        "RuimPhoneBookInterfaceManager": {
                            "onTransact": "Lcom/android/internal/telephony/cdma/RuimPhoneBookInterfaceManager;->onTransact",
                            "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/cdma/RuimPhoneBookInterfaceManager;->updateAdnRecordsInEfByIndex",
                            "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/cdma/RuimPhoneBookInterfaceManager;->updateAdnRecordsInEfBySearch",
                            "getAdnRecordsSize": "Lcom/android/internal/telephony/cdma/RuimPhoneBookInterfaceManager;->getAdnRecordsSize",
                            "getAdnRecordsInEf": "Lcom/android/internal/telephony/cdma/RuimPhoneBookInterfaceManager;->getAdnRecordsInEf"
                        },
                        "RuimRecords": {
                            "getDisplayRule": "Lcom/android/internal/telephony/cdma/RuimRecords;->getDisplayRule",
                            "fetchRuimRecords": "Lcom/android/internal/telephony/cdma/RuimRecords;->fetchRuimRecords",
                            "handleRuimRefresh": "Lcom/android/internal/telephony/cdma/RuimRecords;->handleRuimRefresh",
                            "onAllRecordsLoaded": "Lcom/android/internal/telephony/cdma/RuimRecords;->onAllRecordsLoaded",
                            "onReady": "Lcom/android/internal/telephony/cdma/RuimRecords;->onReady",
                            "onRecordLoaded": "Lcom/android/internal/telephony/cdma/RuimRecords;->onRecordLoaded",
                            "onRefresh": "Lcom/android/internal/telephony/cdma/RuimRecords;->onRefresh",
                            "setMsisdnNumber": "Lcom/android/internal/telephony/cdma/RuimRecords;->setMsisdnNumber",
                            "setVoiceCallForwardingFlag": "Lcom/android/internal/telephony/cdma/RuimRecords;->setVoiceCallForwardingFlag"
                        },
                        "RuimSmsInterfaceManager": {
                            "copyMessageToIccEf": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->copyMessageToIccEf",
                            "onTransact": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->onTransact",
                            "updateMessageOnIccEf": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->updateMessageOnIccEf",
                            "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->getAllMessagesFromIccEf",
                            "enforceReceiveAndSend": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->enforceReceiveAndSend",
                            "sendData": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->sendData",
                            "sendMultipartText": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->sendMultipartText",
                            "sendText": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->sendText",
                            "disableCellBroadcast": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->disableCellBroadcast",
                            "disableCellBroadcastRange": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->disableCellBroadcastRange",
                            "enableCellBroadcast": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->enableCellBroadcast",
                            "enableCellBroadcastRange": "Lcom/android/internal/telephony/cdma/RuimSmsInterfaceManager;->enableCellBroadcastRange"
                        },
                        "SmsMessage": {
                            "getMessageClass": "Lcom/android/internal/telephony/cdma/SmsMessage;->getMessageClass",
                            "isCphsMwiMessage": "Lcom/android/internal/telephony/cdma/SmsMessage;->isCphsMwiMessage",
                            "isMWIClearMessage": "Lcom/android/internal/telephony/cdma/SmsMessage;->isMWIClearMessage",
                            "isMWISetMessage": "Lcom/android/internal/telephony/cdma/SmsMessage;->isMWISetMessage",
                            "isMwiDontStore": "Lcom/android/internal/telephony/cdma/SmsMessage;->isMwiDontStore",
                            "isReplace": "Lcom/android/internal/telephony/cdma/SmsMessage;->isReplace",
                            "isReplyPathPresent": "Lcom/android/internal/telephony/cdma/SmsMessage;->isReplyPathPresent",
                            "isStatusReportMessage": "Lcom/android/internal/telephony/cdma/SmsMessage;->isStatusReportMessage",
                            "getIncomingSmsFingerprint": "Lcom/android/internal/telephony/cdma/SmsMessage;->getIncomingSmsFingerprint",
                            "getSubmitPdu": "Lcom/android/internal/telephony/cdma/SmsMessage;->getSubmitPdu",
                            "getMessageType": "Lcom/android/internal/telephony/cdma/SmsMessage;->getMessageType",
                            "getNumOfVoicemails": "Lcom/android/internal/telephony/cdma/SmsMessage;->getNumOfVoicemails",
                            "getProtocolIdentifier": "Lcom/android/internal/telephony/cdma/SmsMessage;->getProtocolIdentifier",
                            "getStatus": "Lcom/android/internal/telephony/cdma/SmsMessage;->getStatus",
                            "getTPLayerLengthForPDU": "Lcom/android/internal/telephony/cdma/SmsMessage;->getTPLayerLengthForPDU",
                            "getTeleService": "Lcom/android/internal/telephony/cdma/SmsMessage;->getTeleService"
                        }
                    },
                    "CommandsInterface": {
                        "acceptCall": "Lcom/android/internal/telephony/CommandsInterface;->acceptCall",
                        "acknowledgeIncomingGsmSmsWithPdu": "Lcom/android/internal/telephony/CommandsInterface;->acknowledgeIncomingGsmSmsWithPdu",
                        "acknowledgeLastIncomingCdmaSms": "Lcom/android/internal/telephony/CommandsInterface;->acknowledgeLastIncomingCdmaSms",
                        "acknowledgeLastIncomingGsmSms": "Lcom/android/internal/telephony/CommandsInterface;->acknowledgeLastIncomingGsmSms",
                        "cancelPendingUssd": "Lcom/android/internal/telephony/CommandsInterface;->cancelPendingUssd",
                        "changeBarringPassword": "Lcom/android/internal/telephony/CommandsInterface;->changeBarringPassword",
                        "changeIccPin2ForApp": "Lcom/android/internal/telephony/CommandsInterface;->changeIccPin2ForApp",
                        "changeIccPin2": "Lcom/android/internal/telephony/CommandsInterface;->changeIccPin2",
                        "changeIccPinForApp": "Lcom/android/internal/telephony/CommandsInterface;->changeIccPinForApp",
                        "changeIccPin": "Lcom/android/internal/telephony/CommandsInterface;->changeIccPin",
                        "conference": "Lcom/android/internal/telephony/CommandsInterface;->conference",
                        "deactivateDataCall": "Lcom/android/internal/telephony/CommandsInterface;->deactivateDataCall",
                        "deleteSmsOnRuim": "Lcom/android/internal/telephony/CommandsInterface;->deleteSmsOnRuim",
                        "deleteSmsOnSim": "Lcom/android/internal/telephony/CommandsInterface;->deleteSmsOnSim",
                        "dial": "Lcom/android/internal/telephony/CommandsInterface;->dial",
                        "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/CommandsInterface;->exitEmergencyCallbackMode",
                        "explicitCallTransfer": "Lcom/android/internal/telephony/CommandsInterface;->explicitCallTransfer",
                        "getAvailableNetworks": "Lcom/android/internal/telephony/CommandsInterface;->getAvailableNetworks",
                        "getBasebandVersion": "Lcom/android/internal/telephony/CommandsInterface;->getBasebandVersion",
                        "getCdmaBroadcastConfig": "Lcom/android/internal/telephony/CommandsInterface;->getCdmaBroadcastConfig",
                        "getCDMASubscription": "Lcom/android/internal/telephony/CommandsInterface;->getCDMASubscription",
                        "getCdmaSubscriptionSource": "Lcom/android/internal/telephony/CommandsInterface;->getCdmaSubscriptionSource",
                        "getCLIR": "Lcom/android/internal/telephony/CommandsInterface;->getCLIR",
                        "getCurrentCalls": "Lcom/android/internal/telephony/CommandsInterface;->getCurrentCalls",
                        "getDataCallList": "Lcom/android/internal/telephony/CommandsInterface;->getDataCallList",
                        "getDataRegistrationState": "Lcom/android/internal/telephony/CommandsInterface;->getDataRegistrationState",
                        "getDeviceIdentity": "Lcom/android/internal/telephony/CommandsInterface;->getDeviceIdentity",
                        "getGsmBroadcastConfig": "Lcom/android/internal/telephony/CommandsInterface;->getGsmBroadcastConfig",
                        "getIccCardStatus": "Lcom/android/internal/telephony/CommandsInterface;->getIccCardStatus",
                        "getIMEI": "Lcom/android/internal/telephony/CommandsInterface;->getIMEI",
                        "getIMEISV": "Lcom/android/internal/telephony/CommandsInterface;->getIMEISV",
                        "getIMSI": "Lcom/android/internal/telephony/CommandsInterface;->getIMSI",
                        "getIMSIForApp": "Lcom/android/internal/telephony/CommandsInterface;->getIMSIForApp",
                        "getLastCallFailCause": "Lcom/android/internal/telephony/CommandsInterface;->getLastCallFailCause",
                        "getLastDataCallFailCause": "Lcom/android/internal/telephony/CommandsInterface;->getLastDataCallFailCause",
                        "getLastPdpFailCause": "Lcom/android/internal/telephony/CommandsInterface;->getLastPdpFailCause",
                        "getMute": "Lcom/android/internal/telephony/CommandsInterface;->getMute",
                        "getNeighboringCids": "Lcom/android/internal/telephony/CommandsInterface;->getNeighboringCids",
                        "getNetworkSelectionMode": "Lcom/android/internal/telephony/CommandsInterface;->getNetworkSelectionMode",
                        "getOperator": "Lcom/android/internal/telephony/CommandsInterface;->getOperator",
                        "getPDPContextList": "Lcom/android/internal/telephony/CommandsInterface;->getPDPContextList",
                        "getPreferredNetworkType": "Lcom/android/internal/telephony/CommandsInterface;->getPreferredNetworkType",
                        "getPreferredVoicePrivacy": "Lcom/android/internal/telephony/CommandsInterface;->getPreferredVoicePrivacy",
                        "getSignalStrength": "Lcom/android/internal/telephony/CommandsInterface;->getSignalStrength",
                        "getSmscAddress": "Lcom/android/internal/telephony/CommandsInterface;->getSmscAddress",
                        "getVoiceRadioTechnology": "Lcom/android/internal/telephony/CommandsInterface;->getVoiceRadioTechnology",
                        "getVoiceRegistrationState": "Lcom/android/internal/telephony/CommandsInterface;->getVoiceRegistrationState",
                        "handleCallSetupRequestFromSim": "Lcom/android/internal/telephony/CommandsInterface;->handleCallSetupRequestFromSim",
                        "hangupConnection": "Lcom/android/internal/telephony/CommandsInterface;->hangupConnection",
                        "hangupForegroundResumeBackground": "Lcom/android/internal/telephony/CommandsInterface;->hangupForegroundResumeBackground",
                        "hangupWaitingOrBackground": "Lcom/android/internal/telephony/CommandsInterface;->hangupWaitingOrBackground",
                        "iccIOForApp": "Lcom/android/internal/telephony/CommandsInterface;->iccIOForApp",
                        "iccIO": "Lcom/android/internal/telephony/CommandsInterface;->iccIO",
                        "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/CommandsInterface;->invokeOemRilRequestRaw",
                        "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/CommandsInterface;->invokeOemRilRequestStrings",
                        "queryAvailableBandMode": "Lcom/android/internal/telephony/CommandsInterface;->queryAvailableBandMode",
                        "queryCallForwardStatus": "Lcom/android/internal/telephony/CommandsInterface;->queryCallForwardStatus",
                        "queryCallWaiting": "Lcom/android/internal/telephony/CommandsInterface;->queryCallWaiting",
                        "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/CommandsInterface;->queryCdmaRoamingPreference",
                        "queryCLIP": "Lcom/android/internal/telephony/CommandsInterface;->queryCLIP",
                        "queryFacilityLockForApp": "Lcom/android/internal/telephony/CommandsInterface;->queryFacilityLockForApp",
                        "queryFacilityLock": "Lcom/android/internal/telephony/CommandsInterface;->queryFacilityLock",
                        "queryTTYMode": "Lcom/android/internal/telephony/CommandsInterface;->queryTTYMode",
                        "rejectCall": "Lcom/android/internal/telephony/CommandsInterface;->rejectCall",
                        "reportSmsMemoryStatus": "Lcom/android/internal/telephony/CommandsInterface;->reportSmsMemoryStatus",
                        "reportStkServiceIsRunning": "Lcom/android/internal/telephony/CommandsInterface;->reportStkServiceIsRunning",
                        "requestIsimAuthentication": "Lcom/android/internal/telephony/CommandsInterface;->requestIsimAuthentication",
                        "resetRadio": "Lcom/android/internal/telephony/CommandsInterface;->resetRadio",
                        "sendBurstDtmf": "Lcom/android/internal/telephony/CommandsInterface;->sendBurstDtmf",
                        "sendCDMAFeatureCode": "Lcom/android/internal/telephony/CommandsInterface;->sendCDMAFeatureCode",
                        "sendCdmaSms": "Lcom/android/internal/telephony/CommandsInterface;->sendCdmaSms",
                        "sendDtmf": "Lcom/android/internal/telephony/CommandsInterface;->sendDtmf",
                        "sendEnvelope": "Lcom/android/internal/telephony/CommandsInterface;->sendEnvelope",
                        "sendEnvelopeWithStatus": "Lcom/android/internal/telephony/CommandsInterface;->sendEnvelopeWithStatus",
                        "sendSMS": "Lcom/android/internal/telephony/CommandsInterface;->sendSMS",
                        "sendTerminalResponse": "Lcom/android/internal/telephony/CommandsInterface;->sendTerminalResponse",
                        "sendUSSD": "Lcom/android/internal/telephony/CommandsInterface;->sendUSSD",
                        "separateConnection": "Lcom/android/internal/telephony/CommandsInterface;->separateConnection",
                        "setBandMode": "Lcom/android/internal/telephony/CommandsInterface;->setBandMode",
                        "setCallForward": "Lcom/android/internal/telephony/CommandsInterface;->setCallForward",
                        "setCallWaiting": "Lcom/android/internal/telephony/CommandsInterface;->setCallWaiting",
                        "setCdmaBroadcastActivation": "Lcom/android/internal/telephony/CommandsInterface;->setCdmaBroadcastActivation",
                        "setCdmaBroadcastConfig": "Lcom/android/internal/telephony/CommandsInterface;->setCdmaBroadcastConfig",
                        "setCdmaRoamingPreference": "Lcom/android/internal/telephony/CommandsInterface;->setCdmaRoamingPreference",
                        "setCdmaSubscriptionSource": "Lcom/android/internal/telephony/CommandsInterface;->setCdmaSubscriptionSource",
                        "setCLIR": "Lcom/android/internal/telephony/CommandsInterface;->setCLIR",
                        "setCurrentPreferredNetworkType": "Lcom/android/internal/telephony/CommandsInterface;->setCurrentPreferredNetworkType",
                        "setFacilityLockForApp": "Lcom/android/internal/telephony/CommandsInterface;->setFacilityLockForApp",
                        "setFacilityLock": "Lcom/android/internal/telephony/CommandsInterface;->setFacilityLock",
                        "setGsmBroadcastActivation": "Lcom/android/internal/telephony/CommandsInterface;->setGsmBroadcastActivation",
                        "setGsmBroadcastConfig": "Lcom/android/internal/telephony/CommandsInterface;->setGsmBroadcastConfig",
                        "setLocationUpdates": "Lcom/android/internal/telephony/CommandsInterface;->setLocationUpdates",
                        "setMute": "Lcom/android/internal/telephony/CommandsInterface;->setMute",
                        "setNetworkSelectionModeAutomatic": "Lcom/android/internal/telephony/CommandsInterface;->setNetworkSelectionModeAutomatic",
                        "setNetworkSelectionModeManual": "Lcom/android/internal/telephony/CommandsInterface;->setNetworkSelectionModeManual",
                        "setPreferredNetworkType": "Lcom/android/internal/telephony/CommandsInterface;->setPreferredNetworkType",
                        "setPreferredVoicePrivacy": "Lcom/android/internal/telephony/CommandsInterface;->setPreferredVoicePrivacy",
                        "setRadioPower": "Lcom/android/internal/telephony/CommandsInterface;->setRadioPower",
                        "setSmscAddress": "Lcom/android/internal/telephony/CommandsInterface;->setSmscAddress",
                        "setSuppServiceNotifications": "Lcom/android/internal/telephony/CommandsInterface;->setSuppServiceNotifications",
                        "setTTYMode": "Lcom/android/internal/telephony/CommandsInterface;->setTTYMode",
                        "setupDataCall": "Lcom/android/internal/telephony/CommandsInterface;->setupDataCall",
                        "startDtmf": "Lcom/android/internal/telephony/CommandsInterface;->startDtmf",
                        "stopDtmf": "Lcom/android/internal/telephony/CommandsInterface;->stopDtmf",
                        "supplyIccPin2ForApp": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPin2ForApp",
                        "supplyIccPin2": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPin2",
                        "supplyIccPinForApp": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPinForApp",
                        "supplyIccPin": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPin",
                        "supplyIccPuk2ForApp": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPuk2ForApp",
                        "supplyIccPuk2": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPuk2",
                        "supplyIccPukForApp": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPukForApp",
                        "supplyIccPuk": "Lcom/android/internal/telephony/CommandsInterface;->supplyIccPuk",
                        "supplyNetworkDepersonalization": "Lcom/android/internal/telephony/CommandsInterface;->supplyNetworkDepersonalization",
                        "switchWaitingOrHoldingAndActive": "Lcom/android/internal/telephony/CommandsInterface;->switchWaitingOrHoldingAndActive",
                        "writeSmsToRuim": "Lcom/android/internal/telephony/CommandsInterface;->writeSmsToRuim",
                        "writeSmsToSim": "Lcom/android/internal/telephony/CommandsInterface;->writeSmsToSim"
                    },
                    "Connection": {
                        "cancelPostDial": "Lcom/android/internal/telephony/Connection;->cancelPostDial",
                        "hangup": "Lcom/android/internal/telephony/Connection;->hangup",
                        "proceedAfterWaitChar": "Lcom/android/internal/telephony/Connection;->proceedAfterWaitChar",
                        "proceedAfterWildChar": "Lcom/android/internal/telephony/Connection;->proceedAfterWildChar",
                        "separate": "Lcom/android/internal/telephony/Connection;->separate"
                    },
                    "DataConnection$DcActivatingState": {
                        "processMessage": "Lcom/android/internal/telephony/DataConnection$DcActivatingState;->processMessage",
                        "enter": "Lcom/android/internal/telephony/DataConnection$DcActivatingState;->enter",
                        "exit": "Lcom/android/internal/telephony/DataConnection$DcActivatingState;->exit"
                    },
                    "DataConnection$DcActiveState": {
                        "processMessage": "Lcom/android/internal/telephony/DataConnection$DcActiveState;->processMessage"
                    },
                    "DataConnection$DcDisconnectingState": {
                        "enter": "Lcom/android/internal/telephony/DataConnection$DcDisconnectingState;->enter",
                        "exit": "Lcom/android/internal/telephony/DataConnection$DcDisconnectingState;->exit"
                    },
                    "DataConnection$DcDisconnectionErrorCreatingConnection": {
                        "enter": "Lcom/android/internal/telephony/DataConnection$DcDisconnectionErrorCreatingConnection;->enter",
                        "exit": "Lcom/android/internal/telephony/DataConnection$DcDisconnectionErrorCreatingConnection;->exit"
                    },
                    "DataConnection$DcInactiveState": {
                        "processMessage": "Lcom/android/internal/telephony/DataConnection$DcInactiveState;->processMessage"
                    },
                    "DataConnectionTracker$1": {
                        "onReceive": "Lcom/android/internal/telephony/DataConnectionTracker$1;->onReceive"
                    },
                    "DataConnectionTracker$DataRoamingSettingObserver": {
                        "register": "Lcom/android/internal/telephony/DataConnectionTracker$DataRoamingSettingObserver;->register"
                    },
                    "DataConnectionTracker": {
                        "onTrySetupData": "Lcom/android/internal/telephony/DataConnectionTracker;->onTrySetupData",
                        "dispose": "Lcom/android/internal/telephony/DataConnectionTracker;->dispose",
                        "gotoIdleAndNotifyDataConnection": "Lcom/android/internal/telephony/DataConnectionTracker;->gotoIdleAndNotifyDataConnection",
                        "<init>": "Lcom/android/internal/telephony/DataConnectionTracker;-><init>",
                        "notifyApnIdDisconnected": "Lcom/android/internal/telephony/DataConnectionTracker;->notifyApnIdDisconnected",
                        "notifyApnIdUpToCurrent": "Lcom/android/internal/telephony/DataConnectionTracker;->notifyApnIdUpToCurrent",
                        "notifyDataConnection": "Lcom/android/internal/telephony/DataConnectionTracker;->notifyDataConnection",
                        "notifyOffApnsOfAvailability": "Lcom/android/internal/telephony/DataConnectionTracker;->notifyOffApnsOfAvailability",
                        "onActionIntentReconnectAlarm": "Lcom/android/internal/telephony/DataConnectionTracker;->onActionIntentReconnectAlarm",
                        "onCleanUpAllConnections": "Lcom/android/internal/telephony/DataConnectionTracker;->onCleanUpAllConnections",
                        "onCleanUpConnection": "Lcom/android/internal/telephony/DataConnectionTracker;->onCleanUpConnection",
                        "onDataSetupComplete": "Lcom/android/internal/telephony/DataConnectionTracker;->onDataSetupComplete",
                        "onDataStallAlarm": "Lcom/android/internal/telephony/DataConnectionTracker;->onDataStallAlarm",
                        "onDisconnectDone": "Lcom/android/internal/telephony/DataConnectionTracker;->onDisconnectDone",
                        "onEnableApn": "Lcom/android/internal/telephony/DataConnectionTracker;->onEnableApn",
                        "onEnableNewApn": "Lcom/android/internal/telephony/DataConnectionTracker;->onEnableNewApn",
                        "onRadioAvailable": "Lcom/android/internal/telephony/DataConnectionTracker;->onRadioAvailable",
                        "onRadioOffOrNotAvailable": "Lcom/android/internal/telephony/DataConnectionTracker;->onRadioOffOrNotAvailable",
                        "onResetDone": "Lcom/android/internal/telephony/DataConnectionTracker;->onResetDone",
                        "onRoamingOff": "Lcom/android/internal/telephony/DataConnectionTracker;->onRoamingOff",
                        "onRoamingOn": "Lcom/android/internal/telephony/DataConnectionTracker;->onRoamingOn",
                        "onSetDependencyMet": "Lcom/android/internal/telephony/DataConnectionTracker;->onSetDependencyMet",
                        "onSetInternalDataEnabled": "Lcom/android/internal/telephony/DataConnectionTracker;->onSetInternalDataEnabled",
                        "onSetPolicyDataEnabled": "Lcom/android/internal/telephony/DataConnectionTracker;->onSetPolicyDataEnabled",
                        "onSetUserDataEnabled": "Lcom/android/internal/telephony/DataConnectionTracker;->onSetUserDataEnabled",
                        "onVoiceCallEnded": "Lcom/android/internal/telephony/DataConnectionTracker;->onVoiceCallEnded",
                        "onVoiceCallStarted": "Lcom/android/internal/telephony/DataConnectionTracker;->onVoiceCallStarted",
                        "restartRadio": "Lcom/android/internal/telephony/DataConnectionTracker;->restartRadio",
                        "setDataOnRoamingEnabled": "Lcom/android/internal/telephony/DataConnectionTracker;->setDataOnRoamingEnabled"
                    },
                    "DataConnection": {
                        "onConnect": "Lcom/android/internal/telephony/DataConnection;->onConnect",
                        "tearDownData": "Lcom/android/internal/telephony/DataConnection;->tearDownData"
                    },
                    "DefaultPhoneNotifier": {
                        "doNotifyDataConnection": "Lcom/android/internal/telephony/DefaultPhoneNotifier;->doNotifyDataConnection",
                        "notifyDataConnection": "Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyDataConnection",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyDataConnectionFailed",
                        "notifyServiceState": "Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyServiceState",
                        "notifySignalStrength": "Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifySignalStrength"
                    },
                    "gsm": {
                        "GsmCallTracker": {
                            "dial": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->dial",
                            "acceptCall": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->acceptCall",
                            "conference": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->conference",
                            "dispose": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->dispose",
                            "explicitCallTransfer": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->explicitCallTransfer",
                            "handlePollCalls": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->handlePollCalls",
                            "handleRadioAvailable": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->handleRadioAvailable",
                            "handleRadioNotAvailable": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->handleRadioNotAvailable",
                            "hangupAllConnections": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->hangupAllConnections",
                            "hangup": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->hangup",
                            "hangupConnectionByIndex": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->hangupConnectionByIndex",
                            "hangupForegroundResumeBackground": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->hangupForegroundResumeBackground",
                            "hangupWaitingOrBackground": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->hangupWaitingOrBackground",
                            "operationComplete": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->operationComplete",
                            "pollCallsWhenSafe": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->pollCallsWhenSafe",
                            "rejectCall": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->rejectCall",
                            "separate": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->separate",
                            "setMute": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->setMute",
                            "switchWaitingOrHoldingAndActive": "Lcom/android/internal/telephony/gsm/GsmCallTracker;->switchWaitingOrHoldingAndActive"
                        },
                        "GsmCall": {
                            "hangup": "Lcom/android/internal/telephony/gsm/GsmCall;->hangup",
                            "hangupIfAlive": "Lcom/android/internal/telephony/gsm/GsmCall;->hangupIfAlive"
                        },
                        "GsmConnection": {
                            "processPostDialChar": "Lcom/android/internal/telephony/gsm/GsmConnection;->processPostDialChar",
                            "update": "Lcom/android/internal/telephony/gsm/GsmConnection;->update",
                            "acquireWakeLock": "Lcom/android/internal/telephony/gsm/GsmConnection;->acquireWakeLock",
                            "cancelPostDial": "Lcom/android/internal/telephony/gsm/GsmConnection;->cancelPostDial",
                            "finalize": "Lcom/android/internal/telephony/gsm/GsmConnection;->finalize",
                            "hangup": "Lcom/android/internal/telephony/gsm/GsmConnection;->hangup",
                            "<init>": "Lcom/android/internal/telephony/gsm/GsmConnection;-><init>",
                            "onConnectedInOrOut": "Lcom/android/internal/telephony/gsm/GsmConnection;->onConnectedInOrOut",
                            "onDisconnect": "Lcom/android/internal/telephony/gsm/GsmConnection;->onDisconnect",
                            "onRemoteDisconnect": "Lcom/android/internal/telephony/gsm/GsmConnection;->onRemoteDisconnect",
                            "proceedAfterWaitChar": "Lcom/android/internal/telephony/gsm/GsmConnection;->proceedAfterWaitChar",
                            "proceedAfterWildChar": "Lcom/android/internal/telephony/gsm/GsmConnection;->proceedAfterWildChar",
                            "processNextPostDialChar": "Lcom/android/internal/telephony/gsm/GsmConnection;->processNextPostDialChar",
                            "releaseWakeLock": "Lcom/android/internal/telephony/gsm/GsmConnection;->releaseWakeLock",
                            "separate": "Lcom/android/internal/telephony/gsm/GsmConnection;->separate",
                            "setPostDialState": "Lcom/android/internal/telephony/gsm/GsmConnection;->setPostDialState"
                        },
                        "GsmDataConnectionTracker$ApnChangeObserver": {
                            "onChange": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker$ApnChangeObserver;->onChange"
                        },
                        "GsmDataConnectionTracker": {
                            "onTrySetupData": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onTrySetupData",
                            "setupData": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->setupData",
                            "trySetupData": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->trySetupData",
                            "applyNewState": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->applyNewState",
                            "cleanUpAllConnections": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->cleanUpAllConnections",
                            "cleanUpConnection": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->cleanUpConnection",
                            "dispose": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->dispose",
                            "doRecovery": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->doRecovery",
                            "gotoIdleAndNotifyDataConnection": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->gotoIdleAndNotifyDataConnection",
                            "initApnContextsAndDataConnection": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->initApnContextsAndDataConnection",
                            "<init>": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;-><init>",
                            "notifyApnIdDisconnected": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyApnIdDisconnected",
                            "notifyApnIdUpToCurrent": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyApnIdUpToCurrent",
                            "notifyDataConnection": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyDataConnection",
                            "notifyDefaultData": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyDefaultData",
                            "notifyNoData": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyNoData",
                            "notifyOffApnsOfAvailability": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->notifyOffApnsOfAvailability",
                            "onActionIntentReconnectAlarm": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onActionIntentReconnectAlarm",
                            "onApnChanged": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onApnChanged",
                            "onCleanUpAllConnections": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onCleanUpAllConnections",
                            "onCleanUpConnection": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onCleanUpConnection",
                            "onDataConnectionAttached": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDataConnectionAttached",
                            "onDataConnectionDetached": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDataConnectionDetached",
                            "onDataSetupComplete": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDataSetupComplete",
                            "onDataStallAlarm": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDataStallAlarm",
                            "onDataStateChanged": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDataStateChanged",
                            "onDisconnectDone": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onDisconnectDone",
                            "onEnableApn": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onEnableApn",
                            "onEnableNewApn": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onEnableNewApn",
                            "onPollPdp": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onPollPdp",
                            "onRadioAvailable": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onRadioAvailable",
                            "onRadioOffOrNotAvailable": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onRadioOffOrNotAvailable",
                            "onRecordsLoaded": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onRecordsLoaded",
                            "onResetDone": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onResetDone",
                            "onRoamingOff": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onRoamingOff",
                            "onRoamingOn": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onRoamingOn",
                            "onSetDependencyMet": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onSetDependencyMet",
                            "onSetInternalDataEnabled": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onSetInternalDataEnabled",
                            "onSetPolicyDataEnabled": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onSetPolicyDataEnabled",
                            "onSetUserDataEnabled": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onSetUserDataEnabled",
                            "onVoiceCallEnded": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onVoiceCallEnded",
                            "onVoiceCallStarted": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->onVoiceCallStarted",
                            "putRecoveryAction": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->putRecoveryAction",
                            "reconnectAfterFail": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->reconnectAfterFail",
                            "restartRadio": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->restartRadio",
                            "setDataOnRoamingEnabled": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->setDataOnRoamingEnabled",
                            "setupDataOnReadyApns": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->setupDataOnReadyApns",
                            "startDelayedRetry": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->startDelayedRetry",
                            "updateDataStallInfo": "Lcom/android/internal/telephony/gsm/GsmDataConnectionTracker;->updateDataStallInfo"
                        },
                        "GsmDataConnection": {
                            "onConnect": "Lcom/android/internal/telephony/gsm/GsmDataConnection;->onConnect",
                            "tearDownData": "Lcom/android/internal/telephony/gsm/GsmDataConnection;->tearDownData"
                        },
                        "GsmMmiCode": {
                            "makeCFQueryResultMessage": "Lcom/android/internal/telephony/gsm/GsmMmiCode;->makeCFQueryResultMessage",
                            "cancel": "Lcom/android/internal/telephony/gsm/GsmMmiCode;->cancel",
                            "onQueryCfComplete": "Lcom/android/internal/telephony/gsm/GsmMmiCode;->onQueryCfComplete",
                            "processCode": "Lcom/android/internal/telephony/gsm/GsmMmiCode;->processCode",
                            "sendUssd": "Lcom/android/internal/telephony/gsm/GsmMmiCode;->sendUssd"
                        },
                        "GSMPhone": {
                            "handleCallDeflectionIncallSupplementaryService": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleCallDeflectionIncallSupplementaryService",
                            "handleCallHoldIncallSupplementaryService": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleCallHoldIncallSupplementaryService",
                            "handleCallWaitingIncallSupplementaryService": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleCallWaitingIncallSupplementaryService",
                            "handleEctIncallSupplementaryService": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleEctIncallSupplementaryService",
                            "handleInCallMmiCommands": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleInCallMmiCommands",
                            "handleMultipartyIncallSupplementaryService": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleMultipartyIncallSupplementaryService",
                            "handlePinMmi": "Lcom/android/internal/telephony/gsm/GSMPhone;->handlePinMmi",
                            "dial": "Lcom/android/internal/telephony/gsm/GSMPhone;->dial",
                            "acceptCall": "Lcom/android/internal/telephony/gsm/GSMPhone;->acceptCall",
                            "conference": "Lcom/android/internal/telephony/gsm/GSMPhone;->conference",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/gsm/GSMPhone;->disableLocationUpdates",
                            "dispose": "Lcom/android/internal/telephony/gsm/GSMPhone;->dispose",
                            "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/gsm/GSMPhone;->enableEnhancedVoicePrivacy",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/gsm/GSMPhone;->enableLocationUpdates",
                            "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/gsm/GSMPhone;->exitEmergencyCallbackMode",
                            "explicitCallTransfer": "Lcom/android/internal/telephony/gsm/GSMPhone;->explicitCallTransfer",
                            "getAvailableNetworks": "Lcom/android/internal/telephony/gsm/GSMPhone;->getAvailableNetworks",
                            "getCallForwardingOption": "Lcom/android/internal/telephony/gsm/GSMPhone;->getCallForwardingOption",
                            "getCallWaiting": "Lcom/android/internal/telephony/gsm/GSMPhone;->getCallWaiting",
                            "getDataCallList": "Lcom/android/internal/telephony/gsm/GSMPhone;->getDataCallList",
                            "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/gsm/GSMPhone;->getEnhancedVoicePrivacy",
                            "getNeighboringCids": "Lcom/android/internal/telephony/gsm/GSMPhone;->getNeighboringCids",
                            "getOutgoingCallerIdDisplay": "Lcom/android/internal/telephony/gsm/GSMPhone;->getOutgoingCallerIdDisplay",
                            "getPreferredNetworkType": "Lcom/android/internal/telephony/gsm/GSMPhone;->getPreferredNetworkType",
                            "getSmscAddress": "Lcom/android/internal/telephony/gsm/GSMPhone;->getSmscAddress",
                            "handleCfuQueryResult": "Lcom/android/internal/telephony/gsm/GSMPhone;->handleCfuQueryResult",
                            "<init>": "Lcom/android/internal/telephony/gsm/GSMPhone;-><init>",
                            "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/gsm/GSMPhone;->invokeOemRilRequestRaw",
                            "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/gsm/GSMPhone;->invokeOemRilRequestStrings",
                            "notifyDataConnectionFailed": "Lcom/android/internal/telephony/gsm/GSMPhone;->notifyDataConnectionFailed",
                            "notifyDataConnection": "Lcom/android/internal/telephony/gsm/GSMPhone;->notifyDataConnection",
                            "notifyServiceStateChanged": "Lcom/android/internal/telephony/gsm/GSMPhone;->notifyServiceStateChanged",
                            "notifyServiceStateChangedP": "Lcom/android/internal/telephony/gsm/GSMPhone;->notifyServiceStateChangedP",
                            "notifySignalStrength": "Lcom/android/internal/telephony/gsm/GSMPhone;->notifySignalStrength",
                            "queryAvailableBandMode": "Lcom/android/internal/telephony/gsm/GSMPhone;->queryAvailableBandMode",
                            "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/gsm/GSMPhone;->queryCdmaRoamingPreference",
                            "queryTTYMode": "Lcom/android/internal/telephony/gsm/GSMPhone;->queryTTYMode",
                            "registerForSuppServiceNotification": "Lcom/android/internal/telephony/gsm/GSMPhone;->registerForSuppServiceNotification",
                            "rejectCall": "Lcom/android/internal/telephony/gsm/GSMPhone;->rejectCall",
                            "requestIsimAuthentication": "Lcom/android/internal/telephony/gsm/GSMPhone;->requestIsimAuthentication",
                            "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/gsm/GSMPhone;->restoreSavedNetworkSelection",
                            "selectNetworkManually": "Lcom/android/internal/telephony/gsm/GSMPhone;->selectNetworkManually",
                            "sendBurstDtmf": "Lcom/android/internal/telephony/gsm/GSMPhone;->sendBurstDtmf",
                            "sendDtmf": "Lcom/android/internal/telephony/gsm/GSMPhone;->sendDtmf",
                            "sendUssdResponse": "Lcom/android/internal/telephony/gsm/GSMPhone;->sendUssdResponse",
                            "setBandMode": "Lcom/android/internal/telephony/gsm/GSMPhone;->setBandMode",
                            "setCallForwardingOption": "Lcom/android/internal/telephony/gsm/GSMPhone;->setCallForwardingOption",
                            "setCallWaiting": "Lcom/android/internal/telephony/gsm/GSMPhone;->setCallWaiting",
                            "setCdmaRoamingPreference": "Lcom/android/internal/telephony/gsm/GSMPhone;->setCdmaRoamingPreference",
                            "setCdmaSubscription": "Lcom/android/internal/telephony/gsm/GSMPhone;->setCdmaSubscription",
                            "setDataRoamingEnabled": "Lcom/android/internal/telephony/gsm/GSMPhone;->setDataRoamingEnabled",
                            "setLine1Number": "Lcom/android/internal/telephony/gsm/GSMPhone;->setLine1Number",
                            "setMute": "Lcom/android/internal/telephony/gsm/GSMPhone;->setMute",
                            "setNetworkSelectionModeAutomatic": "Lcom/android/internal/telephony/gsm/GSMPhone;->setNetworkSelectionModeAutomatic",
                            "setOutgoingCallerIdDisplay": "Lcom/android/internal/telephony/gsm/GSMPhone;->setOutgoingCallerIdDisplay",
                            "setPreferredNetworkType": "Lcom/android/internal/telephony/gsm/GSMPhone;->setPreferredNetworkType",
                            "setPropertiesByCarrier": "Lcom/android/internal/telephony/gsm/GSMPhone;->setPropertiesByCarrier",
                            "setSmscAddress": "Lcom/android/internal/telephony/gsm/GSMPhone;->setSmscAddress",
                            "setTTYMode": "Lcom/android/internal/telephony/gsm/GSMPhone;->setTTYMode",
                            "setVoiceMailNumber": "Lcom/android/internal/telephony/gsm/GSMPhone;->setVoiceMailNumber",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/gsm/GSMPhone;->setVoiceMessageWaiting",
                            "startDtmf": "Lcom/android/internal/telephony/gsm/GSMPhone;->startDtmf",
                            "stopDtmf": "Lcom/android/internal/telephony/gsm/GSMPhone;->stopDtmf",
                            "switchHoldingAndActive": "Lcom/android/internal/telephony/gsm/GSMPhone;->switchHoldingAndActive",
                            "syncClirSetting": "Lcom/android/internal/telephony/gsm/GSMPhone;->syncClirSetting",
                            "unregisterForSuppServiceNotification": "Lcom/android/internal/telephony/gsm/GSMPhone;->unregisterForSuppServiceNotification",
                            "updateServiceLocation": "Lcom/android/internal/telephony/gsm/GSMPhone;->updateServiceLocation"
                        },
                        "GsmServiceStateTracker$1": {
                            "onReceive": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker$1;->onReceive"
                        },
                        "GsmServiceStateTracker$2": {
                            "onChange": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker$2;->onChange"
                        },
                        "GsmServiceStateTracker$3": {
                            "onChange": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker$3;->onChange"
                        },
                        "GsmServiceStateTracker": {
                            "processPendingRadioPowerOffAfterDataOff": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->processPendingRadioPowerOffAfterDataOff",
                            "disableLocationUpdates": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->disableLocationUpdates",
                            "disableSingleLocationUpdate": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->disableSingleLocationUpdate",
                            "enableLocationUpdates": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->enableLocationUpdates",
                            "enableSingleLocationUpdate": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->enableSingleLocationUpdate",
                            "handlePollStateResult": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->handlePollStateResult",
                            "hangupAndPowerOff": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->hangupAndPowerOff",
                            "<init>": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;-><init>",
                            "onRestrictedStateChanged": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->onRestrictedStateChanged",
                            "onSignalStrengthResult": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->onSignalStrengthResult",
                            "pollState": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->pollState",
                            "pollStateDone": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->pollStateDone",
                            "powerOffRadioSafely": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->powerOffRadioSafely",
                            "queueNextSignalStrengthPoll": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->queueNextSignalStrengthPoll",
                            "reRegisterNetwork": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->reRegisterNetwork",
                            "revertToNitzTime": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->revertToNitzTime",
                            "revertToNitzTimeZone": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->revertToNitzTimeZone",
                            "setAndBroadcastNetworkSetTime": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setAndBroadcastNetworkSetTime",
                            "setAndBroadcastNetworkSetTimeZone": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setAndBroadcastNetworkSetTimeZone",
                            "setNotification": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setNotification",
                            "setPowerStateToDesired": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setPowerStateToDesired",
                            "setRadioPower": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setRadioPower",
                            "setTimeFromNITZString": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->setTimeFromNITZString",
                            "updateSpnDisplay": "Lcom/android/internal/telephony/gsm/GsmServiceStateTracker;->updateSpnDisplay"
                        },
                        "GsmSMSDispatcher": {
                            "dispatchMessage": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatchMessage",
                            "dispatchNormalMessage": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatchNormalMessage",
                            "processMessagePart": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->processMessagePart",
                            "acknowledgeLastIncomingSms": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->acknowledgeLastIncomingSms",
                            "dispatch": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatch",
                            "dispatchBroadcastMessage": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatchBroadcastMessage",
                            "dispatchPdus": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatchPdus",
                            "dispatchPortAddressedPdus": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->dispatchPortAddressedPdus",
                            "handleBroadcastSms": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->handleBroadcastSms",
                            "handleStatusReport": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->handleStatusReport",
                            "notifyAndAcknowledgeLastIncomingSms": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->notifyAndAcknowledgeLastIncomingSms",
                            "sendData": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->sendData",
                            "sendNewSubmitPdu": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->sendNewSubmitPdu",
                            "sendRawPdu": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->sendRawPdu",
                            "sendSms": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->sendSms",
                            "sendText": "Lcom/android/internal/telephony/gsm/GsmSMSDispatcher;->sendText"
                        },
                        "SIMFileHandler": {
                            "getEFLinearRecordSize": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->getEFLinearRecordSize",
                            "loadEFImgLinearFixed": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->loadEFImgLinearFixed",
                            "loadEFImgTransparent": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->loadEFImgTransparent",
                            "loadEFLinearFixedAll": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->loadEFLinearFixedAll",
                            "loadEFLinearFixed": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->loadEFLinearFixed",
                            "loadEFTransparent": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->loadEFTransparent",
                            "updateEFLinearFixed": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->updateEFLinearFixed",
                            "updateEFTransparent": "Lcom/android/internal/telephony/gsm/SIMFileHandler;->updateEFTransparent"
                        },
                        "SimPhoneBookInterfaceManager": {
                            "onTransact": "Lcom/android/internal/telephony/gsm/SimPhoneBookInterfaceManager;->onTransact",
                            "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/gsm/SimPhoneBookInterfaceManager;->updateAdnRecordsInEfByIndex",
                            "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/gsm/SimPhoneBookInterfaceManager;->updateAdnRecordsInEfBySearch",
                            "getAdnRecordsSize": "Lcom/android/internal/telephony/gsm/SimPhoneBookInterfaceManager;->getAdnRecordsSize",
                            "getAdnRecordsInEf": "Lcom/android/internal/telephony/gsm/SimPhoneBookInterfaceManager;->getAdnRecordsInEf"
                        },
                        "SIMRecords": {
                            "fetchSimRecords": "Lcom/android/internal/telephony/gsm/SIMRecords;->fetchSimRecords",
                            "getSpnFsm": "Lcom/android/internal/telephony/gsm/SIMRecords;->getSpnFsm",
                            "handleFileUpdate": "Lcom/android/internal/telephony/gsm/SIMRecords;->handleFileUpdate",
                            "handleSimRefresh": "Lcom/android/internal/telephony/gsm/SIMRecords;->handleSimRefresh",
                            "onAllRecordsLoaded": "Lcom/android/internal/telephony/gsm/SIMRecords;->onAllRecordsLoaded",
                            "onReady": "Lcom/android/internal/telephony/gsm/SIMRecords;->onReady",
                            "onRecordLoaded": "Lcom/android/internal/telephony/gsm/SIMRecords;->onRecordLoaded",
                            "onRefresh": "Lcom/android/internal/telephony/gsm/SIMRecords;->onRefresh",
                            "setMsisdnNumber": "Lcom/android/internal/telephony/gsm/SIMRecords;->setMsisdnNumber",
                            "setVoiceCallForwardingFlag": "Lcom/android/internal/telephony/gsm/SIMRecords;->setVoiceCallForwardingFlag",
                            "setVoiceMailNumber": "Lcom/android/internal/telephony/gsm/SIMRecords;->setVoiceMailNumber",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/gsm/SIMRecords;->setVoiceMessageWaiting"
                        },
                        "SimSmsInterfaceManager$CellBroadcastRangeManager": {
                            "finishUpdate": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager$CellBroadcastRangeManager;->finishUpdate"
                        },
                        "SimSmsInterfaceManager": {
                            "copyMessageToIccEf": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->copyMessageToIccEf",
                            "disableCellBroadcast": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->disableCellBroadcast",
                            "disableCellBroadcastRange": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->disableCellBroadcastRange",
                            "enableCellBroadcast": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->enableCellBroadcast",
                            "enableCellBroadcastRange": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->enableCellBroadcastRange",
                            "onTransact": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->onTransact",
                            "setCellBroadcastActivation": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->setCellBroadcastActivation",
                            "setCellBroadcastConfig": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->setCellBroadcastConfig",
                            "updateMessageOnIccEf": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->updateMessageOnIccEf",
                            "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->getAllMessagesFromIccEf",
                            "enforceReceiveAndSend": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->enforceReceiveAndSend",
                            "sendData": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->sendData",
                            "sendMultipartText": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->sendMultipartText",
                            "sendText": "Lcom/android/internal/telephony/gsm/SimSmsInterfaceManager;->sendText"
                        },
                        "UsimDataDownloadHandler": {
                            "acknowledgeSmsWithError": "Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->acknowledgeSmsWithError",
                            "handleDataDownload": "Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->handleDataDownload",
                            "sendSmsAckForEnvelopeResponse": "Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->sendSmsAckForEnvelopeResponse"
                        },
                        "UsimPhoneBookManager": {
                            "loadEfFilesFromUsim": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->loadEfFilesFromUsim",
                            "readAdnFileAndWait": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->readAdnFileAndWait",
                            "readEmailFileAndWait": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->readEmailFileAndWait",
                            "readIapFileAndWait": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->readIapFileAndWait",
                            "readPbrFileAndWait": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->readPbrFileAndWait",
                            "refreshCache": "Lcom/android/internal/telephony/gsm/UsimPhoneBookManager;->refreshCache"
                        },
                        "GsmSmsAddress": {
                            "isAlphanumeric": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->isAlphanumeric",
                            "isCphsVoiceMessageClear": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->isCphsVoiceMessageClear",
                            "isCphsVoiceMessageIndicatorAddress": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->isCphsVoiceMessageIndicatorAddress",
                            "isCphsVoiceMessageSet": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->isCphsVoiceMessageSet",
                            "isNetworkSpecific": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->isNetworkSpecific",
                            "getAddressString": "Lcom/android/internal/telephony/gsm/GsmSmsAddress;->getAddressString"
                        },
                        "SmsBroadcastConfigInfo": {
                            "isSelected": "Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;->isSelected",
                            "getFromCodeScheme": "Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;->getFromCodeScheme",
                            "getFromServiceId": "Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;->getFromServiceId",
                            "getToCodeScheme": "Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;->getToCodeScheme",
                            "getToServiceId": "Lcom/android/internal/telephony/gsm/SmsBroadcastConfigInfo;->getToServiceId"
                        },
                        "SmsMessage": {
                            "getMessageClass": "Lcom/android/internal/telephony/gsm/SmsMessage;->getMessageClass",
                            "isCphsMwiMessage": "Lcom/android/internal/telephony/gsm/SmsMessage;->isCphsMwiMessage",
                            "isMWIClearMessage": "Lcom/android/internal/telephony/gsm/SmsMessage;->isMWIClearMessage",
                            "isMWISetMessage": "Lcom/android/internal/telephony/gsm/SmsMessage;->isMWISetMessage",
                            "isMwiDontStore": "Lcom/android/internal/telephony/gsm/SmsMessage;->isMwiDontStore",
                            "isReplace": "Lcom/android/internal/telephony/gsm/SmsMessage;->isReplace",
                            "isReplyPathPresent": "Lcom/android/internal/telephony/gsm/SmsMessage;->isReplyPathPresent",
                            "isStatusReportMessage": "Lcom/android/internal/telephony/gsm/SmsMessage;->isStatusReportMessage",
                            "isTypeZero": "Lcom/android/internal/telephony/gsm/SmsMessage;->isTypeZero",
                            "getSubmitPdu": "Lcom/android/internal/telephony/gsm/SmsMessage;->getSubmitPdu",
                            "getProtocolIdentifier": "Lcom/android/internal/telephony/gsm/SmsMessage;->getProtocolIdentifier",
                            "getStatus": "Lcom/android/internal/telephony/gsm/SmsMessage;->getStatus",
                            "getTPLayerLengthForPDU": "Lcom/android/internal/telephony/gsm/SmsMessage;->getTPLayerLengthForPDU"
                        }
                    },
                    "IccCard": {
                        "broadcastIccStateChangedIntent": "Lcom/android/internal/telephony/IccCard;->broadcastIccStateChangedIntent",
                        "changeIccFdnPassword": "Lcom/android/internal/telephony/IccCard;->changeIccFdnPassword",
                        "changeIccLockPassword": "Lcom/android/internal/telephony/IccCard;->changeIccLockPassword",
                        "getIccCardStatusDone": "Lcom/android/internal/telephony/IccCard;->getIccCardStatusDone",
                        "handleCdmaSubscriptionSource": "Lcom/android/internal/telephony/IccCard;->handleCdmaSubscriptionSource",
                        "handleIccCardStatus": "Lcom/android/internal/telephony/IccCard;->handleIccCardStatus",
                        "setIccFdnEnabled": "Lcom/android/internal/telephony/IccCard;->setIccFdnEnabled",
                        "setIccLockEnabled": "Lcom/android/internal/telephony/IccCard;->setIccLockEnabled",
                        "supplyNetworkDepersonalization": "Lcom/android/internal/telephony/IccCard;->supplyNetworkDepersonalization",
                        "supplyPin2": "Lcom/android/internal/telephony/IccCard;->supplyPin2",
                        "supplyPin": "Lcom/android/internal/telephony/IccCard;->supplyPin",
                        "supplyPuk2": "Lcom/android/internal/telephony/IccCard;->supplyPuk2",
                        "supplyPuk": "Lcom/android/internal/telephony/IccCard;->supplyPuk"
                    },
                    "IccFileHandler": {
                        "getEFLinearRecordSize": "Lcom/android/internal/telephony/IccFileHandler;->getEFLinearRecordSize",
                        "loadEFImgLinearFixed": "Lcom/android/internal/telephony/IccFileHandler;->loadEFImgLinearFixed",
                        "loadEFImgTransparent": "Lcom/android/internal/telephony/IccFileHandler;->loadEFImgTransparent",
                        "loadEFLinearFixedAll": "Lcom/android/internal/telephony/IccFileHandler;->loadEFLinearFixedAll",
                        "loadEFLinearFixed": "Lcom/android/internal/telephony/IccFileHandler;->loadEFLinearFixed",
                        "loadEFTransparent": "Lcom/android/internal/telephony/IccFileHandler;->loadEFTransparent",
                        "updateEFLinearFixed": "Lcom/android/internal/telephony/IccFileHandler;->updateEFLinearFixed",
                        "updateEFTransparent": "Lcom/android/internal/telephony/IccFileHandler;->updateEFTransparent"
                    },
                    "IccPhoneBookInterfaceManager": {
                        "onTransact": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->onTransact",
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->updateAdnRecordsInEfBySearch",
                        "getAdnRecordsSize": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->getAdnRecordsSize",
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->getAdnRecordsInEf"
                    },
                    "IccPhoneBookInterfaceManagerProxy": {
                        "onTransact": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManagerProxy;->onTransact",
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManagerProxy;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManagerProxy;->updateAdnRecordsInEfBySearch",
                        "getAdnRecordsSize": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManagerProxy;->getAdnRecordsSize",
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/IccPhoneBookInterfaceManagerProxy;->getAdnRecordsInEf"
                    },
                    "IccProvider": {
                        "query": "Lcom/android/internal/telephony/IccProvider;->query",
                        "loadFromEf": "Lcom/android/internal/telephony/IccProvider;->loadFromEf",
                        "insert": "Lcom/android/internal/telephony/IccProvider;->insert",
                        "addIccRecordToEf": "Lcom/android/internal/telephony/IccProvider;->addIccRecordToEf",
                        "deleteIccRecordFromEf": "Lcom/android/internal/telephony/IccProvider;->deleteIccRecordFromEf",
                        "updateIccRecordInEf": "Lcom/android/internal/telephony/IccProvider;->updateIccRecordInEf",
                        "delete": "Lcom/android/internal/telephony/IccProvider;->delete",
                        "update": "Lcom/android/internal/telephony/IccProvider;->update"
                    },
                    "IccRecords": {
                        "onAllRecordsLoaded": "Lcom/android/internal/telephony/IccRecords;->onAllRecordsLoaded",
                        "onReady": "Lcom/android/internal/telephony/IccRecords;->onReady",
                        "onRecordLoaded": "Lcom/android/internal/telephony/IccRecords;->onRecordLoaded",
                        "onRefresh": "Lcom/android/internal/telephony/IccRecords;->onRefresh",
                        "setMsisdnNumber": "Lcom/android/internal/telephony/IccRecords;->setMsisdnNumber",
                        "setVoiceCallForwardingFlag": "Lcom/android/internal/telephony/IccRecords;->setVoiceCallForwardingFlag",
                        "setVoiceMailNumber": "Lcom/android/internal/telephony/IccRecords;->setVoiceMailNumber",
                        "setVoiceMessageWaiting": "Lcom/android/internal/telephony/IccRecords;->setVoiceMessageWaiting"
                    },
                    "IccSmsInterfaceManager": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->copyMessageToIccEf",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->disableCellBroadcast",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->disableCellBroadcastRange",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->enableCellBroadcast",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->enableCellBroadcastRange",
                        "onTransact": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->onTransact",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->updateMessageOnIccEf",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->getAllMessagesFromIccEf",
                        "enforceReceiveAndSend": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->enforceReceiveAndSend",
                        "sendData": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->sendData",
                        "sendMultipartText": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->sendMultipartText",
                        "sendText": "Lcom/android/internal/telephony/IccSmsInterfaceManager;->sendText"
                    },
                    "IccSmsInterfaceManagerProxy": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->copyMessageToIccEf",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->disableCellBroadcast",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->disableCellBroadcastRange",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->enableCellBroadcast",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->enableCellBroadcastRange",
                        "onTransact": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->onTransact",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->updateMessageOnIccEf",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->getAllMessagesFromIccEf",
                        "sendData": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->sendData",
                        "sendMultipartText": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->sendMultipartText",
                        "sendText": "Lcom/android/internal/telephony/IccSmsInterfaceManagerProxy;->sendText"
                    },
                    "IIccPhoneBook$Stub$Proxy": {
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->updateAdnRecordsInEfBySearch",
                        "getAdnRecordsSize": "Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->getAdnRecordsSize",
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->getAdnRecordsInEf"
                    },
                    "IIccPhoneBook$Stub": {
                        "onTransact": "Lcom/android/internal/telephony/IIccPhoneBook$Stub;->onTransact",
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/IIccPhoneBook$Stub;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/IIccPhoneBook$Stub;->updateAdnRecordsInEfBySearch",
                        "getAdnRecordsSize": "Lcom/android/internal/telephony/IIccPhoneBook$Stub;->getAdnRecordsSize",
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/IIccPhoneBook$Stub;->getAdnRecordsInEf"
                    },
                    "IIccPhoneBook": {
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/IIccPhoneBook;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/IIccPhoneBook;->updateAdnRecordsInEfBySearch",
                        "getAdnRecordsSize": "Lcom/android/internal/telephony/IIccPhoneBook;->getAdnRecordsSize",
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/IIccPhoneBook;->getAdnRecordsInEf"
                    },
                    "ims": {
                        "IsimUiccRecords": {
                            "fetchIsimRecords": "Lcom/android/internal/telephony/ims/IsimUiccRecords;->fetchIsimRecords"
                        }
                    },
                    "IntRangeManager": {
                        "finishUpdate": "Lcom/android/internal/telephony/IntRangeManager;->finishUpdate"
                    },
                    "IPhoneSubInfo$Stub$Proxy": {
                        "getDeviceId": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getDeviceId",
                        "getDeviceSvn": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getDeviceSvn",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getIccSerialNumber",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getLine1AlphaTag",
                        "getLine1Number": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getLine1Number",
                        "getMsisdn": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getMsisdn",
                        "getSubscriberId": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getSubscriberId",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getVoiceMailAlphaTag",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getVoiceMailNumber"
                    },
                    "IPhoneSubInfo$Stub": {
                        "onTransact": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->onTransact",
                        "getDeviceId": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getDeviceId",
                        "getDeviceSvn": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getDeviceSvn",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getIccSerialNumber",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getLine1AlphaTag",
                        "getLine1Number": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getLine1Number",
                        "getMsisdn": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getMsisdn",
                        "getSubscriberId": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getSubscriberId",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getVoiceMailAlphaTag",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/IPhoneSubInfo$Stub;->getVoiceMailNumber"
                    },
                    "IPhoneSubInfo": {
                        "getDeviceId": "Lcom/android/internal/telephony/IPhoneSubInfo;->getDeviceId",
                        "getDeviceSvn": "Lcom/android/internal/telephony/IPhoneSubInfo;->getDeviceSvn",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/IPhoneSubInfo;->getIccSerialNumber",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo;->getLine1AlphaTag",
                        "getLine1Number": "Lcom/android/internal/telephony/IPhoneSubInfo;->getLine1Number",
                        "getMsisdn": "Lcom/android/internal/telephony/IPhoneSubInfo;->getMsisdn",
                        "getSubscriberId": "Lcom/android/internal/telephony/IPhoneSubInfo;->getSubscriberId",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/IPhoneSubInfo;->getVoiceMailAlphaTag",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/IPhoneSubInfo;->getVoiceMailNumber"
                    },
                    "ISms$Stub$Proxy": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->copyMessageToIccEf",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->disableCellBroadcast",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->disableCellBroadcastRange",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->enableCellBroadcast",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->enableCellBroadcastRange",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->updateMessageOnIccEf",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->getAllMessagesFromIccEf",
                        "sendData": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->sendData",
                        "sendMultipartText": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->sendMultipartText",
                        "sendText": "Lcom/android/internal/telephony/ISms$Stub$Proxy;->sendText"
                    },
                    "ISms$Stub": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/ISms$Stub;->copyMessageToIccEf",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/ISms$Stub;->disableCellBroadcast",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/ISms$Stub;->disableCellBroadcastRange",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/ISms$Stub;->enableCellBroadcast",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/ISms$Stub;->enableCellBroadcastRange",
                        "onTransact": "Lcom/android/internal/telephony/ISms$Stub;->onTransact",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/ISms$Stub;->updateMessageOnIccEf",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/ISms$Stub;->getAllMessagesFromIccEf",
                        "sendData": "Lcom/android/internal/telephony/ISms$Stub;->sendData",
                        "sendMultipartText": "Lcom/android/internal/telephony/ISms$Stub;->sendMultipartText",
                        "sendText": "Lcom/android/internal/telephony/ISms$Stub;->sendText"
                    },
                    "ISms": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/ISms;->copyMessageToIccEf",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/ISms;->disableCellBroadcast",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/ISms;->disableCellBroadcastRange",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/ISms;->enableCellBroadcast",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/ISms;->enableCellBroadcastRange",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/ISms;->updateMessageOnIccEf",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/ISms;->getAllMessagesFromIccEf",
                        "sendData": "Lcom/android/internal/telephony/ISms;->sendData",
                        "sendMultipartText": "Lcom/android/internal/telephony/ISms;->sendMultipartText",
                        "sendText": "Lcom/android/internal/telephony/ISms;->sendText"
                    },
                    "ITelephony$Stub$Proxy": {
                        "getCellLocation": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getCellLocation",
                        "disableDataConnectivity": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->disableDataConnectivity",
                        "enableDataConnectivity": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->enableDataConnectivity",
                        "endCall": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->endCall",
                        "isSimPinEnabled": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->isSimPinEnabled",
                        "supplyPin": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->supplyPin",
                        "getAllCellInfo": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getAllCellInfo",
                        "getNeighboringCellInfo": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getNeighboringCellInfo",
                        "answerRingingCall": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->answerRingingCall",
                        "call": "Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->call"
                    },
                    "ITelephony$Stub": {
                        "getCellLocation": "Lcom/android/internal/telephony/ITelephony$Stub;->getCellLocation",
                        "disableDataConnectivity": "Lcom/android/internal/telephony/ITelephony$Stub;->disableDataConnectivity",
                        "enableDataConnectivity": "Lcom/android/internal/telephony/ITelephony$Stub;->enableDataConnectivity",
                        "endCall": "Lcom/android/internal/telephony/ITelephony$Stub;->endCall",
                        "isSimPinEnabled": "Lcom/android/internal/telephony/ITelephony$Stub;->isSimPinEnabled",
                        "onTransact": "Lcom/android/internal/telephony/ITelephony$Stub;->onTransact",
                        "getAllCellInfo": "Lcom/android/internal/telephony/ITelephony$Stub;->getAllCellInfo",
                        "getNeighboringCellInfo": "Lcom/android/internal/telephony/ITelephony$Stub;->getNeighboringCellInfo",
                        "call": "Lcom/android/internal/telephony/ITelephony$Stub;->call"
                    },
                    "ITelephony": {
                        "getCellLocation": "Lcom/android/internal/telephony/ITelephony;->getCellLocation",
                        "disableDataConnectivity": "Lcom/android/internal/telephony/ITelephony;->disableDataConnectivity",
                        "enableDataConnectivity": "Lcom/android/internal/telephony/ITelephony;->enableDataConnectivity",
                        "endCall": "Lcom/android/internal/telephony/ITelephony;->endCall",
                        "isSimPinEnabled": "Lcom/android/internal/telephony/ITelephony;->isSimPinEnabled",
                        "getAllCellInfo": "Lcom/android/internal/telephony/ITelephony;->getAllCellInfo",
                        "getNeighboringCellInfo": "Lcom/android/internal/telephony/ITelephony;->getNeighboringCellInfo",
                        "call": "Lcom/android/internal/telephony/ITelephony;->call",
                        "getCdmaNeedsProvisioning": "Lcom/android/internal/telephony/ITelephony;->getCdmaNeedsProvisioning",
                        "isDataConnectivityPossible": "Lcom/android/internal/telephony/ITelephony;->isDataConnectivityPossible",
                        "isIdle": "Lcom/android/internal/telephony/ITelephony;->isIdle",
                        "isOffhook": "Lcom/android/internal/telephony/ITelephony;->isOffhook",
                        "isRadioOn": "Lcom/android/internal/telephony/ITelephony;->isRadioOn",
                        "isRinging": "Lcom/android/internal/telephony/ITelephony;->isRinging",
                        "getActivePhoneType": "Lcom/android/internal/telephony/ITelephony;->getActivePhoneType",
                        "getCallState": "Lcom/android/internal/telephony/ITelephony;->getCallState",
                        "getCdmaEriIconIndex": "Lcom/android/internal/telephony/ITelephony;->getCdmaEriIconIndex",
                        "getCdmaEriIconMode": "Lcom/android/internal/telephony/ITelephony;->getCdmaEriIconMode",
                        "getDataActivity": "Lcom/android/internal/telephony/ITelephony;->getDataActivity",
                        "getDataState": "Lcom/android/internal/telephony/ITelephony;->getDataState",
                        "getNetworkType": "Lcom/android/internal/telephony/ITelephony;->getNetworkType",
                        "getVoiceMessageCount": "Lcom/android/internal/telephony/ITelephony;->getVoiceMessageCount",
                        "getCdmaEriText": "Lcom/android/internal/telephony/ITelephony;->getCdmaEriText"
                    },
                    "ITelephonyRegistry$Stub$Proxy": {
                        "listen": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->listen",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyDataConnectionFailed",
                        "notifyDataConnection": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyDataConnection",
                        "notifyServiceState": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyServiceState",
                        "notifySignalStrength": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifySignalStrength"
                    },
                    "ITelephonyRegistry$Stub": {
                        "onTransact": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->onTransact",
                        "listen": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->listen",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->notifyDataConnectionFailed",
                        "notifyDataConnection": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->notifyDataConnection",
                        "notifyServiceState": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->notifyServiceState",
                        "notifySignalStrength": "Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->notifySignalStrength"
                    },
                    "ITelephonyRegistry": {
                        "listen": "Lcom/android/internal/telephony/ITelephonyRegistry;->listen",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/ITelephonyRegistry;->notifyDataConnectionFailed",
                        "notifyDataConnection": "Lcom/android/internal/telephony/ITelephonyRegistry;->notifyDataConnection",
                        "notifyServiceState": "Lcom/android/internal/telephony/ITelephonyRegistry;->notifyServiceState",
                        "notifySignalStrength": "Lcom/android/internal/telephony/ITelephonyRegistry;->notifySignalStrength"
                    },
                    "MccTable": {
                        "setLocaleFromMccIfNeeded": "Lcom/android/internal/telephony/MccTable;->setLocaleFromMccIfNeeded",
                        "setSystemLocale": "Lcom/android/internal/telephony/MccTable;->setSystemLocale",
                        "setTimezoneFromMccIfNeeded": "Lcom/android/internal/telephony/MccTable;->setTimezoneFromMccIfNeeded",
                        "setWifiCountryCodeFromMcc": "Lcom/android/internal/telephony/MccTable;->setWifiCountryCodeFromMcc",
                        "updateMccMncConfiguration": "Lcom/android/internal/telephony/MccTable;->updateMccMncConfiguration"
                    },
                    "MmiCode": {
                        "cancel": "Lcom/android/internal/telephony/MmiCode;->cancel"
                    },
                    "OperatorInfo": {
                        "toString": "Lcom/android/internal/telephony/OperatorInfo;->toString"
                    },
                    "PhoneBase": {
                        "dispose": "Lcom/android/internal/telephony/PhoneBase;->dispose",
                        "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/PhoneBase;->enableEnhancedVoicePrivacy",
                        "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/PhoneBase;->exitEmergencyCallbackMode",
                        "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/PhoneBase;->getEnhancedVoicePrivacy",
                        "getPreferredNetworkType": "Lcom/android/internal/telephony/PhoneBase;->getPreferredNetworkType",
                        "getSmscAddress": "Lcom/android/internal/telephony/PhoneBase;->getSmscAddress",
                        "<init>": "Lcom/android/internal/telephony/PhoneBase;-><init>",
                        "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/PhoneBase;->invokeOemRilRequestRaw",
                        "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/PhoneBase;->invokeOemRilRequestStrings",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/PhoneBase;->notifyDataConnectionFailed",
                        "notifyDataConnection": "Lcom/android/internal/telephony/PhoneBase;->notifyDataConnection",
                        "notifyServiceStateChangedP": "Lcom/android/internal/telephony/PhoneBase;->notifyServiceStateChangedP",
                        "queryAvailableBandMode": "Lcom/android/internal/telephony/PhoneBase;->queryAvailableBandMode",
                        "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/PhoneBase;->queryCdmaRoamingPreference",
                        "queryTTYMode": "Lcom/android/internal/telephony/PhoneBase;->queryTTYMode",
                        "requestIsimAuthentication": "Lcom/android/internal/telephony/PhoneBase;->requestIsimAuthentication",
                        "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/PhoneBase;->restoreSavedNetworkSelection",
                        "sendBurstDtmf": "Lcom/android/internal/telephony/PhoneBase;->sendBurstDtmf",
                        "setBandMode": "Lcom/android/internal/telephony/PhoneBase;->setBandMode",
                        "setCdmaRoamingPreference": "Lcom/android/internal/telephony/PhoneBase;->setCdmaRoamingPreference",
                        "setCdmaSubscription": "Lcom/android/internal/telephony/PhoneBase;->setCdmaSubscription",
                        "setPreferredNetworkType": "Lcom/android/internal/telephony/PhoneBase;->setPreferredNetworkType",
                        "setPropertiesByCarrier": "Lcom/android/internal/telephony/PhoneBase;->setPropertiesByCarrier",
                        "setSmscAddress": "Lcom/android/internal/telephony/PhoneBase;->setSmscAddress",
                        "setTTYMode": "Lcom/android/internal/telephony/PhoneBase;->setTTYMode",
                        "setVoiceMessageWaiting": "Lcom/android/internal/telephony/PhoneBase;->setVoiceMessageWaiting"
                    },
                    "PhoneFactory": {
                        "getCdmaPhone": "Lcom/android/internal/telephony/PhoneFactory;->getCdmaPhone",
                        "getGsmPhone": "Lcom/android/internal/telephony/PhoneFactory;->getGsmPhone",
                        "makeSipPhone": "Lcom/android/internal/telephony/PhoneFactory;->makeSipPhone",
                        "makeDefaultPhone": "Lcom/android/internal/telephony/PhoneFactory;->makeDefaultPhone",
                        "makeDefaultPhones": "Lcom/android/internal/telephony/PhoneFactory;->makeDefaultPhones"
                    },
                    "PhoneNotifier": {
                        "notifyDataConnection": "Lcom/android/internal/telephony/PhoneNotifier;->notifyDataConnection",
                        "notifyDataConnectionFailed": "Lcom/android/internal/telephony/PhoneNotifier;->notifyDataConnectionFailed",
                        "notifyServiceState": "Lcom/android/internal/telephony/PhoneNotifier;->notifyServiceState",
                        "notifySignalStrength": "Lcom/android/internal/telephony/PhoneNotifier;->notifySignalStrength"
                    },
                    "PhoneProxy": {
                        "deleteAndCreatePhone": "Lcom/android/internal/telephony/PhoneProxy;->deleteAndCreatePhone",
                        "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/PhoneProxy;->enableEnhancedVoicePrivacy",
                        "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/PhoneProxy;->exitEmergencyCallbackMode",
                        "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/PhoneProxy;->getEnhancedVoicePrivacy",
                        "getPreferredNetworkType": "Lcom/android/internal/telephony/PhoneProxy;->getPreferredNetworkType",
                        "getSmscAddress": "Lcom/android/internal/telephony/PhoneProxy;->getSmscAddress",
                        "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/PhoneProxy;->invokeOemRilRequestRaw",
                        "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/PhoneProxy;->invokeOemRilRequestStrings",
                        "queryAvailableBandMode": "Lcom/android/internal/telephony/PhoneProxy;->queryAvailableBandMode",
                        "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/PhoneProxy;->queryCdmaRoamingPreference",
                        "queryTTYMode": "Lcom/android/internal/telephony/PhoneProxy;->queryTTYMode",
                        "requestIsimAuthentication": "Lcom/android/internal/telephony/PhoneProxy;->requestIsimAuthentication",
                        "sendBurstDtmf": "Lcom/android/internal/telephony/PhoneProxy;->sendBurstDtmf",
                        "sendDtmf": "Lcom/android/internal/telephony/PhoneProxy;->sendDtmf",
                        "setBandMode": "Lcom/android/internal/telephony/PhoneProxy;->setBandMode",
                        "setCdmaRoamingPreference": "Lcom/android/internal/telephony/PhoneProxy;->setCdmaRoamingPreference",
                        "setCdmaSubscription": "Lcom/android/internal/telephony/PhoneProxy;->setCdmaSubscription",
                        "setPreferredNetworkType": "Lcom/android/internal/telephony/PhoneProxy;->setPreferredNetworkType",
                        "setSmscAddress": "Lcom/android/internal/telephony/PhoneProxy;->setSmscAddress",
                        "setTTYMode": "Lcom/android/internal/telephony/PhoneProxy;->setTTYMode",
                        "updatePhoneObject": "Lcom/android/internal/telephony/PhoneProxy;->updatePhoneObject"
                    },
                    "PhoneSubInfo": {
                        "onTransact": "Lcom/android/internal/telephony/PhoneSubInfo;->onTransact",
                        "getDeviceId": "Lcom/android/internal/telephony/PhoneSubInfo;->getDeviceId",
                        "getDeviceSvn": "Lcom/android/internal/telephony/PhoneSubInfo;->getDeviceSvn",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/PhoneSubInfo;->getIccSerialNumber",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/PhoneSubInfo;->getLine1AlphaTag",
                        "getLine1Number": "Lcom/android/internal/telephony/PhoneSubInfo;->getLine1Number",
                        "getMsisdn": "Lcom/android/internal/telephony/PhoneSubInfo;->getMsisdn",
                        "getSubscriberId": "Lcom/android/internal/telephony/PhoneSubInfo;->getSubscriberId",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/PhoneSubInfo;->getVoiceMailAlphaTag",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfo;->getVoiceMailNumber",
                        "getCompleteVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfo;->getCompleteVoiceMailNumber",
                        "getGroupIdLevel1": "Lcom/android/internal/telephony/PhoneSubInfo;->getGroupIdLevel1",
                        "getIsimDomain": "Lcom/android/internal/telephony/PhoneSubInfo;->getIsimDomain",
                        "getIsimImpi": "Lcom/android/internal/telephony/PhoneSubInfo;->getIsimImpi",
                        "getIsimImpu": "Lcom/android/internal/telephony/PhoneSubInfo;->getIsimImpu"
                    },
                    "PhoneSubInfoProxy": {
                        "onTransact": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->onTransact",
                        "getDeviceId": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getDeviceId",
                        "getDeviceSvn": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getDeviceSvn",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIccSerialNumber",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getLine1AlphaTag",
                        "getLine1Number": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getLine1Number",
                        "getMsisdn": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getMsisdn",
                        "getSubscriberId": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getSubscriberId",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getVoiceMailAlphaTag",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getVoiceMailNumber",
                        "getCompleteVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getCompleteVoiceMailNumber",
                        "getGroupIdLevel1": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getGroupIdLevel1",
                        "getIccSimChallengeResponse": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIccSimChallengeResponse",
                        "getIsimChallengeResponse": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimChallengeResponse",
                        "getIsimDomain": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimDomain",
                        "getIsimImpi": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimImpi",
                        "getIsimImpu": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimImpu",
                        "getIsimIst": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimIst",
                        "getIsimPcscf": "Lcom/android/internal/telephony/PhoneSubInfoProxy;->getIsimPcscf"
                    },
                    "Phone": {
                        "dispose": "Lcom/android/internal/telephony/Phone;->dispose",
                        "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/Phone;->enableEnhancedVoicePrivacy",
                        "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/Phone;->exitEmergencyCallbackMode",
                        "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/Phone;->getEnhancedVoicePrivacy",
                        "getPreferredNetworkType": "Lcom/android/internal/telephony/Phone;->getPreferredNetworkType",
                        "getSmscAddress": "Lcom/android/internal/telephony/Phone;->getSmscAddress",
                        "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/Phone;->invokeOemRilRequestRaw",
                        "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/Phone;->invokeOemRilRequestStrings",
                        "queryAvailableBandMode": "Lcom/android/internal/telephony/Phone;->queryAvailableBandMode",
                        "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/Phone;->queryCdmaRoamingPreference",
                        "queryTTYMode": "Lcom/android/internal/telephony/Phone;->queryTTYMode",
                        "requestIsimAuthentication": "Lcom/android/internal/telephony/Phone;->requestIsimAuthentication",
                        "sendBurstDtmf": "Lcom/android/internal/telephony/Phone;->sendBurstDtmf",
                        "setBandMode": "Lcom/android/internal/telephony/Phone;->setBandMode",
                        "setCdmaRoamingPreference": "Lcom/android/internal/telephony/Phone;->setCdmaRoamingPreference",
                        "setCdmaSubscription": "Lcom/android/internal/telephony/Phone;->setCdmaSubscription",
                        "setPreferredNetworkType": "Lcom/android/internal/telephony/Phone;->setPreferredNetworkType",
                        "setSmscAddress": "Lcom/android/internal/telephony/Phone;->setSmscAddress",
                        "setTTYMode": "Lcom/android/internal/telephony/Phone;->setTTYMode",
                        "setVoiceMessageWaiting": "Lcom/android/internal/telephony/Phone;->setVoiceMessageWaiting"
                    },
                    "RetryManager": {
                        "getRetryTimer": "Lcom/android/internal/telephony/RetryManager;->getRetryTimer"
                    },
                    "RIL$1": {
                        "onReceive": "Lcom/android/internal/telephony/RIL$1;->onReceive"
                    },
                    "RIL$RILReceiver": {
                        "run": "Lcom/android/internal/telephony/RIL$RILReceiver;->run"
                    },
                    "RIL": {
                        "acceptCall": "Lcom/android/internal/telephony/RIL;->acceptCall",
                        "acknowledgeIncomingGsmSmsWithPdu": "Lcom/android/internal/telephony/RIL;->acknowledgeIncomingGsmSmsWithPdu",
                        "acknowledgeLastIncomingCdmaSms": "Lcom/android/internal/telephony/RIL;->acknowledgeLastIncomingCdmaSms",
                        "acknowledgeLastIncomingGsmSms": "Lcom/android/internal/telephony/RIL;->acknowledgeLastIncomingGsmSms",
                        "acquireWakeLock": "Lcom/android/internal/telephony/RIL;->acquireWakeLock",
                        "cancelPendingUssd": "Lcom/android/internal/telephony/RIL;->cancelPendingUssd",
                        "changeBarringPassword": "Lcom/android/internal/telephony/RIL;->changeBarringPassword",
                        "changeIccPin2ForApp": "Lcom/android/internal/telephony/RIL;->changeIccPin2ForApp",
                        "changeIccPin2": "Lcom/android/internal/telephony/RIL;->changeIccPin2",
                        "changeIccPinForApp": "Lcom/android/internal/telephony/RIL;->changeIccPinForApp",
                        "changeIccPin": "Lcom/android/internal/telephony/RIL;->changeIccPin",
                        "conference": "Lcom/android/internal/telephony/RIL;->conference",
                        "deactivateDataCall": "Lcom/android/internal/telephony/RIL;->deactivateDataCall",
                        "deleteSmsOnRuim": "Lcom/android/internal/telephony/RIL;->deleteSmsOnRuim",
                        "deleteSmsOnSim": "Lcom/android/internal/telephony/RIL;->deleteSmsOnSim",
                        "dial": "Lcom/android/internal/telephony/RIL;->dial",
                        "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/RIL;->exitEmergencyCallbackMode",
                        "explicitCallTransfer": "Lcom/android/internal/telephony/RIL;->explicitCallTransfer",
                        "getAvailableNetworks": "Lcom/android/internal/telephony/RIL;->getAvailableNetworks",
                        "getBasebandVersion": "Lcom/android/internal/telephony/RIL;->getBasebandVersion",
                        "getCdmaBroadcastConfig": "Lcom/android/internal/telephony/RIL;->getCdmaBroadcastConfig",
                        "getCDMASubscription": "Lcom/android/internal/telephony/RIL;->getCDMASubscription",
                        "getCdmaSubscriptionSource": "Lcom/android/internal/telephony/RIL;->getCdmaSubscriptionSource",
                        "getCLIR": "Lcom/android/internal/telephony/RIL;->getCLIR",
                        "getCurrentCalls": "Lcom/android/internal/telephony/RIL;->getCurrentCalls",
                        "getDataCallList": "Lcom/android/internal/telephony/RIL;->getDataCallList",
                        "getDataRegistrationState": "Lcom/android/internal/telephony/RIL;->getDataRegistrationState",
                        "getDeviceIdentity": "Lcom/android/internal/telephony/RIL;->getDeviceIdentity",
                        "getGsmBroadcastConfig": "Lcom/android/internal/telephony/RIL;->getGsmBroadcastConfig",
                        "getIccCardStatus": "Lcom/android/internal/telephony/RIL;->getIccCardStatus",
                        "getIMEI": "Lcom/android/internal/telephony/RIL;->getIMEI",
                        "getIMEISV": "Lcom/android/internal/telephony/RIL;->getIMEISV",
                        "getIMSI": "Lcom/android/internal/telephony/RIL;->getIMSI",
                        "getIMSIForApp": "Lcom/android/internal/telephony/RIL;->getIMSIForApp",
                        "getLastCallFailCause": "Lcom/android/internal/telephony/RIL;->getLastCallFailCause",
                        "getLastDataCallFailCause": "Lcom/android/internal/telephony/RIL;->getLastDataCallFailCause",
                        "getLastPdpFailCause": "Lcom/android/internal/telephony/RIL;->getLastPdpFailCause",
                        "getMute": "Lcom/android/internal/telephony/RIL;->getMute",
                        "getNeighboringCids": "Lcom/android/internal/telephony/RIL;->getNeighboringCids",
                        "getNetworkSelectionMode": "Lcom/android/internal/telephony/RIL;->getNetworkSelectionMode",
                        "getOperator": "Lcom/android/internal/telephony/RIL;->getOperator",
                        "getPDPContextList": "Lcom/android/internal/telephony/RIL;->getPDPContextList",
                        "getPreferredNetworkType": "Lcom/android/internal/telephony/RIL;->getPreferredNetworkType",
                        "getPreferredVoicePrivacy": "Lcom/android/internal/telephony/RIL;->getPreferredVoicePrivacy",
                        "getSignalStrength": "Lcom/android/internal/telephony/RIL;->getSignalStrength",
                        "getSmscAddress": "Lcom/android/internal/telephony/RIL;->getSmscAddress",
                        "getVoiceRadioTechnology": "Lcom/android/internal/telephony/RIL;->getVoiceRadioTechnology",
                        "getVoiceRegistrationState": "Lcom/android/internal/telephony/RIL;->getVoiceRegistrationState",
                        "handleCallSetupRequestFromSim": "Lcom/android/internal/telephony/RIL;->handleCallSetupRequestFromSim",
                        "hangupConnection": "Lcom/android/internal/telephony/RIL;->hangupConnection",
                        "hangupForegroundResumeBackground": "Lcom/android/internal/telephony/RIL;->hangupForegroundResumeBackground",
                        "hangupWaitingOrBackground": "Lcom/android/internal/telephony/RIL;->hangupWaitingOrBackground",
                        "iccIOForApp": "Lcom/android/internal/telephony/RIL;->iccIOForApp",
                        "iccIO": "Lcom/android/internal/telephony/RIL;->iccIO",
                        "<init>": "Lcom/android/internal/telephony/RIL;-><init>",
                        "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/RIL;->invokeOemRilRequestRaw",
                        "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/RIL;->invokeOemRilRequestStrings",
                        "onRadioAvailable": "Lcom/android/internal/telephony/RIL;->onRadioAvailable",
                        "processResponse": "Lcom/android/internal/telephony/RIL;->processResponse",
                        "processUnsolicited": "Lcom/android/internal/telephony/RIL;->processUnsolicited",
                        "queryAvailableBandMode": "Lcom/android/internal/telephony/RIL;->queryAvailableBandMode",
                        "queryCallForwardStatus": "Lcom/android/internal/telephony/RIL;->queryCallForwardStatus",
                        "queryCallWaiting": "Lcom/android/internal/telephony/RIL;->queryCallWaiting",
                        "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/RIL;->queryCdmaRoamingPreference",
                        "queryCLIP": "Lcom/android/internal/telephony/RIL;->queryCLIP",
                        "queryFacilityLockForApp": "Lcom/android/internal/telephony/RIL;->queryFacilityLockForApp",
                        "queryFacilityLock": "Lcom/android/internal/telephony/RIL;->queryFacilityLock",
                        "queryTTYMode": "Lcom/android/internal/telephony/RIL;->queryTTYMode",
                        "rejectCall": "Lcom/android/internal/telephony/RIL;->rejectCall",
                        "releaseWakeLockIfDone": "Lcom/android/internal/telephony/RIL;->releaseWakeLockIfDone",
                        "reportSmsMemoryStatus": "Lcom/android/internal/telephony/RIL;->reportSmsMemoryStatus",
                        "reportStkServiceIsRunning": "Lcom/android/internal/telephony/RIL;->reportStkServiceIsRunning",
                        "requestIsimAuthentication": "Lcom/android/internal/telephony/RIL;->requestIsimAuthentication",
                        "resetRadio": "Lcom/android/internal/telephony/RIL;->resetRadio",
                        "sendBurstDtmf": "Lcom/android/internal/telephony/RIL;->sendBurstDtmf",
                        "sendCDMAFeatureCode": "Lcom/android/internal/telephony/RIL;->sendCDMAFeatureCode",
                        "sendCdmaSms": "Lcom/android/internal/telephony/RIL;->sendCdmaSms",
                        "send": "Lcom/android/internal/telephony/RIL;->send",
                        "sendDtmf": "Lcom/android/internal/telephony/RIL;->sendDtmf",
                        "sendEnvelope": "Lcom/android/internal/telephony/RIL;->sendEnvelope",
                        "sendEnvelopeWithStatus": "Lcom/android/internal/telephony/RIL;->sendEnvelopeWithStatus",
                        "sendScreenState": "Lcom/android/internal/telephony/RIL;->sendScreenState",
                        "sendSMS": "Lcom/android/internal/telephony/RIL;->sendSMS",
                        "sendTerminalResponse": "Lcom/android/internal/telephony/RIL;->sendTerminalResponse",
                        "sendUSSD": "Lcom/android/internal/telephony/RIL;->sendUSSD",
                        "separateConnection": "Lcom/android/internal/telephony/RIL;->separateConnection",
                        "setBandMode": "Lcom/android/internal/telephony/RIL;->setBandMode",
                        "setCallForward": "Lcom/android/internal/telephony/RIL;->setCallForward",
                        "setCallWaiting": "Lcom/android/internal/telephony/RIL;->setCallWaiting",
                        "setCdmaBroadcastActivation": "Lcom/android/internal/telephony/RIL;->setCdmaBroadcastActivation",
                        "setCdmaBroadcastConfig": "Lcom/android/internal/telephony/RIL;->setCdmaBroadcastConfig",
                        "setCdmaRoamingPreference": "Lcom/android/internal/telephony/RIL;->setCdmaRoamingPreference",
                        "setCdmaSubscriptionSource": "Lcom/android/internal/telephony/RIL;->setCdmaSubscriptionSource",
                        "setCLIR": "Lcom/android/internal/telephony/RIL;->setCLIR",
                        "setCurrentPreferredNetworkType": "Lcom/android/internal/telephony/RIL;->setCurrentPreferredNetworkType",
                        "setFacilityLockForApp": "Lcom/android/internal/telephony/RIL;->setFacilityLockForApp",
                        "setFacilityLock": "Lcom/android/internal/telephony/RIL;->setFacilityLock",
                        "setGsmBroadcastActivation": "Lcom/android/internal/telephony/RIL;->setGsmBroadcastActivation",
                        "setGsmBroadcastConfig": "Lcom/android/internal/telephony/RIL;->setGsmBroadcastConfig",
                        "setLocationUpdates": "Lcom/android/internal/telephony/RIL;->setLocationUpdates",
                        "setMute": "Lcom/android/internal/telephony/RIL;->setMute",
                        "setNetworkSelectionModeAutomatic": "Lcom/android/internal/telephony/RIL;->setNetworkSelectionModeAutomatic",
                        "setNetworkSelectionModeManual": "Lcom/android/internal/telephony/RIL;->setNetworkSelectionModeManual",
                        "setPreferredNetworkType": "Lcom/android/internal/telephony/RIL;->setPreferredNetworkType",
                        "setPreferredVoicePrivacy": "Lcom/android/internal/telephony/RIL;->setPreferredVoicePrivacy",
                        "setRadioPower": "Lcom/android/internal/telephony/RIL;->setRadioPower",
                        "setRadioState": "Lcom/android/internal/telephony/RIL;->setRadioState",
                        "setSmscAddress": "Lcom/android/internal/telephony/RIL;->setSmscAddress",
                        "setSuppServiceNotifications": "Lcom/android/internal/telephony/RIL;->setSuppServiceNotifications",
                        "setTTYMode": "Lcom/android/internal/telephony/RIL;->setTTYMode",
                        "setupDataCall": "Lcom/android/internal/telephony/RIL;->setupDataCall",
                        "startDtmf": "Lcom/android/internal/telephony/RIL;->startDtmf",
                        "stopDtmf": "Lcom/android/internal/telephony/RIL;->stopDtmf",
                        "supplyIccPin2ForApp": "Lcom/android/internal/telephony/RIL;->supplyIccPin2ForApp",
                        "supplyIccPin2": "Lcom/android/internal/telephony/RIL;->supplyIccPin2",
                        "supplyIccPinForApp": "Lcom/android/internal/telephony/RIL;->supplyIccPinForApp",
                        "supplyIccPin": "Lcom/android/internal/telephony/RIL;->supplyIccPin",
                        "supplyIccPuk2ForApp": "Lcom/android/internal/telephony/RIL;->supplyIccPuk2ForApp",
                        "supplyIccPuk2": "Lcom/android/internal/telephony/RIL;->supplyIccPuk2",
                        "supplyIccPukForApp": "Lcom/android/internal/telephony/RIL;->supplyIccPukForApp",
                        "supplyIccPuk": "Lcom/android/internal/telephony/RIL;->supplyIccPuk",
                        "supplyNetworkDepersonalization": "Lcom/android/internal/telephony/RIL;->supplyNetworkDepersonalization",
                        "switchToRadioState": "Lcom/android/internal/telephony/RIL;->switchToRadioState",
                        "switchWaitingOrHoldingAndActive": "Lcom/android/internal/telephony/RIL;->switchWaitingOrHoldingAndActive",
                        "writeSmsToRuim": "Lcom/android/internal/telephony/RIL;->writeSmsToRuim",
                        "writeSmsToSim": "Lcom/android/internal/telephony/RIL;->writeSmsToSim"
                    },
                    "ServiceStateTracker": {
                        "processPendingRadioPowerOffAfterDataOff": "Lcom/android/internal/telephony/ServiceStateTracker;->processPendingRadioPowerOffAfterDataOff",
                        "disableLocationUpdates": "Lcom/android/internal/telephony/ServiceStateTracker;->disableLocationUpdates",
                        "disableSingleLocationUpdate": "Lcom/android/internal/telephony/ServiceStateTracker;->disableSingleLocationUpdate",
                        "enableLocationUpdates": "Lcom/android/internal/telephony/ServiceStateTracker;->enableLocationUpdates",
                        "enableSingleLocationUpdate": "Lcom/android/internal/telephony/ServiceStateTracker;->enableSingleLocationUpdate",
                        "handlePollStateResult": "Lcom/android/internal/telephony/ServiceStateTracker;->handlePollStateResult",
                        "hangupAndPowerOff": "Lcom/android/internal/telephony/ServiceStateTracker;->hangupAndPowerOff",
                        "powerOffRadioSafely": "Lcom/android/internal/telephony/ServiceStateTracker;->powerOffRadioSafely",
                        "reRegisterNetwork": "Lcom/android/internal/telephony/ServiceStateTracker;->reRegisterNetwork",
                        "setPowerStateToDesired": "Lcom/android/internal/telephony/ServiceStateTracker;->setPowerStateToDesired",
                        "setRadioPower": "Lcom/android/internal/telephony/ServiceStateTracker;->setRadioPower",
                        "updateSpnDisplay": "Lcom/android/internal/telephony/ServiceStateTracker;->updateSpnDisplay"
                    },
                    "sip": {
                        "SipCallBase": {
                            "hangupIfAlive": "Lcom/android/internal/telephony/sip/SipCallBase;->hangupIfAlive"
                        },
                        "SipCommandInterface": {
                            "onRadioAvailable": "Lcom/android/internal/telephony/sip/SipCommandInterface;->onRadioAvailable",
                            "setCurrentPreferredNetworkType": "Lcom/android/internal/telephony/sip/SipCommandInterface;->setCurrentPreferredNetworkType",
                            "setRadioState": "Lcom/android/internal/telephony/sip/SipCommandInterface;->setRadioState"
                        },
                        "SipPhone$SipAudioCallAdapter": {
                            "onCallBusy": "Lcom/android/internal/telephony/sip/SipPhone$SipAudioCallAdapter;->onCallBusy",
                            "onCallEnded": "Lcom/android/internal/telephony/sip/SipPhone$SipAudioCallAdapter;->onCallEnded",
                            "onError": "Lcom/android/internal/telephony/sip/SipPhone$SipAudioCallAdapter;->onError"
                        },
                        "SipPhone$SipCall": {
                            "dial": "Lcom/android/internal/telephony/sip/SipPhone$SipCall;->dial",
                            "hangup": "Lcom/android/internal/telephony/sip/SipPhone$SipCall;->hangup",
                            "hangupIfAlive": "Lcom/android/internal/telephony/sip/SipPhone$SipCall;->hangupIfAlive",
                            "rejectCall": "Lcom/android/internal/telephony/sip/SipPhone$SipCall;->rejectCall"
                        },
                        "SipPhone$SipConnection$1": {
                            "onCallBusy": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onCallBusy",
                            "onCallEnded": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onCallEnded",
                            "onCallEstablished": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onCallEstablished",
                            "onCallHeld": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onCallHeld",
                            "onChanged": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onChanged",
                            "onError": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection$1;->onError"
                        },
                        "SipPhone$SipConnection": {
                            "dial": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection;->dial",
                            "hangup": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection;->hangup",
                            "separate": "Lcom/android/internal/telephony/sip/SipPhone$SipConnection;->separate"
                        },
                        "SipPhoneBase": {
                            "dial": "Lcom/android/internal/telephony/sip/SipPhoneBase;->dial",
                            "dispose": "Lcom/android/internal/telephony/sip/SipPhoneBase;->dispose",
                            "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/sip/SipPhoneBase;->enableEnhancedVoicePrivacy",
                            "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/sip/SipPhoneBase;->exitEmergencyCallbackMode",
                            "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/sip/SipPhoneBase;->getEnhancedVoicePrivacy",
                            "getPreferredNetworkType": "Lcom/android/internal/telephony/sip/SipPhoneBase;->getPreferredNetworkType",
                            "getSmscAddress": "Lcom/android/internal/telephony/sip/SipPhoneBase;->getSmscAddress",
                            "<init>": "Lcom/android/internal/telephony/sip/SipPhoneBase;-><init>",
                            "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/sip/SipPhoneBase;->invokeOemRilRequestRaw",
                            "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/sip/SipPhoneBase;->invokeOemRilRequestStrings",
                            "notifyDataConnectionFailed": "Lcom/android/internal/telephony/sip/SipPhoneBase;->notifyDataConnectionFailed",
                            "notifyDataConnection": "Lcom/android/internal/telephony/sip/SipPhoneBase;->notifyDataConnection",
                            "notifyServiceStateChanged": "Lcom/android/internal/telephony/sip/SipPhoneBase;->notifyServiceStateChanged",
                            "notifyServiceStateChangedP": "Lcom/android/internal/telephony/sip/SipPhoneBase;->notifyServiceStateChangedP",
                            "queryAvailableBandMode": "Lcom/android/internal/telephony/sip/SipPhoneBase;->queryAvailableBandMode",
                            "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/sip/SipPhoneBase;->queryCdmaRoamingPreference",
                            "queryTTYMode": "Lcom/android/internal/telephony/sip/SipPhoneBase;->queryTTYMode",
                            "requestIsimAuthentication": "Lcom/android/internal/telephony/sip/SipPhoneBase;->requestIsimAuthentication",
                            "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/sip/SipPhoneBase;->restoreSavedNetworkSelection",
                            "sendBurstDtmf": "Lcom/android/internal/telephony/sip/SipPhoneBase;->sendBurstDtmf",
                            "setBandMode": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setBandMode",
                            "setCdmaRoamingPreference": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setCdmaRoamingPreference",
                            "setCdmaSubscription": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setCdmaSubscription",
                            "setLine1Number": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setLine1Number",
                            "setPreferredNetworkType": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setPreferredNetworkType",
                            "setPropertiesByCarrier": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setPropertiesByCarrier",
                            "setSmscAddress": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setSmscAddress",
                            "setTTYMode": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setTTYMode",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/sip/SipPhoneBase;->setVoiceMessageWaiting"
                        },
                        "SipPhone": {
                            "dialInternal": "Lcom/android/internal/telephony/sip/SipPhone;->dialInternal",
                            "dial": "Lcom/android/internal/telephony/sip/SipPhone;->dial",
                            "dispose": "Lcom/android/internal/telephony/sip/SipPhone;->dispose",
                            "enableEnhancedVoicePrivacy": "Lcom/android/internal/telephony/sip/SipPhone;->enableEnhancedVoicePrivacy",
                            "exitEmergencyCallbackMode": "Lcom/android/internal/telephony/sip/SipPhone;->exitEmergencyCallbackMode",
                            "getEnhancedVoicePrivacy": "Lcom/android/internal/telephony/sip/SipPhone;->getEnhancedVoicePrivacy",
                            "getPreferredNetworkType": "Lcom/android/internal/telephony/sip/SipPhone;->getPreferredNetworkType",
                            "getSmscAddress": "Lcom/android/internal/telephony/sip/SipPhone;->getSmscAddress",
                            "<init>": "Lcom/android/internal/telephony/sip/SipPhone;-><init>",
                            "invokeOemRilRequestRaw": "Lcom/android/internal/telephony/sip/SipPhone;->invokeOemRilRequestRaw",
                            "invokeOemRilRequestStrings": "Lcom/android/internal/telephony/sip/SipPhone;->invokeOemRilRequestStrings",
                            "notifyDataConnectionFailed": "Lcom/android/internal/telephony/sip/SipPhone;->notifyDataConnectionFailed",
                            "notifyDataConnection": "Lcom/android/internal/telephony/sip/SipPhone;->notifyDataConnection",
                            "notifyServiceStateChanged": "Lcom/android/internal/telephony/sip/SipPhone;->notifyServiceStateChanged",
                            "notifyServiceStateChangedP": "Lcom/android/internal/telephony/sip/SipPhone;->notifyServiceStateChangedP",
                            "queryAvailableBandMode": "Lcom/android/internal/telephony/sip/SipPhone;->queryAvailableBandMode",
                            "queryCdmaRoamingPreference": "Lcom/android/internal/telephony/sip/SipPhone;->queryCdmaRoamingPreference",
                            "queryTTYMode": "Lcom/android/internal/telephony/sip/SipPhone;->queryTTYMode",
                            "requestIsimAuthentication": "Lcom/android/internal/telephony/sip/SipPhone;->requestIsimAuthentication",
                            "restoreSavedNetworkSelection": "Lcom/android/internal/telephony/sip/SipPhone;->restoreSavedNetworkSelection",
                            "sendBurstDtmf": "Lcom/android/internal/telephony/sip/SipPhone;->sendBurstDtmf",
                            "setBandMode": "Lcom/android/internal/telephony/sip/SipPhone;->setBandMode",
                            "setCdmaRoamingPreference": "Lcom/android/internal/telephony/sip/SipPhone;->setCdmaRoamingPreference",
                            "setCdmaSubscription": "Lcom/android/internal/telephony/sip/SipPhone;->setCdmaSubscription",
                            "setPreferredNetworkType": "Lcom/android/internal/telephony/sip/SipPhone;->setPreferredNetworkType",
                            "setPropertiesByCarrier": "Lcom/android/internal/telephony/sip/SipPhone;->setPropertiesByCarrier",
                            "setSmscAddress": "Lcom/android/internal/telephony/sip/SipPhone;->setSmscAddress",
                            "setTTYMode": "Lcom/android/internal/telephony/sip/SipPhone;->setTTYMode",
                            "setVoiceMessageWaiting": "Lcom/android/internal/telephony/sip/SipPhone;->setVoiceMessageWaiting"
                        },
                        "SipPhoneFactory": {
                            "makePhone": "Lcom/android/internal/telephony/sip/SipPhoneFactory;->makePhone"
                        }
                    },
                    "SMSDispatcher$1": {
                        "onReceive": "Lcom/android/internal/telephony/SMSDispatcher$1;->onReceive"
                    },
                    "SMSDispatcher": {
                        "dispatchMessage": "Lcom/android/internal/telephony/SMSDispatcher;->dispatchMessage",
                        "dispatchNormalMessage": "Lcom/android/internal/telephony/SMSDispatcher;->dispatchNormalMessage",
                        "processMessagePart": "Lcom/android/internal/telephony/SMSDispatcher;->processMessagePart",
                        "acknowledgeLastIncomingSms": "Lcom/android/internal/telephony/SMSDispatcher;->acknowledgeLastIncomingSms",
                        "dispatch": "Lcom/android/internal/telephony/SMSDispatcher;->dispatch",
                        "dispatchBroadcastMessage": "Lcom/android/internal/telephony/SMSDispatcher;->dispatchBroadcastMessage",
                        "dispatchPdus": "Lcom/android/internal/telephony/SMSDispatcher;->dispatchPdus",
                        "dispatchPortAddressedPdus": "Lcom/android/internal/telephony/SMSDispatcher;->dispatchPortAddressedPdus",
                        "notifyAndAcknowledgeLastIncomingSms": "Lcom/android/internal/telephony/SMSDispatcher;->notifyAndAcknowledgeLastIncomingSms",
                        "sendRawPdu": "Lcom/android/internal/telephony/SMSDispatcher;->sendRawPdu",
                        "sendSms": "Lcom/android/internal/telephony/SMSDispatcher;->sendSms"
                    },
                    "SmsStorageMonitor$1": {
                        "onReceive": "Lcom/android/internal/telephony/SmsStorageMonitor$1;->onReceive"
                    },
                    "SmsStorageMonitor": {
                        "handleIccFull": "Lcom/android/internal/telephony/SmsStorageMonitor;->handleIccFull"
                    },
                    "test": {
                        "ModelInterpreter": {
                            "<init>": "Lcom/android/internal/telephony/test/ModelInterpreter;-><init>"
                        },
                        "SimulatedCommands": {
                            "<init>": "Lcom/android/internal/telephony/test/SimulatedCommands;-><init>",
                            "onRadioAvailable": "Lcom/android/internal/telephony/test/SimulatedCommands;->onRadioAvailable",
                            "setCurrentPreferredNetworkType": "Lcom/android/internal/telephony/test/SimulatedCommands;->setCurrentPreferredNetworkType",
                            "setPreferredVoicePrivacy": "Lcom/android/internal/telephony/test/SimulatedCommands;->setPreferredVoicePrivacy",
                            "setRadioPower": "Lcom/android/internal/telephony/test/SimulatedCommands;->setRadioPower",
                            "setRadioState": "Lcom/android/internal/telephony/test/SimulatedCommands;->setRadioState",
                            "shutdown": "Lcom/android/internal/telephony/test/SimulatedCommands;->shutdown"
                        }
                    },
                    "WapPushOverSms": {
                        "dispatchWapPdu": "Lcom/android/internal/telephony/WapPushOverSms;->dispatchWapPdu"
                    },
                    "SmsAddress": {
                        "isAlphanumeric": "Lcom/android/internal/telephony/SmsAddress;->isAlphanumeric",
                        "isNetworkSpecific": "Lcom/android/internal/telephony/SmsAddress;->isNetworkSpecific",
                        "getAddressString": "Lcom/android/internal/telephony/SmsAddress;->getAddressString"
                    },
                    "SmsMessageBase": {
                        "getMessageClass": "Lcom/android/internal/telephony/SmsMessageBase;->getMessageClass",
                        "isCphsMwiMessage": "Lcom/android/internal/telephony/SmsMessageBase;->isCphsMwiMessage",
                        "isEmail": "Lcom/android/internal/telephony/SmsMessageBase;->isEmail",
                        "isMWIClearMessage": "Lcom/android/internal/telephony/SmsMessageBase;->isMWIClearMessage",
                        "isMWISetMessage": "Lcom/android/internal/telephony/SmsMessageBase;->isMWISetMessage",
                        "isMwiDontStore": "Lcom/android/internal/telephony/SmsMessageBase;->isMwiDontStore",
                        "isReplace": "Lcom/android/internal/telephony/SmsMessageBase;->isReplace",
                        "isReplyPathPresent": "Lcom/android/internal/telephony/SmsMessageBase;->isReplyPathPresent",
                        "isStatusReportMessage": "Lcom/android/internal/telephony/SmsMessageBase;->isStatusReportMessage",
                        "getPdu": "Lcom/android/internal/telephony/SmsMessageBase;->getPdu",
                        "getUserData": "Lcom/android/internal/telephony/SmsMessageBase;->getUserData",
                        "getUserDataHeader": "Lcom/android/internal/telephony/SmsMessageBase;->getUserDataHeader",
                        "getIndexOnIcc": "Lcom/android/internal/telephony/SmsMessageBase;->getIndexOnIcc",
                        "getProtocolIdentifier": "Lcom/android/internal/telephony/SmsMessageBase;->getProtocolIdentifier",
                        "getStatus": "Lcom/android/internal/telephony/SmsMessageBase;->getStatus",
                        "getStatusOnIcc": "Lcom/android/internal/telephony/SmsMessageBase;->getStatusOnIcc",
                        "getDisplayMessageBody": "Lcom/android/internal/telephony/SmsMessageBase;->getDisplayMessageBody",
                        "getDisplayOriginatingAddress": "Lcom/android/internal/telephony/SmsMessageBase;->getDisplayOriginatingAddress",
                        "getEmailBody": "Lcom/android/internal/telephony/SmsMessageBase;->getEmailBody",
                        "getEmailFrom": "Lcom/android/internal/telephony/SmsMessageBase;->getEmailFrom",
                        "getMessageBody": "Lcom/android/internal/telephony/SmsMessageBase;->getMessageBody",
                        "getOriginatingAddress": "Lcom/android/internal/telephony/SmsMessageBase;->getOriginatingAddress",
                        "getPseudoSubject": "Lcom/android/internal/telephony/SmsMessageBase;->getPseudoSubject",
                        "getServiceCenterAddress": "Lcom/android/internal/telephony/SmsMessageBase;->getServiceCenterAddress",
                        "getTimestampMillis": "Lcom/android/internal/telephony/SmsMessageBase;->getTimestampMillis"
                    },
                    "SmsRawData": {
                        "getBytes": "Lcom/android/internal/telephony/SmsRawData;->getBytes"
                    },
                    "PhoneSubInfoController": {
                        "getCompleteVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getCompleteVoiceMailNumber",
                        "getCompleteVoiceMailNumberForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getCompleteVoiceMailNumberForSubscriber",
                        "getDeviceId": "Lcom/android/internal/telephony/PhoneSubInfoController;->getDeviceId",
                        "getDeviceIdForPhone": "Lcom/android/internal/telephony/PhoneSubInfoController;->getDeviceIdForPhone",
                        "getDeviceSvn": "Lcom/android/internal/telephony/PhoneSubInfoController;->getDeviceSvn",
                        "getDeviceSvnUsingSubId": "Lcom/android/internal/telephony/PhoneSubInfoController;->getDeviceSvnUsingSubId",
                        "getGroupIdLevel1": "Lcom/android/internal/telephony/PhoneSubInfoController;->getGroupIdLevel1",
                        "getGroupIdLevel1ForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getGroupIdLevel1ForSubscriber",
                        "getIccSerialNumber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIccSerialNumber",
                        "getIccSerialNumberForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIccSerialNumberForSubscriber",
                        "getIccSimChallengeResponse": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIccSimChallengeResponse",
                        "getImeiForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getImeiForSubscriber",
                        "getIsimChallengeResponse": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimChallengeResponse",
                        "getIsimDomain": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimDomain",
                        "getIsimImpi": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimImpi",
                        "getIsimImpu": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimImpu",
                        "getIsimIst": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimIst",
                        "getIsimPcscf": "Lcom/android/internal/telephony/PhoneSubInfoController;->getIsimPcscf",
                        "getLine1AlphaTag": "Lcom/android/internal/telephony/PhoneSubInfoController;->getLine1AlphaTag",
                        "getLine1AlphaTagForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getLine1AlphaTagForSubscriber",
                        "getLine1Number": "Lcom/android/internal/telephony/PhoneSubInfoController;->getLine1Number",
                        "getLine1NumberForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getLine1NumberForSubscriber",
                        "getMsisdn": "Lcom/android/internal/telephony/PhoneSubInfoController;->getMsisdn",
                        "getMsisdnForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getMsisdnForSubscriber",
                        "getNaiForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getNaiForSubscriber",
                        "getSubscriberId": "Lcom/android/internal/telephony/PhoneSubInfoController;->getSubscriberId",
                        "getSubscriberIdForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getSubscriberIdForSubscriber",
                        "getVoiceMailAlphaTag": "Lcom/android/internal/telephony/PhoneSubInfoController;->getVoiceMailAlphaTag",
                        "getVoiceMailAlphaTagForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getVoiceMailAlphaTagForSubscriber",
                        "getVoiceMailNumber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getVoiceMailNumber",
                        "getVoiceMailNumberForSubscriber": "Lcom/android/internal/telephony/PhoneSubInfoController;->getVoiceMailNumberForSubscriber"
                    },
                    "SMSDispatcher$MultipartSmsSenderCallback": {
                        "onSendMultipartSmsComplete": "Lcom/android/internal/telephony/SMSDispatcher$MultipartSmsSenderCallback;->onSendMultipartSmsComplete"
                    },
                    "SMSDispatcher$SmsSenderCallback": {
                        "onSendSmsComplete": "Lcom/android/internal/telephony/SMSDispatcher$SmsSenderCallback;->onSendSmsComplete"
                    },
                    "SubscriptionController": {
                        "addSubInfoRecord": "Lcom/android/internal/telephony/SubscriptionController;->addSubInfoRecord",
                        "clearDefaultsForInactiveSubIds": "Lcom/android/internal/telephony/SubscriptionController;->clearDefaultsForInactiveSubIds",
                        "clearSubInfo": "Lcom/android/internal/telephony/SubscriptionController;->clearSubInfo",
                        "getActiveSubInfoCount": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubInfoCount",
                        "getActiveSubInfoList": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubInfoList",
                        "getActiveSubscriptionInfo": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubscriptionInfo",
                        "getActiveSubscriptionInfoForIccId": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubscriptionInfoForIccId",
                        "getActiveSubscriptionInfoForSimSlotIndex": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubscriptionInfoForSimSlotIndex",
                        "getActiveSubscriptionInfoList": "Lcom/android/internal/telephony/SubscriptionController;->getActiveSubscriptionInfoList",
                        "getAllSubInfoCount": "Lcom/android/internal/telephony/SubscriptionController;->getAllSubInfoCount",
                        "getAllSubInfoList": "Lcom/android/internal/telephony/SubscriptionController;->getAllSubInfoList",
                        "getSubInfoForSubscriber": "Lcom/android/internal/telephony/SubscriptionController;->getSubInfoForSubscriber",
                        "getSubInfoUsingIccId": "Lcom/android/internal/telephony/SubscriptionController;->getSubInfoUsingIccId",
                        "getSubInfoUsingSlotId": "Lcom/android/internal/telephony/SubscriptionController;->getSubInfoUsingSlotId",
                        "getSubscriptionProperty": "Lcom/android/internal/telephony/SubscriptionController;->getSubscriptionProperty",
                        "setColor": "Lcom/android/internal/telephony/SubscriptionController;->setColor",
                        "setDataRoaming": "Lcom/android/internal/telephony/SubscriptionController;->setDataRoaming",
                        "setDefaultDataSubId": "Lcom/android/internal/telephony/SubscriptionController;->setDefaultDataSubId",
                        "setDefaultSmsSubId": "Lcom/android/internal/telephony/SubscriptionController;->setDefaultSmsSubId",
                        "setDefaultVoiceSubId": "Lcom/android/internal/telephony/SubscriptionController;->setDefaultVoiceSubId",
                        "setDisplayName": "Lcom/android/internal/telephony/SubscriptionController;->setDisplayName",
                        "setDisplayNameUsingSrc": "Lcom/android/internal/telephony/SubscriptionController;->setDisplayNameUsingSrc",
                        "setDisplayNumber": "Lcom/android/internal/telephony/SubscriptionController;->setDisplayNumber",
                        "setDisplayNumberFormat": "Lcom/android/internal/telephony/SubscriptionController;->setDisplayNumberFormat",
                        "setIconTint": "Lcom/android/internal/telephony/SubscriptionController;->setIconTint",
                        "setSimProvisioningStatus": "Lcom/android/internal/telephony/SubscriptionController;->setSimProvisioningStatus",
                        "setSubscriptionProperty": "Lcom/android/internal/telephony/SubscriptionController;->setSubscriptionProperty"
                    },
                    "UiccPhoneBookController": {
                        "getAdnRecordsInEf": "Lcom/android/internal/telephony/UiccPhoneBookController;->getAdnRecordsInEf",
                        "getAdnRecordsInEfForSubscriber": "Lcom/android/internal/telephony/UiccPhoneBookController;->getAdnRecordsInEfForSubscriber",
                        "updateAdnRecordsInEfByIndex": "Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndex",
                        "updateAdnRecordsInEfByIndexForSubscriber": "Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndexForSubscriber",
                        "updateAdnRecordsInEfBySearch": "Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfBySearch",
                        "updateAdnRecordsInEfBySearchForSubscriber": "Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfBySearchForSubscriber"
                    },
                    "UiccSmsController": {
                        "copyMessageToIccEf": "Lcom/android/internal/telephony/UiccSmsController;->copyMessageToIccEf",
                        "copyMessageToIccEfForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->copyMessageToIccEfForSubscriber",
                        "disableCellBroadcast": "Lcom/android/internal/telephony/UiccSmsController;->disableCellBroadcast",
                        "disableCellBroadcastForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->disableCellBroadcastForSubscriber",
                        "disableCellBroadcastRange": "Lcom/android/internal/telephony/UiccSmsController;->disableCellBroadcastRange",
                        "disableCellBroadcastRangeForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->disableCellBroadcastRangeForSubscriber",
                        "enableCellBroadcast": "Lcom/android/internal/telephony/UiccSmsController;->enableCellBroadcast",
                        "enableCellBroadcastForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->enableCellBroadcastForSubscriber",
                        "enableCellBroadcastRange": "Lcom/android/internal/telephony/UiccSmsController;->enableCellBroadcastRange",
                        "enableCellBroadcastRangeForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->enableCellBroadcastRangeForSubscriber",
                        "getAllMessagesFromIccEf": "Lcom/android/internal/telephony/UiccSmsController;->getAllMessagesFromIccEf",
                        "getAllMessagesFromIccEfForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->getAllMessagesFromIccEfForSubscriber",
                        "injectSmsPdu": "Lcom/android/internal/telephony/UiccSmsController;->injectSmsPdu",
                        "injectSmsPduForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->injectSmsPduForSubscriber",
                        "sendData": "Lcom/android/internal/telephony/UiccSmsController;->sendData",
                        "sendDataForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->sendDataForSubscriber",
                        "sendDataForSubscriberWithSelfPermissions": "Lcom/android/internal/telephony/UiccSmsController;->sendDataForSubscriberWithSelfPermissions",
                        "sendMultipartText": "Lcom/android/internal/telephony/UiccSmsController;->sendMultipartText",
                        "sendMultipartTextForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->sendMultipartTextForSubscriber",
                        "sendStoredMultipartText": "Lcom/android/internal/telephony/UiccSmsController;->sendStoredMultipartText",
                        "sendStoredText": "Lcom/android/internal/telephony/UiccSmsController;->sendStoredText",
                        "sendText": "Lcom/android/internal/telephony/UiccSmsController;->sendText",
                        "sendTextForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->sendTextForSubscriber",
                        "sendTextForSubscriberWithSelfPermissions": "Lcom/android/internal/telephony/UiccSmsController;->sendTextForSubscriberWithSelfPermissions",
                        "updateMessageOnIccEf": "Lcom/android/internal/telephony/UiccSmsController;->updateMessageOnIccEf",
                        "updateMessageOnIccEfForSubscriber": "Lcom/android/internal/telephony/UiccSmsController;->updateMessageOnIccEfForSubscriber"
                    }
                },
                "util": {
                    "IState": {
                        "processMessage": "Lcom/android/internal/util/IState;->processMessage",
                        "enter": "Lcom/android/internal/util/IState;->enter",
                        "exit": "Lcom/android/internal/util/IState;->exit"
                    },
                    "State": {
                        "processMessage": "Lcom/android/internal/util/State;->processMessage",
                        "enter": "Lcom/android/internal/util/State;->enter",
                        "exit": "Lcom/android/internal/util/State;->exit"
                    },
                    "StateMachine$SmHandler$HaltingState": {
                        "enter": "Lcom/android/internal/util/StateMachine$SmHandler$HaltingState;->enter",
                        "exit": "Lcom/android/internal/util/StateMachine$SmHandler$HaltingState;->exit"
                    },
                    "StateMachine$SmHandler$QuittingState": {
                        "enter": "Lcom/android/internal/util/StateMachine$SmHandler$QuittingState;->enter",
                        "exit": "Lcom/android/internal/util/StateMachine$SmHandler$QuittingState;->exit"
                    },
                    "StateMachine$SmHandler": {
                        "invokeEnterMethods": "Lcom/android/internal/util/StateMachine$SmHandler;->invokeEnterMethods",
                        "invokeExitMethods": "Lcom/android/internal/util/StateMachine$SmHandler;->invokeExitMethods",
                        "performTransitions": "Lcom/android/internal/util/StateMachine$SmHandler;->performTransitions",
                        "processMsg": "Lcom/android/internal/util/StateMachine$SmHandler;->processMsg"
                    }
                },
                "view": {
                    "RotationPolicy$1": {
                        "run": "Lcom/android/internal/view/RotationPolicy$1;->run"
                    },
                    "RotationPolicy$2": {
                        "run": "Lcom/android/internal/view/RotationPolicy$2;->run"
                    },
                    "RotationPolicy": {
                        "registerRotationPolicyListener": "Lcom/android/internal/view/RotationPolicy;->registerRotationPolicyListener",
                        "setRotationLock": "Lcom/android/internal/view/RotationPolicy;->setRotationLock",
                        "setRotationLockForAccessibility": "Lcom/android/internal/view/RotationPolicy;->setRotationLockForAccessibility"
                    }
                },
                "widget": {
                    "LockPatternUtils": {
                        "getRequestedPasswordMinimumNumeric": "Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumNumeric"
                    },
                    "LockPatternView$OnPatternListener": {
                        "onPatternCellAdded": "Lcom/android/internal/widget/LockPatternView$OnPatternListener;->onPatternCellAdded",
                        "onPatternDetected": "Lcom/android/internal/widget/LockPatternView$OnPatternListener;->onPatternDetected"
                    },
                    "LockPatternView": {
                        "onHoverEvent": "Lcom/android/internal/widget/LockPatternView;->onHoverEvent",
                        "onTouchEvent": "Lcom/android/internal/widget/LockPatternView;->onTouchEvent",
                        "detectAndAddHit": "Lcom/android/internal/widget/LockPatternView;->detectAndAddHit",
                        "addCellToPattern": "Lcom/android/internal/widget/LockPatternView;->addCellToPattern",
                        "handleActionDown": "Lcom/android/internal/widget/LockPatternView;->handleActionDown",
                        "handleActionMove": "Lcom/android/internal/widget/LockPatternView;->handleActionMove",
                        "handleActionUp": "Lcom/android/internal/widget/LockPatternView;->handleActionUp",
                        "notifyCellAdded": "Lcom/android/internal/widget/LockPatternView;->notifyCellAdded",
                        "notifyPatternDetected": "Lcom/android/internal/widget/LockPatternView;->notifyPatternDetected"
                    },
                    "LockScreenWidgetCallback": {
                        "userActivity": "Lcom/android/internal/widget/LockScreenWidgetCallback;->userActivity"
                    },
                    "multiwaveview": {
                        "GlowPadView$1": {
                            "onAnimationEnd": "Lcom/android/internal/widget/multiwaveview/GlowPadView$1;->onAnimationEnd"
                        },
                        "GlowPadView$2": {
                            "onAnimationEnd": "Lcom/android/internal/widget/multiwaveview/GlowPadView$2;->onAnimationEnd"
                        },
                        "GlowPadView$OnTriggerListener": {
                            "onGrabbedStateChange": "Lcom/android/internal/widget/multiwaveview/GlowPadView$OnTriggerListener;->onGrabbedStateChange",
                            "onTrigger": "Lcom/android/internal/widget/multiwaveview/GlowPadView$OnTriggerListener;->onTrigger"
                        },
                        "GlowPadView": {
                            "onHoverEvent": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->onHoverEvent",
                            "onTouchEvent": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->onTouchEvent",
                            "trySwitchToFirstTouchState": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->trySwitchToFirstTouchState",
                            "dispatchTriggerEvent": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->dispatchTriggerEvent",
                            "doFinish": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->doFinish",
                            "handleCancel": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->handleCancel",
                            "handleDown": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->handleDown",
                            "handleMove": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->handleMove",
                            "handleUp": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->handleUp",
                            "setGrabbedState": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->setGrabbedState",
                            "switchToState": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->switchToState",
                            "vibrate": "Lcom/android/internal/widget/multiwaveview/GlowPadView;->vibrate"
                        },
                        "MultiWaveView$1": {
                            "onAnimationEnd": "Lcom/android/internal/widget/multiwaveview/MultiWaveView$1;->onAnimationEnd"
                        },
                        "MultiWaveView$2": {
                            "onAnimationEnd": "Lcom/android/internal/widget/multiwaveview/MultiWaveView$2;->onAnimationEnd"
                        },
                        "MultiWaveView": {
                            "onHoverEvent": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->onHoverEvent",
                            "onTouchEvent": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->onTouchEvent",
                            "trySwitchToFirstTouchState": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->trySwitchToFirstTouchState",
                            "dispatchTriggerEvent": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->dispatchTriggerEvent",
                            "doFinish": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->doFinish",
                            "handleCancel": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->handleCancel",
                            "handleDown": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->handleDown",
                            "handleMove": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->handleMove",
                            "handleUp": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->handleUp",
                            "setGrabbedState": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->setGrabbedState",
                            "switchToState": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->switchToState",
                            "vibrate": "Lcom/android/internal/widget/multiwaveview/MultiWaveView;->vibrate"
                        }
                    },
                    "PasswordEntryKeyboardHelper": {
                        "handleModeChange": "Lcom/android/internal/widget/PasswordEntryKeyboardHelper;->handleModeChange",
                        "handleShift": "Lcom/android/internal/widget/PasswordEntryKeyboardHelper;->handleShift",
                        "onKey": "Lcom/android/internal/widget/PasswordEntryKeyboardHelper;->onKey",
                        "setKeyboardMode": "Lcom/android/internal/widget/PasswordEntryKeyboardHelper;->setKeyboardMode"
                    },
                    "PasswordEntryKeyboardView": {
                        "onHoverEvent": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->onHoverEvent",
                        "onLongPress": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->onLongPress",
                        "onModifiedTouchEvent": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->onModifiedTouchEvent",
                        "onTouchEvent": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->onTouchEvent",
                        "openPopupIfRequired": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->openPopupIfRequired",
                        "sendAccessibilityEventForUnicodeCharacter": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->sendAccessibilityEventForUnicodeCharacter",
                        "setKeyboard": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->setKeyboard",
                        "showPreview": "Lcom/android/internal/widget/PasswordEntryKeyboardView;->showPreview"
                    },
                    "PasswordEntryKeyboard": {
                        "<init>": "Lcom/android/internal/widget/PasswordEntryKeyboard;-><init>"
                    },
                    "RotarySelector": {
                        "onTouchEvent": "Lcom/android/internal/widget/RotarySelector;->onTouchEvent",
                        "dispatchTriggerEvent": "Lcom/android/internal/widget/RotarySelector;->dispatchTriggerEvent",
                        "vibrate": "Lcom/android/internal/widget/RotarySelector;->vibrate"
                    },
                    "SlidingTab$OnTriggerListener": {
                        "onGrabbedStateChange": "Lcom/android/internal/widget/SlidingTab$OnTriggerListener;->onGrabbedStateChange",
                        "onTrigger": "Lcom/android/internal/widget/SlidingTab$OnTriggerListener;->onTrigger"
                    },
                    "SlidingTab": {
                        "onInterceptTouchEvent": "Lcom/android/internal/widget/SlidingTab;->onInterceptTouchEvent",
                        "onTouchEvent": "Lcom/android/internal/widget/SlidingTab;->onTouchEvent",
                        "cancelGrab": "Lcom/android/internal/widget/SlidingTab;->cancelGrab",
                        "dispatchTriggerEvent": "Lcom/android/internal/widget/SlidingTab;->dispatchTriggerEvent",
                        "onVisibilityChanged": "Lcom/android/internal/widget/SlidingTab;->onVisibilityChanged",
                        "setGrabbedState": "Lcom/android/internal/widget/SlidingTab;->setGrabbedState",
                        "vibrate": "Lcom/android/internal/widget/SlidingTab;->vibrate"
                    },
                    "TransportControlView$1": {
                        "<init>": "Lcom/android/internal/widget/TransportControlView$1;-><init>"
                    },
                    "TransportControlView": {
                        "onClick": "Lcom/android/internal/widget/TransportControlView;->onClick"
                    },
                    "WaveView$OnTriggerListener": {
                        "onGrabbedStateChange": "Lcom/android/internal/widget/WaveView$OnTriggerListener;->onGrabbedStateChange"
                    },
                    "WaveView": {
                        "onHoverEvent": "Lcom/android/internal/widget/WaveView;->onHoverEvent",
                        "onTouchEvent": "Lcom/android/internal/widget/WaveView;->onTouchEvent",
                        "dispatchTriggerEvent": "Lcom/android/internal/widget/WaveView;->dispatchTriggerEvent",
                        "onDraw": "Lcom/android/internal/widget/WaveView;->onDraw",
                        "setGrabbedState": "Lcom/android/internal/widget/WaveView;->setGrabbedState",
                        "tryTransitionToStartAttemptState": "Lcom/android/internal/widget/WaveView;->tryTransitionToStartAttemptState",
                        "vibrate": "Lcom/android/internal/widget/WaveView;->vibrate",
                        "waveUpdateFrame": "Lcom/android/internal/widget/WaveView;->waveUpdateFrame"
                    }
                }
            },
            "launcher2": {
                "AppsCustomizePagedView": {
                    "beginDragging": "Lcom/android/launcher2/AppsCustomizePagedView;->beginDragging",
                    "beginDraggingWidget": "Lcom/android/launcher2/AppsCustomizePagedView;->beginDraggingWidget",
                    "onInterceptTouchEvent": "Lcom/android/launcher2/AppsCustomizePagedView;->onInterceptTouchEvent",
                    "onLongClick": "Lcom/android/launcher2/AppsCustomizePagedView;->onLongClick",
                    "onTouchEvent": "Lcom/android/launcher2/AppsCustomizePagedView;->onTouchEvent",
                    "beginDraggingApplication": "Lcom/android/launcher2/AppsCustomizePagedView;->beginDraggingApplication",
                    "handleTouchEvent": "Lcom/android/launcher2/AppsCustomizePagedView;->handleTouchEvent"
                },
                "DragController": {
                    "startDrag": "Lcom/android/launcher2/DragController;->startDrag"
                },
                "Folder": {
                    "onLongClick": "Lcom/android/launcher2/Folder;->onLongClick"
                },
                "Launcher": {
                    "onLongClick": "Lcom/android/launcher2/Launcher;->onLongClick",
                    "skipCustomClingIfNoAccounts": "Lcom/android/launcher2/Launcher;->skipCustomClingIfNoAccounts",
                    "getWorkspace": "Lcom/android/launcher2/Launcher;->getWorkspace",
                    "onCreate": "Lcom/android/launcher2/Launcher;->onCreate",
                    "setupViews": "Lcom/android/launcher2/Launcher;->setupViews",
                    "showFirstRunWorkspaceCling": "Lcom/android/launcher2/Launcher;->showFirstRunWorkspaceCling"
                },
                "PagedView": {
                    "onInterceptTouchEvent": "Lcom/android/launcher2/PagedView;->onInterceptTouchEvent",
                    "onTouchEvent": "Lcom/android/launcher2/PagedView;->onTouchEvent"
                },
                "PagedViewWithDraggableItems": {
                    "beginDragging": "Lcom/android/launcher2/PagedViewWithDraggableItems;->beginDragging",
                    "onInterceptTouchEvent": "Lcom/android/launcher2/PagedViewWithDraggableItems;->onInterceptTouchEvent",
                    "onLongClick": "Lcom/android/launcher2/PagedViewWithDraggableItems;->onLongClick",
                    "onTouchEvent": "Lcom/android/launcher2/PagedViewWithDraggableItems;->onTouchEvent",
                    "determineDraggingStart": "Lcom/android/launcher2/PagedViewWithDraggableItems;->determineDraggingStart",
                    "handleTouchEvent": "Lcom/android/launcher2/PagedViewWithDraggableItems;->handleTouchEvent"
                },
                "SmoothPagedView": {
                    "onInterceptTouchEvent": "Lcom/android/launcher2/SmoothPagedView;->onInterceptTouchEvent",
                    "onTouchEvent": "Lcom/android/launcher2/SmoothPagedView;->onTouchEvent"
                },
                "WallpaperChooserDialogFragment$1": {
                    "onClick": "Lcom/android/launcher2/WallpaperChooserDialogFragment$1;->onClick"
                },
                "WallpaperChooserDialogFragment": {
                    "onItemClick": "Lcom/android/launcher2/WallpaperChooserDialogFragment;->onItemClick",
                    "selectWallpaper": "Lcom/android/launcher2/WallpaperChooserDialogFragment;->selectWallpaper"
                },
                "Workspace$1": {
                    "run": "Lcom/android/launcher2/Workspace$1;->run"
                },
                "Workspace": {
                    "onInterceptTouchEvent": "Lcom/android/launcher2/Workspace;->onInterceptTouchEvent",
                    "onTouchEvent": "Lcom/android/launcher2/Workspace;->onTouchEvent",
                    "beginDragShared": "Lcom/android/launcher2/Workspace;->beginDragShared",
                    "setup": "Lcom/android/launcher2/Workspace;->setup",
                    "setWallpaperDimension": "Lcom/android/launcher2/Workspace;->setWallpaperDimension",
                    "startDrag": "Lcom/android/launcher2/Workspace;->startDrag"
                },
                "LauncherProvider": "Lcom/android/launcher2;->LauncherProvider"
            },
            "mail": {
                "providers": {
                    "UIProvider": {
                        "incrementRecipientsTimesContacted": "Lcom/android/mail/providers/UIProvider;->incrementRecipientsTimesContacted"
                    }
                }
            },
            "mms": {
                "data": {
                    "Contact$ContactsCache$1": {
                        "run": "Lcom/android/mms/data/Contact$ContactsCache$1;->run"
                    },
                    "Contact$ContactsCache": {
                        "getContactInfo": "Lcom/android/mms/data/Contact$ContactsCache;->getContactInfo",
                        "getContactInfoForEmailAddress": "Lcom/android/mms/data/Contact$ContactsCache;->getContactInfoForEmailAddress",
                        "getContactInfoForPhoneNumber": "Lcom/android/mms/data/Contact$ContactsCache;->getContactInfoForPhoneNumber",
                        "getContactInfoForSelf": "Lcom/android/mms/data/Contact$ContactsCache;->getContactInfoForSelf",
                        "getContactInfoForPhoneUris": "Lcom/android/mms/data/Contact$ContactsCache;->getContactInfoForPhoneUris",
                        "updateContact": "Lcom/android/mms/data/Contact$ContactsCache;->updateContact"
                    },
                    "Contact": {
                        "getPhoneUri": "Lcom/android/mms/data/Contact;->getPhoneUri",
                        "getUri": "Lcom/android/mms/data/Contact;->getUri",
                        "getByPhoneUris": "Lcom/android/mms/data/Contact;->getByPhoneUris"
                    },
                    "ContactList": {
                        "blockingGetByUris": "Lcom/android/mms/data/ContactList;->blockingGetByUris",
                        "getByNumbers": "Lcom/android/mms/data/ContactList;->getByNumbers"
                    },
                    "Conversation$1": {
                        "doInBackground": "Lcom/android/mms/data/Conversation$1;->doInBackground"
                    },
                    "Conversation$2": {
                        "run": "Lcom/android/mms/data/Conversation$2;->run"
                    },
                    "Conversation$3": {
                        "run": "Lcom/android/mms/data/Conversation$3;->run"
                    },
                    "Conversation$ConversationQueryHandler": {
                        "onDeleteComplete": "Lcom/android/mms/data/Conversation$ConversationQueryHandler;->onDeleteComplete"
                    },
                    "Conversation": {
                        "getUri": "Lcom/android/mms/data/Conversation;->getUri",
                        "loadFromThreadId": "Lcom/android/mms/data/Conversation;->loadFromThreadId",
                        "sameRecipient": "Lcom/android/mms/data/Conversation;->sameRecipient",
                        "get": "Lcom/android/mms/data/Conversation;->get",
                        "verifySingleRecipient": "Lcom/android/mms/data/Conversation;->verifySingleRecipient",
                        "ensureThreadId": "Lcom/android/mms/data/Conversation;->ensureThreadId",
                        "getOrCreateThreadId": "Lcom/android/mms/data/Conversation;->getOrCreateThreadId",
                        "asyncDeleteObsoleteThreads": "Lcom/android/mms/data/Conversation;->asyncDeleteObsoleteThreads",
                        "blockingMarkAllMmsMessagesAsSeen": "Lcom/android/mms/data/Conversation;->blockingMarkAllMmsMessagesAsSeen",
                        "blockingMarkAllSmsMessagesAsSeen": "Lcom/android/mms/data/Conversation;->blockingMarkAllSmsMessagesAsSeen",
                        "blockMarkAsRead": "Lcom/android/mms/data/Conversation;->blockMarkAsRead",
                        "cacheAllThreads": "Lcom/android/mms/data/Conversation;->cacheAllThreads",
                        "dumpSmsTable": "Lcom/android/mms/data/Conversation;->dumpSmsTable",
                        "dumpThreadsTable": "Lcom/android/mms/data/Conversation;->dumpThreadsTable",
                        "<init>": "Lcom/android/mms/data/Conversation;-><init>",
                        "markAsRead": "Lcom/android/mms/data/Conversation;->markAsRead",
                        "setRecipients": "Lcom/android/mms/data/Conversation;->setRecipients",
                        "startDeleteAll": "Lcom/android/mms/data/Conversation;->startDeleteAll",
                        "startDelete": "Lcom/android/mms/data/Conversation;->startDelete",
                        "startQuery": "Lcom/android/mms/data/Conversation;->startQuery",
                        "startQueryForAll": "Lcom/android/mms/data/Conversation;->startQueryForAll",
                        "startQueryHaveLockedMessages": "Lcom/android/mms/data/Conversation;->startQueryHaveLockedMessages"
                    },
                    "WorkingMessage$1": {
                        "doInBackground": "Lcom/android/mms/data/WorkingMessage$1;->doInBackground"
                    },
                    "WorkingMessage$2": {
                        "run": "Lcom/android/mms/data/WorkingMessage$2;->run"
                    },
                    "WorkingMessage$3": {
                        "run": "Lcom/android/mms/data/WorkingMessage$3;->run"
                    },
                    "WorkingMessage$4": {
                        "run": "Lcom/android/mms/data/WorkingMessage$4;->run"
                    },
                    "WorkingMessage$5": {
                        "run": "Lcom/android/mms/data/WorkingMessage$5;->run"
                    },
                    "WorkingMessage$MessageStatusListener": {
                        "onMaxPendingMessagesReached": "Lcom/android/mms/data/WorkingMessage$MessageStatusListener;->onMaxPendingMessagesReached"
                    },
                    "WorkingMessage": {
                        "createDraftMmsMessage": "Lcom/android/mms/data/WorkingMessage;->createDraftMmsMessage",
                        "readDraftMmsMessage": "Lcom/android/mms/data/WorkingMessage;->readDraftMmsMessage",
                        "saveAsMms": "Lcom/android/mms/data/WorkingMessage;->saveAsMms",
                        "loadFromUri": "Lcom/android/mms/data/WorkingMessage;->loadFromUri",
                        "load": "Lcom/android/mms/data/WorkingMessage;->load",
                        "setAttachment": "Lcom/android/mms/data/WorkingMessage;->setAttachment",
                        "readDraftSmsMessage": "Lcom/android/mms/data/WorkingMessage;->readDraftSmsMessage",
                        "asyncDeleteDraftMmsMessage": "Lcom/android/mms/data/WorkingMessage;->asyncDeleteDraftMmsMessage",
                        "asyncDeleteDraftSmsMessage": "Lcom/android/mms/data/WorkingMessage;->asyncDeleteDraftSmsMessage",
                        "deleteDraftSmsMessage": "Lcom/android/mms/data/WorkingMessage;->deleteDraftSmsMessage",
                        "discard": "Lcom/android/mms/data/WorkingMessage;->discard",
                        "preSendSmsWorker": "Lcom/android/mms/data/WorkingMessage;->preSendSmsWorker",
                        "readStateFromBundle": "Lcom/android/mms/data/WorkingMessage;->readStateFromBundle",
                        "saveDraft": "Lcom/android/mms/data/WorkingMessage;->saveDraft",
                        "sendMmsWorker": "Lcom/android/mms/data/WorkingMessage;->sendMmsWorker",
                        "sendSmsWorker": "Lcom/android/mms/data/WorkingMessage;->sendSmsWorker",
                        "updateDraftMmsMessage": "Lcom/android/mms/data/WorkingMessage;->updateDraftMmsMessage",
                        "updateDraftSmsMessage": "Lcom/android/mms/data/WorkingMessage;->updateDraftSmsMessage",
                        "updateSendStats": "Lcom/android/mms/data/WorkingMessage;->updateSendStats"
                    }
                },
                "dom": {
                    "NodeImpl": {
                        "getTextContent": "Lcom/android/mms/dom/NodeImpl;->getTextContent"
                    }
                },
                "LogTag$1": {
                    "run": "Lcom/android/mms/LogTag$1;->run"
                },
                "model": {
                    "ImageModel": {
                        "loadThumbnailBitmap": "Lcom/android/mms/model/ImageModel;->loadThumbnailBitmap"
                    },
                    "SlideshowModel": {
                        "createFromMessageUri": "Lcom/android/mms/model/SlideshowModel;->createFromMessageUri",
                        "getPduBody": "Lcom/android/mms/model/SlideshowModel;->getPduBody"
                    },
                    "VideoModel": {
                        "loadThumbnailBitmap": "Lcom/android/mms/model/VideoModel;->loadThumbnailBitmap"
                    }
                },
                "transaction": {
                    "HttpUtils": {
                        "httpConnection": "Lcom/android/mms/transaction/HttpUtils;->httpConnection"
                    },
                    "MessageSender": {
                        "sendMessage": "Lcom/android/mms/transaction/MessageSender;->sendMessage"
                    },
                    "MessageStatusService": {
                        "updateMessageStatus": "Lcom/android/mms/transaction/MessageStatusService;->updateMessageStatus",
                        "onHandleIntent": "Lcom/android/mms/transaction/MessageStatusService;->onHandleIntent"
                    },
                    "MessagingNotification$1": {
                        "run": "Lcom/android/mms/transaction/MessagingNotification$1;->run"
                    },
                    "MessagingNotification$3": {
                        "doInBackground": "Lcom/android/mms/transaction/MessagingNotification$3;->doInBackground",
                        "onPostExecute": "Lcom/android/mms/transaction/MessagingNotification$3;->onPostExecute"
                    },
                    "MessagingNotification": {
                        "getSmsNewDeliveryInfo": "Lcom/android/mms/transaction/MessagingNotification;->getSmsNewDeliveryInfo",
                        "getNewMessageNotificationInfo": "Lcom/android/mms/transaction/MessagingNotification;->getNewMessageNotificationInfo",
                        "getDownloadFailedMessageCount": "Lcom/android/mms/transaction/MessagingNotification;->getDownloadFailedMessageCount",
                        "getUndeliveredMessageCount": "Lcom/android/mms/transaction/MessagingNotification;->getUndeliveredMessageCount",
                        "addMmsNotificationInfos": "Lcom/android/mms/transaction/MessagingNotification;->addMmsNotificationInfos",
                        "addSmsNotificationInfos": "Lcom/android/mms/transaction/MessagingNotification;->addSmsNotificationInfos",
                        "blockingUpdateAllNotifications": "Lcom/android/mms/transaction/MessagingNotification;->blockingUpdateAllNotifications",
                        "blockingUpdateNewMessageIndicator": "Lcom/android/mms/transaction/MessagingNotification;->blockingUpdateNewMessageIndicator",
                        "notifyDownloadFailed": "Lcom/android/mms/transaction/MessagingNotification;->notifyDownloadFailed",
                        "notifyFailed": "Lcom/android/mms/transaction/MessagingNotification;->notifyFailed",
                        "notifySendFailed": "Lcom/android/mms/transaction/MessagingNotification;->notifySendFailed",
                        "playInConversationNotificationSound": "Lcom/android/mms/transaction/MessagingNotification;->playInConversationNotificationSound",
                        "updateDownloadFailedNotification": "Lcom/android/mms/transaction/MessagingNotification;->updateDownloadFailedNotification",
                        "updateNotification": "Lcom/android/mms/transaction/MessagingNotification;->updateNotification",
                        "updateSendFailedNotificationForThread": "Lcom/android/mms/transaction/MessagingNotification;->updateSendFailedNotificationForThread"
                    },
                    "MmsMessageSender": {
                        "sendMessage": "Lcom/android/mms/transaction/MmsMessageSender;->sendMessage",
                        "sendReadRec": "Lcom/android/mms/transaction/MmsMessageSender;->sendReadRec"
                    },
                    "NotificationPlayer$CmdThread": {
                        "run": "Lcom/android/mms/transaction/NotificationPlayer$CmdThread;->run"
                    },
                    "NotificationPlayer$CreationAndCompletionThread": {
                        "run": "Lcom/android/mms/transaction/NotificationPlayer$CreationAndCompletionThread;->run"
                    },
                    "NotificationPlayer": {
                        "acquireWakeLock": "Lcom/android/mms/transaction/NotificationPlayer;->acquireWakeLock",
                        "enqueueLocked": "Lcom/android/mms/transaction/NotificationPlayer;->enqueueLocked",
                        "play": "Lcom/android/mms/transaction/NotificationPlayer;->play",
                        "releaseWakeLock": "Lcom/android/mms/transaction/NotificationPlayer;->releaseWakeLock",
                        "startSound": "Lcom/android/mms/transaction/NotificationPlayer;->startSound",
                        "stop": "Lcom/android/mms/transaction/NotificationPlayer;->stop"
                    },
                    "NotificationTransaction": {
                        "getPdu": "Lcom/android/mms/transaction/NotificationTransaction;->getPdu",
                        "sendPdu": "Lcom/android/mms/transaction/NotificationTransaction;->sendPdu",
                        "ensureRouteToHost": "Lcom/android/mms/transaction/NotificationTransaction;->ensureRouteToHost",
                        "<init>": "Lcom/android/mms/transaction/NotificationTransaction;-><init>",
                        "notifyObservers": "Lcom/android/mms/transaction/NotificationTransaction;->notifyObservers",
                        "run": "Lcom/android/mms/transaction/NotificationTransaction;->run",
                        "sendNotifyRespInd": "Lcom/android/mms/transaction/NotificationTransaction;->sendNotifyRespInd"
                    },
                    "Observable": {
                        "notifyObservers": "Lcom/android/mms/transaction/Observable;->notifyObservers"
                    },
                    "Observer": {
                        "update": "Lcom/android/mms/transaction/Observer;->update"
                    },
                    "PrivilegedSmsReceiver": {
                        "beginStartingService": "Lcom/android/mms/transaction/PrivilegedSmsReceiver;->beginStartingService",
                        "finishStartingService": "Lcom/android/mms/transaction/PrivilegedSmsReceiver;->finishStartingService",
                        "onReceive": "Lcom/android/mms/transaction/PrivilegedSmsReceiver;->onReceive",
                        "onReceiveWithPrivilege": "Lcom/android/mms/transaction/PrivilegedSmsReceiver;->onReceiveWithPrivilege"
                    },
                    "PushReceiver$ReceivePushTask": {
                        "doInBackground": "Lcom/android/mms/transaction/PushReceiver$ReceivePushTask;->doInBackground"
                    },
                    "PushReceiver": {
                        "isDuplicateNotification": "Lcom/android/mms/transaction/PushReceiver;->isDuplicateNotification",
                        "findThreadId": "Lcom/android/mms/transaction/PushReceiver;->findThreadId",
                        "onReceive": "Lcom/android/mms/transaction/PushReceiver;->onReceive"
                    },
                    "ReadRecTransaction": {
                        "getPdu": "Lcom/android/mms/transaction/ReadRecTransaction;->getPdu",
                        "sendPdu": "Lcom/android/mms/transaction/ReadRecTransaction;->sendPdu",
                        "ensureRouteToHost": "Lcom/android/mms/transaction/ReadRecTransaction;->ensureRouteToHost",
                        "notifyObservers": "Lcom/android/mms/transaction/ReadRecTransaction;->notifyObservers",
                        "process": "Lcom/android/mms/transaction/ReadRecTransaction;->process"
                    },
                    "RetrieveTransaction": {
                        "isDuplicateMessage": "Lcom/android/mms/transaction/RetrieveTransaction;->isDuplicateMessage",
                        "getPdu": "Lcom/android/mms/transaction/RetrieveTransaction;->getPdu",
                        "sendPdu": "Lcom/android/mms/transaction/RetrieveTransaction;->sendPdu",
                        "ensureRouteToHost": "Lcom/android/mms/transaction/RetrieveTransaction;->ensureRouteToHost",
                        "notifyObservers": "Lcom/android/mms/transaction/RetrieveTransaction;->notifyObservers",
                        "run": "Lcom/android/mms/transaction/RetrieveTransaction;->run",
                        "sendAcknowledgeInd": "Lcom/android/mms/transaction/RetrieveTransaction;->sendAcknowledgeInd"
                    },
                    "RetryScheduler": {
                        "isConnected": "Lcom/android/mms/transaction/RetryScheduler;->isConnected",
                        "getResponseStatus": "Lcom/android/mms/transaction/RetryScheduler;->getResponseStatus",
                        "getRetrieveStatus": "Lcom/android/mms/transaction/RetryScheduler;->getRetrieveStatus",
                        "scheduleRetry": "Lcom/android/mms/transaction/RetryScheduler;->scheduleRetry",
                        "setRetryAlarm": "Lcom/android/mms/transaction/RetryScheduler;->setRetryAlarm",
                        "update": "Lcom/android/mms/transaction/RetryScheduler;->update"
                    },
                    "SendTransaction": {
                        "getPdu": "Lcom/android/mms/transaction/SendTransaction;->getPdu",
                        "sendPdu": "Lcom/android/mms/transaction/SendTransaction;->sendPdu",
                        "ensureRouteToHost": "Lcom/android/mms/transaction/SendTransaction;->ensureRouteToHost",
                        "notifyObservers": "Lcom/android/mms/transaction/SendTransaction;->notifyObservers",
                        "run": "Lcom/android/mms/transaction/SendTransaction;->run"
                    },
                    "SimFullReceiver": {
                        "onReceive": "Lcom/android/mms/transaction/SimFullReceiver;->onReceive"
                    },
                    "SmsMessageSender": {
                        "sendMessage": "Lcom/android/mms/transaction/SmsMessageSender;->sendMessage",
                        "getOutgoingServiceCenter": "Lcom/android/mms/transaction/SmsMessageSender;->getOutgoingServiceCenter",
                        "<init>": "Lcom/android/mms/transaction/SmsMessageSender;-><init>"
                    },
                    "SmsReceiverService": {
                        "insertMessage": "Lcom/android/mms/transaction/SmsReceiverService;->insertMessage",
                        "replaceMessage": "Lcom/android/mms/transaction/SmsReceiverService;->replaceMessage",
                        "storeMessage": "Lcom/android/mms/transaction/SmsReceiverService;->storeMessage",
                        "moveOutboxMessagesToFailedBox": "Lcom/android/mms/transaction/SmsReceiverService;->moveOutboxMessagesToFailedBox",
                        "handleBootCompleted": "Lcom/android/mms/transaction/SmsReceiverService;->handleBootCompleted",
                        "handleSendMessage": "Lcom/android/mms/transaction/SmsReceiverService;->handleSendMessage",
                        "handleServiceStateChanged": "Lcom/android/mms/transaction/SmsReceiverService;->handleServiceStateChanged",
                        "handleSmsReceived": "Lcom/android/mms/transaction/SmsReceiverService;->handleSmsReceived",
                        "handleSmsSent": "Lcom/android/mms/transaction/SmsReceiverService;->handleSmsSent",
                        "messageFailedToSend": "Lcom/android/mms/transaction/SmsReceiverService;->messageFailedToSend",
                        "sendFirstQueuedMessage": "Lcom/android/mms/transaction/SmsReceiverService;->sendFirstQueuedMessage"
                    },
                    "SmsReceiver": {
                        "beginStartingService": "Lcom/android/mms/transaction/SmsReceiver;->beginStartingService",
                        "finishStartingService": "Lcom/android/mms/transaction/SmsReceiver;->finishStartingService",
                        "onReceive": "Lcom/android/mms/transaction/SmsReceiver;->onReceive",
                        "onReceiveWithPrivilege": "Lcom/android/mms/transaction/SmsReceiver;->onReceiveWithPrivilege"
                    },
                    "SmsRejectedReceiver": {
                        "onReceive": "Lcom/android/mms/transaction/SmsRejectedReceiver;->onReceive"
                    },
                    "SmsSingleRecipientSender": {
                        "sendMessage": "Lcom/android/mms/transaction/SmsSingleRecipientSender;->sendMessage",
                        "getOutgoingServiceCenter": "Lcom/android/mms/transaction/SmsSingleRecipientSender;->getOutgoingServiceCenter",
                        "<init>": "Lcom/android/mms/transaction/SmsSingleRecipientSender;-><init>"
                    },
                    "Transaction": {
                        "getPdu": "Lcom/android/mms/transaction/Transaction;->getPdu",
                        "sendPdu": "Lcom/android/mms/transaction/Transaction;->sendPdu",
                        "ensureRouteToHost": "Lcom/android/mms/transaction/Transaction;->ensureRouteToHost",
                        "notifyObservers": "Lcom/android/mms/transaction/Transaction;->notifyObservers",
                        "process": "Lcom/android/mms/transaction/Transaction;->process"
                    },
                    "TransactionService$ConnectivityBroadcastReceiver": {
                        "onReceive": "Lcom/android/mms/transaction/TransactionService$ConnectivityBroadcastReceiver;->onReceive"
                    },
                    "TransactionService$ServiceHandler": {
                        "processTransaction": "Lcom/android/mms/transaction/TransactionService$ServiceHandler;->processTransaction",
                        "processPendingTransaction": "Lcom/android/mms/transaction/TransactionService$ServiceHandler;->processPendingTransaction"
                    },
                    "TransactionService": {
                        "isNetworkAvailable": "Lcom/android/mms/transaction/TransactionService;->isNetworkAvailable",
                        "beginMmsConnectivity": "Lcom/android/mms/transaction/TransactionService;->beginMmsConnectivity",
                        "onStartCommand": "Lcom/android/mms/transaction/TransactionService;->onStartCommand",
                        "acquireWakeLock": "Lcom/android/mms/transaction/TransactionService;->acquireWakeLock",
                        "endMmsConnectivity": "Lcom/android/mms/transaction/TransactionService;->endMmsConnectivity",
                        "launchTransaction": "Lcom/android/mms/transaction/TransactionService;->launchTransaction",
                        "onDestroy": "Lcom/android/mms/transaction/TransactionService;->onDestroy",
                        "onNewIntent": "Lcom/android/mms/transaction/TransactionService;->onNewIntent",
                        "releaseWakeLock": "Lcom/android/mms/transaction/TransactionService;->releaseWakeLock",
                        "renewMmsConnectivity": "Lcom/android/mms/transaction/TransactionService;->renewMmsConnectivity",
                        "update": "Lcom/android/mms/transaction/TransactionService;->update"
                    }
                },
                "ui": {
                    "AttachmentEditor": {
                        "update": "Lcom/android/mms/ui/AttachmentEditor;->update"
                    },
                    "AudioAttachmentView$1": {
                        "onCompletion": "Lcom/android/mms/ui/AudioAttachmentView$1;->onCompletion"
                    },
                    "AudioAttachmentView$2": {
                        "onError": "Lcom/android/mms/ui/AudioAttachmentView$2;->onError"
                    },
                    "AudioAttachmentView": {
                        "cleanupMediaPlayer": "Lcom/android/mms/ui/AudioAttachmentView;->cleanupMediaPlayer",
                        "onPlaybackError": "Lcom/android/mms/ui/AudioAttachmentView;->onPlaybackError",
                        "reset": "Lcom/android/mms/ui/AudioAttachmentView;->reset",
                        "startAudio": "Lcom/android/mms/ui/AudioAttachmentView;->startAudio",
                        "stopAudio": "Lcom/android/mms/ui/AudioAttachmentView;->stopAudio"
                    },
                    "ClassZeroActivity$3": {
                        "onClick": "Lcom/android/mms/ui/ClassZeroActivity$3;->onClick"
                    },
                    "ClassZeroActivity": {
                        "replaceMessage": "Lcom/android/mms/ui/ClassZeroActivity;->replaceMessage",
                        "storeMessage": "Lcom/android/mms/ui/ClassZeroActivity;->storeMessage",
                        "saveMessage": "Lcom/android/mms/ui/ClassZeroActivity;->saveMessage"
                    },
                    "ComposeMessageActivity$10": {
                        "onCreateContextMenu": "Lcom/android/mms/ui/ComposeMessageActivity$10;->onCreateContextMenu"
                    },
                    "ComposeMessageActivity$11": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$11;->run"
                    },
                    "ComposeMessageActivity$12": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$12;->run"
                    },
                    "ComposeMessageActivity$17": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$17;->run"
                    },
                    "ComposeMessageActivity$1": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$1;->run"
                    },
                    "ComposeMessageActivity$20": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$20;->run"
                    },
                    "ComposeMessageActivity$23": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$23;->run"
                    },
                    "ComposeMessageActivity$29": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$29;->run"
                    },
                    "ComposeMessageActivity$30": {
                        "onResizeResult": "Lcom/android/mms/ui/ComposeMessageActivity$30;->onResizeResult"
                    },
                    "ComposeMessageActivity$32": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$32;->run"
                    },
                    "ComposeMessageActivity$33": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$33;->run"
                    },
                    "ComposeMessageActivity$34": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$34;->run"
                    },
                    "ComposeMessageActivity$35": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$35;->run"
                    },
                    "ComposeMessageActivity$36": {
                        "onTextChanged": "Lcom/android/mms/ui/ComposeMessageActivity$36;->onTextChanged"
                    },
                    "ComposeMessageActivity$40": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$40;->run"
                    },
                    "ComposeMessageActivity$41": {
                        "onContentChanged": "Lcom/android/mms/ui/ComposeMessageActivity$41;->onContentChanged"
                    },
                    "ComposeMessageActivity$4": {
                        "run": "Lcom/android/mms/ui/ComposeMessageActivity$4;->run"
                    },
                    "ComposeMessageActivity$8": {
                        "onTextChanged": "Lcom/android/mms/ui/ComposeMessageActivity$8;->onTextChanged"
                    },
                    "ComposeMessageActivity$BackgroundQueryHandler": {
                        "onDeleteComplete": "Lcom/android/mms/ui/ComposeMessageActivity$BackgroundQueryHandler;->onDeleteComplete",
                        "onQueryComplete": "Lcom/android/mms/ui/ComposeMessageActivity$BackgroundQueryHandler;->onQueryComplete"
                    },
                    "ComposeMessageActivity$DiscardDraftListener": {
                        "onClick": "Lcom/android/mms/ui/ComposeMessageActivity$DiscardDraftListener;->onClick"
                    },
                    "ComposeMessageActivity$MsgListMenuClickListener": {
                        "onMenuItemClick": "Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;->onMenuItemClick"
                    },
                    "ComposeMessageActivity$RecipientsMenuClickListener": {
                        "onMenuItemClick": "Lcom/android/mms/ui/ComposeMessageActivity$RecipientsMenuClickListener;->onMenuItemClick"
                    },
                    "ComposeMessageActivity": {
                        "createIntent": "Lcom/android/mms/ui/ComposeMessageActivity;->createIntent",
                        "getContactUriForEmail": "Lcom/android/mms/ui/ComposeMessageActivity;->getContactUriForEmail",
                        "getContactUriForPhoneNumber": "Lcom/android/mms/ui/ComposeMessageActivity;->getContactUriForPhoneNumber",
                        "copyMedia": "Lcom/android/mms/ui/ComposeMessageActivity;->copyMedia",
                        "handleForwardedMessage": "Lcom/android/mms/ui/ComposeMessageActivity;->handleForwardedMessage",
                        "haveSomethingToCopyToSDCard": "Lcom/android/mms/ui/ComposeMessageActivity;->haveSomethingToCopyToSDCard",
                        "isDrmRingtoneWithRights": "Lcom/android/mms/ui/ComposeMessageActivity;->isDrmRingtoneWithRights",
                        "isForwardable": "Lcom/android/mms/ui/ComposeMessageActivity;->isForwardable",
                        "onOptionsItemSelected": "Lcom/android/mms/ui/ComposeMessageActivity;->onOptionsItemSelected",
                        "saveRingtone": "Lcom/android/mms/ui/ComposeMessageActivity;->saveRingtone",
                        "showMessageDetails": "Lcom/android/mms/ui/ComposeMessageActivity;->showMessageDetails",
                        "getMessageItem": "Lcom/android/mms/ui/ComposeMessageActivity;->getMessageItem",
                        "getDrmMimeMenuStringRsrc": "Lcom/android/mms/ui/ComposeMessageActivity;->getDrmMimeMenuStringRsrc",
                        "getDrmMimeSavedStringRsrc": "Lcom/android/mms/ui/ComposeMessageActivity;->getDrmMimeSavedStringRsrc",
                        "addAttachment": "Lcom/android/mms/ui/ComposeMessageActivity;->addAttachment",
                        "addAudio": "Lcom/android/mms/ui/ComposeMessageActivity;->addAudio",
                        "addCallAndContactMenuItems": "Lcom/android/mms/ui/ComposeMessageActivity;->addCallAndContactMenuItems",
                        "addImage": "Lcom/android/mms/ui/ComposeMessageActivity;->addImage",
                        "addVideo": "Lcom/android/mms/ui/ComposeMessageActivity;->addVideo",
                        "checkPendingNotification": "Lcom/android/mms/ui/ComposeMessageActivity;->checkPendingNotification",
                        "confirmDeleteThread": "Lcom/android/mms/ui/ComposeMessageActivity;->confirmDeleteThread",
                        "dialRecipient": "Lcom/android/mms/ui/ComposeMessageActivity;->dialRecipient",
                        "drawTopPanel": "Lcom/android/mms/ui/ComposeMessageActivity;->drawTopPanel",
                        "editMessageItem": "Lcom/android/mms/ui/ComposeMessageActivity;->editMessageItem",
                        "editMmsMessageItem": "Lcom/android/mms/ui/ComposeMessageActivity;->editMmsMessageItem",
                        "editSmsMessageItem": "Lcom/android/mms/ui/ComposeMessageActivity;->editSmsMessageItem",
                        "initialize": "Lcom/android/mms/ui/ComposeMessageActivity;->initialize",
                        "launchMultiplePhonePicker": "Lcom/android/mms/ui/ComposeMessageActivity;->launchMultiplePhonePicker",
                        "loadMessageContent": "Lcom/android/mms/ui/ComposeMessageActivity;->loadMessageContent",
                        "onClick": "Lcom/android/mms/ui/ComposeMessageActivity;->onClick",
                        "onConfigurationChanged": "Lcom/android/mms/ui/ComposeMessageActivity;->onConfigurationChanged",
                        "onCreate": "Lcom/android/mms/ui/ComposeMessageActivity;->onCreate",
                        "onMaxPendingMessagesReached": "Lcom/android/mms/ui/ComposeMessageActivity;->onMaxPendingMessagesReached",
                        "onNewIntent": "Lcom/android/mms/ui/ComposeMessageActivity;->onNewIntent",
                        "onRestart": "Lcom/android/mms/ui/ComposeMessageActivity;->onRestart",
                        "onStart": "Lcom/android/mms/ui/ComposeMessageActivity;->onStart",
                        "onStop": "Lcom/android/mms/ui/ComposeMessageActivity;->onStop",
                        "onUserInteraction": "Lcom/android/mms/ui/ComposeMessageActivity;->onUserInteraction",
                        "saveDraft": "Lcom/android/mms/ui/ComposeMessageActivity;->saveDraft",
                        "startMsgListQuery": "Lcom/android/mms/ui/ComposeMessageActivity;->startMsgListQuery"
                    },
                    "ComposeMessageActivityNoLockScreen": {
                        "createIntent": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->createIntent",
                        "getContactUriForEmail": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->getContactUriForEmail",
                        "getContactUriForPhoneNumber": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->getContactUriForPhoneNumber",
                        "copyMedia": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->copyMedia",
                        "handleForwardedMessage": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->handleForwardedMessage",
                        "haveSomethingToCopyToSDCard": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->haveSomethingToCopyToSDCard",
                        "isDrmRingtoneWithRights": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->isDrmRingtoneWithRights",
                        "isForwardable": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->isForwardable",
                        "onOptionsItemSelected": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onOptionsItemSelected",
                        "saveRingtone": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->saveRingtone",
                        "showMessageDetails": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->showMessageDetails",
                        "getMessageItem": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->getMessageItem",
                        "getDrmMimeMenuStringRsrc": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->getDrmMimeMenuStringRsrc",
                        "getDrmMimeSavedStringRsrc": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->getDrmMimeSavedStringRsrc",
                        "addAttachment": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->addAttachment",
                        "addAudio": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->addAudio",
                        "addCallAndContactMenuItems": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->addCallAndContactMenuItems",
                        "addImage": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->addImage",
                        "addVideo": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->addVideo",
                        "checkPendingNotification": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->checkPendingNotification",
                        "confirmDeleteThread": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->confirmDeleteThread",
                        "dialRecipient": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->dialRecipient",
                        "drawTopPanel": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->drawTopPanel",
                        "editMessageItem": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->editMessageItem",
                        "editMmsMessageItem": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->editMmsMessageItem",
                        "editSmsMessageItem": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->editSmsMessageItem",
                        "initialize": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->initialize",
                        "launchMultiplePhonePicker": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->launchMultiplePhonePicker",
                        "loadMessageContent": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->loadMessageContent",
                        "onClick": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onClick",
                        "onConfigurationChanged": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onConfigurationChanged",
                        "onCreate": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onCreate",
                        "onMaxPendingMessagesReached": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onMaxPendingMessagesReached",
                        "onNewIntent": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onNewIntent",
                        "onRestart": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onRestart",
                        "onStart": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onStart",
                        "onStop": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onStop",
                        "onUserInteraction": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->onUserInteraction",
                        "saveDraft": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->saveDraft",
                        "startMsgListQuery": "Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;->startMsgListQuery"
                    },
                    "ConversationList$1": {
                        "onContentChanged": "Lcom/android/mms/ui/ConversationList$1;->onContentChanged"
                    },
                    "ConversationList$2": {
                        "run": "Lcom/android/mms/ui/ConversationList$2;->run"
                    },
                    "ConversationList$7": {
                        "onKey": "Lcom/android/mms/ui/ConversationList$7;->onKey"
                    },
                    "ConversationList$8": {
                        "run": "Lcom/android/mms/ui/ConversationList$8;->run"
                    },
                    "ConversationList$DeleteThreadListener$1": {
                        "run": "Lcom/android/mms/ui/ConversationList$DeleteThreadListener$1;->run"
                    },
                    "ConversationList$DeleteThreadListener": {
                        "onClick": "Lcom/android/mms/ui/ConversationList$DeleteThreadListener;->onClick"
                    },
                    "ConversationList$ModeCallback": {
                        "onActionItemClicked": "Lcom/android/mms/ui/ConversationList$ModeCallback;->onActionItemClicked"
                    },
                    "ConversationList$ThreadListQueryHandler": {
                        "onDeleteComplete": "Lcom/android/mms/ui/ConversationList$ThreadListQueryHandler;->onDeleteComplete"
                    },
                    "ConversationListAdapter$OnContentChangedListener": {
                        "onContentChanged": "Lcom/android/mms/ui/ConversationListAdapter$OnContentChangedListener;->onContentChanged"
                    },
                    "ConversationListAdapter": {
                        "bindView": "Lcom/android/mms/ui/ConversationListAdapter;->bindView",
                        "onContentChanged": "Lcom/android/mms/ui/ConversationListAdapter;->onContentChanged"
                    },
                    "ConversationList": {
                        "onContextItemSelected": "Lcom/android/mms/ui/ConversationList;->onContextItemSelected",
                        "onOptionsItemSelected": "Lcom/android/mms/ui/ConversationList;->onOptionsItemSelected",
                        "confirmDeleteThread": "Lcom/android/mms/ui/ConversationList;->confirmDeleteThread",
                        "confirmDeleteThreads": "Lcom/android/mms/ui/ConversationList;->confirmDeleteThreads",
                        "createNewMessage": "Lcom/android/mms/ui/ConversationList;->createNewMessage",
                        "onListItemClick": "Lcom/android/mms/ui/ConversationList;->onListItemClick",
                        "onNewIntent": "Lcom/android/mms/ui/ConversationList;->onNewIntent",
                        "onStart": "Lcom/android/mms/ui/ConversationList;->onStart",
                        "openThread": "Lcom/android/mms/ui/ConversationList;->openThread",
                        "startAsyncQuery": "Lcom/android/mms/ui/ConversationList;->startAsyncQuery"
                    },
                    "ConversationListItem$1": {
                        "run": "Lcom/android/mms/ui/ConversationListItem$1;->run"
                    },
                    "ConversationListItem": {
                        "bind": "Lcom/android/mms/ui/ConversationListItem;->bind",
                        "updateAvatarView": "Lcom/android/mms/ui/ConversationListItem;->updateAvatarView",
                        "updateFromView": "Lcom/android/mms/ui/ConversationListItem;->updateFromView"
                    },
                    "DeliveryReportActivity": {
                        "getMmsReportItems": "Lcom/android/mms/ui/DeliveryReportActivity;->getMmsReportItems",
                        "getMmsReportRequests": "Lcom/android/mms/ui/DeliveryReportActivity;->getMmsReportRequests",
                        "getReportItems": "Lcom/android/mms/ui/DeliveryReportActivity;->getReportItems",
                        "getSmsReportItems": "Lcom/android/mms/ui/DeliveryReportActivity;->getSmsReportItems",
                        "getMmsReportStatus": "Lcom/android/mms/ui/DeliveryReportActivity;->getMmsReportStatus",
                        "initListAdapter": "Lcom/android/mms/ui/DeliveryReportActivity;->initListAdapter",
                        "onCreate": "Lcom/android/mms/ui/DeliveryReportActivity;->onCreate"
                    },
                    "Divot": {
                        "assignContactFromEmail": "Lcom/android/mms/ui/Divot;->assignContactFromEmail"
                    },
                    "ManageSimMessages$1": {
                        "onChange": "Lcom/android/mms/ui/ManageSimMessages$1;->onChange"
                    },
                    "ManageSimMessages$2": {
                        "onClick": "Lcom/android/mms/ui/ManageSimMessages$2;->onClick"
                    },
                    "ManageSimMessages$3": {
                        "onClick": "Lcom/android/mms/ui/ManageSimMessages$3;->onClick"
                    },
                    "ManageSimMessages": {
                        "onContextItemSelected": "Lcom/android/mms/ui/ManageSimMessages;->onContextItemSelected",
                        "copyToPhoneMemory": "Lcom/android/mms/ui/ManageSimMessages;->copyToPhoneMemory",
                        "deleteAllFromSim": "Lcom/android/mms/ui/ManageSimMessages;->deleteAllFromSim",
                        "deleteFromSim": "Lcom/android/mms/ui/ManageSimMessages;->deleteFromSim",
                        "init": "Lcom/android/mms/ui/ManageSimMessages;->init",
                        "onCreate": "Lcom/android/mms/ui/ManageSimMessages;->onCreate",
                        "onNewIntent": "Lcom/android/mms/ui/ManageSimMessages;->onNewIntent",
                        "refreshMessageList": "Lcom/android/mms/ui/ManageSimMessages;->refreshMessageList",
                        "startQuery": "Lcom/android/mms/ui/ManageSimMessages;->startQuery"
                    },
                    "MessageItem$PduLoadedCallback": {
                        "onPduLoaded": "Lcom/android/mms/ui/MessageItem$PduLoadedCallback;->onPduLoaded"
                    },
                    "MessageItem$PduLoadedMessageItemCallback": {
                        "onItemLoaded": "Lcom/android/mms/ui/MessageItem$PduLoadedMessageItemCallback;->onItemLoaded"
                    },
                    "MessageItem": {
                        "<init>": "Lcom/android/mms/ui/MessageItem;-><init>",
                        "interpretFrom": "Lcom/android/mms/ui/MessageItem;->interpretFrom"
                    },
                    "MessageListAdapter$OnDataSetChangedListener": {
                        "onContentChanged": "Lcom/android/mms/ui/MessageListAdapter$OnDataSetChangedListener;->onContentChanged"
                    },
                    "MessageListAdapter": {
                        "getCachedMessageItem": "Lcom/android/mms/ui/MessageListAdapter;->getCachedMessageItem",
                        "bindView": "Lcom/android/mms/ui/MessageListAdapter;->bindView",
                        "onContentChanged": "Lcom/android/mms/ui/MessageListAdapter;->onContentChanged"
                    },
                    "MessageListItem$2": {
                        "onPduLoaded": "Lcom/android/mms/ui/MessageListItem$2;->onPduLoaded"
                    },
                    "MessageListItem": {
                        "bind": "Lcom/android/mms/ui/MessageListItem;->bind",
                        "bindCommonMessage": "Lcom/android/mms/ui/MessageListItem;->bindCommonMessage",
                        "bindNotifInd": "Lcom/android/mms/ui/MessageListItem;->bindNotifInd",
                        "<init>": "Lcom/android/mms/ui/MessageListItem;-><init>",
                        "updateAvatarView": "Lcom/android/mms/ui/MessageListItem;->updateAvatarView"
                    },
                    "MessageUtils$3$1": {
                        "run": "Lcom/android/mms/ui/MessageUtils$3$1;->run"
                    },
                    "MessageUtils$4": {
                        "onClick": "Lcom/android/mms/ui/MessageUtils$4;->onClick"
                    },
                    "MessageUtils$ResizeImageResultCallback": {
                        "onResizeResult": "Lcom/android/mms/ui/MessageUtils$ResizeImageResultCallback;->onResizeResult"
                    },
                    "MessageUtils": {
                        "isLocalNumber": "Lcom/android/mms/ui/MessageUtils;->isLocalNumber",
                        "getLocalNumber": "Lcom/android/mms/ui/MessageUtils;->getLocalNumber",
                        "getMessageDetails": "Lcom/android/mms/ui/MessageUtils;->getMessageDetails",
                        "getMultimediaMessageDetails": "Lcom/android/mms/ui/MessageUtils;->getMultimediaMessageDetails",
                        "getNotificationIndDetails": "Lcom/android/mms/ui/MessageUtils;->getNotificationIndDetails",
                        "handleReadReport": "Lcom/android/mms/ui/MessageUtils;->handleReadReport"
                    },
                    "MmsThumbnailPresenter$1": {
                        "onItemLoaded": "Lcom/android/mms/ui/MmsThumbnailPresenter$1;->onItemLoaded"
                    },
                    "MmsThumbnailPresenter": {
                        "presentAudioThumbnail": "Lcom/android/mms/ui/MmsThumbnailPresenter;->presentAudioThumbnail",
                        "present": "Lcom/android/mms/ui/MmsThumbnailPresenter;->present",
                        "presentFirstSlide": "Lcom/android/mms/ui/MmsThumbnailPresenter;->presentFirstSlide",
                        "presentImageThumbnail": "Lcom/android/mms/ui/MmsThumbnailPresenter;->presentImageThumbnail",
                        "presentVideoThumbnail": "Lcom/android/mms/ui/MmsThumbnailPresenter;->presentVideoThumbnail"
                    },
                    "NoConfirmationSendService": {
                        "onHandleIntent": "Lcom/android/mms/ui/NoConfirmationSendService;->onHandleIntent"
                    },
                    "Presenter": {
                        "present": "Lcom/android/mms/ui/Presenter;->present"
                    },
                    "QuickContactDivot": {
                        "assignContactFromEmail": "Lcom/android/mms/ui/QuickContactDivot;->assignContactFromEmail",
                        "assignContactFromPhone": "Lcom/android/mms/ui/QuickContactDivot;->assignContactFromPhone",
                        "onClick": "Lcom/android/mms/ui/QuickContactDivot;->onClick"
                    },
                    "RecipientsAdapter": {
                        "runQueryOnBackgroundThread": "Lcom/android/mms/ui/RecipientsAdapter;->runQueryOnBackgroundThread"
                    },
                    "SearchActivity": {
                        "onCreate": "Lcom/android/mms/ui/SearchActivity;->onCreate"
                    },
                    "SlideEditorActivity": {
                        "onOptionsItemSelected": "Lcom/android/mms/ui/SlideEditorActivity;->onOptionsItemSelected",
                        "onCreate": "Lcom/android/mms/ui/SlideEditorActivity;->onCreate",
                        "showCurrentSlide": "Lcom/android/mms/ui/SlideEditorActivity;->showCurrentSlide"
                    },
                    "SlideListItemView": {
                        "setVideo": "Lcom/android/mms/ui/SlideListItemView;->setVideo",
                        "startVideo": "Lcom/android/mms/ui/SlideListItemView;->startVideo"
                    },
                    "SlideshowActivity": {
                        "onCreate": "Lcom/android/mms/ui/SlideshowActivity;->onCreate"
                    },
                    "SlideshowAttachmentView": {
                        "setVideo": "Lcom/android/mms/ui/SlideshowAttachmentView;->setVideo"
                    },
                    "SlideshowEditActivity$SlideListAdapter": {
                        "createViewFromResource": "Lcom/android/mms/ui/SlideshowEditActivity$SlideListAdapter;->createViewFromResource",
                        "getView": "Lcom/android/mms/ui/SlideshowEditActivity$SlideListAdapter;->getView"
                    },
                    "SlideshowEditActivity": {
                        "initSlideList": "Lcom/android/mms/ui/SlideshowEditActivity;->initSlideList",
                        "onCreate": "Lcom/android/mms/ui/SlideshowEditActivity;->onCreate",
                        "onSaveInstanceState": "Lcom/android/mms/ui/SlideshowEditActivity;->onSaveInstanceState"
                    },
                    "SlideshowPresenter$2": {
                        "run": "Lcom/android/mms/ui/SlideshowPresenter$2;->run"
                    },
                    "SlideshowPresenter$4": {
                        "run": "Lcom/android/mms/ui/SlideshowPresenter$4;->run"
                    },
                    "SlideshowPresenter$5": {
                        "run": "Lcom/android/mms/ui/SlideshowPresenter$5;->run"
                    },
                    "SlideshowPresenter": {
                        "presentAudio": "Lcom/android/mms/ui/SlideshowPresenter;->presentAudio",
                        "present": "Lcom/android/mms/ui/SlideshowPresenter;->present",
                        "presentRegionMedia": "Lcom/android/mms/ui/SlideshowPresenter;->presentRegionMedia",
                        "presentSlide": "Lcom/android/mms/ui/SlideshowPresenter;->presentSlide",
                        "presentVideo": "Lcom/android/mms/ui/SlideshowPresenter;->presentVideo"
                    },
                    "SlideView$1": {
                        "onPrepared": "Lcom/android/mms/ui/SlideView$1;->onPrepared"
                    },
                    "SlideViewInterface": {
                        "pauseAudio": "Lcom/android/mms/ui/SlideViewInterface;->pauseAudio",
                        "pauseVideo": "Lcom/android/mms/ui/SlideViewInterface;->pauseVideo",
                        "reset": "Lcom/android/mms/ui/SlideViewInterface;->reset",
                        "setAudio": "Lcom/android/mms/ui/SlideViewInterface;->setAudio",
                        "setVideo": "Lcom/android/mms/ui/SlideViewInterface;->setVideo",
                        "startAudio": "Lcom/android/mms/ui/SlideViewInterface;->startAudio",
                        "startVideo": "Lcom/android/mms/ui/SlideViewInterface;->startVideo",
                        "stopAudio": "Lcom/android/mms/ui/SlideViewInterface;->stopAudio",
                        "stopVideo": "Lcom/android/mms/ui/SlideViewInterface;->stopVideo"
                    },
                    "SlideView": {
                        "pauseAudio": "Lcom/android/mms/ui/SlideView;->pauseAudio",
                        "pauseVideo": "Lcom/android/mms/ui/SlideView;->pauseVideo",
                        "reset": "Lcom/android/mms/ui/SlideView;->reset",
                        "setAudio": "Lcom/android/mms/ui/SlideView;->setAudio",
                        "setVideo": "Lcom/android/mms/ui/SlideView;->setVideo",
                        "startAudio": "Lcom/android/mms/ui/SlideView;->startAudio",
                        "startVideo": "Lcom/android/mms/ui/SlideView;->startVideo",
                        "stopAudio": "Lcom/android/mms/ui/SlideView;->stopAudio",
                        "stopVideo": "Lcom/android/mms/ui/SlideView;->stopVideo"
                    },
                    "ViewInterface": {
                        "reset": "Lcom/android/mms/ui/ViewInterface;->reset"
                    }
                },
                "util": {
                    "AddressUtils": {
                        "getFrom": "Lcom/android/mms/util/AddressUtils;->getFrom"
                    },
                    "DownloadManager$4": {
                        "run": "Lcom/android/mms/util/DownloadManager$4;->run"
                    },
                    "DownloadManager": {
                        "getMessage": "Lcom/android/mms/util/DownloadManager;->getMessage",
                        "markState": "Lcom/android/mms/util/DownloadManager;->markState"
                    },
                    "DraftCache$1": {
                        "run": "Lcom/android/mms/util/DraftCache$1;->run"
                    },
                    "DraftCache": {
                        "rebuildCache": "Lcom/android/mms/util/DraftCache;->rebuildCache"
                    },
                    "ItemLoadedCallback": {
                        "onItemLoaded": "Lcom/android/mms/util/ItemLoadedCallback;->onItemLoaded"
                    },
                    "PduLoaderManager$PduTask$1": {
                        "run": "Lcom/android/mms/util/PduLoaderManager$PduTask$1;->run"
                    },
                    "PduLoaderManager$PduTask": {
                        "run": "Lcom/android/mms/util/PduLoaderManager$PduTask;->run"
                    },
                    "PduLoaderManager": {
                        "getPdu": "Lcom/android/mms/util/PduLoaderManager;->getPdu"
                    },
                    "RateController": {
                        "isLimitSurpassed": "Lcom/android/mms/util/RateController;->isLimitSurpassed"
                    },
                    "Recycler$MmsRecycler": {
                        "getAllThreads": "Lcom/android/mms/util/Recycler$MmsRecycler;->getAllThreads",
                        "anyThreadOverLimit": "Lcom/android/mms/util/Recycler$MmsRecycler;->anyThreadOverLimit",
                        "checkForThreadsOverLimit": "Lcom/android/mms/util/Recycler$MmsRecycler;->checkForThreadsOverLimit",
                        "deleteMessagesForThread": "Lcom/android/mms/util/Recycler$MmsRecycler;->deleteMessagesForThread",
                        "deleteMessagesOlderThanDate": "Lcom/android/mms/util/Recycler$MmsRecycler;->deleteMessagesOlderThanDate",
                        "deleteOldMessages": "Lcom/android/mms/util/Recycler$MmsRecycler;->deleteOldMessages",
                        "deleteOldMessagesByThreadId": "Lcom/android/mms/util/Recycler$MmsRecycler;->deleteOldMessagesByThreadId",
                        "deleteOldMessagesInSameThreadAsMessage": "Lcom/android/mms/util/Recycler$MmsRecycler;->deleteOldMessagesInSameThreadAsMessage"
                    },
                    "Recycler$SmsRecycler": {
                        "getAllThreads": "Lcom/android/mms/util/Recycler$SmsRecycler;->getAllThreads",
                        "anyThreadOverLimit": "Lcom/android/mms/util/Recycler$SmsRecycler;->anyThreadOverLimit",
                        "checkForThreadsOverLimit": "Lcom/android/mms/util/Recycler$SmsRecycler;->checkForThreadsOverLimit",
                        "deleteMessagesForThread": "Lcom/android/mms/util/Recycler$SmsRecycler;->deleteMessagesForThread",
                        "deleteOldMessages": "Lcom/android/mms/util/Recycler$SmsRecycler;->deleteOldMessages",
                        "deleteOldMessagesByThreadId": "Lcom/android/mms/util/Recycler$SmsRecycler;->deleteOldMessagesByThreadId"
                    },
                    "Recycler": {
                        "getAllThreads": "Lcom/android/mms/util/Recycler;->getAllThreads",
                        "anyThreadOverLimit": "Lcom/android/mms/util/Recycler;->anyThreadOverLimit",
                        "checkForThreadsOverLimit": "Lcom/android/mms/util/Recycler;->checkForThreadsOverLimit",
                        "deleteMessagesForThread": "Lcom/android/mms/util/Recycler;->deleteMessagesForThread",
                        "deleteOldMessages": "Lcom/android/mms/util/Recycler;->deleteOldMessages",
                        "deleteOldMessagesByThreadId": "Lcom/android/mms/util/Recycler;->deleteOldMessagesByThreadId"
                    },
                    "ThumbnailManager$ThumbnailTask$1": {
                        "run": "Lcom/android/mms/util/ThumbnailManager$ThumbnailTask$1;->run"
                    },
                    "ThumbnailManager": {
                        "getThumbnail": "Lcom/android/mms/util/ThumbnailManager;->getThumbnail",
                        "getVideoThumbnail": "Lcom/android/mms/util/ThumbnailManager;->getVideoThumbnail",
                        "<init>": "Lcom/android/mms/util/ThumbnailManager;-><init>"
                    }
                },
                "widget": {
                    "MmsWidgetService$MmsFactory": {
                        "queryAllConversations": "Lcom/android/mms/widget/MmsWidgetService$MmsFactory;->queryAllConversations",
                        "queryUnreadCount": "Lcom/android/mms/widget/MmsWidgetService$MmsFactory;->queryUnreadCount",
                        "onDataSetChanged": "Lcom/android/mms/widget/MmsWidgetService$MmsFactory;->onDataSetChanged"
                    }
                },
                "SuggestionsProvider": "Lcom/android/mms;->SuggestionsProvider"
            },
            "music": {
                "AudioPreview$2": {
                    "onAudioFocusChange": "Lcom/android/music/AudioPreview$2;->onAudioFocusChange"
                },
                "AudioPreview$PreviewPlayer": {
                    "onPrepared": "Lcom/android/music/AudioPreview$PreviewPlayer;->onPrepared",
                    "pause": "Lcom/android/music/AudioPreview$PreviewPlayer;->pause",
                    "postEventFromNative": "Lcom/android/music/AudioPreview$PreviewPlayer;->postEventFromNative",
                    "release": "Lcom/android/music/AudioPreview$PreviewPlayer;->release",
                    "reset": "Lcom/android/music/AudioPreview$PreviewPlayer;->reset",
                    "setWakeMode": "Lcom/android/music/AudioPreview$PreviewPlayer;->setWakeMode",
                    "start": "Lcom/android/music/AudioPreview$PreviewPlayer;->start",
                    "stayAwake": "Lcom/android/music/AudioPreview$PreviewPlayer;->stayAwake",
                    "stop": "Lcom/android/music/AudioPreview$PreviewPlayer;->stop"
                },
                "AudioPreview": {
                    "onKeyDown": "Lcom/android/music/AudioPreview;->onKeyDown",
                    "onDestroy": "Lcom/android/music/AudioPreview;->onDestroy",
                    "onPrepared": "Lcom/android/music/AudioPreview;->onPrepared",
                    "onUserLeaveHint": "Lcom/android/music/AudioPreview;->onUserLeaveHint",
                    "playPauseClicked": "Lcom/android/music/AudioPreview;->playPauseClicked",
                    "start": "Lcom/android/music/AudioPreview;->start",
                    "stopPlayback": "Lcom/android/music/AudioPreview;->stopPlayback"
                },
                "IMediaPlaybackService$Stub$Proxy": {
                    "removeTrack": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->removeTrack",
                    "removeTracks": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->removeTracks",
                    "enqueue": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->enqueue",
                    "next": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->next",
                    "openFile": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->openFile",
                    "open": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->open",
                    "pause": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->pause",
                    "play": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->play",
                    "prev": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->prev",
                    "setQueuePosition": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->setQueuePosition",
                    "setRepeatMode": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->setRepeatMode",
                    "setShuffleMode": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->setShuffleMode",
                    "stop": "Lcom/android/music/IMediaPlaybackService$Stub$Proxy;->stop"
                },
                "IMediaPlaybackService$Stub": {
                    "onTransact": "Lcom/android/music/IMediaPlaybackService$Stub;->onTransact",
                    "removeTrack": "Lcom/android/music/IMediaPlaybackService$Stub;->removeTrack",
                    "removeTracks": "Lcom/android/music/IMediaPlaybackService$Stub;->removeTracks",
                    "enqueue": "Lcom/android/music/IMediaPlaybackService$Stub;->enqueue",
                    "next": "Lcom/android/music/IMediaPlaybackService$Stub;->next",
                    "openFile": "Lcom/android/music/IMediaPlaybackService$Stub;->openFile",
                    "open": "Lcom/android/music/IMediaPlaybackService$Stub;->open",
                    "pause": "Lcom/android/music/IMediaPlaybackService$Stub;->pause",
                    "play": "Lcom/android/music/IMediaPlaybackService$Stub;->play",
                    "prev": "Lcom/android/music/IMediaPlaybackService$Stub;->prev",
                    "setQueuePosition": "Lcom/android/music/IMediaPlaybackService$Stub;->setQueuePosition",
                    "setRepeatMode": "Lcom/android/music/IMediaPlaybackService$Stub;->setRepeatMode",
                    "setShuffleMode": "Lcom/android/music/IMediaPlaybackService$Stub;->setShuffleMode",
                    "stop": "Lcom/android/music/IMediaPlaybackService$Stub;->stop"
                },
                "IMediaPlaybackService": {
                    "enqueue": "Lcom/android/music/IMediaPlaybackService;->enqueue",
                    "next": "Lcom/android/music/IMediaPlaybackService;->next",
                    "openFile": "Lcom/android/music/IMediaPlaybackService;->openFile",
                    "open": "Lcom/android/music/IMediaPlaybackService;->open",
                    "pause": "Lcom/android/music/IMediaPlaybackService;->pause",
                    "play": "Lcom/android/music/IMediaPlaybackService;->play",
                    "prev": "Lcom/android/music/IMediaPlaybackService;->prev",
                    "setQueuePosition": "Lcom/android/music/IMediaPlaybackService;->setQueuePosition",
                    "setRepeatMode": "Lcom/android/music/IMediaPlaybackService;->setRepeatMode",
                    "setShuffleMode": "Lcom/android/music/IMediaPlaybackService;->setShuffleMode",
                    "stop": "Lcom/android/music/IMediaPlaybackService;->stop"
                },
                "MediaPlaybackActivity$7": {
                    "onClick": "Lcom/android/music/MediaPlaybackActivity$7;->onClick"
                },
                "MediaPlaybackActivity": {
                    "onOptionsItemSelected": "Lcom/android/music/MediaPlaybackActivity;->onOptionsItemSelected",
                    "cycleRepeat": "Lcom/android/music/MediaPlaybackActivity;->cycleRepeat",
                    "doPauseResume": "Lcom/android/music/MediaPlaybackActivity;->doPauseResume",
                    "startPlayback": "Lcom/android/music/MediaPlaybackActivity;->startPlayback",
                    "toggleShuffle": "Lcom/android/music/MediaPlaybackActivity;->toggleShuffle"
                },
                "MediaPlaybackService$2": {
                    "onReceive": "Lcom/android/music/MediaPlaybackService$2;->onReceive"
                },
                "MediaPlaybackService$5": {
                    "onReceive": "Lcom/android/music/MediaPlaybackService$5;->onReceive"
                },
                "MediaPlaybackService$CompatMediaPlayer": {
                    "onCompletion": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->onCompletion",
                    "pause": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->pause",
                    "postEventFromNative": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->postEventFromNative",
                    "release": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->release",
                    "reset": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->reset",
                    "setWakeMode": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->setWakeMode",
                    "start": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->start",
                    "stayAwake": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->stayAwake",
                    "stop": "Lcom/android/music/MediaPlaybackService$CompatMediaPlayer;->stop"
                },
                "MediaPlaybackService$MultiPlayer$1": {
                    "onCompletion": "Lcom/android/music/MediaPlaybackService$MultiPlayer$1;->onCompletion"
                },
                "MediaPlaybackService$MultiPlayer$2": {
                    "onError": "Lcom/android/music/MediaPlaybackService$MultiPlayer$2;->onError"
                },
                "MediaPlaybackService$MultiPlayer": {
                    "setDataSourceImpl": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->setDataSourceImpl",
                    "<init>": "Lcom/android/music/MediaPlaybackService$MultiPlayer;-><init>",
                    "pause": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->pause",
                    "release": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->release",
                    "setDataSource": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->setDataSource",
                    "setNextDataSource": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->setNextDataSource",
                    "start": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->start",
                    "stop": "Lcom/android/music/MediaPlaybackService$MultiPlayer;->stop"
                },
                "MediaPlaybackService$ServiceStub": {
                    "onTransact": "Lcom/android/music/MediaPlaybackService$ServiceStub;->onTransact",
                    "removeTrack": "Lcom/android/music/MediaPlaybackService$ServiceStub;->removeTrack",
                    "removeTracks": "Lcom/android/music/MediaPlaybackService$ServiceStub;->removeTracks",
                    "enqueue": "Lcom/android/music/MediaPlaybackService$ServiceStub;->enqueue",
                    "next": "Lcom/android/music/MediaPlaybackService$ServiceStub;->next",
                    "openFile": "Lcom/android/music/MediaPlaybackService$ServiceStub;->openFile",
                    "open": "Lcom/android/music/MediaPlaybackService$ServiceStub;->open",
                    "pause": "Lcom/android/music/MediaPlaybackService$ServiceStub;->pause",
                    "play": "Lcom/android/music/MediaPlaybackService$ServiceStub;->play",
                    "prev": "Lcom/android/music/MediaPlaybackService$ServiceStub;->prev",
                    "setQueuePosition": "Lcom/android/music/MediaPlaybackService$ServiceStub;->setQueuePosition",
                    "setRepeatMode": "Lcom/android/music/MediaPlaybackService$ServiceStub;->setRepeatMode",
                    "setShuffleMode": "Lcom/android/music/MediaPlaybackService$ServiceStub;->setShuffleMode",
                    "stop": "Lcom/android/music/MediaPlaybackService$ServiceStub;->stop"
                },
                "MediaPlaybackService": {
                    "open": "Lcom/android/music/MediaPlaybackService;->open",
                    "getNextPosition": "Lcom/android/music/MediaPlaybackService;->getNextPosition",
                    "onStartCommand": "Lcom/android/music/MediaPlaybackService;->onStartCommand",
                    "removeTrack": "Lcom/android/music/MediaPlaybackService;->removeTrack",
                    "removeTracksInternal": "Lcom/android/music/MediaPlaybackService;->removeTracksInternal",
                    "removeTracks": "Lcom/android/music/MediaPlaybackService;->removeTracks",
                    "closeExternalStorageFiles": "Lcom/android/music/MediaPlaybackService;->closeExternalStorageFiles",
                    "doAutoShuffleUpdate": "Lcom/android/music/MediaPlaybackService;->doAutoShuffleUpdate",
                    "enqueue": "Lcom/android/music/MediaPlaybackService;->enqueue",
                    "gotoNext": "Lcom/android/music/MediaPlaybackService;->gotoNext",
                    "onCreate": "Lcom/android/music/MediaPlaybackService;->onCreate",
                    "onDestroy": "Lcom/android/music/MediaPlaybackService;->onDestroy",
                    "openCurrentAndNext": "Lcom/android/music/MediaPlaybackService;->openCurrentAndNext",
                    "pause": "Lcom/android/music/MediaPlaybackService;->pause",
                    "play": "Lcom/android/music/MediaPlaybackService;->play",
                    "prev": "Lcom/android/music/MediaPlaybackService;->prev",
                    "reloadQueue": "Lcom/android/music/MediaPlaybackService;->reloadQueue",
                    "setNextTrack": "Lcom/android/music/MediaPlaybackService;->setNextTrack",
                    "setQueuePosition": "Lcom/android/music/MediaPlaybackService;->setQueuePosition",
                    "setRepeatMode": "Lcom/android/music/MediaPlaybackService;->setRepeatMode",
                    "setShuffleMode": "Lcom/android/music/MediaPlaybackService;->setShuffleMode",
                    "stop": "Lcom/android/music/MediaPlaybackService;->stop"
                },
                "MusicPicker": {
                    "onCompletion": "Lcom/android/music/MusicPicker;->onCompletion",
                    "onListItemClick": "Lcom/android/music/MusicPicker;->onListItemClick",
                    "onPause": "Lcom/android/music/MusicPicker;->onPause",
                    "setSelected": "Lcom/android/music/MusicPicker;->setSelected",
                    "stopMediaPlayer": "Lcom/android/music/MusicPicker;->stopMediaPlayer"
                },
                "MusicUtils": {
                    "playAll": "Lcom/android/music/MusicUtils;->playAll",
                    "setRingtone": "Lcom/android/music/MusicUtils;->setRingtone"
                },
                "QueryBrowserActivity": {
                    "onOptionsItemSelected": "Lcom/android/music/QueryBrowserActivity;->onOptionsItemSelected"
                },
                "TrackBrowserActivity": {
                    "onContextItemSelected": "Lcom/android/music/TrackBrowserActivity;->onContextItemSelected"
                }
            },
            "musicfx": {
                "ActivityMusic$1": {
                    "onReceive": "Lcom/android/musicfx/ActivityMusic$1;->onReceive"
                },
                "ActivityMusic": {
                    "onCreate": "Lcom/android/musicfx/ActivityMusic;->onCreate",
                    "onResume": "Lcom/android/musicfx/ActivityMusic;->onResume"
                },
                "ControlPanelEffect": {
                    "initEffectsPreferences": "Lcom/android/musicfx/ControlPanelEffect;->initEffectsPreferences",
                    "setEnabledAll": "Lcom/android/musicfx/ControlPanelEffect;->setEnabledAll"
                },
                "ControlPanelPicker": {
                    "onCreate": "Lcom/android/musicfx/ControlPanelPicker;->onCreate"
                }
            },
            "nfc": {
                "DeviceHost$DeviceHostListener": {
                    "onCardEmulationAidSelected": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onCardEmulationAidSelected",
                    "onCardEmulationDeselected": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onCardEmulationDeselected",
                    "onLlcpLinkActivated": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onLlcpLinkActivated",
                    "onLlcpLinkDeactivated": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onLlcpLinkDeactivated",
                    "onRemoteEndpointDiscovered": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onRemoteEndpointDiscovered",
                    "onRemoteFieldActivated": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onRemoteFieldActivated",
                    "onRemoteFieldDeactivated": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onRemoteFieldDeactivated",
                    "onSeApduReceived": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onSeApduReceived",
                    "onSeEmvCardRemoval": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onSeEmvCardRemoval",
                    "onSeMifareAccess": "Lcom/android/nfc/DeviceHost$DeviceHostListener;->onSeMifareAccess"
                },
                "handover": {
                    "BluetoothHeadsetHandover$2": {
                        "onReceive": "Lcom/android/nfc/handover/BluetoothHeadsetHandover$2;->onReceive"
                    },
                    "BluetoothHeadsetHandover": {
                        "handleIntent": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->handleIntent",
                        "nextStep": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->nextStep",
                        "nextStepConnect": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->nextStepConnect",
                        "nextStepDisconnect": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->nextStepDisconnect",
                        "start": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->start",
                        "startBonding": "Lcom/android/nfc/handover/BluetoothHeadsetHandover;->startBonding"
                    },
                    "BluetoothOppHandover": {
                        "start": "Lcom/android/nfc/handover/BluetoothOppHandover;->start"
                    },
                    "ConfirmConnectActivity": {
                        "onCreate": "Lcom/android/nfc/handover/ConfirmConnectActivity;->onCreate"
                    },
                    "HandoverManager$1": {
                        "onReceive": "Lcom/android/nfc/handover/HandoverManager$1;->onReceive"
                    },
                    "HandoverManager$HandoverPowerManager": {
                        "enableBluetooth": "Lcom/android/nfc/handover/HandoverManager$HandoverPowerManager;->enableBluetooth",
                        "isBluetoothEnabled": "Lcom/android/nfc/handover/HandoverManager$HandoverPowerManager;->isBluetoothEnabled"
                    },
                    "HandoverManager$HandoverTransfer": {
                        "cancel": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->cancel",
                        "finishTransfer": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->finishTransfer",
                        "onScanCompleted": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->onScanCompleted",
                        "processFiles": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->processFiles",
                        "updateFileProgress": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->updateFileProgress",
                        "updateNotification": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->updateNotification",
                        "updateStateAndNotification": "Lcom/android/nfc/handover/HandoverManager$HandoverTransfer;->updateStateAndNotification"
                    },
                    "HandoverManager": {
                        "createHandoverRequestMessage": "Lcom/android/nfc/handover/HandoverManager;->createHandoverRequestMessage",
                        "createHandoverSelectMessage": "Lcom/android/nfc/handover/HandoverManager;->createHandoverSelectMessage",
                        "tryHandoverRequest": "Lcom/android/nfc/handover/HandoverManager;->tryHandoverRequest",
                        "createBluetoothOobDataRecord": "Lcom/android/nfc/handover/HandoverManager;->createBluetoothOobDataRecord",
                        "tryHandover": "Lcom/android/nfc/handover/HandoverManager;->tryHandover",
                        "doHandoverUri": "Lcom/android/nfc/handover/HandoverManager;->doHandoverUri"
                    }
                },
                "NfcDispatcher": {
                    "dispatchTag": "Lcom/android/nfc/NfcDispatcher;->dispatchTag"
                },
                "NfcService$ApplyRoutingTask": {
                    "doInBackground": "Lcom/android/nfc/NfcService$ApplyRoutingTask;->doInBackground"
                },
                "NfcService$EnableDisableTask": {
                    "disableInternal": "Lcom/android/nfc/NfcService$EnableDisableTask;->disableInternal",
                    "enableInternal": "Lcom/android/nfc/NfcService$EnableDisableTask;->enableInternal",
                    "doInBackground": "Lcom/android/nfc/NfcService$EnableDisableTask;->doInBackground",
                    "executeEeWipe": "Lcom/android/nfc/NfcService$EnableDisableTask;->executeEeWipe"
                },
                "NfcService$NfcAdapterExtrasService": {
                    "close": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->close",
                    "open": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->open",
                    "transceive": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->transceive",
                    "onTransact": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->onTransact",
                    "getCardEmulationRoute": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->getCardEmulationRoute",
                    "authenticate": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->authenticate",
                    "setCardEmulationRoute": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->setCardEmulationRoute",
                    "getDriverName": "Lcom/android/nfc/NfcService$NfcAdapterExtrasService;->getDriverName"
                },
                "NfcService$NfcAdapterService": {
                    "getNfcAdapterExtrasInterface": "Lcom/android/nfc/NfcService$NfcAdapterService;->getNfcAdapterExtrasInterface",
                    "disableNdefPush": "Lcom/android/nfc/NfcService$NfcAdapterService;->disableNdefPush",
                    "enableNdefPush": "Lcom/android/nfc/NfcService$NfcAdapterService;->enableNdefPush",
                    "onTransact": "Lcom/android/nfc/NfcService$NfcAdapterService;->onTransact",
                    "dispatch": "Lcom/android/nfc/NfcService$NfcAdapterService;->dispatch",
                    "setForegroundDispatch": "Lcom/android/nfc/NfcService$NfcAdapterService;->setForegroundDispatch",
                    "setNdefPushCallback": "Lcom/android/nfc/NfcService$NfcAdapterService;->setNdefPushCallback",
                    "addNfcUnlockHandler": "Lcom/android/nfc/NfcService$NfcAdapterService;->addNfcUnlockHandler",
                    "disable": "Lcom/android/nfc/NfcService$NfcAdapterService;->disable",
                    "enable": "Lcom/android/nfc/NfcService$NfcAdapterService;->enable",
                    "invokeBeam": "Lcom/android/nfc/NfcService$NfcAdapterService;->invokeBeam",
                    "invokeBeamInternal": "Lcom/android/nfc/NfcService$NfcAdapterService;->invokeBeamInternal",
                    "pausePolling": "Lcom/android/nfc/NfcService$NfcAdapterService;->pausePolling",
                    "resumePolling": "Lcom/android/nfc/NfcService$NfcAdapterService;->resumePolling",
                    "setAppCallback": "Lcom/android/nfc/NfcService$NfcAdapterService;->setAppCallback",
                    "setP2pModes": "Lcom/android/nfc/NfcService$NfcAdapterService;->setP2pModes",
                    "verifyNfcPermission": "Lcom/android/nfc/NfcService$NfcAdapterService;->verifyNfcPermission"
                },
                "NfcService$NfcServiceHandler": {
                    "llcpActivated": "Lcom/android/nfc/NfcService$NfcServiceHandler;->llcpActivated",
                    "dispatchTagEndpoint": "Lcom/android/nfc/NfcService$NfcServiceHandler;->dispatchTagEndpoint"
                },
                "NfcService$TagService": {
                    "ndefRead": "Lcom/android/nfc/NfcService$TagService;->ndefRead",
                    "rediscover": "Lcom/android/nfc/NfcService$TagService;->rediscover",
                    "transceive": "Lcom/android/nfc/NfcService$TagService;->transceive",
                    "isNdef": "Lcom/android/nfc/NfcService$TagService;->isNdef",
                    "onTransact": "Lcom/android/nfc/NfcService$TagService;->onTransact",
                    "close": "Lcom/android/nfc/NfcService$TagService;->close",
                    "connect": "Lcom/android/nfc/NfcService$TagService;->connect",
                    "formatNdef": "Lcom/android/nfc/NfcService$TagService;->formatNdef",
                    "getTechList": "Lcom/android/nfc/NfcService$TagService;->getTechList",
                    "getTimeout": "Lcom/android/nfc/NfcService$TagService;->getTimeout",
                    "ndefMakeReadOnly": "Lcom/android/nfc/NfcService$TagService;->ndefMakeReadOnly",
                    "ndefWrite": "Lcom/android/nfc/NfcService$TagService;->ndefWrite",
                    "reconnect": "Lcom/android/nfc/NfcService$TagService;->reconnect",
                    "setTimeout": "Lcom/android/nfc/NfcService$TagService;->setTimeout",
                    "resetTimeouts": "Lcom/android/nfc/NfcService$TagService;->resetTimeouts"
                },
                "NfcService": {
                    "enforceNfceeAdminPerm": "Lcom/android/nfc/NfcService;->enforceNfceeAdminPerm",
                    "onCardEmulationAidSelected": "Lcom/android/nfc/NfcService;->onCardEmulationAidSelected",
                    "onCardEmulationDeselected": "Lcom/android/nfc/NfcService;->onCardEmulationDeselected",
                    "onLlcpLinkActivated": "Lcom/android/nfc/NfcService;->onLlcpLinkActivated",
                    "onLlcpLinkDeactivated": "Lcom/android/nfc/NfcService;->onLlcpLinkDeactivated",
                    "onRemoteEndpointDiscovered": "Lcom/android/nfc/NfcService;->onRemoteEndpointDiscovered",
                    "onRemoteFieldActivated": "Lcom/android/nfc/NfcService;->onRemoteFieldActivated",
                    "onRemoteFieldDeactivated": "Lcom/android/nfc/NfcService;->onRemoteFieldDeactivated",
                    "onSeApduReceived": "Lcom/android/nfc/NfcService;->onSeApduReceived",
                    "onSeEmvCardRemoval": "Lcom/android/nfc/NfcService;->onSeEmvCardRemoval",
                    "onSeMifareAccess": "Lcom/android/nfc/NfcService;->onSeMifareAccess",
                    "sendMessage": "Lcom/android/nfc/NfcService;->sendMessage",
                    "sendMockNdefTag": "Lcom/android/nfc/NfcService;->sendMockNdefTag"
                },
                "nxp": {
                    "NativeNfcManager": {
                        "notifyLlcpLinkActivation": "Lcom/android/nfc/nxp/NativeNfcManager;->notifyLlcpLinkActivation",
                        "notifyLlcpLinkDeactivated": "Lcom/android/nfc/nxp/NativeNfcManager;->notifyLlcpLinkDeactivated",
                        "notifyNdefMessageListeners": "Lcom/android/nfc/nxp/NativeNfcManager;->notifyNdefMessageListeners",
                        "notifySeApduReceived": "Lcom/android/nfc/nxp/NativeNfcManager;->notifySeApduReceived",
                        "notifySeEmvCardRemoval": "Lcom/android/nfc/nxp/NativeNfcManager;->notifySeEmvCardRemoval",
                        "notifySeFieldActivated": "Lcom/android/nfc/nxp/NativeNfcManager;->notifySeFieldActivated",
                        "notifySeFieldDeactivated": "Lcom/android/nfc/nxp/NativeNfcManager;->notifySeFieldDeactivated",
                        "notifySeMifareAccess": "Lcom/android/nfc/nxp/NativeNfcManager;->notifySeMifareAccess",
                        "notifyTargetDeselected": "Lcom/android/nfc/nxp/NativeNfcManager;->notifyTargetDeselected",
                        "notifyTransactionListeners": "Lcom/android/nfc/nxp/NativeNfcManager;->notifyTransactionListeners"
                    }
                },
                "P2pEventListener": {
                    "onP2pHandoverNotSupported": "Lcom/android/nfc/P2pEventListener;->onP2pHandoverNotSupported",
                    "onP2pInRange": "Lcom/android/nfc/P2pEventListener;->onP2pInRange",
                    "onP2pReceiveComplete": "Lcom/android/nfc/P2pEventListener;->onP2pReceiveComplete",
                    "onP2pSendComplete": "Lcom/android/nfc/P2pEventListener;->onP2pSendComplete"
                },
                "P2pEventManager": {
                    "onP2pHandoverNotSupported": "Lcom/android/nfc/P2pEventManager;->onP2pHandoverNotSupported",
                    "onP2pInRange": "Lcom/android/nfc/P2pEventManager;->onP2pInRange",
                    "onP2pReceiveComplete": "Lcom/android/nfc/P2pEventManager;->onP2pReceiveComplete",
                    "onP2pSendComplete": "Lcom/android/nfc/P2pEventManager;->onP2pSendComplete"
                },
                "P2pLinkManager$2": {
                    "doGet": "Lcom/android/nfc/P2pLinkManager$2;->doGet"
                },
                "P2pLinkManager$SendTask": {
                    "doInBackground": "Lcom/android/nfc/P2pLinkManager$SendTask;->doInBackground"
                },
                "P2pLinkManager": {
                    "doSnepProtocol": "Lcom/android/nfc/P2pLinkManager;->doSnepProtocol",
                    "enableDisable": "Lcom/android/nfc/P2pLinkManager;->enableDisable",
                    "onLlcpActivated": "Lcom/android/nfc/P2pLinkManager;->onLlcpActivated",
                    "prepareMessageToSend": "Lcom/android/nfc/P2pLinkManager;->prepareMessageToSend"
                },
                "snep": {
                    "SnepServer$Callback": {
                        "doGet": "Lcom/android/nfc/snep/SnepServer$Callback;->doGet"
                    },
                    "SnepServer$ConnectionThread": {
                        "run": "Lcom/android/nfc/snep/SnepServer$ConnectionThread;->run"
                    },
                    "SnepServer$ServerThread": {
                        "run": "Lcom/android/nfc/snep/SnepServer$ServerThread;->run"
                    },
                    "SnepServer": {
                        "handleRequest": "Lcom/android/nfc/snep/SnepServer;->handleRequest",
                        "start": "Lcom/android/nfc/snep/SnepServer;->start"
                    }
                },
                "TechListChooserActivity": {
                    "onCreate": "Lcom/android/nfc/TechListChooserActivity;->onCreate",
                    "onStop": "Lcom/android/nfc/TechListChooserActivity;->onStop"
                },
                "cardemulation": {
                    "CardEmulationManager$CardEmulationInterface": {
                        "getAidGroupForService": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->getAidGroupForService",
                        "getServices": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->getServices",
                        "isDefaultServiceForAid": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->isDefaultServiceForAid",
                        "isDefaultServiceForCategory": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->isDefaultServiceForCategory",
                        "registerAidGroupForService": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->registerAidGroupForService",
                        "removeAidGroupForService": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->removeAidGroupForService",
                        "setDefaultForNextTap": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->setDefaultForNextTap",
                        "setDefaultServiceForCategory": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->setDefaultServiceForCategory",
                        "setPreferredService": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->setPreferredService",
                        "unsetPreferredService": "Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface;->unsetPreferredService"
                    }
                },
                "NfcService$CardEmulationService": {
                    "getServices": "Lcom/android/nfc/NfcService$CardEmulationService;->getServices",
                    "isDefaultServiceForAid": "Lcom/android/nfc/NfcService$CardEmulationService;->isDefaultServiceForAid",
                    "isDefaultServiceForCategory": "Lcom/android/nfc/NfcService$CardEmulationService;->isDefaultServiceForCategory",
                    "setDefaultForNextTap": "Lcom/android/nfc/NfcService$CardEmulationService;->setDefaultForNextTap",
                    "setDefaultServiceForCategory": "Lcom/android/nfc/NfcService$CardEmulationService;->setDefaultServiceForCategory"
                }
            },
            "org": {
                "bouncycastle": {
                    "asn1": {
                        "ASN1Object": {
                            "toASN1Object": "Lcom/android/org/bouncycastle/asn1/ASN1Object;->toASN1Object"
                        }
                    }
                }
            },
            "phone": {
                "AccelerometerListener$1": {
                    "onSensorChanged": "Lcom/android/phone/AccelerometerListener$1;->onSensorChanged"
                },
                "AccelerometerListener$OrientationListener": {
                    "orientationChanged": "Lcom/android/phone/AccelerometerListener$OrientationListener;->orientationChanged"
                },
                "AccelerometerListener": {
                    "onSensorEvent": "Lcom/android/phone/AccelerometerListener;->onSensorEvent",
                    "setOrientation": "Lcom/android/phone/AccelerometerListener;->setOrientation"
                },
                "ADNList": {
                    "onContextItemSelected": "Lcom/android/phone/ADNList;->onContextItemSelected"
                },
                "BluetoothAtPhonebook$1": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothAtPhonebook$1;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothAtPhonebook$1;->handleBasicCommand"
                },
                "BluetoothAtPhonebook$2": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothAtPhonebook$2;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothAtPhonebook$2;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothAtPhonebook$2;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothAtPhonebook$2;->handleSetCommand"
                },
                "BluetoothAtPhonebook$3": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothAtPhonebook$3;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothAtPhonebook$3;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothAtPhonebook$3;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothAtPhonebook$3;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothAtPhonebook$3;->handleTestCommand"
                },
                "BluetoothAtPhonebook": {
                    "processCpbrCommand": "Lcom/android/phone/BluetoothAtPhonebook;->processCpbrCommand",
                    "checkAccessPermission": "Lcom/android/phone/BluetoothAtPhonebook;->checkAccessPermission",
                    "queryPhonebook": "Lcom/android/phone/BluetoothAtPhonebook;->queryPhonebook",
                    "getPhonebookResult": "Lcom/android/phone/BluetoothAtPhonebook;->getPhonebookResult",
                    "getLastDialledNumber": "Lcom/android/phone/BluetoothAtPhonebook;->getLastDialledNumber",
                    "handleAccessPermissionResult": "Lcom/android/phone/BluetoothAtPhonebook;->handleAccessPermissionResult"
                },
                "BluetoothHandsfree$10": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$10;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$10;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$10;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$10;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$10;->handleTestCommand"
                },
                "BluetoothHandsfree$11": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$11;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$11;->handleBasicCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$11;->handleSetCommand"
                },
                "BluetoothHandsfree$12": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$12;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$12;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$12;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$12;->handleTestCommand"
                },
                "BluetoothHandsfree$13": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$13;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$13;->handleBasicCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$13;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$13;->handleTestCommand"
                },
                "BluetoothHandsfree$14": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$14;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$14;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$14;->handleReadCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$14;->handleTestCommand"
                },
                "BluetoothHandsfree$15": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$15;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$15;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$15;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$15;->handleTestCommand"
                },
                "BluetoothHandsfree$16": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$16;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$16;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$16;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$16;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$16;->handleTestCommand"
                },
                "BluetoothHandsfree$17": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$17;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$17;->handleBasicCommand"
                },
                "BluetoothHandsfree$18": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$18;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$18;->handleBasicCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$18;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$18;->handleTestCommand"
                },
                "BluetoothHandsfree$19": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$19;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$19;->handleBasicCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$19;->handleTestCommand"
                },
                "BluetoothHandsfree$1": {
                    "onServiceConnected": "Lcom/android/phone/BluetoothHandsfree$1;->onServiceConnected"
                },
                "BluetoothHandsfree$20": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$20;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$20;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$20;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$20;->handleTestCommand"
                },
                "BluetoothHandsfree$21": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$21;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$21;->handleBasicCommand"
                },
                "BluetoothHandsfree$22": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$22;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$22;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$22;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$22;->handleTestCommand"
                },
                "BluetoothHandsfree$23": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$23;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$23;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$23;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$23;->handleTestCommand"
                },
                "BluetoothHandsfree$24": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$24;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$24;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$24;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$24;->handleTestCommand"
                },
                "BluetoothHandsfree$25": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$25;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$25;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$25;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$25;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$25;->handleTestCommand"
                },
                "BluetoothHandsfree$26": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$26;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$26;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$26;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$26;->handleSetCommand"
                },
                "BluetoothHandsfree$27": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$27;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$27;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$27;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$27;->handleTestCommand"
                },
                "BluetoothHandsfree$28": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$28;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$28;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$28;->handleReadCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$28;->handleTestCommand"
                },
                "BluetoothHandsfree$29": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$29;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$29;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$29;->handleReadCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$29;->handleTestCommand"
                },
                "BluetoothHandsfree$2": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$2;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$2;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$2;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$2;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$2;->handleTestCommand",
                    "headsetButtonPress": "Lcom/android/phone/BluetoothHandsfree$2;->headsetButtonPress"
                },
                "BluetoothHandsfree$30": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$30;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$30;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$30;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$30;->handleTestCommand"
                },
                "BluetoothHandsfree$3": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$3;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$3;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$3;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$3;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$3;->handleTestCommand"
                },
                "BluetoothHandsfree$4": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$4;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$4;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$4;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$4;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$4;->handleTestCommand"
                },
                "BluetoothHandsfree$5": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$5;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$5;->handleBasicCommand",
                    "handleReadCommand": "Lcom/android/phone/BluetoothHandsfree$5;->handleReadCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$5;->handleSetCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$5;->handleTestCommand"
                },
                "BluetoothHandsfree$6": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$6;->handleBasicCommand",
                    "handleTestCommand": "Lcom/android/phone/BluetoothHandsfree$6;->handleTestCommand"
                },
                "BluetoothHandsfree$7": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$7;->handleBasicCommand"
                },
                "BluetoothHandsfree$8": {
                    "handleActionCommand": "Lcom/android/phone/BluetoothHandsfree$8;->handleActionCommand",
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$8;->handleBasicCommand",
                    "handleSetCommand": "Lcom/android/phone/BluetoothHandsfree$8;->handleSetCommand"
                },
                "BluetoothHandsfree$9": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$9;->handleBasicCommand"
                },
                "BluetoothHandsfree$BluetoothPhoneState$2": {
                    "onReceive": "Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState$2;->onReceive"
                },
                "BluetoothHandsfree$BluetoothPhoneState": {
                    "handlePreciseCallStateChange": "Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;->handlePreciseCallStateChange",
                    "<init>": "Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;-><init>",
                    "scoClosed": "Lcom/android/phone/BluetoothHandsfree$BluetoothPhoneState;->scoClosed"
                },
                "BluetoothHandsfree$DebugThread": {
                    "run": "Lcom/android/phone/BluetoothHandsfree$DebugThread;->run"
                },
                "BluetoothHandsfree$IncomingScoAcceptThread": {
                    "connectSco": "Lcom/android/phone/BluetoothHandsfree$IncomingScoAcceptThread;->connectSco",
                    "<init>": "Lcom/android/phone/BluetoothHandsfree$IncomingScoAcceptThread;-><init>",
                    "run": "Lcom/android/phone/BluetoothHandsfree$IncomingScoAcceptThread;->run"
                },
                "BluetoothHandsfree$ScoSocketConnectThread": {
                    "connectSco": "Lcom/android/phone/BluetoothHandsfree$ScoSocketConnectThread;->connectSco",
                    "failedScoConnect": "Lcom/android/phone/BluetoothHandsfree$ScoSocketConnectThread;->failedScoConnect",
                    "<init>": "Lcom/android/phone/BluetoothHandsfree$ScoSocketConnectThread;-><init>",
                    "run": "Lcom/android/phone/BluetoothHandsfree$ScoSocketConnectThread;->run",
                    "shutdown": "Lcom/android/phone/BluetoothHandsfree$ScoSocketConnectThread;->shutdown"
                },
                "BluetoothHandsfree$SignalScoCloseThread": {
                    "run": "Lcom/android/phone/BluetoothHandsfree$SignalScoCloseThread;->run",
                    "shutdown": "Lcom/android/phone/BluetoothHandsfree$SignalScoCloseThread;->shutdown"
                },
                "BluetoothHandsfree$VendorSpecificCommandHandler": {
                    "handleBasicCommand": "Lcom/android/phone/BluetoothHandsfree$VendorSpecificCommandHandler;->handleBasicCommand"
                },
                "BluetoothHandsfree": {
                    "redial": "Lcom/android/phone/BluetoothHandsfree;->redial",
                    "audioOn": "Lcom/android/phone/BluetoothHandsfree;->audioOn",
                    "initiateScoUsingVirtualVoiceCall": "Lcom/android/phone/BluetoothHandsfree;->initiateScoUsingVirtualVoiceCall",
                    "startVoiceRecognition": "Lcom/android/phone/BluetoothHandsfree;->startVoiceRecognition",
                    "stopVoiceRecognition": "Lcom/android/phone/BluetoothHandsfree;->stopVoiceRecognition",
                    "terminateScoUsingVirtualVoiceCall": "Lcom/android/phone/BluetoothHandsfree;->terminateScoUsingVirtualVoiceCall",
                    "init": "Lcom/android/phone/BluetoothHandsfree;->init",
                    "getAudioState": "Lcom/android/phone/BluetoothHandsfree;->getAudioState",
                    "audioOff": "Lcom/android/phone/BluetoothHandsfree;->audioOff",
                    "callStarted": "Lcom/android/phone/BluetoothHandsfree;->callStarted",
                    "closeConnectedSco": "Lcom/android/phone/BluetoothHandsfree;->closeConnectedSco",
                    "configAudioParameters": "Lcom/android/phone/BluetoothHandsfree;->configAudioParameters",
                    "connectHeadset": "Lcom/android/phone/BluetoothHandsfree;->connectHeadset",
                    "connectScoThread": "Lcom/android/phone/BluetoothHandsfree;->connectScoThread",
                    "disconnectHeadset": "Lcom/android/phone/BluetoothHandsfree;->disconnectHeadset",
                    "expectCallStart": "Lcom/android/phone/BluetoothHandsfree;->expectCallStart",
                    "expectVoiceRecognition": "Lcom/android/phone/BluetoothHandsfree;->expectVoiceRecognition",
                    "<init>": "Lcom/android/phone/BluetoothHandsfree;-><init>",
                    "onBluetoothDisabled": "Lcom/android/phone/BluetoothHandsfree;->onBluetoothDisabled",
                    "onBluetoothEnabled": "Lcom/android/phone/BluetoothHandsfree;->onBluetoothEnabled",
                    "setAudioState": "Lcom/android/phone/BluetoothHandsfree;->setAudioState",
                    "startDebug": "Lcom/android/phone/BluetoothHandsfree;->startDebug",
                    "userWantsAudioOff": "Lcom/android/phone/BluetoothHandsfree;->userWantsAudioOff",
                    "userWantsAudioOn": "Lcom/android/phone/BluetoothHandsfree;->userWantsAudioOn"
                },
                "BluetoothHeadsetService$2": {
                    "onReceive": "Lcom/android/phone/BluetoothHeadsetService$2;->onReceive"
                },
                "BluetoothHeadsetService$6": {
                    "acceptIncomingConnect": "Lcom/android/phone/BluetoothHeadsetService$6;->acceptIncomingConnect",
                    "connect": "Lcom/android/phone/BluetoothHeadsetService$6;->connect",
                    "connectHeadsetInternal": "Lcom/android/phone/BluetoothHeadsetService$6;->connectHeadsetInternal",
                    "createIncomingConnect": "Lcom/android/phone/BluetoothHeadsetService$6;->createIncomingConnect",
                    "disconnect": "Lcom/android/phone/BluetoothHeadsetService$6;->disconnect",
                    "disconnectHeadsetInternal": "Lcom/android/phone/BluetoothHeadsetService$6;->disconnectHeadsetInternal",
                    "isAudioConnected": "Lcom/android/phone/BluetoothHeadsetService$6;->isAudioConnected",
                    "onTransact": "Lcom/android/phone/BluetoothHeadsetService$6;->onTransact",
                    "setPriority": "Lcom/android/phone/BluetoothHeadsetService$6;->setPriority",
                    "startScoUsingVirtualVoiceCall": "Lcom/android/phone/BluetoothHeadsetService$6;->startScoUsingVirtualVoiceCall",
                    "startVoiceRecognition": "Lcom/android/phone/BluetoothHeadsetService$6;->startVoiceRecognition",
                    "stopScoUsingVirtualVoiceCall": "Lcom/android/phone/BluetoothHeadsetService$6;->stopScoUsingVirtualVoiceCall",
                    "stopVoiceRecognition": "Lcom/android/phone/BluetoothHeadsetService$6;->stopVoiceRecognition",
                    "getBatteryUsageHint": "Lcom/android/phone/BluetoothHeadsetService$6;->getBatteryUsageHint",
                    "getConnectionState": "Lcom/android/phone/BluetoothHeadsetService$6;->getConnectionState",
                    "getPriority": "Lcom/android/phone/BluetoothHeadsetService$6;->getPriority",
                    "getConnectedDevices": "Lcom/android/phone/BluetoothHeadsetService$6;->getConnectedDevices",
                    "getDevicesMatchingConnectionStates": "Lcom/android/phone/BluetoothHeadsetService$6;->getDevicesMatchingConnectionStates"
                },
                "BluetoothHeadsetService$RfcommConnectThread": {
                    "run": "Lcom/android/phone/BluetoothHeadsetService$RfcommConnectThread;->run"
                },
                "BluetoothHeadsetService": {
                    "getPriority": "Lcom/android/phone/BluetoothHeadsetService;->getPriority",
                    "adjustOtherHeadsetPriorities": "Lcom/android/phone/BluetoothHeadsetService;->adjustOtherHeadsetPriorities",
                    "getSdpRecordsAndConnect": "Lcom/android/phone/BluetoothHeadsetService;->getSdpRecordsAndConnect",
                    "onDestroy": "Lcom/android/phone/BluetoothHeadsetService;->onDestroy",
                    "onStart": "Lcom/android/phone/BluetoothHeadsetService;->onStart",
                    "setPriority": "Lcom/android/phone/BluetoothHeadsetService;->setPriority",
                    "setState": "Lcom/android/phone/BluetoothHeadsetService;->setState"
                },
                "CallCard": {
                    "displayMainCallStatus": "Lcom/android/phone/CallCard;->displayMainCallStatus",
                    "displaySecondaryCallStatus": "Lcom/android/phone/CallCard;->displaySecondaryCallStatus",
                    "onImageLoadComplete": "Lcom/android/phone/CallCard;->onImageLoadComplete",
                    "onQueryComplete": "Lcom/android/phone/CallCard;->onQueryComplete",
                    "updateAlreadyDisconnected": "Lcom/android/phone/CallCard;->updateAlreadyDisconnected",
                    "updateCallStateWidgets": "Lcom/android/phone/CallCard;->updateCallStateWidgets",
                    "updateForegroundCall": "Lcom/android/phone/CallCard;->updateForegroundCall",
                    "updateNoCall": "Lcom/android/phone/CallCard;->updateNoCall",
                    "updatePhotoForCallState": "Lcom/android/phone/CallCard;->updatePhotoForCallState",
                    "updateRingingCall": "Lcom/android/phone/CallCard;->updateRingingCall",
                    "updateState": "Lcom/android/phone/CallCard;->updateState"
                },
                "CallController": {
                    "placeCallInternal": "Lcom/android/phone/CallController;->placeCallInternal",
                    "handleMessage": "Lcom/android/phone/CallController;->handleMessage",
                    "placeCall": "Lcom/android/phone/CallController;->placeCall"
                },
                "CallerInfoCache$CacheAsyncTask": {
                    "doInBackground": "Lcom/android/phone/CallerInfoCache$CacheAsyncTask;->doInBackground",
                    "acquireWakeLockAndExecute": "Lcom/android/phone/CallerInfoCache$CacheAsyncTask;->acquireWakeLockAndExecute",
                    "onCancelled": "Lcom/android/phone/CallerInfoCache$CacheAsyncTask;->onCancelled",
                    "onPostExecute": "Lcom/android/phone/CallerInfoCache$CacheAsyncTask;->onPostExecute",
                    "releaseWakeLock": "Lcom/android/phone/CallerInfoCache$CacheAsyncTask;->releaseWakeLock"
                },
                "CallerInfoCache": {
                    "init": "Lcom/android/phone/CallerInfoCache;->init",
                    "refreshCacheEntry": "Lcom/android/phone/CallerInfoCache;->refreshCacheEntry",
                    "startAsyncCache": "Lcom/android/phone/CallerInfoCache;->startAsyncCache"
                },
                "CallerInfoCacheUpdateReceiver": {
                    "onReceive": "Lcom/android/phone/CallerInfoCacheUpdateReceiver;->onReceive"
                },
                "CallFeaturesSetting": {
                    "onPreferenceChange": "Lcom/android/phone/CallFeaturesSetting;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/phone/CallFeaturesSetting;->onPreferenceTreeClick",
                    "handleSipCallOptionsChange": "Lcom/android/phone/CallFeaturesSetting;->handleSipCallOptionsChange",
                    "handleTTYChange": "Lcom/android/phone/CallFeaturesSetting;->handleTTYChange",
                    "onCreate": "Lcom/android/phone/CallFeaturesSetting;->onCreate"
                },
                "CallLogAsync$AddCallTask": {
                    "doInBackground": "Lcom/android/phone/CallLogAsync$AddCallTask;->doInBackground"
                },
                "CallLogAsync$GetLastOutgoingCallTask": {
                    "doInBackground": "Lcom/android/phone/CallLogAsync$GetLastOutgoingCallTask;->doInBackground"
                },
                "CallNotifier$1": {
                    "onCallForwardingIndicatorChanged": "Lcom/android/phone/CallNotifier$1;->onCallForwardingIndicatorChanged",
                    "onMessageWaitingIndicatorChanged": "Lcom/android/phone/CallNotifier$1;->onMessageWaitingIndicatorChanged"
                },
                "CallNotifier$EmergencyTonePlayerVibrator": {
                    "start": "Lcom/android/phone/CallNotifier$EmergencyTonePlayerVibrator;->start",
                    "stop": "Lcom/android/phone/CallNotifier$EmergencyTonePlayerVibrator;->stop"
                },
                "CallNotifier$InCallTonePlayer": {
                    "run": "Lcom/android/phone/CallNotifier$InCallTonePlayer;->run"
                },
                "CallNotifier": {
                    "ignoreAllIncomingCalls": "Lcom/android/phone/CallNotifier;->ignoreAllIncomingCalls",
                    "init": "Lcom/android/phone/CallNotifier;->init",
                    "<init>": "Lcom/android/phone/CallNotifier;-><init>",
                    "onCdmaCallWaiting": "Lcom/android/phone/CallNotifier;->onCdmaCallWaiting",
                    "onCdmaCallWaitingReject": "Lcom/android/phone/CallNotifier;->onCdmaCallWaitingReject",
                    "onCfiChanged": "Lcom/android/phone/CallNotifier;->onCfiChanged",
                    "onCustomRingQueryComplete": "Lcom/android/phone/CallNotifier;->onCustomRingQueryComplete",
                    "onCustomRingtoneQueryTimeout": "Lcom/android/phone/CallNotifier;->onCustomRingtoneQueryTimeout",
                    "onDisconnect": "Lcom/android/phone/CallNotifier;->onDisconnect",
                    "onMwiChanged": "Lcom/android/phone/CallNotifier;->onMwiChanged",
                    "onNewRingingConnection": "Lcom/android/phone/CallNotifier;->onNewRingingConnection",
                    "onPhoneStateChanged": "Lcom/android/phone/CallNotifier;->onPhoneStateChanged",
                    "onQueryComplete": "Lcom/android/phone/CallNotifier;->onQueryComplete",
                    "onResendMute": "Lcom/android/phone/CallNotifier;->onResendMute",
                    "onRingbackTone": "Lcom/android/phone/CallNotifier;->onRingbackTone",
                    "onUnknownConnectionAppeared": "Lcom/android/phone/CallNotifier;->onUnknownConnectionAppeared",
                    "resetAudioStateAfterDisconnect": "Lcom/android/phone/CallNotifier;->resetAudioStateAfterDisconnect",
                    "restartRinger": "Lcom/android/phone/CallNotifier;->restartRinger",
                    "sendCdmaCallWaitingReject": "Lcom/android/phone/CallNotifier;->sendCdmaCallWaitingReject",
                    "sendMwiChangedDelayed": "Lcom/android/phone/CallNotifier;->sendMwiChangedDelayed",
                    "showIncomingCall": "Lcom/android/phone/CallNotifier;->showIncomingCall",
                    "showMissedCallNotification": "Lcom/android/phone/CallNotifier;->showMissedCallNotification",
                    "silenceRinger": "Lcom/android/phone/CallNotifier;->silenceRinger",
                    "startIncomingCallQuery": "Lcom/android/phone/CallNotifier;->startIncomingCallQuery"
                },
                "CdmaSubscriptionListPreference$CdmaSubscriptionButtonHandler": {
                    "handleSetCdmaSubscriptionMode": "Lcom/android/phone/CdmaSubscriptionListPreference$CdmaSubscriptionButtonHandler;->handleSetCdmaSubscriptionMode"
                },
                "CdmaSubscriptionListPreference": {
                    "onDialogClosed": "Lcom/android/phone/CdmaSubscriptionListPreference;->onDialogClosed"
                },
                "CdmaSystemSelectListPreference$MyHandler": {
                    "handleQueryCdmaRoamingPreference": "Lcom/android/phone/CdmaSystemSelectListPreference$MyHandler;->handleQueryCdmaRoamingPreference",
                    "handleSetCdmaRoamingPreference": "Lcom/android/phone/CdmaSystemSelectListPreference$MyHandler;->handleSetCdmaRoamingPreference",
                    "resetCdmaRoamingModeToDefault": "Lcom/android/phone/CdmaSystemSelectListPreference$MyHandler;->resetCdmaRoamingModeToDefault"
                },
                "CdmaSystemSelectListPreference": {
                    "<init>": "Lcom/android/phone/CdmaSystemSelectListPreference;-><init>",
                    "onDialogClosed": "Lcom/android/phone/CdmaSystemSelectListPreference;->onDialogClosed"
                },
                "CdmaVoicePrivacyCheckBoxPreference$MyHandler": {
                    "handleGetVPResponse": "Lcom/android/phone/CdmaVoicePrivacyCheckBoxPreference$MyHandler;->handleGetVPResponse",
                    "handleSetVPResponse": "Lcom/android/phone/CdmaVoicePrivacyCheckBoxPreference$MyHandler;->handleSetVPResponse"
                },
                "CdmaVoicePrivacyCheckBoxPreference": {
                    "<init>": "Lcom/android/phone/CdmaVoicePrivacyCheckBoxPreference;-><init>",
                    "onClick": "Lcom/android/phone/CdmaVoicePrivacyCheckBoxPreference;->onClick"
                },
                "CellBroadcastSms": {
                    "onPreferenceTreeClick": "Lcom/android/phone/CellBroadcastSms;->onPreferenceTreeClick"
                },
                "ChangeIccPinScreen$2": {
                    "onClick": "Lcom/android/phone/ChangeIccPinScreen$2;->onClick"
                },
                "ClearMissedCallsService": {
                    "onHandleIntent": "Lcom/android/phone/ClearMissedCallsService;->onHandleIntent"
                },
                "ContactsAsyncHelper$ImageTracker": {
                    "getPhotoUri": "Lcom/android/phone/ContactsAsyncHelper$ImageTracker;->getPhotoUri"
                },
                "ContactsAsyncHelper$OnImageLoadCompleteListener": {
                    "onImageLoadComplete": "Lcom/android/phone/ContactsAsyncHelper$OnImageLoadCompleteListener;->onImageLoadComplete"
                },
                "DataUsageListener$1": {
                    "onReceive": "Lcom/android/phone/DataUsageListener$1;->onReceive"
                },
                "DataUsageListener": {
                    "resume": "Lcom/android/phone/DataUsageListener;->resume",
                    "updatePolicy": "Lcom/android/phone/DataUsageListener;->updatePolicy"
                },
                "DataUsage": {
                    "onCreate": "Lcom/android/phone/DataUsage;->onCreate",
                    "onResume": "Lcom/android/phone/DataUsage;->onResume"
                },
                "DefaultRingtonePreference": {
                    "onSaveRingtone": "Lcom/android/phone/DefaultRingtonePreference;->onSaveRingtone"
                },
                "DTMFTwelveKeyDialer": {
                    "onKeyDown": "Lcom/android/phone/DTMFTwelveKeyDialer;->onKeyDown",
                    "clearInCallScreenReference": "Lcom/android/phone/DTMFTwelveKeyDialer;->clearInCallScreenReference",
                    "closeDialer": "Lcom/android/phone/DTMFTwelveKeyDialer;->closeDialer",
                    "onDialerClose": "Lcom/android/phone/DTMFTwelveKeyDialer;->onDialerClose",
                    "onDialerOpen": "Lcom/android/phone/DTMFTwelveKeyDialer;->onDialerOpen",
                    "openDialer": "Lcom/android/phone/DTMFTwelveKeyDialer;->openDialer",
                    "sendShortDtmfToNetwork": "Lcom/android/phone/DTMFTwelveKeyDialer;->sendShortDtmfToNetwork"
                },
                "DTMFTwelveKeyDialerView": {
                    "dispatchKeyEvent": "Lcom/android/phone/DTMFTwelveKeyDialerView;->dispatchKeyEvent"
                },
                "EditPinPreference$OnPinEnteredListener": {
                    "onPinEntered": "Lcom/android/phone/EditPinPreference$OnPinEnteredListener;->onPinEntered"
                },
                "EmergencyCallbackModeExitDialog$4": {
                    "onClick": "Lcom/android/phone/EmergencyCallbackModeExitDialog$4;->onClick"
                },
                "EmergencyCallbackModeService$3": {
                    "onTick": "Lcom/android/phone/EmergencyCallbackModeService$3;->onTick"
                },
                "EmergencyCallbackModeService": {
                    "onCreate": "Lcom/android/phone/EmergencyCallbackModeService;->onCreate",
                    "resetEcmTimer": "Lcom/android/phone/EmergencyCallbackModeService;->resetEcmTimer",
                    "showNotification": "Lcom/android/phone/EmergencyCallbackModeService;->showNotification",
                    "startTimerNotification": "Lcom/android/phone/EmergencyCallbackModeService;->startTimerNotification"
                },
                "EmergencyCallHelper": {
                    "cleanup": "Lcom/android/phone/EmergencyCallHelper;->cleanup",
                    "onDisconnect": "Lcom/android/phone/EmergencyCallHelper;->onDisconnect",
                    "onRetryTimeout": "Lcom/android/phone/EmergencyCallHelper;->onRetryTimeout",
                    "onServiceStateChanged": "Lcom/android/phone/EmergencyCallHelper;->onServiceStateChanged",
                    "placeEmergencyCall": "Lcom/android/phone/EmergencyCallHelper;->placeEmergencyCall",
                    "powerOnRadio": "Lcom/android/phone/EmergencyCallHelper;->powerOnRadio",
                    "scheduleRetryOrBailOut": "Lcom/android/phone/EmergencyCallHelper;->scheduleRetryOrBailOut",
                    "startEmergencyCallFromAirplaneModeSequence": "Lcom/android/phone/EmergencyCallHelper;->startEmergencyCallFromAirplaneModeSequence",
                    "startRetryTimer": "Lcom/android/phone/EmergencyCallHelper;->startRetryTimer",
                    "startSequenceInternal": "Lcom/android/phone/EmergencyCallHelper;->startSequenceInternal"
                },
                "EmergencyDialer": {
                    "onLongClick": "Lcom/android/phone/EmergencyDialer;->onLongClick",
                    "keyPressed": "Lcom/android/phone/EmergencyDialer;->keyPressed",
                    "onClick": "Lcom/android/phone/EmergencyDialer;->onClick"
                },
                "EnableFdnScreen": {
                    "enableFdn": "Lcom/android/phone/EnableFdnScreen;->enableFdn"
                },
                "EnableIccPinScreen": {
                    "enableIccPin": "Lcom/android/phone/EnableIccPinScreen;->enableIccPin"
                },
                "FdnSetting": {
                    "onPinEntered": "Lcom/android/phone/FdnSetting;->onPinEntered",
                    "toggleFDNEnable": "Lcom/android/phone/FdnSetting;->toggleFDNEnable",
                    "updatePINChangeState": "Lcom/android/phone/FdnSetting;->updatePINChangeState"
                },
                "HapticFeedback": {
                    "vibrate": "Lcom/android/phone/HapticFeedback;->vibrate"
                },
                "IccNetworkDepersonalizationPanel$3": {
                    "onClick": "Lcom/android/phone/IccNetworkDepersonalizationPanel$3;->onClick"
                },
                "InCallControlState": {
                    "update": "Lcom/android/phone/InCallControlState;->update"
                },
                "InCallScreen$12": {
                    "onClick": "Lcom/android/phone/InCallScreen$12;->onClick"
                },
                "InCallScreen$13": {
                    "onCancel": "Lcom/android/phone/InCallScreen$13;->onCancel"
                },
                "InCallScreen$14": {
                    "onClick": "Lcom/android/phone/InCallScreen$14;->onClick"
                },
                "InCallScreen$15": {
                    "onCancel": "Lcom/android/phone/InCallScreen$15;->onCancel"
                },
                "InCallScreen$5": {
                    "onClick": "Lcom/android/phone/InCallScreen$5;->onClick"
                },
                "InCallScreen$6": {
                    "onClick": "Lcom/android/phone/InCallScreen$6;->onClick"
                },
                "InCallScreen$7": {
                    "onCancel": "Lcom/android/phone/InCallScreen$7;->onCancel"
                },
                "InCallScreen$8": {
                    "onClick": "Lcom/android/phone/InCallScreen$8;->onClick"
                },
                "InCallScreen": {
                    "checkOtaspStateOnResume": "Lcom/android/phone/InCallScreen;->checkOtaspStateOnResume",
                    "handleCallKey": "Lcom/android/phone/InCallScreen;->handleCallKey",
                    "isBluetoothAvailable": "Lcom/android/phone/InCallScreen;->isBluetoothAvailable",
                    "onKeyDown": "Lcom/android/phone/InCallScreen;->onKeyDown",
                    "getUpdatedInCallControlState": "Lcom/android/phone/InCallScreen;->getUpdatedInCallControlState",
                    "syncWithPhoneState": "Lcom/android/phone/InCallScreen;->syncWithPhoneState",
                    "addVoiceMailNumberPanel": "Lcom/android/phone/InCallScreen;->addVoiceMailNumberPanel",
                    "bailOutAfterErrorDialog": "Lcom/android/phone/InCallScreen;->bailOutAfterErrorDialog",
                    "closeDialpadInternal": "Lcom/android/phone/InCallScreen;->closeDialpadInternal",
                    "connectBluetoothAudio": "Lcom/android/phone/InCallScreen;->connectBluetoothAudio",
                    "delayedCleanupAfterDisconnect": "Lcom/android/phone/InCallScreen;->delayedCleanupAfterDisconnect",
                    "disconnectBluetoothAudio": "Lcom/android/phone/InCallScreen;->disconnectBluetoothAudio",
                    "dontAddVoiceMailNumber": "Lcom/android/phone/InCallScreen;->dontAddVoiceMailNumber",
                    "dumpBluetoothState": "Lcom/android/phone/InCallScreen;->dumpBluetoothState",
                    "endInCallScreenSession": "Lcom/android/phone/InCallScreen;->endInCallScreenSession",
                    "handleOnscreenButtonClick": "Lcom/android/phone/InCallScreen;->handleOnscreenButtonClick",
                    "handleOtaCallEnd": "Lcom/android/phone/InCallScreen;->handleOtaCallEnd",
                    "handlePostOnDialChars": "Lcom/android/phone/InCallScreen;->handlePostOnDialChars",
                    "hangupRingingCall": "Lcom/android/phone/InCallScreen;->hangupRingingCall",
                    "internalAnswerAndEnd": "Lcom/android/phone/InCallScreen;->internalAnswerAndEnd",
                    "internalAnswerCall": "Lcom/android/phone/InCallScreen;->internalAnswerCall",
                    "internalHangup": "Lcom/android/phone/InCallScreen;->internalHangup",
                    "internalResolveIntent": "Lcom/android/phone/InCallScreen;->internalResolveIntent",
                    "internalRespondViaSms": "Lcom/android/phone/InCallScreen;->internalRespondViaSms",
                    "internalSilenceRinger": "Lcom/android/phone/InCallScreen;->internalSilenceRinger",
                    "internalSwapCalls": "Lcom/android/phone/InCallScreen;->internalSwapCalls",
                    "onBackPressed": "Lcom/android/phone/InCallScreen;->onBackPressed",
                    "onClick": "Lcom/android/phone/InCallScreen;->onClick",
                    "onCreate": "Lcom/android/phone/InCallScreen;->onCreate",
                    "onDestroy": "Lcom/android/phone/InCallScreen;->onDestroy",
                    "onDialerClose": "Lcom/android/phone/InCallScreen;->onDialerClose",
                    "onDialerOpen": "Lcom/android/phone/InCallScreen;->onDialerOpen",
                    "onDisconnect": "Lcom/android/phone/InCallScreen;->onDisconnect",
                    "onHoldClick": "Lcom/android/phone/InCallScreen;->onHoldClick",
                    "onMMICancel": "Lcom/android/phone/InCallScreen;->onMMICancel",
                    "onMMIComplete": "Lcom/android/phone/InCallScreen;->onMMIComplete",
                    "onMuteClick": "Lcom/android/phone/InCallScreen;->onMuteClick",
                    "onNewIntent": "Lcom/android/phone/InCallScreen;->onNewIntent",
                    "onOpenCloseDialpad": "Lcom/android/phone/InCallScreen;->onOpenCloseDialpad",
                    "onPause": "Lcom/android/phone/InCallScreen;->onPause",
                    "onPhoneStateChanged": "Lcom/android/phone/InCallScreen;->onPhoneStateChanged",
                    "onResume": "Lcom/android/phone/InCallScreen;->onResume",
                    "onStop": "Lcom/android/phone/InCallScreen;->onStop",
                    "openDialpadInternal": "Lcom/android/phone/InCallScreen;->openDialpadInternal",
                    "requestCloseOtaFailureNotice": "Lcom/android/phone/InCallScreen;->requestCloseOtaFailureNotice",
                    "requestCloseSpcErrorNotice": "Lcom/android/phone/InCallScreen;->requestCloseSpcErrorNotice",
                    "requestRemoveProviderInfoWithDelay": "Lcom/android/phone/InCallScreen;->requestRemoveProviderInfoWithDelay",
                    "requestUpdateBluetoothIndication": "Lcom/android/phone/InCallScreen;->requestUpdateBluetoothIndication",
                    "requestUpdateScreen": "Lcom/android/phone/InCallScreen;->requestUpdateScreen",
                    "resetInCallScreenMode": "Lcom/android/phone/InCallScreen;->resetInCallScreenMode",
                    "setInCallScreenMode": "Lcom/android/phone/InCallScreen;->setInCallScreenMode",
                    "showPausePromptDialog": "Lcom/android/phone/InCallScreen;->showPausePromptDialog",
                    "switchInCallAudio": "Lcom/android/phone/InCallScreen;->switchInCallAudio",
                    "toggleBluetooth": "Lcom/android/phone/InCallScreen;->toggleBluetooth",
                    "toggleSpeaker": "Lcom/android/phone/InCallScreen;->toggleSpeaker",
                    "updateAfterRadioTechnologyChange": "Lcom/android/phone/InCallScreen;->updateAfterRadioTechnologyChange",
                    "updateInCallTouchUi": "Lcom/android/phone/InCallScreen;->updateInCallTouchUi",
                    "updateIncomingCallWidgetHint": "Lcom/android/phone/InCallScreen;->updateIncomingCallWidgetHint",
                    "updateManageConferencePanelIfNecessary": "Lcom/android/phone/InCallScreen;->updateManageConferencePanelIfNecessary",
                    "updateScreen": "Lcom/android/phone/InCallScreen;->updateScreen"
                },
                "InCallScreenShowActivation": {
                    "onCreate": "Lcom/android/phone/InCallScreenShowActivation;->onCreate"
                },
                "InCallTouchUi$2": {
                    "onAnimationStart": "Lcom/android/phone/InCallTouchUi$2;->onAnimationStart"
                },
                "InCallTouchUi": {
                    "onMenuItemClick": "Lcom/android/phone/InCallTouchUi;->onMenuItemClick",
                    "handleAudioButtonClick": "Lcom/android/phone/InCallTouchUi;->handleAudioButtonClick",
                    "onClick": "Lcom/android/phone/InCallTouchUi;->onClick",
                    "onGrabbedStateChange": "Lcom/android/phone/InCallTouchUi;->onGrabbedStateChange",
                    "onTrigger": "Lcom/android/phone/InCallTouchUi;->onTrigger",
                    "refreshAudioModePopup": "Lcom/android/phone/InCallTouchUi;->refreshAudioModePopup",
                    "showAudioModePopup": "Lcom/android/phone/InCallTouchUi;->showAudioModePopup",
                    "updateInCallControls": "Lcom/android/phone/InCallTouchUi;->updateInCallControls",
                    "updateState": "Lcom/android/phone/InCallTouchUi;->updateState"
                },
                "ManageConferenceUtils$2": {
                    "onClick": "Lcom/android/phone/ManageConferenceUtils$2;->onClick"
                },
                "ManageConferenceUtils": {
                    "endConferenceConnection": "Lcom/android/phone/ManageConferenceUtils;->endConferenceConnection",
                    "separateConferenceConnection": "Lcom/android/phone/ManageConferenceUtils;->separateConferenceConnection",
                    "updateManageConferencePanel": "Lcom/android/phone/ManageConferenceUtils;->updateManageConferencePanel",
                    "updateManageConferenceRow": "Lcom/android/phone/ManageConferenceUtils;->updateManageConferenceRow"
                },
                "MobileNetworkSettings$MyHandler": {
                    "handleGetPreferredNetworkTypeResponse": "Lcom/android/phone/MobileNetworkSettings$MyHandler;->handleGetPreferredNetworkTypeResponse",
                    "handleSetPreferredNetworkTypeResponse": "Lcom/android/phone/MobileNetworkSettings$MyHandler;->handleSetPreferredNetworkTypeResponse",
                    "resetNetworkModeToDefault": "Lcom/android/phone/MobileNetworkSettings$MyHandler;->resetNetworkModeToDefault"
                },
                "MobileNetworkSettings": {
                    "onPreferenceChange": "Lcom/android/phone/MobileNetworkSettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/phone/MobileNetworkSettings;->onPreferenceTreeClick",
                    "onResume": "Lcom/android/phone/MobileNetworkSettings;->onResume"
                },
                "NotificationMgr$QueryHandler": {
                    "onImageLoadComplete": "Lcom/android/phone/NotificationMgr$QueryHandler;->onImageLoadComplete",
                    "onQueryComplete": "Lcom/android/phone/NotificationMgr$QueryHandler;->onQueryComplete"
                },
                "NotificationMgr": {
                    "init": "Lcom/android/phone/NotificationMgr;->init",
                    "notifyMissedCall": "Lcom/android/phone/NotificationMgr;->notifyMissedCall",
                    "onQueryComplete": "Lcom/android/phone/NotificationMgr;->onQueryComplete",
                    "showDataDisconnectedRoaming": "Lcom/android/phone/NotificationMgr;->showDataDisconnectedRoaming",
                    "showNetworkSelection": "Lcom/android/phone/NotificationMgr;->showNetworkSelection",
                    "updateCfi": "Lcom/android/phone/NotificationMgr;->updateCfi",
                    "updateInCallNotification": "Lcom/android/phone/NotificationMgr;->updateInCallNotification",
                    "updateMwi": "Lcom/android/phone/NotificationMgr;->updateMwi",
                    "updateNetworkSelection": "Lcom/android/phone/NotificationMgr;->updateNetworkSelection",
                    "updateNotificationAndLaunchIncomingCallUi": "Lcom/android/phone/NotificationMgr;->updateNotificationAndLaunchIncomingCallUi",
                    "updateNotificationsAtStartup": "Lcom/android/phone/NotificationMgr;->updateNotificationsAtStartup"
                },
                "OtaStartupReceiver": {
                    "onReceive": "Lcom/android/phone/OtaStartupReceiver;->onReceive"
                },
                "OtaUtils": {
                    "startNonInteractiveOtasp": "Lcom/android/phone/OtaUtils;->startNonInteractiveOtasp",
                    "cleanOtaScreen": "Lcom/android/phone/OtaUtils;->cleanOtaScreen",
                    "onClickHandler": "Lcom/android/phone/OtaUtils;->onClickHandler",
                    "onClickOtaActivateButton": "Lcom/android/phone/OtaUtils;->onClickOtaActivateButton",
                    "onClickOtaActivateNextButton": "Lcom/android/phone/OtaUtils;->onClickOtaActivateNextButton",
                    "onClickOtaEndButton": "Lcom/android/phone/OtaUtils;->onClickOtaEndButton",
                    "onClickOtaSpeakerButton": "Lcom/android/phone/OtaUtils;->onClickOtaSpeakerButton",
                    "onClickOtaTryAgainButton": "Lcom/android/phone/OtaUtils;->onClickOtaTryAgainButton",
                    "onOtaCloseFailureNotice": "Lcom/android/phone/OtaUtils;->onOtaCloseFailureNotice",
                    "onOtaProvisionStatusChanged": "Lcom/android/phone/OtaUtils;->onOtaProvisionStatusChanged",
                    "otaPerformActivation": "Lcom/android/phone/OtaUtils;->otaPerformActivation",
                    "otaShowActivateScreen": "Lcom/android/phone/OtaUtils;->otaShowActivateScreen",
                    "otaShowHome": "Lcom/android/phone/OtaUtils;->otaShowHome",
                    "otaShowProgramFailureDialog": "Lcom/android/phone/OtaUtils;->otaShowProgramFailureDialog",
                    "otaShowProgramFailure": "Lcom/android/phone/OtaUtils;->otaShowProgramFailure",
                    "otaShowProgramFailureNotice": "Lcom/android/phone/OtaUtils;->otaShowProgramFailureNotice",
                    "otaShowProgramSuccessDialog": "Lcom/android/phone/OtaUtils;->otaShowProgramSuccessDialog",
                    "otaShowProperScreen": "Lcom/android/phone/OtaUtils;->otaShowProperScreen",
                    "otaShowSpcErrorNotice": "Lcom/android/phone/OtaUtils;->otaShowSpcErrorNotice",
                    "otaShowSuccessFailure": "Lcom/android/phone/OtaUtils;->otaShowSuccessFailure",
                    "setSpeaker": "Lcom/android/phone/OtaUtils;->setSpeaker"
                },
                "OutgoingCallBroadcaster$OutgoingCallReceiver": {
                    "doReceive": "Lcom/android/phone/OutgoingCallBroadcaster$OutgoingCallReceiver;->doReceive",
                    "onReceive": "Lcom/android/phone/OutgoingCallBroadcaster$OutgoingCallReceiver;->onReceive"
                },
                "OutgoingCallBroadcaster": {
                    "onCreate": "Lcom/android/phone/OutgoingCallBroadcaster;->onCreate",
                    "processIntent": "Lcom/android/phone/OutgoingCallBroadcaster;->processIntent"
                },
                "PhoneApp$MediaButtonBroadcastReceiver": {
                    "onReceive": "Lcom/android/phone/PhoneApp$MediaButtonBroadcastReceiver;->onReceive"
                },
                "PhoneApp$NotificationBroadcastReceiver": {
                    "onReceive": "Lcom/android/phone/PhoneApp$NotificationBroadcastReceiver;->onReceive"
                },
                "PhoneApp$PhoneAppBroadcastReceiver": {
                    "onReceive": "Lcom/android/phone/PhoneApp$PhoneAppBroadcastReceiver;->onReceive"
                },
                "PhoneApp": {
                    "clearInCallScreenMode": "Lcom/android/phone/PhoneApp;->clearInCallScreenMode",
                    "clearOtaState": "Lcom/android/phone/PhoneApp;->clearOtaState",
                    "dismissCallScreen": "Lcom/android/phone/PhoneApp;->dismissCallScreen",
                    "handleOtaspEvent": "Lcom/android/phone/PhoneApp;->handleOtaspEvent",
                    "handleQueryTTYModeResponse": "Lcom/android/phone/PhoneApp;->handleQueryTTYModeResponse",
                    "handleServiceStateChanged": "Lcom/android/phone/PhoneApp;->handleServiceStateChanged",
                    "handleSetTTYModeResponse": "Lcom/android/phone/PhoneApp;->handleSetTTYModeResponse",
                    "initForNewRadioTechnology": "Lcom/android/phone/PhoneApp;->initForNewRadioTechnology",
                    "onConfigurationChanged": "Lcom/android/phone/PhoneApp;->onConfigurationChanged",
                    "onCreate": "Lcom/android/phone/PhoneApp;->onCreate",
                    "orientationChanged": "Lcom/android/phone/PhoneApp;->orientationChanged",
                    "requestWakeState": "Lcom/android/phone/PhoneApp;->requestWakeState",
                    "setBeginningCall": "Lcom/android/phone/PhoneApp;->setBeginningCall",
                    "updateBluetoothIndication": "Lcom/android/phone/PhoneApp;->updateBluetoothIndication",
                    "updateInCallScreen": "Lcom/android/phone/PhoneApp;->updateInCallScreen",
                    "updatePhoneState": "Lcom/android/phone/PhoneApp;->updatePhoneState",
                    "updateProximitySensorMode": "Lcom/android/phone/PhoneApp;->updateProximitySensorMode",
                    "updateWakeState": "Lcom/android/phone/PhoneApp;->updateWakeState"
                },
                "PhoneInterfaceManager$UnlockSim": {
                    "unlockSim": "Lcom/android/phone/PhoneInterfaceManager$UnlockSim;->unlockSim"
                },
                "PhoneInterfaceManager": {
                    "getCellLocation": "Lcom/android/phone/PhoneInterfaceManager;->getCellLocation",
                    "disableDataConnectivity": "Lcom/android/phone/PhoneInterfaceManager;->disableDataConnectivity",
                    "enableDataConnectivity": "Lcom/android/phone/PhoneInterfaceManager;->enableDataConnectivity",
                    "endCall": "Lcom/android/phone/PhoneInterfaceManager;->endCall",
                    "isSimPinEnabled": "Lcom/android/phone/PhoneInterfaceManager;->isSimPinEnabled",
                    "onTransact": "Lcom/android/phone/PhoneInterfaceManager;->onTransact",
                    "supplyPin": "Lcom/android/phone/PhoneInterfaceManager;->supplyPin",
                    "supplyPuk": "Lcom/android/phone/PhoneInterfaceManager;->supplyPuk",
                    "getAllCellInfo": "Lcom/android/phone/PhoneInterfaceManager;->getAllCellInfo",
                    "getNeighboringCellInfo": "Lcom/android/phone/PhoneInterfaceManager;->getNeighboringCellInfo",
                    "answerRingingCallInternal": "Lcom/android/phone/PhoneInterfaceManager;->answerRingingCallInternal",
                    "call": "Lcom/android/phone/PhoneInterfaceManager;->call",
                    "enforceCallPermission": "Lcom/android/phone/PhoneInterfaceManager;->enforceCallPermission",
                    "enforceReadPermission": "Lcom/android/phone/PhoneInterfaceManager;->enforceReadPermission",
                    "silenceRingerInternal": "Lcom/android/phone/PhoneInterfaceManager;->silenceRingerInternal",
                    "addListener": "Lcom/android/phone/PhoneInterfaceManager;->addListener",
                    "answerRingingCall": "Lcom/android/phone/PhoneInterfaceManager;->answerRingingCall",
                    "answerRingingCallForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->answerRingingCallForSubscriber",
                    "cancelMissedCallsNotification": "Lcom/android/phone/PhoneInterfaceManager;->cancelMissedCallsNotification",
                    "canChangeDtmfToneLength": "Lcom/android/phone/PhoneInterfaceManager;->canChangeDtmfToneLength",
                    "carrierActionSetMeteredApnsEnabled": "Lcom/android/phone/PhoneInterfaceManager;->carrierActionSetMeteredApnsEnabled",
                    "carrierActionSetRadioEnabled": "Lcom/android/phone/PhoneInterfaceManager;->carrierActionSetRadioEnabled",
                    "disableApnType": "Lcom/android/phone/PhoneInterfaceManager;->disableApnType",
                    "disableLocationUpdates": "Lcom/android/phone/PhoneInterfaceManager;->disableLocationUpdates",
                    "disableLocationUpdatesForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->disableLocationUpdatesForSubscriber",
                    "enableApnType": "Lcom/android/phone/PhoneInterfaceManager;->enableApnType",
                    "enableLocationUpdates": "Lcom/android/phone/PhoneInterfaceManager;->enableLocationUpdates",
                    "enableLocationUpdatesForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->enableLocationUpdatesForSubscriber",
                    "enableSimplifiedNetworkSettingsForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->enableSimplifiedNetworkSettingsForSubscriber",
                    "enableVideoCalling": "Lcom/android/phone/PhoneInterfaceManager;->enableVideoCalling",
                    "endCallForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->endCallForSubscriber",
                    "factoryReset": "Lcom/android/phone/PhoneInterfaceManager;->factoryReset",
                    "getAidForAppType": "Lcom/android/phone/PhoneInterfaceManager;->getAidForAppType",
                    "getAllowedCarriers": "Lcom/android/phone/PhoneInterfaceManager;->getAllowedCarriers",
                    "getCalculatedPreferredNetworkType": "Lcom/android/phone/PhoneInterfaceManager;->getCalculatedPreferredNetworkType",
                    "getCdmaEriIconIndex": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconIndex",
                    "getCdmaEriIconIndexForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconIndexForSubscriber",
                    "getCdmaEriIconMode": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconMode",
                    "getCdmaEriIconModeForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriIconModeForSubscriber",
                    "getCdmaEriText": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriText",
                    "getCdmaEriTextForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaEriTextForSubscriber",
                    "getCdmaMdn": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaMdn",
                    "getCdmaMin": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaMin",
                    "getCdmaPrlVersion": "Lcom/android/phone/PhoneInterfaceManager;->getCdmaPrlVersion",
                    "getCellNetworkScanResults": "Lcom/android/phone/PhoneInterfaceManager;->getCellNetworkScanResults",
                    "getDataEnabled": "Lcom/android/phone/PhoneInterfaceManager;->getDataEnabled",
                    "getDataNetworkType": "Lcom/android/phone/PhoneInterfaceManager;->getDataNetworkType",
                    "getDataNetworkTypeForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getDataNetworkTypeForSubscriber",
                    "getDeviceId": "Lcom/android/phone/PhoneInterfaceManager;->getDeviceId",
                    "getDeviceSoftwareVersionForSlot": "Lcom/android/phone/PhoneInterfaceManager;->getDeviceSoftwareVersionForSlot",
                    "getEsn": "Lcom/android/phone/PhoneInterfaceManager;->getEsn",
                    "getImeiForSlot": "Lcom/android/phone/PhoneInterfaceManager;->getImeiForSlot",
                    "getLine1AlphaTagForDisplay": "Lcom/android/phone/PhoneInterfaceManager;->getLine1AlphaTagForDisplay",
                    "getLine1NumberForDisplay": "Lcom/android/phone/PhoneInterfaceManager;->getLine1NumberForDisplay",
                    "getLteOnCdmaMode": "Lcom/android/phone/PhoneInterfaceManager;->getLteOnCdmaMode",
                    "getLteOnCdmaModeForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getLteOnCdmaModeForSubscriber",
                    "getMergedSubscriberIds": "Lcom/android/phone/PhoneInterfaceManager;->getMergedSubscriberIds",
                    "getNetworkTypeForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getNetworkTypeForSubscriber",
                    "getPcscfAddress": "Lcom/android/phone/PhoneInterfaceManager;->getPcscfAddress",
                    "getPreferredNetworkType": "Lcom/android/phone/PhoneInterfaceManager;->getPreferredNetworkType",
                    "getRadioAccessFamily": "Lcom/android/phone/PhoneInterfaceManager;->getRadioAccessFamily",
                    "getServiceStateForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getServiceStateForSubscriber",
                    "getSimplifiedNetworkSettingsEnabledForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getSimplifiedNetworkSettingsEnabledForSubscriber",
                    "getSystemVisualVoicemailSmsFilterSettings": "Lcom/android/phone/PhoneInterfaceManager;->getSystemVisualVoicemailSmsFilterSettings",
                    "getTelephonyHistograms": "Lcom/android/phone/PhoneInterfaceManager;->getTelephonyHistograms",
                    "getTetherApnRequired": "Lcom/android/phone/PhoneInterfaceManager;->getTetherApnRequired",
                    "getVoiceNetworkTypeForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->getVoiceNetworkTypeForSubscriber",
                    "getVtDataUsage": "Lcom/android/phone/PhoneInterfaceManager;->getVtDataUsage",
                    "handlePinMmi": "Lcom/android/phone/PhoneInterfaceManager;->handlePinMmi",
                    "handlePinMmiForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->handlePinMmiForSubscriber",
                    "iccCloseLogicalChannel": "Lcom/android/phone/PhoneInterfaceManager;->iccCloseLogicalChannel",
                    "iccExchangeSimIO": "Lcom/android/phone/PhoneInterfaceManager;->iccExchangeSimIO",
                    "iccOpenLogicalChannel": "Lcom/android/phone/PhoneInterfaceManager;->iccOpenLogicalChannel",
                    "iccTransmitApduBasicChannel": "Lcom/android/phone/PhoneInterfaceManager;->iccTransmitApduBasicChannel",
                    "iccTransmitApduLogicalChannel": "Lcom/android/phone/PhoneInterfaceManager;->iccTransmitApduLogicalChannel",
                    "invokeOemRilRequestRaw": "Lcom/android/phone/PhoneInterfaceManager;->invokeOemRilRequestRaw",
                    "isIdle": "Lcom/android/phone/PhoneInterfaceManager;->isIdle",
                    "isIdleForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->isIdleForSubscriber",
                    "isOffhook": "Lcom/android/phone/PhoneInterfaceManager;->isOffhook",
                    "isOffhookForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->isOffhookForSubscriber",
                    "isRadioOn": "Lcom/android/phone/PhoneInterfaceManager;->isRadioOn",
                    "isRadioOnForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->isRadioOnForSubscriber",
                    "isRinging": "Lcom/android/phone/PhoneInterfaceManager;->isRinging",
                    "isRingingForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->isRingingForSubscriber",
                    "isVideoCallingEnabled": "Lcom/android/phone/PhoneInterfaceManager;->isVideoCallingEnabled",
                    "isVisualVoicemailEnabled": "Lcom/android/phone/PhoneInterfaceManager;->isVisualVoicemailEnabled",
                    "isWorldPhone": "Lcom/android/phone/PhoneInterfaceManager;->isWorldPhone",
                    "merge": "Lcom/android/phone/PhoneInterfaceManager;->merge",
                    "mute": "Lcom/android/phone/PhoneInterfaceManager;->mute",
                    "nvReadItem": "Lcom/android/phone/PhoneInterfaceManager;->nvReadItem",
                    "nvResetConfig": "Lcom/android/phone/PhoneInterfaceManager;->nvResetConfig",
                    "nvWriteCdmaPrl": "Lcom/android/phone/PhoneInterfaceManager;->nvWriteCdmaPrl",
                    "nvWriteItem": "Lcom/android/phone/PhoneInterfaceManager;->nvWriteItem",
                    "playDtmfTone": "Lcom/android/phone/PhoneInterfaceManager;->playDtmfTone",
                    "removeListener": "Lcom/android/phone/PhoneInterfaceManager;->removeListener",
                    "requestModemActivityInfo": "Lcom/android/phone/PhoneInterfaceManager;->requestModemActivityInfo",
                    "sendEnvelopeWithStatus": "Lcom/android/phone/PhoneInterfaceManager;->sendEnvelopeWithStatus",
                    "setAllowedCarriers": "Lcom/android/phone/PhoneInterfaceManager;->setAllowedCarriers",
                    "setDataEnabled": "Lcom/android/phone/PhoneInterfaceManager;->setDataEnabled",
                    "setImsRegistrationState": "Lcom/android/phone/PhoneInterfaceManager;->setImsRegistrationState",
                    "setLine1NumberForDisplayForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->setLine1NumberForDisplayForSubscriber",
                    "setNetworkSelectionModeAutomatic": "Lcom/android/phone/PhoneInterfaceManager;->setNetworkSelectionModeAutomatic",
                    "setNetworkSelectionModeManual": "Lcom/android/phone/PhoneInterfaceManager;->setNetworkSelectionModeManual",
                    "setOperatorBrandOverride": "Lcom/android/phone/PhoneInterfaceManager;->setOperatorBrandOverride",
                    "setPolicyDataEnabled": "Lcom/android/phone/PhoneInterfaceManager;->setPolicyDataEnabled",
                    "setPreferredNetworkType": "Lcom/android/phone/PhoneInterfaceManager;->setPreferredNetworkType",
                    "setRadio": "Lcom/android/phone/PhoneInterfaceManager;->setRadio",
                    "setRadioForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->setRadioForSubscriber",
                    "setRadioPower": "Lcom/android/phone/PhoneInterfaceManager;->setRadioPower",
                    "setVisualVoicemailEnabled": "Lcom/android/phone/PhoneInterfaceManager;->setVisualVoicemailEnabled",
                    "shutdownMobileRadios": "Lcom/android/phone/PhoneInterfaceManager;->shutdownMobileRadios",
                    "silenceRinger": "Lcom/android/phone/PhoneInterfaceManager;->silenceRinger",
                    "stopDtmfTone": "Lcom/android/phone/PhoneInterfaceManager;->stopDtmfTone",
                    "supplyPinForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->supplyPinForSubscriber",
                    "supplyPinReportResult": "Lcom/android/phone/PhoneInterfaceManager;->supplyPinReportResult",
                    "supplyPinReportResultForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->supplyPinReportResultForSubscriber",
                    "supplyPukForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->supplyPukForSubscriber",
                    "supplyPukReportResult": "Lcom/android/phone/PhoneInterfaceManager;->supplyPukReportResult",
                    "supplyPukReportResultForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->supplyPukReportResultForSubscriber",
                    "swap": "Lcom/android/phone/PhoneInterfaceManager;->swap",
                    "toggleHold": "Lcom/android/phone/PhoneInterfaceManager;->toggleHold",
                    "toggleRadioOnOff": "Lcom/android/phone/PhoneInterfaceManager;->toggleRadioOnOff",
                    "toggleRadioOnOffForSubscriber": "Lcom/android/phone/PhoneInterfaceManager;->toggleRadioOnOffForSubscriber"
                },
                "PhoneUtils$2": {
                    "onClick": "Lcom/android/phone/PhoneUtils$2;->onClick"
                },
                "PhoneUtils$4": {
                    "onQueryComplete": "Lcom/android/phone/PhoneUtils$4;->onQueryComplete"
                },
                "PhoneUtils": {
                    "activateSpeakerIfDocked": "Lcom/android/phone/PhoneUtils;->activateSpeakerIfDocked",
                    "answerAndEndActive": "Lcom/android/phone/PhoneUtils;->answerAndEndActive",
                    "answerAndEndHolding": "Lcom/android/phone/PhoneUtils;->answerAndEndHolding",
                    "answerCall": "Lcom/android/phone/PhoneUtils;->answerCall",
                    "cancelMmiCode": "Lcom/android/phone/PhoneUtils;->cancelMmiCode",
                    "handleHeadsetHook": "Lcom/android/phone/PhoneUtils;->handleHeadsetHook",
                    "hangupActiveCall": "Lcom/android/phone/PhoneUtils;->hangupActiveCall",
                    "hangup": "Lcom/android/phone/PhoneUtils;->hangup",
                    "hangupHoldingCall": "Lcom/android/phone/PhoneUtils;->hangupHoldingCall",
                    "hangupRingingAndActive": "Lcom/android/phone/PhoneUtils;->hangupRingingAndActive",
                    "hangupRingingCall": "Lcom/android/phone/PhoneUtils;->hangupRingingCall",
                    "startNewCall": "Lcom/android/phone/PhoneUtils;->startNewCall",
                    "getCallerInfo": "Lcom/android/phone/PhoneUtils;->getCallerInfo",
                    "startGetCallerInfo": "Lcom/android/phone/PhoneUtils;->startGetCallerInfo",
                    "placeCall": "Lcom/android/phone/PhoneUtils;->placeCall",
                    "restoreMuteState": "Lcom/android/phone/PhoneUtils;->restoreMuteState",
                    "mergeCalls": "Lcom/android/phone/PhoneUtils;->mergeCalls",
                    "restoreNoiseSuppression": "Lcom/android/phone/PhoneUtils;->restoreNoiseSuppression",
                    "restoreSpeakerMode": "Lcom/android/phone/PhoneUtils;->restoreSpeakerMode",
                    "sendEmptyFlash": "Lcom/android/phone/PhoneUtils;->sendEmptyFlash",
                    "separateCall": "Lcom/android/phone/PhoneUtils;->separateCall",
                    "setAudioMode": "Lcom/android/phone/PhoneUtils;->setAudioMode",
                    "setMute": "Lcom/android/phone/PhoneUtils;->setMute",
                    "setMuteInternal": "Lcom/android/phone/PhoneUtils;->setMuteInternal",
                    "switchHoldingAndActive": "Lcom/android/phone/PhoneUtils;->switchHoldingAndActive",
                    "turnOnNoiseSuppression": "Lcom/android/phone/PhoneUtils;->turnOnNoiseSuppression",
                    "turnOnSpeaker": "Lcom/android/phone/PhoneUtils;->turnOnSpeaker"
                },
                "RespondViaSmsManager$RespondViaSmsCancelListener": {
                    "onCancel": "Lcom/android/phone/RespondViaSmsManager$RespondViaSmsCancelListener;->onCancel"
                },
                "RespondViaSmsManager$RespondViaSmsItemClickListener": {
                    "onItemClick": "Lcom/android/phone/RespondViaSmsManager$RespondViaSmsItemClickListener;->onItemClick"
                },
                "Ringer$VibratorThread": {
                    "run": "Lcom/android/phone/Ringer$VibratorThread;->run"
                },
                "Ringer": {
                    "ring": "Lcom/android/phone/Ringer;->ring",
                    "stopRing": "Lcom/android/phone/Ringer;->stopRing"
                },
                "SimContacts$ImportAllSimContactsThread": {
                    "run": "Lcom/android/phone/SimContacts$ImportAllSimContactsThread;->run"
                },
                "SimContacts": {
                    "onContextItemSelected": "Lcom/android/phone/SimContacts;->onContextItemSelected",
                    "onOptionsItemSelected": "Lcom/android/phone/SimContacts;->onOptionsItemSelected",
                    "actuallyImportOneSimContact": "Lcom/android/phone/SimContacts;->actuallyImportOneSimContact",
                    "importOneSimContact": "Lcom/android/phone/SimContacts;->importOneSimContact",
                    "onListItemClick": "Lcom/android/phone/SimContacts;->onListItemClick"
                },
                "SipBroadcastReceiver$1": {
                    "run": "Lcom/android/phone/SipBroadcastReceiver$1;->run"
                },
                "SipBroadcastReceiver": {
                    "onReceive": "Lcom/android/phone/SipBroadcastReceiver;->onReceive",
                    "takeCall": "Lcom/android/phone/SipBroadcastReceiver;->takeCall"
                },
                "SipCallOptionHandler$1": {
                    "run": "Lcom/android/phone/SipCallOptionHandler$1;->run"
                },
                "SipCallOptionHandler": {
                    "isNetworkConnected": "Lcom/android/phone/SipCallOptionHandler;->isNetworkConnected",
                    "createSipPhoneIfNeeded": "Lcom/android/phone/SipCallOptionHandler;->createSipPhoneIfNeeded",
                    "onCreate": "Lcom/android/phone/SipCallOptionHandler;->onCreate"
                },
                "sip": {
                    "SipEditor$2": {
                        "run": "Lcom/android/phone/sip/SipEditor$2;->run"
                    },
                    "SipEditor": {
                        "onPreferenceChange": "Lcom/android/phone/sip/SipEditor;->onPreferenceChange",
                        "deleteAndUnregisterProfile": "Lcom/android/phone/sip/SipEditor;->deleteAndUnregisterProfile",
                        "saveAndRegisterProfile": "Lcom/android/phone/sip/SipEditor;->saveAndRegisterProfile",
                        "unregisterOldPrimaryAccount": "Lcom/android/phone/sip/SipEditor;->unregisterOldPrimaryAccount",
                        "unregisterProfile": "Lcom/android/phone/sip/SipEditor;->unregisterProfile"
                    },
                    "SipSettings$1": {
                        "run": "Lcom/android/phone/sip/SipSettings$1;->run"
                    },
                    "SipSettings$2$1": {
                        "run": "Lcom/android/phone/sip/SipSettings$2$1;->run"
                    },
                    "SipSettings$3": {
                        "run": "Lcom/android/phone/sip/SipSettings$3;->run"
                    },
                    "SipSettings$7": {
                        "run": "Lcom/android/phone/sip/SipSettings$7;->run"
                    },
                    "SipSettings": {
                        "addProfile": "Lcom/android/phone/sip/SipSettings;->addProfile",
                        "handleSipReceiveCallsOption": "Lcom/android/phone/sip/SipSettings;->handleSipReceiveCallsOption",
                        "onActivityResult": "Lcom/android/phone/sip/SipSettings;->onActivityResult",
                        "processActiveProfilesFromSipService": "Lcom/android/phone/sip/SipSettings;->processActiveProfilesFromSipService",
                        "retrieveSipLists": "Lcom/android/phone/sip/SipSettings;->retrieveSipLists"
                    },
                    "SipSharedPreferences": {
                        "setReceivingCallsEnabled": "Lcom/android/phone/sip/SipSharedPreferences;->setReceivingCallsEnabled",
                        "setSipCallOption": "Lcom/android/phone/sip/SipSharedPreferences;->setSipCallOption"
                    }
                },
                "Use2GOnlyCheckBoxPreference$MyHandler": {
                    "handleGetPreferredNetworkTypeResponse": "Lcom/android/phone/Use2GOnlyCheckBoxPreference$MyHandler;->handleGetPreferredNetworkTypeResponse",
                    "handleSetPreferredNetworkTypeResponse": "Lcom/android/phone/Use2GOnlyCheckBoxPreference$MyHandler;->handleSetPreferredNetworkTypeResponse"
                },
                "Use2GOnlyCheckBoxPreference": {
                    "<init>": "Lcom/android/phone/Use2GOnlyCheckBoxPreference;-><init>",
                    "onClick": "Lcom/android/phone/Use2GOnlyCheckBoxPreference;->onClick"
                },
                "CallCommandService": {
                    "rejectCall": "Lcom/android/phone/CallCommandService;->rejectCall"
                },
                "CarrierConfigLoader": {
                    "getConfigForSubId": "Lcom/android/phone/CarrierConfigLoader;->getConfigForSubId",
                    "notifyConfigChangedForSubId": "Lcom/android/phone/CarrierConfigLoader;->notifyConfigChangedForSubId",
                    "updateConfigForPhoneId": "Lcom/android/phone/CarrierConfigLoader;->updateConfigForPhoneId"
                },
                "IccProvider": "Lcom/android/phone;->IccProvider",
                "PhoneSearchIndexablesProvider": "Lcom/android/phone;->PhoneSearchIndexablesProvider"
            },
            "providers": {
                "applications": {
                    "ApplicationsProvider$MyPackageMonitor": {
                        "onHandleForceStop": "Lcom/android/providers/applications/ApplicationsProvider$MyPackageMonitor;->onHandleForceStop",
                        "onPackageRemoved": "Lcom/android/providers/applications/ApplicationsProvider$MyPackageMonitor;->onPackageRemoved",
                        "onReceive": "Lcom/android/providers/applications/ApplicationsProvider$MyPackageMonitor;->onReceive"
                    }
                },
                "calendar": {
                    "CalendarAlarmManager": {
                        "acquireScheduleNextAlarmWakeLock": "Lcom/android/providers/calendar/CalendarAlarmManager;->acquireScheduleNextAlarmWakeLock",
                        "releaseScheduleNextAlarmWakeLock": "Lcom/android/providers/calendar/CalendarAlarmManager;->releaseScheduleNextAlarmWakeLock",
                        "rescheduleMissedAlarms": "Lcom/android/providers/calendar/CalendarAlarmManager;->rescheduleMissedAlarms",
                        "runScheduleNextAlarm": "Lcom/android/providers/calendar/CalendarAlarmManager;->runScheduleNextAlarm",
                        "scheduleNextAlarmLocked": "Lcom/android/providers/calendar/CalendarAlarmManager;->scheduleNextAlarmLocked"
                    },
                    "CalendarDebug$FetchInfoTask": {
                        "doInBackground": "Lcom/android/providers/calendar/CalendarDebug$FetchInfoTask;->doInBackground"
                    },
                    "CalendarProvider2": {
                        "getAccount": "Lcom/android/providers/calendar/CalendarProvider2;->getAccount",
                        "query": "Lcom/android/providers/calendar/CalendarProvider2;->query",
                        "insertInTransaction": "Lcom/android/providers/calendar/CalendarProvider2;->insertInTransaction",
                        "deleteFromEventRelatedTable": "Lcom/android/providers/calendar/CalendarProvider2;->deleteFromEventRelatedTable",
                        "deleteInTransaction": "Lcom/android/providers/calendar/CalendarProvider2;->deleteInTransaction",
                        "deleteMatchingCalendars": "Lcom/android/providers/calendar/CalendarProvider2;->deleteMatchingCalendars",
                        "deleteMatchingColors": "Lcom/android/providers/calendar/CalendarProvider2;->deleteMatchingColors",
                        "deleteReminders": "Lcom/android/providers/calendar/CalendarProvider2;->deleteReminders",
                        "updateEventRelatedTable": "Lcom/android/providers/calendar/CalendarProvider2;->updateEventRelatedTable",
                        "updateInTransaction": "Lcom/android/providers/calendar/CalendarProvider2;->updateInTransaction",
                        "getOriginalSyncId": "Lcom/android/providers/calendar/CalendarProvider2;->getOriginalSyncId",
                        "getOwner": "Lcom/android/providers/calendar/CalendarProvider2;->getOwner",
                        "getOriginalId": "Lcom/android/providers/calendar/CalendarProvider2;->getOriginalId",
                        "handleInsertException": "Lcom/android/providers/calendar/CalendarProvider2;->handleInsertException",
                        "doProcessEventRawTimes": "Lcom/android/providers/calendar/CalendarProvider2;->doProcessEventRawTimes",
                        "doUpdateTimezoneDependentFields": "Lcom/android/providers/calendar/CalendarProvider2;->doUpdateTimezoneDependentFields",
                        "modifyCalendarSubscription": "Lcom/android/providers/calendar/CalendarProvider2;->modifyCalendarSubscription",
                        "regenerateInstancesTable": "Lcom/android/providers/calendar/CalendarProvider2;->regenerateInstancesTable",
                        "updateEventAttendeeStatus": "Lcom/android/providers/calendar/CalendarProvider2;->updateEventAttendeeStatus",
                        "verifyAccounts": "Lcom/android/providers/calendar/CalendarProvider2;->verifyAccounts"
                    },
                    "CalendarProviderBroadcastReceiver": {
                        "onReceive": "Lcom/android/providers/calendar/CalendarProviderBroadcastReceiver;->onReceive"
                    },
                    "CalendarProviderIntentService": {
                        "onHandleIntent": "Lcom/android/providers/calendar/CalendarProviderIntentService;->onHandleIntent"
                    },
                    "CalendarReceiver$1": {
                        "run": "Lcom/android/providers/calendar/CalendarReceiver$1;->run"
                    },
                    "CalendarReceiver": {
                        "onReceive": "Lcom/android/providers/calendar/CalendarReceiver;->onReceive",
                        "removeScheduledAlarms": "Lcom/android/providers/calendar/CalendarReceiver;->removeScheduledAlarms"
                    }
                },
                "contacts": {
                    "CallLogProvider": {
                        "query": "Lcom/android/providers/contacts/CallLogProvider;->query",
                        "insert": "Lcom/android/providers/contacts/CallLogProvider;->insert",
                        "delete": "Lcom/android/providers/contacts/CallLogProvider;->delete",
                        "update": "Lcom/android/providers/contacts/CallLogProvider;->update",
                        "checkVoicemailPermissionAndAddRestriction": "Lcom/android/providers/contacts/CallLogProvider;->checkVoicemailPermissionAndAddRestriction"
                    },
                    "ContactsProvider2$PipeMonitor": {
                        "doInBackground": "Lcom/android/providers/contacts/ContactsProvider2$PipeMonitor;->doInBackground"
                    },
                    "ContactsProvider2": {
                        "getDefaultAccount": "Lcom/android/providers/contacts/ContactsProvider2;->getDefaultAccount",
                        "openAssetFile": "Lcom/android/providers/contacts/ContactsProvider2;->openAssetFile",
                        "openAssetFileLocal": "Lcom/android/providers/contacts/ContactsProvider2;->openAssetFileLocal",
                        "query": "Lcom/android/providers/contacts/ContactsProvider2;->query",
                        "queryLocal": "Lcom/android/providers/contacts/ContactsProvider2;->queryLocal",
                        "queryWithContactIdAndLookupKey": "Lcom/android/providers/contacts/ContactsProvider2;->queryWithContactIdAndLookupKey",
                        "insert": "Lcom/android/providers/contacts/ContactsProvider2;->insert",
                        "insertInTransaction": "Lcom/android/providers/contacts/ContactsProvider2;->insertInTransaction",
                        "call": "Lcom/android/providers/contacts/ContactsProvider2;->call",
                        "isContactsAccount": "Lcom/android/providers/contacts/ContactsProvider2;->isContactsAccount",
                        "updateAccountsInBackground": "Lcom/android/providers/contacts/ContactsProvider2;->updateAccountsInBackground",
                        "delete": "Lcom/android/providers/contacts/ContactsProvider2;->delete",
                        "deleteData": "Lcom/android/providers/contacts/ContactsProvider2;->deleteData",
                        "deleteInTransaction": "Lcom/android/providers/contacts/ContactsProvider2;->deleteInTransaction",
                        "update": "Lcom/android/providers/contacts/ContactsProvider2;->update",
                        "updateData": "Lcom/android/providers/contacts/ContactsProvider2;->updateData",
                        "updateInTransaction": "Lcom/android/providers/contacts/ContactsProvider2;->updateInTransaction",
                        "getType": "Lcom/android/providers/contacts/ContactsProvider2;->getType",
                        "insertSettings": "Lcom/android/providers/contacts/ContactsProvider2;->insertSettings",
                        "insertStatusUpdate": "Lcom/android/providers/contacts/ContactsProvider2;->insertStatusUpdate",
                        "cleanupPhotoStore": "Lcom/android/providers/contacts/ContactsProvider2;->cleanupPhotoStore",
                        "enforceSocialStreamReadPermission": "Lcom/android/providers/contacts/ContactsProvider2;->enforceSocialStreamReadPermission",
                        "enforceSocialStreamWritePermission": "Lcom/android/providers/contacts/ContactsProvider2;->enforceSocialStreamWritePermission",
                        "outputRawContactsAsVCard": "Lcom/android/providers/contacts/ContactsProvider2;->outputRawContactsAsVCard",
                        "performBackgroundTask": "Lcom/android/providers/contacts/ContactsProvider2;->performBackgroundTask",
                        "updateContactsAccountCount": "Lcom/android/providers/contacts/ContactsProvider2;->updateContactsAccountCount",
                        "bulkInsert": "Lcom/android/providers/contacts/ContactsProvider2;->bulkInsert"
                    },
                    "DatabaseModifier": {
                        "delete": "Lcom/android/providers/contacts/DatabaseModifier;->delete",
                        "update": "Lcom/android/providers/contacts/DatabaseModifier;->update",
                        "insert": "Lcom/android/providers/contacts/DatabaseModifier;->insert"
                    },
                    "DbModifierWithNotification": {
                        "delete": "Lcom/android/providers/contacts/DbModifierWithNotification;->delete",
                        "update": "Lcom/android/providers/contacts/DbModifierWithNotification;->update",
                        "insert": "Lcom/android/providers/contacts/DbModifierWithNotification;->insert",
                        "notifyVoicemailChange": "Lcom/android/providers/contacts/DbModifierWithNotification;->notifyVoicemailChange",
                        "notifyVoicemailChangeOnInsert": "Lcom/android/providers/contacts/DbModifierWithNotification;->notifyVoicemailChangeOnInsert"
                    },
                    "GlobalSearchSupport$SearchSuggestion": {
                        "buildUri": "Lcom/android/providers/contacts/GlobalSearchSupport$SearchSuggestion;->buildUri",
                        "asList": "Lcom/android/providers/contacts/GlobalSearchSupport$SearchSuggestion;->asList",
                        "addColumnValue": "Lcom/android/providers/contacts/GlobalSearchSupport$SearchSuggestion;->addColumnValue"
                    },
                    "GlobalSearchSupport": {
                        "addSearchSuggestionsBasedOnFilter": "Lcom/android/providers/contacts/GlobalSearchSupport;->addSearchSuggestionsBasedOnFilter",
                        "handleSearchShortcutRefresh": "Lcom/android/providers/contacts/GlobalSearchSupport;->handleSearchShortcutRefresh",
                        "handleSearchSuggestionsQuery": "Lcom/android/providers/contacts/GlobalSearchSupport;->handleSearchSuggestionsQuery"
                    },
                    "LegacyApiSupport": {
                        "query": "Lcom/android/providers/contacts/LegacyApiSupport;->query",
                        "findFirstDataRow": "Lcom/android/providers/contacts/LegacyApiSupport;->findFirstDataRow",
                        "delete": "Lcom/android/providers/contacts/LegacyApiSupport;->delete",
                        "updateAll": "Lcom/android/providers/contacts/LegacyApiSupport;->updateAll",
                        "update": "Lcom/android/providers/contacts/LegacyApiSupport;->update",
                        "updateContactMethods": "Lcom/android/providers/contacts/LegacyApiSupport;->updateContactMethods",
                        "updateExtensions": "Lcom/android/providers/contacts/LegacyApiSupport;->updateExtensions",
                        "updateGroups": "Lcom/android/providers/contacts/LegacyApiSupport;->updateGroups",
                        "updateOrganizations": "Lcom/android/providers/contacts/LegacyApiSupport;->updateOrganizations",
                        "updatePeople": "Lcom/android/providers/contacts/LegacyApiSupport;->updatePeople",
                        "updatePhones": "Lcom/android/providers/contacts/LegacyApiSupport;->updatePhones",
                        "updatePhotoByDataId": "Lcom/android/providers/contacts/LegacyApiSupport;->updatePhotoByDataId",
                        "updatePhoto": "Lcom/android/providers/contacts/LegacyApiSupport;->updatePhoto",
                        "updateSettings": "Lcom/android/providers/contacts/LegacyApiSupport;->updateSettings",
                        "getContactMethodType": "Lcom/android/providers/contacts/LegacyApiSupport;->getContactMethodType",
                        "getType": "Lcom/android/providers/contacts/LegacyApiSupport;->getType",
                        "findFirstDataId": "Lcom/android/providers/contacts/LegacyApiSupport;->findFirstDataId",
                        "updateLegacyPhotoData": "Lcom/android/providers/contacts/LegacyApiSupport;->updateLegacyPhotoData"
                    },
                    "ProfileProvider": {
                        "openAssetFile": "Lcom/android/providers/contacts/ProfileProvider;->openAssetFile",
                        "query": "Lcom/android/providers/contacts/ProfileProvider;->query",
                        "insertInTransaction": "Lcom/android/providers/contacts/ProfileProvider;->insertInTransaction",
                        "deleteInTransaction": "Lcom/android/providers/contacts/ProfileProvider;->deleteInTransaction",
                        "updateInTransaction": "Lcom/android/providers/contacts/ProfileProvider;->updateInTransaction",
                        "enforceReadPermission": "Lcom/android/providers/contacts/ProfileProvider;->enforceReadPermission",
                        "enforceWritePermission": "Lcom/android/providers/contacts/ProfileProvider;->enforceWritePermission",
                        "getType": "Lcom/android/providers/contacts/ProfileProvider;->getType"
                    },
                    "VoicemailCleanupService": {
                        "handleIntentInternal": "Lcom/android/providers/contacts/VoicemailCleanupService;->handleIntentInternal",
                        "onHandleIntent": "Lcom/android/providers/contacts/VoicemailCleanupService;->onHandleIntent"
                    },
                    "VoicemailContentProvider": {
                        "query": "Lcom/android/providers/contacts/VoicemailContentProvider;->query",
                        "insert": "Lcom/android/providers/contacts/VoicemailContentProvider;->insert",
                        "openFile": "Lcom/android/providers/contacts/VoicemailContentProvider;->openFile",
                        "checkPermissionsAndCreateUriData": "Lcom/android/providers/contacts/VoicemailContentProvider;->checkPermissionsAndCreateUriData",
                        "checkPermissionsAndCreateUriDataForReadOperation": "Lcom/android/providers/contacts/VoicemailContentProvider;->checkPermissionsAndCreateUriDataForReadOperation",
                        "delete": "Lcom/android/providers/contacts/VoicemailContentProvider;->delete",
                        "update": "Lcom/android/providers/contacts/VoicemailContentProvider;->update",
                        "getCallingPackage": "Lcom/android/providers/contacts/VoicemailContentProvider;->getCallingPackage",
                        "getPackageRestrictionClause": "Lcom/android/providers/contacts/VoicemailContentProvider;->getPackageRestrictionClause",
                        "checkAndAddSourcePackageIntoValues": "Lcom/android/providers/contacts/VoicemailContentProvider;->checkAndAddSourcePackageIntoValues",
                        "checkPackagePermission": "Lcom/android/providers/contacts/VoicemailContentProvider;->checkPackagePermission"
                    },
                    "VoicemailContentTable": {
                        "insert": "Lcom/android/providers/contacts/VoicemailContentTable;->insert",
                        "delete": "Lcom/android/providers/contacts/VoicemailContentTable;->delete",
                        "update": "Lcom/android/providers/contacts/VoicemailContentTable;->update"
                    },
                    "VoicemailPermissions": {
                        "callerHasFullAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->callerHasFullAccess",
                        "callerHasOwnVoicemailAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->callerHasOwnVoicemailAccess",
                        "packageHasFullAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->packageHasFullAccess",
                        "packageHasOwnVoicemailAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->packageHasOwnVoicemailAccess",
                        "checkCallerHasFullAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->checkCallerHasFullAccess",
                        "checkCallerHasOwnVoicemailAccess": "Lcom/android/providers/contacts/VoicemailPermissions;->checkCallerHasOwnVoicemailAccess"
                    },
                    "VoicemailStatusTable": {
                        "insert": "Lcom/android/providers/contacts/VoicemailStatusTable;->insert",
                        "delete": "Lcom/android/providers/contacts/VoicemailStatusTable;->delete",
                        "update": "Lcom/android/providers/contacts/VoicemailStatusTable;->update"
                    },
                    "VoicemailTable$Delegate": {
                        "insert": "Lcom/android/providers/contacts/VoicemailTable$Delegate;->insert",
                        "delete": "Lcom/android/providers/contacts/VoicemailTable$Delegate;->delete",
                        "update": "Lcom/android/providers/contacts/VoicemailTable$Delegate;->update"
                    },
                    "AbstractContactsProvider": {
                        "bulkInsert": "Lcom/android/providers/contacts/AbstractContactsProvider;->bulkInsert",
                        "delete": "Lcom/android/providers/contacts/AbstractContactsProvider;->delete",
                        "insert": "Lcom/android/providers/contacts/AbstractContactsProvider;->insert",
                        "update": "Lcom/android/providers/contacts/AbstractContactsProvider;->update"
                    },
                    "ShadowCallLogProvider": "Lcom/android/providers/contacts;->ShadowCallLogProvider"
                },
                "downloads": {
                    "DownloadInfo$Reader": {
                        "newDownloadInfo": "Lcom/android/providers/downloads/DownloadInfo$Reader;->newDownloadInfo",
                        "readRequestHeaders": "Lcom/android/providers/downloads/DownloadInfo$Reader;->readRequestHeaders"
                    },
                    "DownloadInfo": {
                        "getAllDownloadsUri": "Lcom/android/providers/downloads/DownloadInfo;->getAllDownloadsUri",
                        "getMyDownloadsUri": "Lcom/android/providers/downloads/DownloadInfo;->getMyDownloadsUri",
                        "isReadyToStart": "Lcom/android/providers/downloads/DownloadInfo;->isReadyToStart",
                        "checkCanUseNetwork": "Lcom/android/providers/downloads/DownloadInfo;->checkCanUseNetwork",
                        "notifyPauseDueToSize": "Lcom/android/providers/downloads/DownloadInfo;->notifyPauseDueToSize",
                        "sendIntentIfRequested": "Lcom/android/providers/downloads/DownloadInfo;->sendIntentIfRequested",
                        "startIfReady": "Lcom/android/providers/downloads/DownloadInfo;->startIfReady"
                    },
                    "DownloadNotification": {
                        "notificationForCompletedDownload": "Lcom/android/providers/downloads/DownloadNotification;->notificationForCompletedDownload",
                        "updateActiveNotification": "Lcom/android/providers/downloads/DownloadNotification;->updateActiveNotification",
                        "updateCompletedNotification": "Lcom/android/providers/downloads/DownloadNotification;->updateCompletedNotification",
                        "updateNotification": "Lcom/android/providers/downloads/DownloadNotification;->updateNotification"
                    },
                    "DownloadProvider": {
                        "insert": "Lcom/android/providers/downloads/DownloadProvider;->insert",
                        "openFile": "Lcom/android/providers/downloads/DownloadProvider;->openFile",
                        "checkInsertPermissions": "Lcom/android/providers/downloads/DownloadProvider;->checkInsertPermissions",
                        "logVerboseOpenFileInfo": "Lcom/android/providers/downloads/DownloadProvider;->logVerboseOpenFileInfo",
                        "delete": "Lcom/android/providers/downloads/DownloadProvider;->delete",
                        "update": "Lcom/android/providers/downloads/DownloadProvider;->update"
                    },
                    "DownloadReceiver": {
                        "onReceive": "Lcom/android/providers/downloads/DownloadReceiver;->onReceive"
                    },
                    "DownloadService$1": {
                        "onTransact": "Lcom/android/providers/downloads/DownloadService$1;->onTransact",
                        "scanCompleted": "Lcom/android/providers/downloads/DownloadService$1;->scanCompleted"
                    },
                    "DownloadService$UpdateThread": {
                        "run": "Lcom/android/providers/downloads/DownloadService$UpdateThread;->run"
                    },
                    "DownloadService": {
                        "scanFile": "Lcom/android/providers/downloads/DownloadService;->scanFile",
                        "insertDownloadLocked": "Lcom/android/providers/downloads/DownloadService;->insertDownloadLocked",
                        "deleteDownloadLocked": "Lcom/android/providers/downloads/DownloadService;->deleteDownloadLocked",
                        "updateDownload": "Lcom/android/providers/downloads/DownloadService;->updateDownload"
                    },
                    "DownloadThread": {
                        "getFinalStatusForHttpError": "Lcom/android/providers/downloads/DownloadThread;->getFinalStatusForHttpError",
                        "readFromResponse": "Lcom/android/providers/downloads/DownloadThread;->readFromResponse",
                        "openResponseEntity": "Lcom/android/providers/downloads/DownloadThread;->openResponseEntity",
                        "sendRequest": "Lcom/android/providers/downloads/DownloadThread;->sendRequest",
                        "checkConnectivity": "Lcom/android/providers/downloads/DownloadThread;->checkConnectivity",
                        "checkPausedOrCanceled": "Lcom/android/providers/downloads/DownloadThread;->checkPausedOrCanceled",
                        "executeDownload": "Lcom/android/providers/downloads/DownloadThread;->executeDownload",
                        "handleEndOfStream": "Lcom/android/providers/downloads/DownloadThread;->handleEndOfStream",
                        "notifyDownloadCompleted": "Lcom/android/providers/downloads/DownloadThread;->notifyDownloadCompleted",
                        "notifyThroughDatabase": "Lcom/android/providers/downloads/DownloadThread;->notifyThroughDatabase",
                        "processResponseHeaders": "Lcom/android/providers/downloads/DownloadThread;->processResponseHeaders",
                        "reportProgress": "Lcom/android/providers/downloads/DownloadThread;->reportProgress",
                        "run": "Lcom/android/providers/downloads/DownloadThread;->run",
                        "transferData": "Lcom/android/providers/downloads/DownloadThread;->transferData",
                        "updateDatabaseFromHeaders": "Lcom/android/providers/downloads/DownloadThread;->updateDatabaseFromHeaders",
                        "writeDataToDestination": "Lcom/android/providers/downloads/DownloadThread;->writeDataToDestination"
                    },
                    "Helpers": {
                        "generateSaveFile": "Lcom/android/providers/downloads/Helpers;->generateSaveFile"
                    },
                    "RealSystemFacade": {
                        "isActiveNetworkMetered": "Lcom/android/providers/downloads/RealSystemFacade;->isActiveNetworkMetered",
                        "isNetworkRoaming": "Lcom/android/providers/downloads/RealSystemFacade;->isNetworkRoaming",
                        "postNotification": "Lcom/android/providers/downloads/RealSystemFacade;->postNotification"
                    },
                    "StorageManager$1": {
                        "run": "Lcom/android/providers/downloads/StorageManager$1;->run"
                    },
                    "StorageManager": {
                        "discardPurgeableFiles": "Lcom/android/providers/downloads/StorageManager;->discardPurgeableFiles",
                        "findSpace": "Lcom/android/providers/downloads/StorageManager;->findSpace",
                        "trimDatabase": "Lcom/android/providers/downloads/StorageManager;->trimDatabase",
                        "verifySpaceBeforeWritingToFile": "Lcom/android/providers/downloads/StorageManager;->verifySpaceBeforeWritingToFile",
                        "verifySpace": "Lcom/android/providers/downloads/StorageManager;->verifySpace"
                    },
                    "SystemFacade": {
                        "isActiveNetworkMetered": "Lcom/android/providers/downloads/SystemFacade;->isActiveNetworkMetered",
                        "isNetworkRoaming": "Lcom/android/providers/downloads/SystemFacade;->isNetworkRoaming",
                        "postNotification": "Lcom/android/providers/downloads/SystemFacade;->postNotification"
                    },
                    "DownloadStorageProvider": "Lcom/android/providers/downloads;->DownloadStorageProvider"
                },
                "media": {
                    "MediaProvider": {
                        "getAlbumArtOutputUri": "Lcom/android/providers/media/MediaProvider;->getAlbumArtOutputUri",
                        "getThumb": "Lcom/android/providers/media/MediaProvider;->getThumb",
                        "makeThumbInternal": "Lcom/android/providers/media/MediaProvider;->makeThumbInternal",
                        "openFileAndEnforcePathPermissionsHelper": "Lcom/android/providers/media/MediaProvider;->openFileAndEnforcePathPermissionsHelper",
                        "openFile": "Lcom/android/providers/media/MediaProvider;->openFile"
                    },
                    "MediaScannerService": {
                        "scanFile": "Lcom/android/providers/media/MediaScannerService;->scanFile",
                        "scan": "Lcom/android/providers/media/MediaScannerService;->scan"
                    },
                    "RingtonePickerActivity": {
                        "onClick": "Lcom/android/providers/media/RingtonePickerActivity;->onClick",
                        "onCreate": "Lcom/android/providers/media/RingtonePickerActivity;->onCreate",
                        "onPause": "Lcom/android/providers/media/RingtonePickerActivity;->onPause",
                        "onStop": "Lcom/android/providers/media/RingtonePickerActivity;->onStop",
                        "run": "Lcom/android/providers/media/RingtonePickerActivity;->run",
                        "stopAnyPlayingRingtone": "Lcom/android/providers/media/RingtonePickerActivity;->stopAnyPlayingRingtone"
                    },
                    "MediaDocumentsProvider": "Lcom/android/providers/media;->MediaDocumentsProvider"
                },
                "settings": {
                    "SettingsBackupAgent": {
                        "enableWifi": "Lcom/android/providers/settings/SettingsBackupAgent;->enableWifi",
                        "onCreate": "Lcom/android/providers/settings/SettingsBackupAgent;->onCreate",
                        "onRestore": "Lcom/android/providers/settings/SettingsBackupAgent;->onRestore",
                        "onRestoreFile": "Lcom/android/providers/settings/SettingsBackupAgent;->onRestoreFile",
                        "restoreSettings": "Lcom/android/providers/settings/SettingsBackupAgent;->restoreSettings"
                    },
                    "SettingsHelper": {
                        "restoreValue": "Lcom/android/providers/settings/SettingsHelper;->restoreValue",
                        "applyAudioSettings": "Lcom/android/providers/settings/SettingsHelper;->applyAudioSettings",
                        "setAutoRestore": "Lcom/android/providers/settings/SettingsHelper;->setAutoRestore",
                        "setGpsLocation": "Lcom/android/providers/settings/SettingsHelper;->setGpsLocation",
                        "setLocaleData": "Lcom/android/providers/settings/SettingsHelper;->setLocaleData"
                    },
                    "SettingsProvider": {
                        "bulkInsert": "Lcom/android/providers/settings/SettingsProvider;->bulkInsert",
                        "call": "Lcom/android/providers/settings/SettingsProvider;->call",
                        "delete": "Lcom/android/providers/settings/SettingsProvider;->delete",
                        "insert": "Lcom/android/providers/settings/SettingsProvider;->insert",
                        "openAssetFile": "Lcom/android/providers/settings/SettingsProvider;->openAssetFile",
                        "openFile": "Lcom/android/providers/settings/SettingsProvider;->openFile",
                        "update": "Lcom/android/providers/settings/SettingsProvider;->update"
                    }
                },
                "telephony": {
                    "MmsProvider": {
                        "insert": "Lcom/android/providers/telephony/MmsProvider;->insert"
                    },
                    "MmsSmsProvider": {
                        "query": "Lcom/android/providers/telephony/MmsSmsProvider;->query",
                        "delete": "Lcom/android/providers/telephony/MmsSmsProvider;->delete",
                        "update": "Lcom/android/providers/telephony/MmsSmsProvider;->update"
                    },
                    "SmsProvider": {
                        "getAllMessagesFromIcc": "Lcom/android/providers/telephony/SmsProvider;->getAllMessagesFromIcc",
                        "getSingleMessageFromIcc": "Lcom/android/providers/telephony/SmsProvider;->getSingleMessageFromIcc",
                        "query": "Lcom/android/providers/telephony/SmsProvider;->query",
                        "insert": "Lcom/android/providers/telephony/SmsProvider;->insert",
                        "delete": "Lcom/android/providers/telephony/SmsProvider;->delete",
                        "deleteMessageFromIcc": "Lcom/android/providers/telephony/SmsProvider;->deleteMessageFromIcc"
                    },
                    "HbpcdLookupProvider": "Lcom/android/providers/telephony;->HbpcdLookupProvider",
                    "TelephonyProvider": {
                        "delete": "Lcom/android/providers/telephony/TelephonyProvider;->delete",
                        "insert": "Lcom/android/providers/telephony/TelephonyProvider;->insert",
                        "update": "Lcom/android/providers/telephony/TelephonyProvider;->update"
                    }
                },
                "userdictionary": {
                    "DictionaryBackupAgent": {
                        "getDictionary": "Lcom/android/providers/userdictionary/DictionaryBackupAgent;->getDictionary",
                        "onBackup": "Lcom/android/providers/userdictionary/DictionaryBackupAgent;->onBackup",
                        "onRestore": "Lcom/android/providers/userdictionary/DictionaryBackupAgent;->onRestore"
                    },
                    "UserDictionaryProvider": {
                        "insert": "Lcom/android/providers/userdictionary/UserDictionaryProvider;->insert"
                    }
                },
                "drm": {
                    "DrmProvider": {
                        "delete": "Lcom/android/providers/drm/DrmProvider;->delete",
                        "insert": "Lcom/android/providers/drm/DrmProvider;->insert",
                        "update": "Lcom/android/providers/drm/DrmProvider;->update"
                    }
                },
                "tv": {
                    "TvProvider": "Lcom/android/providers/tv;->TvProvider"
                }
            },
            "provision": {
                "DefaultActivity": {
                    "onCreate": "Lcom/android/provision/DefaultActivity;->onCreate"
                }
            },
            "quicksearchbox": {
                "AppsCorpus": {
                    "getSuggestions": "Lcom/android/quicksearchbox/AppsCorpus;->getSuggestions"
                },
                "google": {
                    "AbstractGoogleSource": {
                        "getSuggestionsExternal": "Lcom/android/quicksearchbox/google/AbstractGoogleSource;->getSuggestionsExternal",
                        "getSuggestions": "Lcom/android/quicksearchbox/google/AbstractGoogleSource;->getSuggestions",
                        "queryExternal": "Lcom/android/quicksearchbox/google/AbstractGoogleSource;->queryExternal",
                        "queryInternal": "Lcom/android/quicksearchbox/google/AbstractGoogleSource;->queryInternal"
                    },
                    "GoogleSource": {
                        "queryExternal": "Lcom/android/quicksearchbox/google/GoogleSource;->queryExternal",
                        "queryInternal": "Lcom/android/quicksearchbox/google/GoogleSource;->queryInternal"
                    },
                    "GoogleSuggestClient": {
                        "getActiveNetworkInfo": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->getActiveNetworkInfo",
                        "isNetworkConnected": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->isNetworkConnected",
                        "getSuggestionsExternal": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->getSuggestionsExternal",
                        "getSuggestions": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->getSuggestions",
                        "queryExternal": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->queryExternal",
                        "queryInternal": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->queryInternal",
                        "query": "Lcom/android/quicksearchbox/google/GoogleSuggestClient;->query"
                    },
                    "GoogleSuggestionProvider": {
                        "query": "Lcom/android/quicksearchbox/google/GoogleSuggestionProvider;->query"
                    },
                    "SearchBaseUrlHelper$1": {
                        "doInBackground": "Lcom/android/quicksearchbox/google/SearchBaseUrlHelper$1;->doInBackground"
                    }
                },
                "QueryTask": {
                    "run": "Lcom/android/quicksearchbox/QueryTask;->run"
                },
                "SingleSourceCorpus": {
                    "getSuggestions": "Lcom/android/quicksearchbox/SingleSourceCorpus;->getSuggestions"
                },
                "Source": {
                    "getSuggestions": "Lcom/android/quicksearchbox/Source;->getSuggestions"
                },
                "SuggestionCursorProvider": {
                    "getSuggestions": "Lcom/android/quicksearchbox/SuggestionCursorProvider;->getSuggestions"
                },
                "ui": {
                    "ContactBadge": {
                        "assignContactFromEmail": "Lcom/android/quicksearchbox/ui/ContactBadge;->assignContactFromEmail",
                        "assignContactFromPhone": "Lcom/android/quicksearchbox/ui/ContactBadge;->assignContactFromPhone",
                        "onClick": "Lcom/android/quicksearchbox/ui/ContactBadge;->onClick"
                    }
                },
                "util": {
                    "HttpHelper": {
                        "get": "Lcom/android/quicksearchbox/util/HttpHelper;->get",
                        "post": "Lcom/android/quicksearchbox/util/HttpHelper;->post"
                    },
                    "JavaNetHttpHelper": {
                        "get": "Lcom/android/quicksearchbox/util/JavaNetHttpHelper;->get",
                        "post": "Lcom/android/quicksearchbox/util/JavaNetHttpHelper;->post",
                        "createConnection": "Lcom/android/quicksearchbox/util/JavaNetHttpHelper;->createConnection"
                    },
                    "NamedTask": {
                        "run": "Lcom/android/quicksearchbox/util/NamedTask;->run"
                    },
                    "SingleThreadNamedTaskExecutor$Worker": {
                        "loop": "Lcom/android/quicksearchbox/util/SingleThreadNamedTaskExecutor$Worker;->loop",
                        "run": "Lcom/android/quicksearchbox/util/SingleThreadNamedTaskExecutor$Worker;->run"
                    }
                }
            },
            "server": {
                "accessibility": {
                    "AccessibilityManagerService$1": {
                        "onHandleForceStop": "Lcom/android/server/accessibility/AccessibilityManagerService$1;->onHandleForceStop",
                        "onPackageRemoved": "Lcom/android/server/accessibility/AccessibilityManagerService$1;->onPackageRemoved",
                        "onReceive": "Lcom/android/server/accessibility/AccessibilityManagerService$1;->onReceive",
                        "onSomePackagesChanged": "Lcom/android/server/accessibility/AccessibilityManagerService$1;->onSomePackagesChanged"
                    },
                    "AccessibilityManagerService$2": {
                        "onChange": "Lcom/android/server/accessibility/AccessibilityManagerService$2;->onChange"
                    },
                    "AccessibilityManagerService$4": {
                        "onChange": "Lcom/android/server/accessibility/AccessibilityManagerService$4;->onChange"
                    },
                    "AccessibilityManagerService$5": {
                        "onChange": "Lcom/android/server/accessibility/AccessibilityManagerService$5;->onChange"
                    },
                    "AccessibilityManagerService$MainHanler$2": {
                        "onClick": "Lcom/android/server/accessibility/AccessibilityManagerService$MainHanler$2;->onClick"
                    },
                    "AccessibilityManagerService$Service": {
                        "binderDied": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->binderDied",
                        "computeClickPointInScreen": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->computeClickPointInScreen",
                        "disableSelf": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->disableSelf",
                        "findAccessibilityNodeInfoByAccessibilityId": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfoByAccessibilityId",
                        "findAccessibilityNodeInfoByViewId": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfoByViewId",
                        "findAccessibilityNodeInfosByText": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfosByText",
                        "findAccessibilityNodeInfosByViewId": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findAccessibilityNodeInfosByViewId",
                        "findFocus": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->findFocus",
                        "focusSearch": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->focusSearch",
                        "getMagnificationCenterX": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationCenterX",
                        "getMagnificationCenterY": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationCenterY",
                        "getMagnificationRegion": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationRegion",
                        "getMagnificationScale": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getMagnificationScale",
                        "getWindow": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getWindow",
                        "getWindows": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->getWindows",
                        "performAccessibilityAction": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->performAccessibilityAction",
                        "performGlobalAction": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->performGlobalAction",
                        "resetMagnification": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->resetMagnification",
                        "setMagnificationScaleAndCenter": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->setMagnificationScaleAndCenter",
                        "setSoftKeyboardShowMode": "Lcom/android/server/accessibility/AccessibilityManagerService$Service;->setSoftKeyboardShowMode"
                    },
                    "AccessibilityManagerService": {
                        "onTransact": "Lcom/android/server/accessibility/AccessibilityManagerService;->onTransact",
                        "handleAccessibilityEnabledSettingChangedLocked": "Lcom/android/server/accessibility/AccessibilityManagerService;->handleAccessibilityEnabledSettingChangedLocked",
                        "<init>": "Lcom/android/server/accessibility/AccessibilityManagerService;-><init>",
                        "manageServicesLocked": "Lcom/android/server/accessibility/AccessibilityManagerService;->manageServicesLocked",
                        "persistComponentNamesToSettingLocked": "Lcom/android/server/accessibility/AccessibilityManagerService;->persistComponentNamesToSettingLocked",
                        "registerPackageChangeAndBootCompletedBroadcastReceiver": "Lcom/android/server/accessibility/AccessibilityManagerService;->registerPackageChangeAndBootCompletedBroadcastReceiver",
                        "registerSettingsContentObservers": "Lcom/android/server/accessibility/AccessibilityManagerService;->registerSettingsContentObservers",
                        "unregisterUiTestAutomationService": "Lcom/android/server/accessibility/AccessibilityManagerService;->unregisterUiTestAutomationService",
                        "addAccessibilityInteractionConnection": "Lcom/android/server/accessibility/AccessibilityManagerService;->addAccessibilityInteractionConnection",
                        "addClient": "Lcom/android/server/accessibility/AccessibilityManagerService;->addClient",
                        "disableAccessibilityService": "Lcom/android/server/accessibility/AccessibilityManagerService;->disableAccessibilityService",
                        "enableAccessibilityService": "Lcom/android/server/accessibility/AccessibilityManagerService;->enableAccessibilityService",
                        "getEnabledAccessibilityServiceList": "Lcom/android/server/accessibility/AccessibilityManagerService;->getEnabledAccessibilityServiceList",
                        "getInstalledAccessibilityServiceList": "Lcom/android/server/accessibility/AccessibilityManagerService;->getInstalledAccessibilityServiceList",
                        "interrupt": "Lcom/android/server/accessibility/AccessibilityManagerService;->interrupt",
                        "removeAccessibilityInteractionConnection": "Lcom/android/server/accessibility/AccessibilityManagerService;->removeAccessibilityInteractionConnection",
                        "sendAccessibilityEvent": "Lcom/android/server/accessibility/AccessibilityManagerService;->sendAccessibilityEvent"
                    }
                },
                "AlarmManagerService$AlarmThread": {
                    "run": "Lcom/android/server/AlarmManagerService$AlarmThread;->run"
                },
                "AlarmManagerService$ResultReceiver": {
                    "onSendFinished": "Lcom/android/server/AlarmManagerService$ResultReceiver;->onSendFinished"
                },
                "AlarmManagerService": {
                    "onTransact": "Lcom/android/server/AlarmManagerService;->onTransact",
                    "<init>": "Lcom/android/server/AlarmManagerService;-><init>",
                    "setTimeZone": "Lcom/android/server/AlarmManagerService;->setTimeZone",
                    "set": "Lcom/android/server/AlarmManagerService;->set",
                    "setTime": "Lcom/android/server/AlarmManagerService;->setTime"
                },
                "am": {
                    "ActivityManagerService$2": {
                        "handleMessage": "Lcom/android/server/am/ActivityManagerService$2;->handleMessage"
                    },
                    "ActivityManagerService$6": {
                        "onReceive": "Lcom/android/server/am/ActivityManagerService$6;->onReceive"
                    },
                    "ActivityManagerService$7": {
                        "onReceive": "Lcom/android/server/am/ActivityManagerService$7;->onReceive"
                    },
                    "ActivityManagerService$9$1": {
                        "run": "Lcom/android/server/am/ActivityManagerService$9$1;->run"
                    },
                    "ActivityManagerService$AppDeathRecipient": {
                        "binderDied": "Lcom/android/server/am/ActivityManagerService$AppDeathRecipient;->binderDied"
                    },
                    "ActivityManagerService$ServiceRestarter": {
                        "run": "Lcom/android/server/am/ActivityManagerService$ServiceRestarter;->run"
                    },
                    "ActivityManagerService": {
                        "startServiceLocked": "Lcom/android/server/am/ActivityManagerService;->startServiceLocked",
                        "main": "Lcom/android/server/am/ActivityManagerService;->main",
                        "registerReceiver": "Lcom/android/server/am/ActivityManagerService;->registerReceiver",
                        "attachApplicationLocked": "Lcom/android/server/am/ActivityManagerService;->attachApplicationLocked",
                        "bindBackupAgent": "Lcom/android/server/am/ActivityManagerService;->bindBackupAgent",
                        "bringUpServiceLocked": "Lcom/android/server/am/ActivityManagerService;->bringUpServiceLocked",
                        "forceStopPackageLocked": "Lcom/android/server/am/ActivityManagerService;->forceStopPackageLocked",
                        "handleAppCrashLocked": "Lcom/android/server/am/ActivityManagerService;->handleAppCrashLocked",
                        "handleApplicationWtf": "Lcom/android/server/am/ActivityManagerService;->handleApplicationWtf",
                        "killPackageProcessesLocked": "Lcom/android/server/am/ActivityManagerService;->killPackageProcessesLocked",
                        "makeAppCrashingLocked": "Lcom/android/server/am/ActivityManagerService;->makeAppCrashingLocked",
                        "onTransact": "Lcom/android/server/am/ActivityManagerService;->onTransact",
                        "removeProcessLocked": "Lcom/android/server/am/ActivityManagerService;->removeProcessLocked",
                        "requestServiceBindingLocked": "Lcom/android/server/am/ActivityManagerService;->requestServiceBindingLocked",
                        "sendPendingBroadcastsLocked": "Lcom/android/server/am/ActivityManagerService;->sendPendingBroadcastsLocked",
                        "shutdown": "Lcom/android/server/am/ActivityManagerService;->shutdown",
                        "updateConfigurationLocked": "Lcom/android/server/am/ActivityManagerService;->updateConfigurationLocked",
                        "addAppLocked": "Lcom/android/server/am/ActivityManagerService;->addAppLocked",
                        "startProcessLocked": "Lcom/android/server/am/ActivityManagerService;->startProcessLocked",
                        "broadcastIntentLocked": "Lcom/android/server/am/ActivityManagerService;->broadcastIntentLocked",
                        "getRecentTasks": "Lcom/android/server/am/ActivityManagerService;->getRecentTasks",
                        "getTasks": "Lcom/android/server/am/ActivityManagerService;->getTasks",
                        "access$300": "Lcom/android/server/am/ActivityManagerService;->access$300",
                        "appDiedLocked": "Lcom/android/server/am/ActivityManagerService;->appDiedLocked",
                        "appNotResponding": "Lcom/android/server/am/ActivityManagerService;->appNotResponding",
                        "bringDownServiceLocked": "Lcom/android/server/am/ActivityManagerService;->bringDownServiceLocked",
                        "broadcastStickyIntent": "Lcom/android/server/am/ActivityManagerService;->broadcastStickyIntent",
                        "bumpServiceExecutingLocked": "Lcom/android/server/am/ActivityManagerService;->bumpServiceExecutingLocked",
                        "cleanUpApplicationRecordLocked": "Lcom/android/server/am/ActivityManagerService;->cleanUpApplicationRecordLocked",
                        "cleanUpRemovedTaskLocked": "Lcom/android/server/am/ActivityManagerService;->cleanUpRemovedTaskLocked",
                        "closeSystemDialogsLocked": "Lcom/android/server/am/ActivityManagerService;->closeSystemDialogsLocked",
                        "comeOutOfSleepIfNeededLocked": "Lcom/android/server/am/ActivityManagerService;->comeOutOfSleepIfNeededLocked",
                        "crashApplication": "Lcom/android/server/am/ActivityManagerService;->crashApplication",
                        "ensureBootCompleted": "Lcom/android/server/am/ActivityManagerService;->ensureBootCompleted",
                        "finishBooting": "Lcom/android/server/am/ActivityManagerService;->finishBooting",
                        "finishInstrumentationLocked": "Lcom/android/server/am/ActivityManagerService;->finishInstrumentationLocked",
                        "goingToSleep": "Lcom/android/server/am/ActivityManagerService;->goingToSleep",
                        "handleAppDiedLocked": "Lcom/android/server/am/ActivityManagerService;->handleAppDiedLocked",
                        "handleApplicationCrash": "Lcom/android/server/am/ActivityManagerService;->handleApplicationCrash",
                        "installSystemProviders": "Lcom/android/server/am/ActivityManagerService;->installSystemProviders",
                        "killAllBackgroundProcesses": "Lcom/android/server/am/ActivityManagerService;->killAllBackgroundProcesses",
                        "killAppAtUsersRequest": "Lcom/android/server/am/ActivityManagerService;->killAppAtUsersRequest",
                        "killApplicationWithUid": "Lcom/android/server/am/ActivityManagerService;->killApplicationWithUid",
                        "killBackgroundProcesses": "Lcom/android/server/am/ActivityManagerService;->killBackgroundProcesses",
                        "killServicesLocked": "Lcom/android/server/am/ActivityManagerService;->killServicesLocked",
                        "makeAppNotRespondingLocked": "Lcom/android/server/am/ActivityManagerService;->makeAppNotRespondingLocked",
                        "moveTaskBackwards": "Lcom/android/server/am/ActivityManagerService;->moveTaskBackwards",
                        "moveTaskToBack": "Lcom/android/server/am/ActivityManagerService;->moveTaskToBack",
                        "moveTaskToFront": "Lcom/android/server/am/ActivityManagerService;->moveTaskToFront",
                        "onUserRemoved": "Lcom/android/server/am/ActivityManagerService;->onUserRemoved",
                        "performServiceRestartLocked": "Lcom/android/server/am/ActivityManagerService;->performServiceRestartLocked",
                        "processStartTimedOutLocked": "Lcom/android/server/am/ActivityManagerService;->processStartTimedOutLocked",
                        "realStartServiceLocked": "Lcom/android/server/am/ActivityManagerService;->realStartServiceLocked",
                        "removeConnectionLocked": "Lcom/android/server/am/ActivityManagerService;->removeConnectionLocked",
                        "requestServiceBindingsLocked": "Lcom/android/server/am/ActivityManagerService;->requestServiceBindingsLocked",
                        "retrieveSettings": "Lcom/android/server/am/ActivityManagerService;->retrieveSettings",
                        "sendServiceArgsLocked": "Lcom/android/server/am/ActivityManagerService;->sendServiceArgsLocked",
                        "serviceTimeout": "Lcom/android/server/am/ActivityManagerService;->serviceTimeout",
                        "setAlwaysFinish": "Lcom/android/server/am/ActivityManagerService;->setAlwaysFinish",
                        "setDebugApp": "Lcom/android/server/am/ActivityManagerService;->setDebugApp",
                        "setLockScreenShown": "Lcom/android/server/am/ActivityManagerService;->setLockScreenShown",
                        "setProcessLimit": "Lcom/android/server/am/ActivityManagerService;->setProcessLimit",
                        "skipCurrentReceiverLocked": "Lcom/android/server/am/ActivityManagerService;->skipCurrentReceiverLocked",
                        "skipPendingBroadcastLocked": "Lcom/android/server/am/ActivityManagerService;->skipPendingBroadcastLocked",
                        "startAppProblemLocked": "Lcom/android/server/am/ActivityManagerService;->startAppProblemLocked",
                        "startRunning": "Lcom/android/server/am/ActivityManagerService;->startRunning",
                        "stopServiceLocked": "Lcom/android/server/am/ActivityManagerService;->stopServiceLocked",
                        "systemReady": "Lcom/android/server/am/ActivityManagerService;->systemReady",
                        "trimApplications": "Lcom/android/server/am/ActivityManagerService;->trimApplications",
                        "unbroadcastIntent": "Lcom/android/server/am/ActivityManagerService;->unbroadcastIntent",
                        "updateConfiguration": "Lcom/android/server/am/ActivityManagerService;->updateConfiguration",
                        "updatePersistentConfiguration": "Lcom/android/server/am/ActivityManagerService;->updatePersistentConfiguration",
                        "wakingUp": "Lcom/android/server/am/ActivityManagerService;->wakingUp",
                        "activityDestroyed": "Lcom/android/server/am/ActivityManagerService;->activityDestroyed",
                        "activityIdle": "Lcom/android/server/am/ActivityManagerService;->activityIdle",
                        "activityPaused": "Lcom/android/server/am/ActivityManagerService;->activityPaused",
                        "activitySlept": "Lcom/android/server/am/ActivityManagerService;->activitySlept",
                        "activityStopped": "Lcom/android/server/am/ActivityManagerService;->activityStopped",
                        "appNotRespondingViaProvider": "Lcom/android/server/am/ActivityManagerService;->appNotRespondingViaProvider",
                        "attachApplication": "Lcom/android/server/am/ActivityManagerService;->attachApplication",
                        "backgroundResourcesReleased": "Lcom/android/server/am/ActivityManagerService;->backgroundResourcesReleased",
                        "bindService": "Lcom/android/server/am/ActivityManagerService;->bindService",
                        "bootAnimationComplete": "Lcom/android/server/am/ActivityManagerService;->bootAnimationComplete",
                        "clearApplicationUserData": "Lcom/android/server/am/ActivityManagerService;->clearApplicationUserData",
                        "clearGrantedUriPermissions": "Lcom/android/server/am/ActivityManagerService;->clearGrantedUriPermissions",
                        "clearPendingBackup": "Lcom/android/server/am/ActivityManagerService;->clearPendingBackup",
                        "closeSystemDialogs": "Lcom/android/server/am/ActivityManagerService;->closeSystemDialogs",
                        "convertFromTranslucent": "Lcom/android/server/am/ActivityManagerService;->convertFromTranslucent",
                        "convertToTranslucent": "Lcom/android/server/am/ActivityManagerService;->convertToTranslucent",
                        "createActivityContainer": "Lcom/android/server/am/ActivityManagerService;->createActivityContainer",
                        "createStack": "Lcom/android/server/am/ActivityManagerService;->createStack",
                        "createStackOnDisplay": "Lcom/android/server/am/ActivityManagerService;->createStackOnDisplay",
                        "createVirtualActivityContainer": "Lcom/android/server/am/ActivityManagerService;->createVirtualActivityContainer",
                        "deleteActivityContainer": "Lcom/android/server/am/ActivityManagerService;->deleteActivityContainer",
                        "dismissKeyguardOnNextActivity": "Lcom/android/server/am/ActivityManagerService;->dismissKeyguardOnNextActivity",
                        "dumpHeap": "Lcom/android/server/am/ActivityManagerService;->dumpHeap",
                        "finishActivity": "Lcom/android/server/am/ActivityManagerService;->finishActivity",
                        "finishActivityAffinity": "Lcom/android/server/am/ActivityManagerService;->finishActivityAffinity",
                        "finishHeavyWeightApp": "Lcom/android/server/am/ActivityManagerService;->finishHeavyWeightApp",
                        "finishInstrumentation": "Lcom/android/server/am/ActivityManagerService;->finishInstrumentation",
                        "finishReceiver": "Lcom/android/server/am/ActivityManagerService;->finishReceiver",
                        "finishSubActivity": "Lcom/android/server/am/ActivityManagerService;->finishSubActivity",
                        "finishVoiceTask": "Lcom/android/server/am/ActivityManagerService;->finishVoiceTask",
                        "forceStopPackage": "Lcom/android/server/am/ActivityManagerService;->forceStopPackage",
                        "getAllStackInfos": "Lcom/android/server/am/ActivityManagerService;->getAllStackInfos",
                        "getAssistContextExtras": "Lcom/android/server/am/ActivityManagerService;->getAssistContextExtras",
                        "getContentProvider": "Lcom/android/server/am/ActivityManagerService;->getContentProvider",
                        "getContentProviderExternal": "Lcom/android/server/am/ActivityManagerService;->getContentProviderExternal",
                        "getCurrentUser": "Lcom/android/server/am/ActivityManagerService;->getCurrentUser",
                        "getGrantedUriPermissions": "Lcom/android/server/am/ActivityManagerService;->getGrantedUriPermissions",
                        "getHomeActivityToken": "Lcom/android/server/am/ActivityManagerService;->getHomeActivityToken",
                        "getIntentForIntentSender": "Lcom/android/server/am/ActivityManagerService;->getIntentForIntentSender",
                        "getPackageProcessState": "Lcom/android/server/am/ActivityManagerService;->getPackageProcessState",
                        "getProviderMimeType": "Lcom/android/server/am/ActivityManagerService;->getProviderMimeType",
                        "getRunningAppProcesses": "Lcom/android/server/am/ActivityManagerService;->getRunningAppProcesses",
                        "getRunningExternalApplications": "Lcom/android/server/am/ActivityManagerService;->getRunningExternalApplications",
                        "getRunningUserIds": "Lcom/android/server/am/ActivityManagerService;->getRunningUserIds",
                        "getStackBoxes": "Lcom/android/server/am/ActivityManagerService;->getStackBoxes",
                        "getStackBoxInfo": "Lcom/android/server/am/ActivityManagerService;->getStackBoxInfo",
                        "getStackInfo": "Lcom/android/server/am/ActivityManagerService;->getStackInfo",
                        "getTaskBounds": "Lcom/android/server/am/ActivityManagerService;->getTaskBounds",
                        "getTaskDescriptionIcon": "Lcom/android/server/am/ActivityManagerService;->getTaskDescriptionIcon",
                        "getTaskThumbnail": "Lcom/android/server/am/ActivityManagerService;->getTaskThumbnail",
                        "getTaskThumbnails": "Lcom/android/server/am/ActivityManagerService;->getTaskThumbnails",
                        "getTaskTopThumbnail": "Lcom/android/server/am/ActivityManagerService;->getTaskTopThumbnail",
                        "getTopActivityExtras": "Lcom/android/server/am/ActivityManagerService;->getTopActivityExtras",
                        "hang": "Lcom/android/server/am/ActivityManagerService;->hang",
                        "inputDispatchingTimedOut": "Lcom/android/server/am/ActivityManagerService;->inputDispatchingTimedOut",
                        "isInHomeStack": "Lcom/android/server/am/ActivityManagerService;->isInHomeStack",
                        "isUserRunning": "Lcom/android/server/am/ActivityManagerService;->isUserRunning",
                        "keyguardWaitingForActivityDrawn": "Lcom/android/server/am/ActivityManagerService;->keyguardWaitingForActivityDrawn",
                        "killPackageDependents": "Lcom/android/server/am/ActivityManagerService;->killPackageDependents",
                        "killUid": "Lcom/android/server/am/ActivityManagerService;->killUid",
                        "launchAssistIntent": "Lcom/android/server/am/ActivityManagerService;->launchAssistIntent",
                        "moveActivityTaskToBack": "Lcom/android/server/am/ActivityManagerService;->moveActivityTaskToBack",
                        "moveTasksToFullscreenStack": "Lcom/android/server/am/ActivityManagerService;->moveTasksToFullscreenStack",
                        "moveTaskToDockedStack": "Lcom/android/server/am/ActivityManagerService;->moveTaskToDockedStack",
                        "moveTaskToStack": "Lcom/android/server/am/ActivityManagerService;->moveTaskToStack",
                        "moveTopActivityToPinnedStack": "Lcom/android/server/am/ActivityManagerService;->moveTopActivityToPinnedStack",
                        "navigateUpTo": "Lcom/android/server/am/ActivityManagerService;->navigateUpTo",
                        "noteWakeupAlarm": "Lcom/android/server/am/ActivityManagerService;->noteWakeupAlarm",
                        "openContentUri": "Lcom/android/server/am/ActivityManagerService;->openContentUri",
                        "performIdleMaintenance": "Lcom/android/server/am/ActivityManagerService;->performIdleMaintenance",
                        "positionTaskInStack": "Lcom/android/server/am/ActivityManagerService;->positionTaskInStack",
                        "profileControl": "Lcom/android/server/am/ActivityManagerService;->profileControl",
                        "publishContentProviders": "Lcom/android/server/am/ActivityManagerService;->publishContentProviders",
                        "publishService": "Lcom/android/server/am/ActivityManagerService;->publishService",
                        "registerProcessObserver": "Lcom/android/server/am/ActivityManagerService;->registerProcessObserver",
                        "registerTaskStackListener": "Lcom/android/server/am/ActivityManagerService;->registerTaskStackListener",
                        "registerUidObserver": "Lcom/android/server/am/ActivityManagerService;->registerUidObserver",
                        "registerUserSwitchObserver": "Lcom/android/server/am/ActivityManagerService;->registerUserSwitchObserver",
                        "releaseActivityInstance": "Lcom/android/server/am/ActivityManagerService;->releaseActivityInstance",
                        "releaseSomeActivities": "Lcom/android/server/am/ActivityManagerService;->releaseSomeActivities",
                        "removeContentProvider": "Lcom/android/server/am/ActivityManagerService;->removeContentProvider",
                        "removeContentProviderExternal": "Lcom/android/server/am/ActivityManagerService;->removeContentProviderExternal",
                        "removeStack": "Lcom/android/server/am/ActivityManagerService;->removeStack",
                        "removeSubTask": "Lcom/android/server/am/ActivityManagerService;->removeSubTask",
                        "removeTask": "Lcom/android/server/am/ActivityManagerService;->removeTask",
                        "reportAssistContextExtras": "Lcom/android/server/am/ActivityManagerService;->reportAssistContextExtras",
                        "requestAssistContextExtras": "Lcom/android/server/am/ActivityManagerService;->requestAssistContextExtras",
                        "requestBugReport": "Lcom/android/server/am/ActivityManagerService;->requestBugReport",
                        "requestVisibleBehind": "Lcom/android/server/am/ActivityManagerService;->requestVisibleBehind",
                        "resizeDockedStack": "Lcom/android/server/am/ActivityManagerService;->resizeDockedStack",
                        "resizePinnedStack": "Lcom/android/server/am/ActivityManagerService;->resizePinnedStack",
                        "resizeStack": "Lcom/android/server/am/ActivityManagerService;->resizeStack",
                        "resizeStackBox": "Lcom/android/server/am/ActivityManagerService;->resizeStackBox",
                        "resizeTask": "Lcom/android/server/am/ActivityManagerService;->resizeTask",
                        "restart": "Lcom/android/server/am/ActivityManagerService;->restart",
                        "resumeAppSwitches": "Lcom/android/server/am/ActivityManagerService;->resumeAppSwitches",
                        "sendIdleJobTrigger": "Lcom/android/server/am/ActivityManagerService;->sendIdleJobTrigger",
                        "setActivityController": "Lcom/android/server/am/ActivityManagerService;->setActivityController",
                        "setDumpHeapDebugLimit": "Lcom/android/server/am/ActivityManagerService;->setDumpHeapDebugLimit",
                        "setFocusedStack": "Lcom/android/server/am/ActivityManagerService;->setFocusedStack",
                        "setFocusedTask": "Lcom/android/server/am/ActivityManagerService;->setFocusedTask",
                        "setFrontActivityScreenCompatMode": "Lcom/android/server/am/ActivityManagerService;->setFrontActivityScreenCompatMode",
                        "setHasTopUi": "Lcom/android/server/am/ActivityManagerService;->setHasTopUi",
                        "setLenientBackgroundCheck": "Lcom/android/server/am/ActivityManagerService;->setLenientBackgroundCheck",
                        "setPackageAskScreenCompat": "Lcom/android/server/am/ActivityManagerService;->setPackageAskScreenCompat",
                        "setPackageScreenCompatMode": "Lcom/android/server/am/ActivityManagerService;->setPackageScreenCompatMode",
                        "setProcessForeground": "Lcom/android/server/am/ActivityManagerService;->setProcessForeground",
                        "setRequestedOrientation": "Lcom/android/server/am/ActivityManagerService;->setRequestedOrientation",
                        "setServiceForeground": "Lcom/android/server/am/ActivityManagerService;->setServiceForeground",
                        "setTaskDescription": "Lcom/android/server/am/ActivityManagerService;->setTaskDescription",
                        "signalPersistentProcesses": "Lcom/android/server/am/ActivityManagerService;->signalPersistentProcesses",
                        "startActivities": "Lcom/android/server/am/ActivityManagerService;->startActivities",
                        "startActivitiesInPackage": "Lcom/android/server/am/ActivityManagerService;->startActivitiesInPackage",
                        "startActivity": "Lcom/android/server/am/ActivityManagerService;->startActivity",
                        "startActivityAndWait": "Lcom/android/server/am/ActivityManagerService;->startActivityAndWait",
                        "startActivityAsCaller": "Lcom/android/server/am/ActivityManagerService;->startActivityAsCaller",
                        "startActivityAsUser": "Lcom/android/server/am/ActivityManagerService;->startActivityAsUser",
                        "startActivityFromRecents": "Lcom/android/server/am/ActivityManagerService;->startActivityFromRecents",
                        "startActivityInPackage": "Lcom/android/server/am/ActivityManagerService;->startActivityInPackage",
                        "startActivityIntentSender": "Lcom/android/server/am/ActivityManagerService;->startActivityIntentSender",
                        "startActivityWithConfig": "Lcom/android/server/am/ActivityManagerService;->startActivityWithConfig",
                        "startBinderTracking": "Lcom/android/server/am/ActivityManagerService;->startBinderTracking",
                        "startConfirmDeviceCredentialIntent": "Lcom/android/server/am/ActivityManagerService;->startConfirmDeviceCredentialIntent",
                        "startInstrumentation": "Lcom/android/server/am/ActivityManagerService;->startInstrumentation",
                        "startLockTaskMode": "Lcom/android/server/am/ActivityManagerService;->startLockTaskMode",
                        "startLockTaskModeOnCurrent": "Lcom/android/server/am/ActivityManagerService;->startLockTaskModeOnCurrent",
                        "startNextMatchingActivity": "Lcom/android/server/am/ActivityManagerService;->startNextMatchingActivity",
                        "startService": "Lcom/android/server/am/ActivityManagerService;->startService",
                        "startSystemLockTaskMode": "Lcom/android/server/am/ActivityManagerService;->startSystemLockTaskMode",
                        "startUserInBackground": "Lcom/android/server/am/ActivityManagerService;->startUserInBackground",
                        "startVoiceActivity": "Lcom/android/server/am/ActivityManagerService;->startVoiceActivity",
                        "stopAppSwitches": "Lcom/android/server/am/ActivityManagerService;->stopAppSwitches",
                        "stopBinderTrackingAndDump": "Lcom/android/server/am/ActivityManagerService;->stopBinderTrackingAndDump",
                        "stopLockTaskMode": "Lcom/android/server/am/ActivityManagerService;->stopLockTaskMode",
                        "stopLockTaskModeOnCurrent": "Lcom/android/server/am/ActivityManagerService;->stopLockTaskModeOnCurrent",
                        "stopService": "Lcom/android/server/am/ActivityManagerService;->stopService",
                        "stopServiceToken": "Lcom/android/server/am/ActivityManagerService;->stopServiceToken",
                        "stopSystemLockTaskMode": "Lcom/android/server/am/ActivityManagerService;->stopSystemLockTaskMode",
                        "stopUser": "Lcom/android/server/am/ActivityManagerService;->stopUser",
                        "suppressResizeConfigChanges": "Lcom/android/server/am/ActivityManagerService;->suppressResizeConfigChanges",
                        "swapDockedAndFullscreenStack": "Lcom/android/server/am/ActivityManagerService;->swapDockedAndFullscreenStack",
                        "switchUser": "Lcom/android/server/am/ActivityManagerService;->switchUser",
                        "systemBackupRestored": "Lcom/android/server/am/ActivityManagerService;->systemBackupRestored",
                        "unbindBackupAgent": "Lcom/android/server/am/ActivityManagerService;->unbindBackupAgent",
                        "unbindFinished": "Lcom/android/server/am/ActivityManagerService;->unbindFinished",
                        "unbindService": "Lcom/android/server/am/ActivityManagerService;->unbindService",
                        "unhandledBack": "Lcom/android/server/am/ActivityManagerService;->unhandledBack",
                        "unlockUser": "Lcom/android/server/am/ActivityManagerService;->unlockUser",
                        "unregisterReceiver": "Lcom/android/server/am/ActivityManagerService;->unregisterReceiver",
                        "unstableProviderDied": "Lcom/android/server/am/ActivityManagerService;->unstableProviderDied"
                    },
                    "ActivityRecord$Token": {
                        "keyDispatchingTimedOut": "Lcom/android/server/am/ActivityRecord$Token;->keyDispatchingTimedOut",
                        "onTransact": "Lcom/android/server/am/ActivityRecord$Token;->onTransact",
                        "windowsVisible": "Lcom/android/server/am/ActivityRecord$Token;->windowsVisible"
                    },
                    "ActivityRecord": {
                        "keyDispatchingTimedOut": "Lcom/android/server/am/ActivityRecord;->keyDispatchingTimedOut",
                        "windowsVisible": "Lcom/android/server/am/ActivityRecord;->windowsVisible"
                    },
                    "ActivityStack": {
                        "moveTaskToBackLocked": "Lcom/android/server/am/ActivityStack;->moveTaskToBackLocked",
                        "activityIdleInternal": "Lcom/android/server/am/ActivityStack;->activityIdleInternal",
                        "startActivityMayWait": "Lcom/android/server/am/ActivityStack;->startActivityMayWait",
                        "activityPaused": "Lcom/android/server/am/ActivityStack;->activityPaused",
                        "activitySleptLocked": "Lcom/android/server/am/ActivityStack;->activitySleptLocked",
                        "awakeFromSleepingLocked": "Lcom/android/server/am/ActivityStack;->awakeFromSleepingLocked",
                        "checkReadyForSleepLocked": "Lcom/android/server/am/ActivityStack;->checkReadyForSleepLocked",
                        "completePauseLocked": "Lcom/android/server/am/ActivityStack;->completePauseLocked",
                        "completeResumeLocked": "Lcom/android/server/am/ActivityStack;->completeResumeLocked",
                        "moveHomeToFrontFromLaunchLocked": "Lcom/android/server/am/ActivityStack;->moveHomeToFrontFromLaunchLocked",
                        "moveHomeToFrontLocked": "Lcom/android/server/am/ActivityStack;->moveHomeToFrontLocked",
                        "moveTaskToFrontLocked": "Lcom/android/server/am/ActivityStack;->moveTaskToFrontLocked",
                        "scheduleIdleLocked": "Lcom/android/server/am/ActivityStack;->scheduleIdleLocked",
                        "startPausingLocked": "Lcom/android/server/am/ActivityStack;->startPausingLocked",
                        "stopIfSleepingLocked": "Lcom/android/server/am/ActivityStack;->stopIfSleepingLocked",
                        "updateTransitLocked": "Lcom/android/server/am/ActivityStack;->updateTransitLocked"
                    },
                    "BatteryStatsService$1": {
                        "onServiceConnected": "Lcom/android/server/am/BatteryStatsService$1;->onServiceConnected"
                    },
                    "BatteryStatsService": {
                        "onTransact": "Lcom/android/server/am/BatteryStatsService;->onTransact",
                        "getStatistics": "Lcom/android/server/am/BatteryStatsService;->getStatistics",
                        "getAwakeTimeBattery": "Lcom/android/server/am/BatteryStatsService;->getAwakeTimeBattery",
                        "getAwakeTimePlugged": "Lcom/android/server/am/BatteryStatsService;->getAwakeTimePlugged",
                        "noteBluetoothOn": "Lcom/android/server/am/BatteryStatsService;->noteBluetoothOn",
                        "setBatteryState": "Lcom/android/server/am/BatteryStatsService;->setBatteryState",
                        "getStatisticsStream": "Lcom/android/server/am/BatteryStatsService;->getStatisticsStream",
                        "noteBleScanStarted": "Lcom/android/server/am/BatteryStatsService;->noteBleScanStarted",
                        "noteBleScanStopped": "Lcom/android/server/am/BatteryStatsService;->noteBleScanStopped",
                        "noteBluetoothControllerActivity": "Lcom/android/server/am/BatteryStatsService;->noteBluetoothControllerActivity",
                        "noteBluetoothOff": "Lcom/android/server/am/BatteryStatsService;->noteBluetoothOff",
                        "noteBluetoothState": "Lcom/android/server/am/BatteryStatsService;->noteBluetoothState",
                        "noteChangeWakelockFromSource": "Lcom/android/server/am/BatteryStatsService;->noteChangeWakelockFromSource",
                        "noteConnectivityChanged": "Lcom/android/server/am/BatteryStatsService;->noteConnectivityChanged",
                        "noteDeviceIdleMode": "Lcom/android/server/am/BatteryStatsService;->noteDeviceIdleMode",
                        "noteEvent": "Lcom/android/server/am/BatteryStatsService;->noteEvent",
                        "noteFlashlightOff": "Lcom/android/server/am/BatteryStatsService;->noteFlashlightOff",
                        "noteFlashlightOn": "Lcom/android/server/am/BatteryStatsService;->noteFlashlightOn",
                        "noteFullWifiLockAcquired": "Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockAcquired",
                        "noteFullWifiLockAcquiredFromSource": "Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockAcquiredFromSource",
                        "noteFullWifiLockReleased": "Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockReleased",
                        "noteFullWifiLockReleasedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteFullWifiLockReleasedFromSource",
                        "noteInputEvent": "Lcom/android/server/am/BatteryStatsService;->noteInputEvent",
                        "noteInteractive": "Lcom/android/server/am/BatteryStatsService;->noteInteractive",
                        "noteJobFinish": "Lcom/android/server/am/BatteryStatsService;->noteJobFinish",
                        "noteJobStart": "Lcom/android/server/am/BatteryStatsService;->noteJobStart",
                        "noteLongPartialWakelockFinish": "Lcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockFinish",
                        "noteLongPartialWakelockStart": "Lcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockStart",
                        "noteMobileRadioPowerState": "Lcom/android/server/am/BatteryStatsService;->noteMobileRadioPowerState",
                        "noteModemControllerActivity": "Lcom/android/server/am/BatteryStatsService;->noteModemControllerActivity",
                        "noteNetworkInterfaceType": "Lcom/android/server/am/BatteryStatsService;->noteNetworkInterfaceType",
                        "noteNetworkStatsEnabled": "Lcom/android/server/am/BatteryStatsService;->noteNetworkStatsEnabled",
                        "notePhoneDataConnectionState": "Lcom/android/server/am/BatteryStatsService;->notePhoneDataConnectionState",
                        "notePhoneOff": "Lcom/android/server/am/BatteryStatsService;->notePhoneOff",
                        "notePhoneOn": "Lcom/android/server/am/BatteryStatsService;->notePhoneOn",
                        "notePhoneSignalStrength": "Lcom/android/server/am/BatteryStatsService;->notePhoneSignalStrength",
                        "notePhoneState": "Lcom/android/server/am/BatteryStatsService;->notePhoneState",
                        "noteResetAudio": "Lcom/android/server/am/BatteryStatsService;->noteResetAudio",
                        "noteResetBleScan": "Lcom/android/server/am/BatteryStatsService;->noteResetBleScan",
                        "noteResetCamera": "Lcom/android/server/am/BatteryStatsService;->noteResetCamera",
                        "noteResetFlashlight": "Lcom/android/server/am/BatteryStatsService;->noteResetFlashlight",
                        "noteResetVideo": "Lcom/android/server/am/BatteryStatsService;->noteResetVideo",
                        "noteScanWifiLockAcquired": "Lcom/android/server/am/BatteryStatsService;->noteScanWifiLockAcquired",
                        "noteScanWifiLockAcquiredFromSource": "Lcom/android/server/am/BatteryStatsService;->noteScanWifiLockAcquiredFromSource",
                        "noteScanWifiLockReleased": "Lcom/android/server/am/BatteryStatsService;->noteScanWifiLockReleased",
                        "noteScanWifiLockReleasedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteScanWifiLockReleasedFromSource",
                        "noteScreenBrightness": "Lcom/android/server/am/BatteryStatsService;->noteScreenBrightness",
                        "noteScreenOff": "Lcom/android/server/am/BatteryStatsService;->noteScreenOff",
                        "noteScreenOn": "Lcom/android/server/am/BatteryStatsService;->noteScreenOn",
                        "noteScreenState": "Lcom/android/server/am/BatteryStatsService;->noteScreenState",
                        "noteStartAudio": "Lcom/android/server/am/BatteryStatsService;->noteStartAudio",
                        "noteStartCamera": "Lcom/android/server/am/BatteryStatsService;->noteStartCamera",
                        "noteStartGps": "Lcom/android/server/am/BatteryStatsService;->noteStartGps",
                        "noteStartSensor": "Lcom/android/server/am/BatteryStatsService;->noteStartSensor",
                        "noteStartVideo": "Lcom/android/server/am/BatteryStatsService;->noteStartVideo",
                        "noteStartWakelock": "Lcom/android/server/am/BatteryStatsService;->noteStartWakelock",
                        "noteStartWakelockFromSource": "Lcom/android/server/am/BatteryStatsService;->noteStartWakelockFromSource",
                        "noteStopAudio": "Lcom/android/server/am/BatteryStatsService;->noteStopAudio",
                        "noteStopCamera": "Lcom/android/server/am/BatteryStatsService;->noteStopCamera",
                        "noteStopGps": "Lcom/android/server/am/BatteryStatsService;->noteStopGps",
                        "noteStopSensor": "Lcom/android/server/am/BatteryStatsService;->noteStopSensor",
                        "noteStopVideo": "Lcom/android/server/am/BatteryStatsService;->noteStopVideo",
                        "noteStopWakelock": "Lcom/android/server/am/BatteryStatsService;->noteStopWakelock",
                        "noteStopWakelockFromSource": "Lcom/android/server/am/BatteryStatsService;->noteStopWakelockFromSource",
                        "noteSyncFinish": "Lcom/android/server/am/BatteryStatsService;->noteSyncFinish",
                        "noteSyncStart": "Lcom/android/server/am/BatteryStatsService;->noteSyncStart",
                        "noteUserActivity": "Lcom/android/server/am/BatteryStatsService;->noteUserActivity",
                        "noteVibratorOff": "Lcom/android/server/am/BatteryStatsService;->noteVibratorOff",
                        "noteVibratorOn": "Lcom/android/server/am/BatteryStatsService;->noteVibratorOn",
                        "noteWakeUp": "Lcom/android/server/am/BatteryStatsService;->noteWakeUp",
                        "noteWifiBatchedScanStartedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiBatchedScanStartedFromSource",
                        "noteWifiBatchedScanStoppedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiBatchedScanStoppedFromSource",
                        "noteWifiControllerActivity": "Lcom/android/server/am/BatteryStatsService;->noteWifiControllerActivity",
                        "noteWifiMulticastDisabled": "Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastDisabled",
                        "noteWifiMulticastDisabledFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastDisabledFromSource",
                        "noteWifiMulticastEnabled": "Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastEnabled",
                        "noteWifiMulticastEnabledFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiMulticastEnabledFromSource",
                        "noteWifiOff": "Lcom/android/server/am/BatteryStatsService;->noteWifiOff",
                        "noteWifiOn": "Lcom/android/server/am/BatteryStatsService;->noteWifiOn",
                        "noteWifiRadioPowerState": "Lcom/android/server/am/BatteryStatsService;->noteWifiRadioPowerState",
                        "noteWifiRssiChanged": "Lcom/android/server/am/BatteryStatsService;->noteWifiRssiChanged",
                        "noteWifiRunning": "Lcom/android/server/am/BatteryStatsService;->noteWifiRunning",
                        "noteWifiRunningChanged": "Lcom/android/server/am/BatteryStatsService;->noteWifiRunningChanged",
                        "noteWifiScanStarted": "Lcom/android/server/am/BatteryStatsService;->noteWifiScanStarted",
                        "noteWifiScanStartedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiScanStartedFromSource",
                        "noteWifiScanStopped": "Lcom/android/server/am/BatteryStatsService;->noteWifiScanStopped",
                        "noteWifiScanStoppedFromSource": "Lcom/android/server/am/BatteryStatsService;->noteWifiScanStoppedFromSource",
                        "noteWifiState": "Lcom/android/server/am/BatteryStatsService;->noteWifiState",
                        "noteWifiStopped": "Lcom/android/server/am/BatteryStatsService;->noteWifiStopped",
                        "noteWifiSupplicantStateChanged": "Lcom/android/server/am/BatteryStatsService;->noteWifiSupplicantStateChanged",
                        "takeUidSnapshot": "Lcom/android/server/am/BatteryStatsService;->takeUidSnapshot",
                        "takeUidSnapshots": "Lcom/android/server/am/BatteryStatsService;->takeUidSnapshots"
                    },
                    "BroadcastQueue$AppNotResponding": {
                        "run": "Lcom/android/server/am/BroadcastQueue$AppNotResponding;->run"
                    },
                    "BroadcastQueue": {
                        "sendPendingBroadcastsLocked": "Lcom/android/server/am/BroadcastQueue;->sendPendingBroadcastsLocked",
                        "broadcastTimeoutLocked": "Lcom/android/server/am/BroadcastQueue;->broadcastTimeoutLocked",
                        "processNextBroadcast": "Lcom/android/server/am/BroadcastQueue;->processNextBroadcast",
                        "scheduleBroadcastsLocked": "Lcom/android/server/am/BroadcastQueue;->scheduleBroadcastsLocked",
                        "setBroadcastTimeoutLocked": "Lcom/android/server/am/BroadcastQueue;->setBroadcastTimeoutLocked",
                        "skipCurrentReceiverLocked": "Lcom/android/server/am/BroadcastQueue;->skipCurrentReceiverLocked",
                        "skipPendingBroadcastLocked": "Lcom/android/server/am/BroadcastQueue;->skipPendingBroadcastLocked"
                    },
                    "CoreSettingsObserver": {
                        "beginObserveCoreSettings": "Lcom/android/server/am/CoreSettingsObserver;->beginObserveCoreSettings",
                        "<init>": "Lcom/android/server/am/CoreSettingsObserver;-><init>"
                    },
                    "ServiceRecord$1": {
                        "run": "Lcom/android/server/am/ServiceRecord$1;->run"
                    },
                    "UsageStatsService$2": {
                        "onHandleForceStop": "Lcom/android/server/am/UsageStatsService$2;->onHandleForceStop",
                        "onReceive": "Lcom/android/server/am/UsageStatsService$2;->onReceive",
                        "onSomePackagesChanged": "Lcom/android/server/am/UsageStatsService$2;->onSomePackagesChanged"
                    },
                    "ActivityManagerService$ProcessInfoService": {
                        "getProcessStatesAndOomScoresFromPids": "Lcom/android/server/am/ActivityManagerService$ProcessInfoService;->getProcessStatesAndOomScoresFromPids",
                        "getProcessStatesFromPids": "Lcom/android/server/am/ActivityManagerService$ProcessInfoService;->getProcessStatesFromPids"
                    },
                    "PendingIntentRecord": {
                        "send": "Lcom/android/server/am/PendingIntentRecord;->send"
                    },
                    "ProcessStatsService": {
                        "getCurrentStats": "Lcom/android/server/am/ProcessStatsService;->getCurrentStats",
                        "getStatsOverTime": "Lcom/android/server/am/ProcessStatsService;->getStatsOverTime"
                    },
                    "UsageStatsService": {
                        "getAllPkgUsageStats": "Lcom/android/server/am/UsageStatsService;->getAllPkgUsageStats",
                        "getPkgUsageStats": "Lcom/android/server/am/UsageStatsService;->getPkgUsageStats",
                        "noteLaunchTime": "Lcom/android/server/am/UsageStatsService;->noteLaunchTime",
                        "notePauseComponent": "Lcom/android/server/am/UsageStatsService;->notePauseComponent",
                        "noteResumeComponent": "Lcom/android/server/am/UsageStatsService;->noteResumeComponent"
                    }
                },
                "AppWidgetService": {
                    "systemReady": "Lcom/android/server/AppWidgetService;->systemReady",
                    "bindAppWidgetId": "Lcom/android/server/AppWidgetService;->bindAppWidgetId",
                    "bindAppWidgetIdIfAllowed": "Lcom/android/server/AppWidgetService;->bindAppWidgetIdIfAllowed",
                    "bindRemoteViewsService": "Lcom/android/server/AppWidgetService;->bindRemoteViewsService",
                    "deleteAppWidgetId": "Lcom/android/server/AppWidgetService;->deleteAppWidgetId",
                    "getAppWidgetInfo": "Lcom/android/server/AppWidgetService;->getAppWidgetInfo",
                    "getAppWidgetOptions": "Lcom/android/server/AppWidgetService;->getAppWidgetOptions",
                    "getAppWidgetViews": "Lcom/android/server/AppWidgetService;->getAppWidgetViews",
                    "hasBindAppWidgetPermission": "Lcom/android/server/AppWidgetService;->hasBindAppWidgetPermission",
                    "notifyAppWidgetViewDataChanged": "Lcom/android/server/AppWidgetService;->notifyAppWidgetViewDataChanged",
                    "partiallyUpdateAppWidgetIds": "Lcom/android/server/AppWidgetService;->partiallyUpdateAppWidgetIds",
                    "setBindAppWidgetPermission": "Lcom/android/server/AppWidgetService;->setBindAppWidgetPermission",
                    "unbindRemoteViewsService": "Lcom/android/server/AppWidgetService;->unbindRemoteViewsService",
                    "updateAppWidgetIds": "Lcom/android/server/AppWidgetService;->updateAppWidgetIds",
                    "updateAppWidgetOptions": "Lcom/android/server/AppWidgetService;->updateAppWidgetOptions",
                    "updateAppWidgetProvider": "Lcom/android/server/AppWidgetService;->updateAppWidgetProvider"
                },
                "BackupManagerService$BackupRestoreTask": {
                    "execute": "Lcom/android/server/BackupManagerService$BackupRestoreTask;->execute"
                },
                "BackupManagerService$PerformBackupTask": {
                    "execute": "Lcom/android/server/BackupManagerService$PerformBackupTask;->execute",
                    "finalizeBackup": "Lcom/android/server/BackupManagerService$PerformBackupTask;->finalizeBackup",
                    "invokeNextAgent": "Lcom/android/server/BackupManagerService$PerformBackupTask;->invokeNextAgent"
                },
                "BackupManagerService$PerformClearTask": {
                    "run": "Lcom/android/server/BackupManagerService$PerformClearTask;->run"
                },
                "BackupManagerService$PerformFullBackupTask": {
                    "backupOnePackage": "Lcom/android/server/BackupManagerService$PerformFullBackupTask;->backupOnePackage",
                    "run": "Lcom/android/server/BackupManagerService$PerformFullBackupTask;->run"
                },
                "BackupManagerService$PerformFullRestoreTask": {
                    "restoreOneFile": "Lcom/android/server/BackupManagerService$PerformFullRestoreTask;->restoreOneFile",
                    "run": "Lcom/android/server/BackupManagerService$PerformFullRestoreTask;->run"
                },
                "BackupManagerService$PerformInitializeTask": {
                    "run": "Lcom/android/server/BackupManagerService$PerformInitializeTask;->run"
                },
                "BackupManagerService$PerformRestoreTask": {
                    "execute": "Lcom/android/server/BackupManagerService$PerformRestoreTask;->execute",
                    "finalizeRestore": "Lcom/android/server/BackupManagerService$PerformRestoreTask;->finalizeRestore",
                    "restoreNextAgent": "Lcom/android/server/BackupManagerService$PerformRestoreTask;->restoreNextAgent"
                },
                "BackupManagerService$RunBackupReceiver": {
                    "onReceive": "Lcom/android/server/BackupManagerService$RunBackupReceiver;->onReceive"
                },
                "BackupManagerService$RunInitializeReceiver": {
                    "onReceive": "Lcom/android/server/BackupManagerService$RunInitializeReceiver;->onReceive"
                },
                "BackupManagerService": {
                    "bindToAgentSynchronous": "Lcom/android/server/BackupManagerService;->bindToAgentSynchronous",
                    "onTransact": "Lcom/android/server/BackupManagerService;->onTransact",
                    "selectBackupTransport": "Lcom/android/server/BackupManagerService;->selectBackupTransport",
                    "clearBackupData": "Lcom/android/server/BackupManagerService;->clearBackupData",
                    "<init>": "Lcom/android/server/BackupManagerService;-><init>",
                    "restoreAtInstall": "Lcom/android/server/BackupManagerService;->restoreAtInstall",
                    "setAutoRestore": "Lcom/android/server/BackupManagerService;->setAutoRestore",
                    "setBackupEnabled": "Lcom/android/server/BackupManagerService;->setBackupEnabled",
                    "acknowledgeFullBackupOrRestore": "Lcom/android/server/BackupManagerService;->acknowledgeFullBackupOrRestore",
                    "backupNow": "Lcom/android/server/BackupManagerService;->backupNow",
                    "beginRestoreSession": "Lcom/android/server/BackupManagerService;->beginRestoreSession",
                    "dataChanged": "Lcom/android/server/BackupManagerService;->dataChanged",
                    "fullBackup": "Lcom/android/server/BackupManagerService;->fullBackup",
                    "fullRestore": "Lcom/android/server/BackupManagerService;->fullRestore",
                    "getConfigurationIntent": "Lcom/android/server/BackupManagerService;->getConfigurationIntent",
                    "getCurrentTransport": "Lcom/android/server/BackupManagerService;->getCurrentTransport",
                    "getDestinationString": "Lcom/android/server/BackupManagerService;->getDestinationString",
                    "hasBackupPassword": "Lcom/android/server/BackupManagerService;->hasBackupPassword",
                    "isBackupEnabled": "Lcom/android/server/BackupManagerService;->isBackupEnabled",
                    "listAllTransports": "Lcom/android/server/BackupManagerService;->listAllTransports",
                    "setBackupPassword": "Lcom/android/server/BackupManagerService;->setBackupPassword",
                    "setBackupProvisioned": "Lcom/android/server/BackupManagerService;->setBackupProvisioned"
                },
                "BatteryService$1": {
                    "onUEvent": "Lcom/android/server/BatteryService$1;->onUEvent"
                },
                "BatteryService$2": {
                    "onUEvent": "Lcom/android/server/BatteryService$2;->onUEvent"
                },
                "BatteryService": {
                    "<init>": "Lcom/android/server/BatteryService;-><init>",
                    "processValues": "Lcom/android/server/BatteryService;->processValues",
                    "sendIntent": "Lcom/android/server/BatteryService;->sendIntent",
                    "update": "Lcom/android/server/BatteryService;->update"
                },
                "BootReceiver$1": {
                    "run": "Lcom/android/server/BootReceiver$1;->run"
                },
                "BootReceiver": {
                    "onReceive": "Lcom/android/server/BootReceiver;->onReceive",
                    "removeOldUpdatePackages": "Lcom/android/server/BootReceiver;->removeOldUpdatePackages"
                },
                "CertBlacklister": {
                    "<init>": "Lcom/android/server/CertBlacklister;-><init>",
                    "registerObservers": "Lcom/android/server/CertBlacklister;->registerObservers"
                },
                "ConnectivityService$1": {
                    "onRestrictBackgroundChanged": "Lcom/android/server/ConnectivityService$1;->onRestrictBackgroundChanged"
                },
                "ConnectivityService$FeatureUser": {
                    "binderDied": "Lcom/android/server/ConnectivityService$FeatureUser;->binderDied",
                    "expire": "Lcom/android/server/ConnectivityService$FeatureUser;->expire",
                    "<init>": "Lcom/android/server/ConnectivityService$FeatureUser;-><init>"
                },
                "ConnectivityService$SettingsObserver": {
                    "observe": "Lcom/android/server/ConnectivityService$SettingsObserver;->observe"
                },
                "ConnectivityService$VpnCallback": {
                    "override": "Lcom/android/server/ConnectivityService$VpnCallback;->override",
                    "restore": "Lcom/android/server/ConnectivityService$VpnCallback;->restore"
                },
                "ConnectivityService": {
                    "getActiveLinkProperties": "Lcom/android/server/ConnectivityService;->getActiveLinkProperties",
                    "getLinkProperties": "Lcom/android/server/ConnectivityService;->getLinkProperties",
                    "getActiveNetworkInfo": "Lcom/android/server/ConnectivityService;->getActiveNetworkInfo",
                    "getAllNetworkInfo": "Lcom/android/server/ConnectivityService;->getAllNetworkInfo",
                    "getNetworkInfo": "Lcom/android/server/ConnectivityService;->getNetworkInfo",
                    "getActiveNetworkQuotaInfo": "Lcom/android/server/ConnectivityService;->getActiveNetworkQuotaInfo",
                    "getAllNetworkState": "Lcom/android/server/ConnectivityService;->getAllNetworkState",
                    "getMobileDataEnabled": "Lcom/android/server/ConnectivityService;->getMobileDataEnabled",
                    "isActiveNetworkMetered": "Lcom/android/server/ConnectivityService;->isActiveNetworkMetered",
                    "isNetworkMeteredUnchecked": "Lcom/android/server/ConnectivityService;->isNetworkMeteredUnchecked",
                    "isNetworkSupported": "Lcom/android/server/ConnectivityService;->isNetworkSupported",
                    "isTetheringSupported": "Lcom/android/server/ConnectivityService;->isTetheringSupported",
                    "onTransact": "Lcom/android/server/ConnectivityService;->onTransact",
                    "requestRouteToHostAddress": "Lcom/android/server/ConnectivityService;->requestRouteToHostAddress",
                    "requestRouteToHost": "Lcom/android/server/ConnectivityService;->requestRouteToHost",
                    "setRadio": "Lcom/android/server/ConnectivityService;->setRadio",
                    "setRadios": "Lcom/android/server/ConnectivityService;->setRadios",
                    "teardown": "Lcom/android/server/ConnectivityService;->teardown",
                    "getLastTetherError": "Lcom/android/server/ConnectivityService;->getLastTetherError",
                    "getNetworkPreference": "Lcom/android/server/ConnectivityService;->getNetworkPreference",
                    "setUsbTethering": "Lcom/android/server/ConnectivityService;->setUsbTethering",
                    "startUsingNetworkFeature": "Lcom/android/server/ConnectivityService;->startUsingNetworkFeature",
                    "stopUsingNetworkFeature": "Lcom/android/server/ConnectivityService;->stopUsingNetworkFeature",
                    "tether": "Lcom/android/server/ConnectivityService;->tether",
                    "untether": "Lcom/android/server/ConnectivityService;->untether",
                    "getTetherableBluetoothRegexs": "Lcom/android/server/ConnectivityService;->getTetherableBluetoothRegexs",
                    "getTetherableIfaces": "Lcom/android/server/ConnectivityService;->getTetherableIfaces",
                    "getTetherableUsbRegexs": "Lcom/android/server/ConnectivityService;->getTetherableUsbRegexs",
                    "getTetherableWifiRegexs": "Lcom/android/server/ConnectivityService;->getTetherableWifiRegexs",
                    "getTetheredIfacePairs": "Lcom/android/server/ConnectivityService;->getTetheredIfacePairs",
                    "getTetheredIfaces": "Lcom/android/server/ConnectivityService;->getTetheredIfaces",
                    "getTetheringErroredIfaces": "Lcom/android/server/ConnectivityService;->getTetheringErroredIfaces",
                    "enforceAccessPermission": "Lcom/android/server/ConnectivityService;->enforceAccessPermission",
                    "enforceChangePermission": "Lcom/android/server/ConnectivityService;->enforceChangePermission",
                    "enforcePreference": "Lcom/android/server/ConnectivityService;->enforcePreference",
                    "enforceTetherAccessPermission": "Lcom/android/server/ConnectivityService;->enforceTetherAccessPermission",
                    "enforceTetherChangePermission": "Lcom/android/server/ConnectivityService;->enforceTetherChangePermission",
                    "handleApplyDefaultProxy": "Lcom/android/server/ConnectivityService;->handleApplyDefaultProxy",
                    "handleConnect": "Lcom/android/server/ConnectivityService;->handleConnect",
                    "handleConnectionFailure": "Lcom/android/server/ConnectivityService;->handleConnectionFailure",
                    "handleConnectivityChange": "Lcom/android/server/ConnectivityService;->handleConnectivityChange",
                    "handleDeprecatedGlobalHttpProxy": "Lcom/android/server/ConnectivityService;->handleDeprecatedGlobalHttpProxy",
                    "handleDisconnect": "Lcom/android/server/ConnectivityService;->handleDisconnect",
                    "handleInetConditionChange": "Lcom/android/server/ConnectivityService;->handleInetConditionChange",
                    "handleInetConditionHoldEnd": "Lcom/android/server/ConnectivityService;->handleInetConditionHoldEnd",
                    "handleSetNetworkPreference": "Lcom/android/server/ConnectivityService;->handleSetNetworkPreference",
                    "<init>": "Lcom/android/server/ConnectivityService;-><init>",
                    "reportInetCondition": "Lcom/android/server/ConnectivityService;->reportInetCondition",
                    "requestNetworkTransitionWakelock": "Lcom/android/server/ConnectivityService;->requestNetworkTransitionWakelock",
                    "sendConnectedBroadcast": "Lcom/android/server/ConnectivityService;->sendConnectedBroadcast",
                    "sendConnectedBroadcastDelayed": "Lcom/android/server/ConnectivityService;->sendConnectedBroadcastDelayed",
                    "sendGeneralBroadcast": "Lcom/android/server/ConnectivityService;->sendGeneralBroadcast",
                    "sendGeneralBroadcastDelayed": "Lcom/android/server/ConnectivityService;->sendGeneralBroadcastDelayed",
                    "sendInetConditionBroadcast": "Lcom/android/server/ConnectivityService;->sendInetConditionBroadcast",
                    "sendProxyBroadcast": "Lcom/android/server/ConnectivityService;->sendProxyBroadcast",
                    "sendStickyBroadcast": "Lcom/android/server/ConnectivityService;->sendStickyBroadcast",
                    "sendStickyBroadcastDelayed": "Lcom/android/server/ConnectivityService;->sendStickyBroadcastDelayed",
                    "setGlobalProxy": "Lcom/android/server/ConnectivityService;->setGlobalProxy",
                    "setMobileDataEnabled": "Lcom/android/server/ConnectivityService;->setMobileDataEnabled",
                    "setNetworkPreference": "Lcom/android/server/ConnectivityService;->setNetworkPreference",
                    "startLegacyVpn": "Lcom/android/server/ConnectivityService;->startLegacyVpn",
                    "systemReady": "Lcom/android/server/ConnectivityService;->systemReady",
                    "tryFailover": "Lcom/android/server/ConnectivityService;->tryFailover",
                    "captivePortalCheckComplete": "Lcom/android/server/ConnectivityService;->captivePortalCheckComplete",
                    "captivePortalCheckCompleted": "Lcom/android/server/ConnectivityService;->captivePortalCheckCompleted",
                    "checkMobileProvisioning": "Lcom/android/server/ConnectivityService;->checkMobileProvisioning",
                    "factoryReset": "Lcom/android/server/ConnectivityService;->factoryReset",
                    "findConnectionTypeForIface": "Lcom/android/server/ConnectivityService;->findConnectionTypeForIface",
                    "getActiveLinkQualityInfo": "Lcom/android/server/ConnectivityService;->getActiveLinkQualityInfo",
                    "getActiveNetwork": "Lcom/android/server/ConnectivityService;->getActiveNetwork",
                    "getActiveNetworkForUid": "Lcom/android/server/ConnectivityService;->getActiveNetworkForUid",
                    "getActiveNetworkInfoForUid": "Lcom/android/server/ConnectivityService;->getActiveNetworkInfoForUid",
                    "getAllLinkQualityInfo": "Lcom/android/server/ConnectivityService;->getAllLinkQualityInfo",
                    "getAllNetworks": "Lcom/android/server/ConnectivityService;->getAllNetworks",
                    "getAllVpnInfo": "Lcom/android/server/ConnectivityService;->getAllVpnInfo",
                    "getAlwaysOnVpnPackage": "Lcom/android/server/ConnectivityService;->getAlwaysOnVpnPackage",
                    "getDefaultNetworkCapabilitiesForUser": "Lcom/android/server/ConnectivityService;->getDefaultNetworkCapabilitiesForUser",
                    "getLegacyVpnInfo": "Lcom/android/server/ConnectivityService;->getLegacyVpnInfo",
                    "getLinkPropertiesForType": "Lcom/android/server/ConnectivityService;->getLinkPropertiesForType",
                    "getLinkQualityInfo": "Lcom/android/server/ConnectivityService;->getLinkQualityInfo",
                    "getMobileProvisioningUrl": "Lcom/android/server/ConnectivityService;->getMobileProvisioningUrl",
                    "getMobileRedirectedProvisioningUrl": "Lcom/android/server/ConnectivityService;->getMobileRedirectedProvisioningUrl",
                    "getNetworkCapabilities": "Lcom/android/server/ConnectivityService;->getNetworkCapabilities",
                    "getNetworkForType": "Lcom/android/server/ConnectivityService;->getNetworkForType",
                    "getNetworkInfoForNetwork": "Lcom/android/server/ConnectivityService;->getNetworkInfoForNetwork",
                    "getNetworkInfoForUid": "Lcom/android/server/ConnectivityService;->getNetworkInfoForUid",
                    "getProvisioningOrActiveNetworkInfo": "Lcom/android/server/ConnectivityService;->getProvisioningOrActiveNetworkInfo",
                    "getTetheredDhcpRanges": "Lcom/android/server/ConnectivityService;->getTetheredDhcpRanges",
                    "getVpnConfig": "Lcom/android/server/ConnectivityService;->getVpnConfig",
                    "listenForNetwork": "Lcom/android/server/ConnectivityService;->listenForNetwork",
                    "markSocketAsUser": "Lcom/android/server/ConnectivityService;->markSocketAsUser",
                    "pendingListenForNetwork": "Lcom/android/server/ConnectivityService;->pendingListenForNetwork",
                    "pendingRequestForNetwork": "Lcom/android/server/ConnectivityService;->pendingRequestForNetwork",
                    "prepareVpn": "Lcom/android/server/ConnectivityService;->prepareVpn",
                    "registerNetworkAgent": "Lcom/android/server/ConnectivityService;->registerNetworkAgent",
                    "registerNetworkFactory": "Lcom/android/server/ConnectivityService;->registerNetworkFactory",
                    "reportBadNetwork": "Lcom/android/server/ConnectivityService;->reportBadNetwork",
                    "reportNetworkConnectivity": "Lcom/android/server/ConnectivityService;->reportNetworkConnectivity",
                    "requestBandwidthUpdate": "Lcom/android/server/ConnectivityService;->requestBandwidthUpdate",
                    "requestNetwork": "Lcom/android/server/ConnectivityService;->requestNetwork",
                    "setAcceptUnvalidated": "Lcom/android/server/ConnectivityService;->setAcceptUnvalidated",
                    "setAirplaneMode": "Lcom/android/server/ConnectivityService;->setAirplaneMode",
                    "setAlwaysOnVpnPackage": "Lcom/android/server/ConnectivityService;->setAlwaysOnVpnPackage",
                    "setAvoidUnvalidated": "Lcom/android/server/ConnectivityService;->setAvoidUnvalidated",
                    "setDataDependency": "Lcom/android/server/ConnectivityService;->setDataDependency",
                    "setPolicyDataEnable": "Lcom/android/server/ConnectivityService;->setPolicyDataEnable",
                    "setProvisioningNotificationVisible": "Lcom/android/server/ConnectivityService;->setProvisioningNotificationVisible",
                    "setVpnPackageAuthorization": "Lcom/android/server/ConnectivityService;->setVpnPackageAuthorization",
                    "startNattKeepalive": "Lcom/android/server/ConnectivityService;->startNattKeepalive",
                    "startTethering": "Lcom/android/server/ConnectivityService;->startTethering",
                    "stopTethering": "Lcom/android/server/ConnectivityService;->stopTethering",
                    "supplyMessenger": "Lcom/android/server/ConnectivityService;->supplyMessenger",
                    "unregisterNetworkFactory": "Lcom/android/server/ConnectivityService;->unregisterNetworkFactory",
                    "updateLockdownVpn": "Lcom/android/server/ConnectivityService;->updateLockdownVpn"
                },
                "connectivity": {
                    "Tethering$TetherInterfaceSM$InitialState": {
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$InitialState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$InitialState;->exit"
                    },
                    "Tethering$TetherInterfaceSM$StartingState": {
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$StartingState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$StartingState;->exit"
                    },
                    "Tethering$TetherInterfaceSM$TetheredState": {
                        "processMessage": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$TetheredState;->processMessage",
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$TetheredState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$TetheredState;->exit"
                    },
                    "Tethering$TetherInterfaceSM$UnavailableState": {
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$UnavailableState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherInterfaceSM$UnavailableState;->exit"
                    },
                    "Tethering$TetherMasterSM$ErrorState": {
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$ErrorState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$ErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$InitialState": {
                        "turnOffUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;->turnOffUpstreamMobileConnection",
                        "turnOnUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;->turnOnUpstreamMobileConnection",
                        "chooseUpstreamType": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;->chooseUpstreamType",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;->exit"
                    },
                    "Tethering$TetherMasterSM$SetDnsForwardersErrorState": {
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetDnsForwardersErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState": {
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState": {
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$StartTetheringErrorState": {
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$StartTetheringErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$StopTetheringErrorState": {
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$StopTetheringErrorState;->exit"
                    },
                    "Tethering$TetherMasterSM$TetherMasterUtilState": {
                        "processMessage": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->processMessage",
                        "turnOffUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->turnOffUpstreamMobileConnection",
                        "turnOnUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->turnOnUpstreamMobileConnection",
                        "chooseUpstreamType": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->chooseUpstreamType",
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherMasterUtilState;->exit"
                    },
                    "Tethering$TetherMasterSM$TetherModeAliveState": {
                        "processMessage": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->processMessage",
                        "turnOffUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->turnOffUpstreamMobileConnection",
                        "turnOnUpstreamMobileConnection": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->turnOnUpstreamMobileConnection",
                        "chooseUpstreamType": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->chooseUpstreamType",
                        "enter": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->enter",
                        "exit": "Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;->exit"
                    },
                    "Tethering": {
                        "sendTetherStateChangedBroadcast": "Lcom/android/server/connectivity/Tethering;->sendTetherStateChangedBroadcast",
                        "showTetheredNotification": "Lcom/android/server/connectivity/Tethering;->showTetheredNotification",
                        "interfaceAdded": "Lcom/android/server/connectivity/Tethering;->interfaceAdded",
                        "interfaceLinkStateChanged": "Lcom/android/server/connectivity/Tethering;->interfaceLinkStateChanged",
                        "interfaceStatusChanged": "Lcom/android/server/connectivity/Tethering;->interfaceStatusChanged"
                    },
                    "Vpn$LegacyVpnRunner": {
                        "execute": "Lcom/android/server/connectivity/Vpn$LegacyVpnRunner;->execute",
                        "run": "Lcom/android/server/connectivity/Vpn$LegacyVpnRunner;->run"
                    },
                    "Vpn": {
                        "showNotification": "Lcom/android/server/connectivity/Vpn;->showNotification",
                        "startLegacyVpn": "Lcom/android/server/connectivity/Vpn;->startLegacyVpn"
                    },
                    "IpConnectivityMetrics$Impl": {
                        "logEvent": "Lcom/android/server/connectivity/IpConnectivityMetrics$Impl;->logEvent"
                    },
                    "MetricsLoggerService$MetricsLoggerImpl": {
                        "getEvents": "Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->getEvents",
                        "logEvent": "Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->logEvent",
                        "logEvents": "Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->logEvents",
                        "register": "Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->register",
                        "unregister": "Lcom/android/server/connectivity/MetricsLoggerService$MetricsLoggerImpl;->unregister"
                    }
                },
                "CountryDetectorService$2": {
                    "run": "Lcom/android/server/CountryDetectorService$2;->run"
                },
                "DevicePolicyManagerService$2": {
                    "onReceive": "Lcom/android/server/DevicePolicyManagerService$2;->onReceive"
                },
                "DevicePolicyManagerService$MyPackageMonitor": {
                    "onHandleForceStop": "Lcom/android/server/DevicePolicyManagerService$MyPackageMonitor;->onHandleForceStop",
                    "onPackageRemoved": "Lcom/android/server/DevicePolicyManagerService$MyPackageMonitor;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/DevicePolicyManagerService$MyPackageMonitor;->onReceive"
                },
                "DevicePolicyManagerService": {
                    "setStorageEncryption": "Lcom/android/server/DevicePolicyManagerService;->setStorageEncryption",
                    "resetGlobalProxyLocked": "Lcom/android/server/DevicePolicyManagerService;->resetGlobalProxyLocked",
                    "saveGlobalProxyLocked": "Lcom/android/server/DevicePolicyManagerService;->saveGlobalProxyLocked",
                    "wipeDataLocked": "Lcom/android/server/DevicePolicyManagerService;->wipeDataLocked",
                    "getActiveAdmins": "Lcom/android/server/DevicePolicyManagerService;->getActiveAdmins",
                    "getCameraDisabled": "Lcom/android/server/DevicePolicyManagerService;->getCameraDisabled",
                    "getCurrentFailedPasswordAttempts": "Lcom/android/server/DevicePolicyManagerService;->getCurrentFailedPasswordAttempts",
                    "getDeviceOwnerName": "Lcom/android/server/DevicePolicyManagerService;->getDeviceOwnerName",
                    "getGlobalProxyAdmin": "Lcom/android/server/DevicePolicyManagerService;->getGlobalProxyAdmin",
                    "getKeyguardDisabledFeatures": "Lcom/android/server/DevicePolicyManagerService;->getKeyguardDisabledFeatures",
                    "getMaximumFailedPasswordsForWipe": "Lcom/android/server/DevicePolicyManagerService;->getMaximumFailedPasswordsForWipe",
                    "getMaximumTimeToLock": "Lcom/android/server/DevicePolicyManagerService;->getMaximumTimeToLock",
                    "getPasswordExpiration": "Lcom/android/server/DevicePolicyManagerService;->getPasswordExpiration",
                    "getPasswordExpirationTimeout": "Lcom/android/server/DevicePolicyManagerService;->getPasswordExpirationTimeout",
                    "getPasswordHistoryLength": "Lcom/android/server/DevicePolicyManagerService;->getPasswordHistoryLength",
                    "getPasswordMinimumLength": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumLength",
                    "getPasswordMinimumLetters": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumLetters",
                    "getPasswordMinimumLowerCase": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumLowerCase",
                    "getPasswordMinimumNonLetter": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumNonLetter",
                    "getPasswordMinimumNumeric": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumNumeric",
                    "getPasswordMinimumSymbols": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumSymbols",
                    "getPasswordMinimumUpperCase": "Lcom/android/server/DevicePolicyManagerService;->getPasswordMinimumUpperCase",
                    "getPasswordQuality": "Lcom/android/server/DevicePolicyManagerService;->getPasswordQuality",
                    "getRemoveWarning": "Lcom/android/server/DevicePolicyManagerService;->getRemoveWarning",
                    "getStorageEncryption": "Lcom/android/server/DevicePolicyManagerService;->getStorageEncryption",
                    "getStorageEncryptionStatus": "Lcom/android/server/DevicePolicyManagerService;->getStorageEncryptionStatus",
                    "hasGrantedPolicy": "Lcom/android/server/DevicePolicyManagerService;->hasGrantedPolicy",
                    "installCaCert": "Lcom/android/server/DevicePolicyManagerService;->installCaCert",
                    "isActivePasswordSufficient": "Lcom/android/server/DevicePolicyManagerService;->isActivePasswordSufficient",
                    "isAdminActive": "Lcom/android/server/DevicePolicyManagerService;->isAdminActive",
                    "lockNow": "Lcom/android/server/DevicePolicyManagerService;->lockNow",
                    "packageHasActiveAdmins": "Lcom/android/server/DevicePolicyManagerService;->packageHasActiveAdmins",
                    "removeActiveAdmin": "Lcom/android/server/DevicePolicyManagerService;->removeActiveAdmin",
                    "reportFailedPasswordAttempt": "Lcom/android/server/DevicePolicyManagerService;->reportFailedPasswordAttempt",
                    "reportSuccessfulPasswordAttempt": "Lcom/android/server/DevicePolicyManagerService;->reportSuccessfulPasswordAttempt",
                    "resetPassword": "Lcom/android/server/DevicePolicyManagerService;->resetPassword",
                    "setActiveAdmin": "Lcom/android/server/DevicePolicyManagerService;->setActiveAdmin",
                    "setActivePasswordState": "Lcom/android/server/DevicePolicyManagerService;->setActivePasswordState",
                    "setCameraDisabled": "Lcom/android/server/DevicePolicyManagerService;->setCameraDisabled",
                    "setGlobalProxy": "Lcom/android/server/DevicePolicyManagerService;->setGlobalProxy",
                    "setKeyguardDisabledFeatures": "Lcom/android/server/DevicePolicyManagerService;->setKeyguardDisabledFeatures",
                    "setMaximumFailedPasswordsForWipe": "Lcom/android/server/DevicePolicyManagerService;->setMaximumFailedPasswordsForWipe",
                    "setMaximumTimeToLock": "Lcom/android/server/DevicePolicyManagerService;->setMaximumTimeToLock",
                    "setPasswordExpirationTimeout": "Lcom/android/server/DevicePolicyManagerService;->setPasswordExpirationTimeout",
                    "setPasswordHistoryLength": "Lcom/android/server/DevicePolicyManagerService;->setPasswordHistoryLength",
                    "setPasswordMinimumLength": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumLength",
                    "setPasswordMinimumLetters": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumLetters",
                    "setPasswordMinimumLowerCase": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumLowerCase",
                    "setPasswordMinimumNonLetter": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumNonLetter",
                    "setPasswordMinimumNumeric": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumNumeric",
                    "setPasswordMinimumSymbols": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumSymbols",
                    "setPasswordMinimumUpperCase": "Lcom/android/server/DevicePolicyManagerService;->setPasswordMinimumUpperCase",
                    "setPasswordQuality": "Lcom/android/server/DevicePolicyManagerService;->setPasswordQuality",
                    "uninstallCaCert": "Lcom/android/server/DevicePolicyManagerService;->uninstallCaCert",
                    "wipeData": "Lcom/android/server/DevicePolicyManagerService;->wipeData"
                },
                "DeviceStorageMonitorService": {
                    "cancelFullNotification": "Lcom/android/server/DeviceStorageMonitorService;->cancelFullNotification",
                    "cancelNotification": "Lcom/android/server/DeviceStorageMonitorService;->cancelNotification",
                    "checkMemory": "Lcom/android/server/DeviceStorageMonitorService;->checkMemory",
                    "clearCache": "Lcom/android/server/DeviceStorageMonitorService;->clearCache",
                    "<init>": "Lcom/android/server/DeviceStorageMonitorService;-><init>",
                    "sendFullNotification": "Lcom/android/server/DeviceStorageMonitorService;->sendFullNotification",
                    "sendNotification": "Lcom/android/server/DeviceStorageMonitorService;->sendNotification"
                },
                "DockObserver": {
                    "onUEvent": "Lcom/android/server/DockObserver;->onUEvent",
                    "systemReady": "Lcom/android/server/DockObserver;->systemReady",
                    "update": "Lcom/android/server/DockObserver;->update"
                },
                "INativeDaemonConnectorCallbacks": {
                    "onDaemonConnected": "Lcom/android/server/INativeDaemonConnectorCallbacks;->onDaemonConnected"
                },
                "input": {
                    "InputManagerService$Callbacks": {
                        "dispatchUnhandledKey": "Lcom/android/server/input/InputManagerService$Callbacks;->dispatchUnhandledKey",
                        "interceptKeyBeforeQueueing": "Lcom/android/server/input/InputManagerService$Callbacks;->interceptKeyBeforeQueueing",
                        "interceptMotionBeforeQueueingWhenScreenOff": "Lcom/android/server/input/InputManagerService$Callbacks;->interceptMotionBeforeQueueingWhenScreenOff",
                        "interceptKeyBeforeDispatching": "Lcom/android/server/input/InputManagerService$Callbacks;->interceptKeyBeforeDispatching",
                        "notifyANR": "Lcom/android/server/input/InputManagerService$Callbacks;->notifyANR",
                        "notifyLidSwitchChanged": "Lcom/android/server/input/InputManagerService$Callbacks;->notifyLidSwitchChanged"
                    },
                    "InputManagerService": {
                        "dispatchUnhandledKey": "Lcom/android/server/input/InputManagerService;->dispatchUnhandledKey",
                        "interceptKeyBeforeQueueing": "Lcom/android/server/input/InputManagerService;->interceptKeyBeforeQueueing",
                        "interceptMotionBeforeQueueingWhenScreenOff": "Lcom/android/server/input/InputManagerService;->interceptMotionBeforeQueueingWhenScreenOff",
                        "getDeviceAlias": "Lcom/android/server/input/InputManagerService;->getDeviceAlias",
                        "interceptKeyBeforeDispatching": "Lcom/android/server/input/InputManagerService;->interceptKeyBeforeDispatching",
                        "notifyANR": "Lcom/android/server/input/InputManagerService;->notifyANR",
                        "deliverInputDevicesChanged": "Lcom/android/server/input/InputManagerService;->deliverInputDevicesChanged",
                        "notifyLidSwitchChanged": "Lcom/android/server/input/InputManagerService;->notifyLidSwitchChanged",
                        "registerPointerSpeedSettingObserver": "Lcom/android/server/input/InputManagerService;->registerPointerSpeedSettingObserver",
                        "registerShowTouchesSettingObserver": "Lcom/android/server/input/InputManagerService;->registerShowTouchesSettingObserver",
                        "showMissingKeyboardLayoutNotification": "Lcom/android/server/input/InputManagerService;->showMissingKeyboardLayoutNotification",
                        "start": "Lcom/android/server/input/InputManagerService;->start",
                        "systemReady": "Lcom/android/server/input/InputManagerService;->systemReady",
                        "addKeyboardLayoutForInputDevice": "Lcom/android/server/input/InputManagerService;->addKeyboardLayoutForInputDevice",
                        "isInTabletMode": "Lcom/android/server/input/InputManagerService;->isInTabletMode",
                        "registerTabletModeChangedListener": "Lcom/android/server/input/InputManagerService;->registerTabletModeChangedListener",
                        "removeKeyboardLayoutForInputDevice": "Lcom/android/server/input/InputManagerService;->removeKeyboardLayoutForInputDevice",
                        "setCurrentKeyboardLayoutForInputDevice": "Lcom/android/server/input/InputManagerService;->setCurrentKeyboardLayoutForInputDevice",
                        "setKeyboardLayoutForInputDevice": "Lcom/android/server/input/InputManagerService;->setKeyboardLayoutForInputDevice",
                        "setTouchCalibrationForInputDevice": "Lcom/android/server/input/InputManagerService;->setTouchCalibrationForInputDevice",
                        "tryPointerSpeed": "Lcom/android/server/input/InputManagerService;->tryPointerSpeed"
                    }
                },
                "InputMethodManagerService$3": {
                    "onReceive": "Lcom/android/server/InputMethodManagerService$3;->onReceive"
                },
                "InputMethodManagerService$InputMethodSettings": {
                    "buildAndPutEnabledInputMethodsStrRemovingIdLocked": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->buildAndPutEnabledInputMethodsStrRemovingIdLocked",
                    "addSubtypeToHistory": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->addSubtypeToHistory",
                    "appendAndPutEnabledInputMethodLocked": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->appendAndPutEnabledInputMethodLocked",
                    "enableAllIMEsIfThereIsNoEnabledIME": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->enableAllIMEsIfThereIsNoEnabledIME",
                    "putEnabledInputMethodsStr": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->putEnabledInputMethodsStr",
                    "putSelectedInputMethod": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->putSelectedInputMethod",
                    "putSelectedSubtype": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->putSelectedSubtype",
                    "putSubtypeHistoryStr": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->putSubtypeHistoryStr",
                    "saveSubtypeHistory": "Lcom/android/server/InputMethodManagerService$InputMethodSettings;->saveSubtypeHistory"
                },
                "InputMethodManagerService$MyPackageMonitor": {
                    "onHandleForceStop": "Lcom/android/server/InputMethodManagerService$MyPackageMonitor;->onHandleForceStop",
                    "onPackageRemoved": "Lcom/android/server/InputMethodManagerService$MyPackageMonitor;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/InputMethodManagerService$MyPackageMonitor;->onReceive",
                    "onSomePackagesChanged": "Lcom/android/server/InputMethodManagerService$MyPackageMonitor;->onSomePackagesChanged"
                },
                "InputMethodManagerService$SettingsObserver": {
                    "<init>": "Lcom/android/server/InputMethodManagerService$SettingsObserver;-><init>",
                    "onChange": "Lcom/android/server/InputMethodManagerService$SettingsObserver;->onChange"
                },
                "InputMethodManagerService": {
                    "chooseNewDefaultIMELocked": "Lcom/android/server/InputMethodManagerService;->chooseNewDefaultIMELocked",
                    "setInputMethodEnabledLocked": "Lcom/android/server/InputMethodManagerService;->setInputMethodEnabledLocked",
                    "buildInputMethodListLocked": "Lcom/android/server/InputMethodManagerService;->buildInputMethodListLocked",
                    "checkCurrentLocaleChangedLocked": "Lcom/android/server/InputMethodManagerService;->checkCurrentLocaleChangedLocked",
                    "<init>": "Lcom/android/server/InputMethodManagerService;-><init>",
                    "resetDefaultImeLocked": "Lcom/android/server/InputMethodManagerService;->resetDefaultImeLocked",
                    "resetSelectedInputMethodAndSubtypeLocked": "Lcom/android/server/InputMethodManagerService;->resetSelectedInputMethodAndSubtypeLocked",
                    "saveCurrentInputMethodAndSubtypeToHistory": "Lcom/android/server/InputMethodManagerService;->saveCurrentInputMethodAndSubtypeToHistory",
                    "setSelectedInputMethodAndSubtypeLocked": "Lcom/android/server/InputMethodManagerService;->setSelectedInputMethodAndSubtypeLocked",
                    "systemReady": "Lcom/android/server/InputMethodManagerService;->systemReady",
                    "updateFromSettingsLocked": "Lcom/android/server/InputMethodManagerService;->updateFromSettingsLocked",
                    "addClient": "Lcom/android/server/InputMethodManagerService;->addClient",
                    "clearLastInputMethodWindowForTransition": "Lcom/android/server/InputMethodManagerService;->clearLastInputMethodWindowForTransition",
                    "createInputContentUriToken": "Lcom/android/server/InputMethodManagerService;->createInputContentUriToken",
                    "getCurrentInputMethodSubtype": "Lcom/android/server/InputMethodManagerService;->getCurrentInputMethodSubtype",
                    "getEnabledInputMethodList": "Lcom/android/server/InputMethodManagerService;->getEnabledInputMethodList",
                    "getEnabledInputMethodSubtypeList": "Lcom/android/server/InputMethodManagerService;->getEnabledInputMethodSubtypeList",
                    "getInputMethodList": "Lcom/android/server/InputMethodManagerService;->getInputMethodList",
                    "getLastInputMethodSubtype": "Lcom/android/server/InputMethodManagerService;->getLastInputMethodSubtype",
                    "hideMySoftInput": "Lcom/android/server/InputMethodManagerService;->hideMySoftInput",
                    "hideSoftInput": "Lcom/android/server/InputMethodManagerService;->hideSoftInput",
                    "notifySuggestionPicked": "Lcom/android/server/InputMethodManagerService;->notifySuggestionPicked",
                    "registerSuggestionSpansForNotification": "Lcom/android/server/InputMethodManagerService;->registerSuggestionSpansForNotification",
                    "removeClient": "Lcom/android/server/InputMethodManagerService;->removeClient",
                    "setAdditionalInputMethodSubtypes": "Lcom/android/server/InputMethodManagerService;->setAdditionalInputMethodSubtypes",
                    "setCurrentInputMethodSubtype": "Lcom/android/server/InputMethodManagerService;->setCurrentInputMethodSubtype",
                    "setImeWindowStatus": "Lcom/android/server/InputMethodManagerService;->setImeWindowStatus",
                    "setInputMethod": "Lcom/android/server/InputMethodManagerService;->setInputMethod",
                    "setInputMethodAndSubtype": "Lcom/android/server/InputMethodManagerService;->setInputMethodAndSubtype",
                    "setInputMethodEnabled": "Lcom/android/server/InputMethodManagerService;->setInputMethodEnabled",
                    "shouldOfferSwitchingToNextInputMethod": "Lcom/android/server/InputMethodManagerService;->shouldOfferSwitchingToNextInputMethod",
                    "showInputMethodAndSubtypeEnablerFromClient": "Lcom/android/server/InputMethodManagerService;->showInputMethodAndSubtypeEnablerFromClient",
                    "showInputMethodPickerFromClient": "Lcom/android/server/InputMethodManagerService;->showInputMethodPickerFromClient",
                    "showMySoftInput": "Lcom/android/server/InputMethodManagerService;->showMySoftInput",
                    "showSoftInput": "Lcom/android/server/InputMethodManagerService;->showSoftInput",
                    "startInput": "Lcom/android/server/InputMethodManagerService;->startInput",
                    "startInputOrWindowGainedFocus": "Lcom/android/server/InputMethodManagerService;->startInputOrWindowGainedFocus",
                    "switchToLastInputMethod": "Lcom/android/server/InputMethodManagerService;->switchToLastInputMethod",
                    "switchToNextInputMethod": "Lcom/android/server/InputMethodManagerService;->switchToNextInputMethod",
                    "updateStatusIcon": "Lcom/android/server/InputMethodManagerService;->updateStatusIcon",
                    "windowGainedFocus": "Lcom/android/server/InputMethodManagerService;->windowGainedFocus"
                },
                "LightsService$1": {
                    "onTransact": "Lcom/android/server/LightsService$1;->onTransact",
                    "setFlashlightEnabled": "Lcom/android/server/LightsService$1;->setFlashlightEnabled"
                },
                "location": {
                    "ComprehensiveCountryDetector$1": {
                        "onCountryDetected": "Lcom/android/server/location/ComprehensiveCountryDetector$1;->onCountryDetected"
                    },
                    "ComprehensiveCountryDetector$2": {
                        "run": "Lcom/android/server/location/ComprehensiveCountryDetector$2;->run"
                    },
                    "ComprehensiveCountryDetector": {
                        "addPhoneStateListener": "Lcom/android/server/location/ComprehensiveCountryDetector;->addPhoneStateListener",
                        "removePhoneStateListener": "Lcom/android/server/location/ComprehensiveCountryDetector;->removePhoneStateListener",
                        "runAfterDetection": "Lcom/android/server/location/ComprehensiveCountryDetector;->runAfterDetection",
                        "setCountryListener": "Lcom/android/server/location/ComprehensiveCountryDetector;->setCountryListener",
                        "startLocationBasedDetector": "Lcom/android/server/location/ComprehensiveCountryDetector;->startLocationBasedDetector",
                        "stop": "Lcom/android/server/location/ComprehensiveCountryDetector;->stop",
                        "stopLocationBasedDetector": "Lcom/android/server/location/ComprehensiveCountryDetector;->stopLocationBasedDetector"
                    },
                    "CountryDetectorBase": {
                        "detectCountry": "Lcom/android/server/location/CountryDetectorBase;->detectCountry",
                        "setCountryListener": "Lcom/android/server/location/CountryDetectorBase;->setCountryListener",
                        "stop": "Lcom/android/server/location/CountryDetectorBase;->stop"
                    },
                    "GpsLocationProvider": {
                        "addListener": "Lcom/android/server/location/GpsLocationProvider;->addListener",
                        "disable": "Lcom/android/server/location/GpsLocationProvider;->disable",
                        "enable": "Lcom/android/server/location/GpsLocationProvider;->enable",
                        "enableLocationTracking": "Lcom/android/server/location/GpsLocationProvider;->enableLocationTracking",
                        "handleUpdateNetworkState": "Lcom/android/server/location/GpsLocationProvider;->handleUpdateNetworkState",
                        "removeListener": "Lcom/android/server/location/GpsLocationProvider;->removeListener",
                        "reportAGpsStatus": "Lcom/android/server/location/GpsLocationProvider;->reportAGpsStatus",
                        "reportNiNotification": "Lcom/android/server/location/GpsLocationProvider;->reportNiNotification",
                        "requestRefLocation": "Lcom/android/server/location/GpsLocationProvider;->requestRefLocation",
                        "requestSetID": "Lcom/android/server/location/GpsLocationProvider;->requestSetID",
                        "requestUtcTime": "Lcom/android/server/location/GpsLocationProvider;->requestUtcTime",
                        "sendMessage": "Lcom/android/server/location/GpsLocationProvider;->sendMessage",
                        "setEngineCapabilities": "Lcom/android/server/location/GpsLocationProvider;->setEngineCapabilities",
                        "updateLocation": "Lcom/android/server/location/GpsLocationProvider;->updateLocation",
                        "updateNetworkState": "Lcom/android/server/location/GpsLocationProvider;->updateNetworkState",
                        "xtraDownloadRequest": "Lcom/android/server/location/GpsLocationProvider;->xtraDownloadRequest",
                        "getGpsStatusProvider": "Lcom/android/server/location/GpsLocationProvider;->getGpsStatusProvider",
                        "getNetInitiatedListener": "Lcom/android/server/location/GpsLocationProvider;->getNetInitiatedListener",
                        "isEnabled": "Lcom/android/server/location/GpsLocationProvider;->isEnabled",
                        "isSupported": "Lcom/android/server/location/GpsLocationProvider;->isSupported",
                        "getAccuracy": "Lcom/android/server/location/GpsLocationProvider;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/server/location/GpsLocationProvider;->getPowerRequirement",
                        "getStatus": "Lcom/android/server/location/GpsLocationProvider;->getStatus",
                        "getInternalState": "Lcom/android/server/location/GpsLocationProvider;->getInternalState",
                        "getName": "Lcom/android/server/location/GpsLocationProvider;->getName",
                        "getStatusUpdateTime": "Lcom/android/server/location/GpsLocationProvider;->getStatusUpdateTime"
                    },
                    "LocationBasedCountryDetector$2": {
                        "run": "Lcom/android/server/location/LocationBasedCountryDetector$2;->run"
                    },
                    "LocationBasedCountryDetector": {
                        "detectCountry": "Lcom/android/server/location/LocationBasedCountryDetector;->detectCountry",
                        "getLastKnownLocation": "Lcom/android/server/location/LocationBasedCountryDetector;->getLastKnownLocation",
                        "getEnabledProviders": "Lcom/android/server/location/LocationBasedCountryDetector;->getEnabledProviders",
                        "registerListener": "Lcom/android/server/location/LocationBasedCountryDetector;->registerListener",
                        "setCountryListener": "Lcom/android/server/location/LocationBasedCountryDetector;->setCountryListener",
                        "getTotalEnabledProviders": "Lcom/android/server/location/LocationBasedCountryDetector;->getTotalEnabledProviders",
                        "getCountryFromLocation": "Lcom/android/server/location/LocationBasedCountryDetector;->getCountryFromLocation",
                        "getQueryLocationTimeout": "Lcom/android/server/location/LocationBasedCountryDetector;->getQueryLocationTimeout"
                    },
                    "LocationProviderInterface": {
                        "addListener": "Lcom/android/server/location/LocationProviderInterface;->addListener",
                        "disable": "Lcom/android/server/location/LocationProviderInterface;->disable",
                        "enable": "Lcom/android/server/location/LocationProviderInterface;->enable",
                        "enableLocationTracking": "Lcom/android/server/location/LocationProviderInterface;->enableLocationTracking",
                        "removeListener": "Lcom/android/server/location/LocationProviderInterface;->removeListener",
                        "updateLocation": "Lcom/android/server/location/LocationProviderInterface;->updateLocation",
                        "updateNetworkState": "Lcom/android/server/location/LocationProviderInterface;->updateNetworkState",
                        "isEnabled": "Lcom/android/server/location/LocationProviderInterface;->isEnabled",
                        "getAccuracy": "Lcom/android/server/location/LocationProviderInterface;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/server/location/LocationProviderInterface;->getPowerRequirement",
                        "getStatus": "Lcom/android/server/location/LocationProviderInterface;->getStatus",
                        "getInternalState": "Lcom/android/server/location/LocationProviderInterface;->getInternalState",
                        "getName": "Lcom/android/server/location/LocationProviderInterface;->getName",
                        "getStatusUpdateTime": "Lcom/android/server/location/LocationProviderInterface;->getStatusUpdateTime"
                    },
                    "PassiveProvider": {
                        "getProperties": "Lcom/android/server/location/PassiveProvider;->getProperties"
                    },
                    "LocationProviderProxy": {
                        "isEnabled": "Lcom/android/server/location/LocationProviderProxy;->isEnabled",
                        "isLocationTracking": "Lcom/android/server/location/LocationProviderProxy;->isLocationTracking",
                        "getAccuracy": "Lcom/android/server/location/LocationProviderProxy;->getAccuracy",
                        "getPowerRequirement": "Lcom/android/server/location/LocationProviderProxy;->getPowerRequirement",
                        "getStatus": "Lcom/android/server/location/LocationProviderProxy;->getStatus",
                        "getInternalState": "Lcom/android/server/location/LocationProviderProxy;->getInternalState",
                        "getName": "Lcom/android/server/location/LocationProviderProxy;->getName",
                        "getMinTime": "Lcom/android/server/location/LocationProviderProxy;->getMinTime",
                        "getStatusUpdateTime": "Lcom/android/server/location/LocationProviderProxy;->getStatusUpdateTime"
                    }
                },
                "LocationManagerService$1": {
                    "onReceive": "Lcom/android/server/LocationManagerService$1;->onReceive"
                },
                "LocationManagerService$2": {
                    "onHandleForceStop": "Lcom/android/server/LocationManagerService$2;->onHandleForceStop",
                    "onPackageRemoved": "Lcom/android/server/LocationManagerService$2;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/LocationManagerService$2;->onReceive",
                    "onSomePackagesChanged": "Lcom/android/server/LocationManagerService$2;->onSomePackagesChanged"
                },
                "LocationManagerService$ProximityListener": {
                    "onLocationChanged": "Lcom/android/server/LocationManagerService$ProximityListener;->onLocationChanged",
                    "onSendFinished": "Lcom/android/server/LocationManagerService$ProximityListener;->onSendFinished"
                },
                "LocationManagerService$Receiver": {
                    "callLocationChangedLocked": "Lcom/android/server/LocationManagerService$Receiver;->callLocationChangedLocked",
                    "callProviderEnabledLocked": "Lcom/android/server/LocationManagerService$Receiver;->callProviderEnabledLocked",
                    "callStatusChangedLocked": "Lcom/android/server/LocationManagerService$Receiver;->callStatusChangedLocked",
                    "binderDied": "Lcom/android/server/LocationManagerService$Receiver;->binderDied",
                    "decrementPendingBroadcastsLocked": "Lcom/android/server/LocationManagerService$Receiver;->decrementPendingBroadcastsLocked",
                    "incrementPendingBroadcastsLocked": "Lcom/android/server/LocationManagerService$Receiver;->incrementPendingBroadcastsLocked",
                    "onSendFinished": "Lcom/android/server/LocationManagerService$Receiver;->onSendFinished"
                },
                "LocationManagerService$SettingsObserver": {
                    "update": "Lcom/android/server/LocationManagerService$SettingsObserver;->update"
                },
                "LocationManagerService": {
                    "getLastKnownLocation": "Lcom/android/server/LocationManagerService;->getLastKnownLocation",
                    "_getLastKnownLocationLocked": "Lcom/android/server/LocationManagerService;->_getLastKnownLocationLocked",
                    "getProviderInfo": "Lcom/android/server/LocationManagerService;->getProviderInfo",
                    "_getProviderInfoLocked": "Lcom/android/server/LocationManagerService;->_getProviderInfoLocked",
                    "addGpsStatusListener": "Lcom/android/server/LocationManagerService;->addGpsStatusListener",
                    "isAllowedProviderSafe": "Lcom/android/server/LocationManagerService;->isAllowedProviderSafe",
                    "isProviderEnabled": "Lcom/android/server/LocationManagerService;->isProviderEnabled",
                    "_isProviderEnabledLocked": "Lcom/android/server/LocationManagerService;->_isProviderEnabledLocked",
                    "onTransact": "Lcom/android/server/LocationManagerService;->onTransact",
                    "sendExtraCommand": "Lcom/android/server/LocationManagerService;->sendExtraCommand",
                    "checkPermissionsSafe": "Lcom/android/server/LocationManagerService;->checkPermissionsSafe",
                    "getBestProvider": "Lcom/android/server/LocationManagerService;->getBestProvider",
                    "getProviders": "Lcom/android/server/LocationManagerService;->getProviders",
                    "_getProvidersLocked": "Lcom/android/server/LocationManagerService;->_getProvidersLocked",
                    "addProximityAlert": "Lcom/android/server/LocationManagerService;->addProximityAlert",
                    "addProximityAlertLocked": "Lcom/android/server/LocationManagerService;->addProximityAlertLocked",
                    "addTestProvider": "Lcom/android/server/LocationManagerService;->addTestProvider",
                    "checkMockPermissionsSafe": "Lcom/android/server/LocationManagerService;->checkMockPermissionsSafe",
                    "clearTestProviderEnabled": "Lcom/android/server/LocationManagerService;->clearTestProviderEnabled",
                    "clearTestProviderLocation": "Lcom/android/server/LocationManagerService;->clearTestProviderLocation",
                    "clearTestProviderStatus": "Lcom/android/server/LocationManagerService;->clearTestProviderStatus",
                    "decrementPendingBroadcasts": "Lcom/android/server/LocationManagerService;->decrementPendingBroadcasts",
                    "handleLocationChangedLocked": "Lcom/android/server/LocationManagerService;->handleLocationChangedLocked",
                    "incrementPendingBroadcasts": "Lcom/android/server/LocationManagerService;->incrementPendingBroadcasts",
                    "loadProviders": "Lcom/android/server/LocationManagerService;->loadProviders",
                    "_loadProvidersLocked": "Lcom/android/server/LocationManagerService;->_loadProvidersLocked",
                    "loadProvidersLocked": "Lcom/android/server/LocationManagerService;->loadProvidersLocked",
                    "removeTestProvider": "Lcom/android/server/LocationManagerService;->removeTestProvider",
                    "requestLocationUpdates": "Lcom/android/server/LocationManagerService;->requestLocationUpdates",
                    "requestLocationUpdatesLocked": "Lcom/android/server/LocationManagerService;->requestLocationUpdatesLocked",
                    "requestLocationUpdatesPI": "Lcom/android/server/LocationManagerService;->requestLocationUpdatesPI",
                    "setTestProviderEnabled": "Lcom/android/server/LocationManagerService;->setTestProviderEnabled",
                    "setTestProviderLocation": "Lcom/android/server/LocationManagerService;->setTestProviderLocation",
                    "setTestProviderStatus": "Lcom/android/server/LocationManagerService;->setTestProviderStatus",
                    "updateProviderListenersLocked": "Lcom/android/server/LocationManagerService;->updateProviderListenersLocked",
                    "updateProvidersLocked": "Lcom/android/server/LocationManagerService;->updateProvidersLocked",
                    "getFromLocation": "Lcom/android/server/LocationManagerService;->getFromLocation",
                    "getFromLocationName": "Lcom/android/server/LocationManagerService;->getFromLocationName",
                    "getAllProviders": "Lcom/android/server/LocationManagerService;->getAllProviders",
                    "addGnssMeasurementsListener": "Lcom/android/server/LocationManagerService;->addGnssMeasurementsListener",
                    "addGnssNavigationMessageListener": "Lcom/android/server/LocationManagerService;->addGnssNavigationMessageListener",
                    "addGpsMeasurementsListener": "Lcom/android/server/LocationManagerService;->addGpsMeasurementsListener",
                    "addGpsNavigationMessageListener": "Lcom/android/server/LocationManagerService;->addGpsNavigationMessageListener",
                    "getLastLocation": "Lcom/android/server/LocationManagerService;->getLastLocation",
                    "getProviderProperties": "Lcom/android/server/LocationManagerService;->getProviderProperties",
                    "registerGnssStatusCallback": "Lcom/android/server/LocationManagerService;->registerGnssStatusCallback",
                    "removeGeofence": "Lcom/android/server/LocationManagerService;->removeGeofence",
                    "removeUpdates": "Lcom/android/server/LocationManagerService;->removeUpdates",
                    "reportLocation": "Lcom/android/server/LocationManagerService;->reportLocation",
                    "requestGeofence": "Lcom/android/server/LocationManagerService;->requestGeofence"
                },
                "MountService$2": {
                    "run": "Lcom/android/server/MountService$2;->run"
                },
                "MountService": {
                    "onTransact": "Lcom/android/server/MountService;->onTransact",
                    "formatVolume": "Lcom/android/server/MountService;->formatVolume",
                    "getStorageUsers": "Lcom/android/server/MountService;->getStorageUsers",
                    "mountVolume": "Lcom/android/server/MountService;->mountVolume",
                    "finishMediaUpdate": "Lcom/android/server/MountService;->finishMediaUpdate",
                    "onDaemonConnected": "Lcom/android/server/MountService;->onDaemonConnected",
                    "setUsbMassStorageEnabled": "Lcom/android/server/MountService;->setUsbMassStorageEnabled",
                    "shutdown": "Lcom/android/server/MountService;->shutdown",
                    "unmountVolume": "Lcom/android/server/MountService;->unmountVolume",
                    "addUserKeyAuth": "Lcom/android/server/MountService;->addUserKeyAuth",
                    "benchmark": "Lcom/android/server/MountService;->benchmark",
                    "changeEncryptionPassword": "Lcom/android/server/MountService;->changeEncryptionPassword",
                    "clearPassword": "Lcom/android/server/MountService;->clearPassword",
                    "createSecureContainer": "Lcom/android/server/MountService;->createSecureContainer",
                    "createUserKey": "Lcom/android/server/MountService;->createUserKey",
                    "decryptStorage": "Lcom/android/server/MountService;->decryptStorage",
                    "destroySecureContainer": "Lcom/android/server/MountService;->destroySecureContainer",
                    "destroyUserKey": "Lcom/android/server/MountService;->destroyUserKey",
                    "destroyUserStorage": "Lcom/android/server/MountService;->destroyUserStorage",
                    "encryptStorage": "Lcom/android/server/MountService;->encryptStorage",
                    "finalizeSecureContainer": "Lcom/android/server/MountService;->finalizeSecureContainer",
                    "fixateNewestUserKeyAuth": "Lcom/android/server/MountService;->fixateNewestUserKeyAuth",
                    "fixPermissionsSecureContainer": "Lcom/android/server/MountService;->fixPermissionsSecureContainer",
                    "forgetAllVolumes": "Lcom/android/server/MountService;->forgetAllVolumes",
                    "forgetVolume": "Lcom/android/server/MountService;->forgetVolume",
                    "format": "Lcom/android/server/MountService;->format",
                    "getEncryptionState": "Lcom/android/server/MountService;->getEncryptionState",
                    "getField": "Lcom/android/server/MountService;->getField",
                    "getPassword": "Lcom/android/server/MountService;->getPassword",
                    "getPasswordType": "Lcom/android/server/MountService;->getPasswordType",
                    "getPrimaryStorageUuid": "Lcom/android/server/MountService;->getPrimaryStorageUuid",
                    "getSecureContainerFilesystemPath": "Lcom/android/server/MountService;->getSecureContainerFilesystemPath",
                    "getSecureContainerList": "Lcom/android/server/MountService;->getSecureContainerList",
                    "getSecureContainerPath": "Lcom/android/server/MountService;->getSecureContainerPath",
                    "getVolumeList": "Lcom/android/server/MountService;->getVolumeList",
                    "isConvertibleToFBE": "Lcom/android/server/MountService;->isConvertibleToFBE",
                    "isSecureContainerMounted": "Lcom/android/server/MountService;->isSecureContainerMounted",
                    "lockUserKey": "Lcom/android/server/MountService;->lockUserKey",
                    "mount": "Lcom/android/server/MountService;->mount",
                    "mountSecureContainer": "Lcom/android/server/MountService;->mountSecureContainer",
                    "partitionMixed": "Lcom/android/server/MountService;->partitionMixed",
                    "partitionPrivate": "Lcom/android/server/MountService;->partitionPrivate",
                    "partitionPublic": "Lcom/android/server/MountService;->partitionPublic",
                    "prepareUserStorage": "Lcom/android/server/MountService;->prepareUserStorage",
                    "renameSecureContainer": "Lcom/android/server/MountService;->renameSecureContainer",
                    "resizeSecureContainer": "Lcom/android/server/MountService;->resizeSecureContainer",
                    "runMaintenance": "Lcom/android/server/MountService;->runMaintenance",
                    "setDebugFlags": "Lcom/android/server/MountService;->setDebugFlags",
                    "setField": "Lcom/android/server/MountService;->setField",
                    "setPrimaryStorageUuid": "Lcom/android/server/MountService;->setPrimaryStorageUuid",
                    "setVolumeNickname": "Lcom/android/server/MountService;->setVolumeNickname",
                    "setVolumeUserFlags": "Lcom/android/server/MountService;->setVolumeUserFlags",
                    "unlockUserKey": "Lcom/android/server/MountService;->unlockUserKey",
                    "unmount": "Lcom/android/server/MountService;->unmount",
                    "unmountSecureContainer": "Lcom/android/server/MountService;->unmountSecureContainer",
                    "verifyEncryptionPassword": "Lcom/android/server/MountService;->verifyEncryptionPassword"
                },
                "NativeDaemonConnector": {
                    "listenToSocket": "Lcom/android/server/NativeDaemonConnector;->listenToSocket",
                    "run": "Lcom/android/server/NativeDaemonConnector;->run"
                },
                "net": {
                    "NetworkPolicyManagerService$10": {
                        "onReceive": "Lcom/android/server/net/NetworkPolicyManagerService$10;->onReceive"
                    },
                    "NetworkPolicyManagerService$4": {
                        "onReceive": "Lcom/android/server/net/NetworkPolicyManagerService$4;->onReceive"
                    },
                    "NetworkPolicyManagerService$5": {
                        "onReceive": "Lcom/android/server/net/NetworkPolicyManagerService$5;->onReceive"
                    },
                    "NetworkPolicyManagerService$6": {
                        "onReceive": "Lcom/android/server/net/NetworkPolicyManagerService$6;->onReceive"
                    },
                    "NetworkPolicyManagerService$8": {
                        "onReceive": "Lcom/android/server/net/NetworkPolicyManagerService$8;->onReceive"
                    },
                    "NetworkPolicyManagerService": {
                        "getNetworkPolicies": "Lcom/android/server/net/NetworkPolicyManagerService;->getNetworkPolicies",
                        "getNetworkQuotaInfo": "Lcom/android/server/net/NetworkPolicyManagerService;->getNetworkQuotaInfo",
                        "getNetworkQuotaInfoUnchecked": "Lcom/android/server/net/NetworkPolicyManagerService;->getNetworkQuotaInfoUnchecked",
                        "isNetworkMetered": "Lcom/android/server/net/NetworkPolicyManagerService;->isNetworkMetered",
                        "isTemplateRelevant": "Lcom/android/server/net/NetworkPolicyManagerService;->isTemplateRelevant",
                        "onTransact": "Lcom/android/server/net/NetworkPolicyManagerService;->onTransact",
                        "getUidsWithPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->getUidsWithPolicy",
                        "addNetworkPolicyLocked": "Lcom/android/server/net/NetworkPolicyManagerService;->addNetworkPolicyLocked",
                        "dump": "Lcom/android/server/net/NetworkPolicyManagerService;->dump",
                        "enqueueNotification": "Lcom/android/server/net/NetworkPolicyManagerService;->enqueueNotification",
                        "enqueueRestrictedNotification": "Lcom/android/server/net/NetworkPolicyManagerService;->enqueueRestrictedNotification",
                        "ensureActiveMobilePolicyLocked": "Lcom/android/server/net/NetworkPolicyManagerService;->ensureActiveMobilePolicyLocked",
                        "performSnooze": "Lcom/android/server/net/NetworkPolicyManagerService;->performSnooze",
                        "setNetworkPolicies": "Lcom/android/server/net/NetworkPolicyManagerService;->setNetworkPolicies",
                        "setNetworkTemplateEnabled": "Lcom/android/server/net/NetworkPolicyManagerService;->setNetworkTemplateEnabled",
                        "setRestrictBackground": "Lcom/android/server/net/NetworkPolicyManagerService;->setRestrictBackground",
                        "systemReady": "Lcom/android/server/net/NetworkPolicyManagerService;->systemReady",
                        "updateNetworkEnabledLocked": "Lcom/android/server/net/NetworkPolicyManagerService;->updateNetworkEnabledLocked",
                        "updateNetworkRulesLocked": "Lcom/android/server/net/NetworkPolicyManagerService;->updateNetworkRulesLocked",
                        "updateNotificationsLocked": "Lcom/android/server/net/NetworkPolicyManagerService;->updateNotificationsLocked",
                        "addRestrictBackgroundWhitelistedUid": "Lcom/android/server/net/NetworkPolicyManagerService;->addRestrictBackgroundWhitelistedUid",
                        "addUidPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->addUidPolicy",
                        "factoryReset": "Lcom/android/server/net/NetworkPolicyManagerService;->factoryReset",
                        "getAppPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->getAppPolicy",
                        "getAppsWithPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->getAppsWithPolicy",
                        "getPowerSaveAppIdWhitelist": "Lcom/android/server/net/NetworkPolicyManagerService;->getPowerSaveAppIdWhitelist",
                        "getRestrictBackground": "Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackground",
                        "getRestrictBackgroundByCaller": "Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackgroundByCaller",
                        "getRestrictBackgroundWhitelistedUids": "Lcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackgroundWhitelistedUids",
                        "getUidPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->getUidPolicy",
                        "isUidForeground": "Lcom/android/server/net/NetworkPolicyManagerService;->isUidForeground",
                        "onTetheringChanged": "Lcom/android/server/net/NetworkPolicyManagerService;->onTetheringChanged",
                        "registerListener": "Lcom/android/server/net/NetworkPolicyManagerService;->registerListener",
                        "removeRestrictBackgroundWhitelistedUid": "Lcom/android/server/net/NetworkPolicyManagerService;->removeRestrictBackgroundWhitelistedUid",
                        "removeUidPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->removeUidPolicy",
                        "setAppPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->setAppPolicy",
                        "setConnectivityListener": "Lcom/android/server/net/NetworkPolicyManagerService;->setConnectivityListener",
                        "setDeviceIdleMode": "Lcom/android/server/net/NetworkPolicyManagerService;->setDeviceIdleMode",
                        "setUidPolicy": "Lcom/android/server/net/NetworkPolicyManagerService;->setUidPolicy",
                        "snoozeLimit": "Lcom/android/server/net/NetworkPolicyManagerService;->snoozeLimit",
                        "unregisterListener": "Lcom/android/server/net/NetworkPolicyManagerService;->unregisterListener"
                    },
                    "NetworkStatsService$2": {
                        "onReceive": "Lcom/android/server/net/NetworkStatsService$2;->onReceive"
                    },
                    "NetworkStatsService$3": {
                        "onReceive": "Lcom/android/server/net/NetworkStatsService$3;->onReceive"
                    },
                    "NetworkStatsService$4": {
                        "onReceive": "Lcom/android/server/net/NetworkStatsService$4;->onReceive"
                    },
                    "NetworkStatsService$5": {
                        "onReceive": "Lcom/android/server/net/NetworkStatsService$5;->onReceive"
                    },
                    "NetworkStatsService$DefaultNetworkStatsSettings": {
                        "getPollInterval": "Lcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getPollInterval"
                    },
                    "NetworkStatsService": {
                        "getDataLayerSnapshotForUid": "Lcom/android/server/net/NetworkStatsService;->getDataLayerSnapshotForUid",
                        "getNetworkStatsTethering": "Lcom/android/server/net/NetworkStatsService;->getNetworkStatsTethering",
                        "getNetworkStatsUidDetail": "Lcom/android/server/net/NetworkStatsService;->getNetworkStatsUidDetail",
                        "onTransact": "Lcom/android/server/net/NetworkStatsService;->onTransact",
                        "bootstrapStatsLocked": "Lcom/android/server/net/NetworkStatsService;->bootstrapStatsLocked",
                        "dump": "Lcom/android/server/net/NetworkStatsService;->dump",
                        "performPoll": "Lcom/android/server/net/NetworkStatsService;->performPoll",
                        "performPollLocked": "Lcom/android/server/net/NetworkStatsService;->performPollLocked",
                        "removeUidLocked": "Lcom/android/server/net/NetworkStatsService;->removeUidLocked",
                        "systemReady": "Lcom/android/server/net/NetworkStatsService;->systemReady",
                        "updateIfaces": "Lcom/android/server/net/NetworkStatsService;->updateIfaces",
                        "updateIfacesLocked": "Lcom/android/server/net/NetworkStatsService;->updateIfacesLocked",
                        "advisePersistThreshold": "Lcom/android/server/net/NetworkStatsService;->advisePersistThreshold",
                        "forceUpdate": "Lcom/android/server/net/NetworkStatsService;->forceUpdate",
                        "forceUpdateIfaces": "Lcom/android/server/net/NetworkStatsService;->forceUpdateIfaces",
                        "getNetworkTotalBytes": "Lcom/android/server/net/NetworkStatsService;->getNetworkTotalBytes",
                        "incrementOperationCount": "Lcom/android/server/net/NetworkStatsService;->incrementOperationCount",
                        "openSession": "Lcom/android/server/net/NetworkStatsService;->openSession",
                        "registerUsageCallback": "Lcom/android/server/net/NetworkStatsService;->registerUsageCallback",
                        "setUidForeground": "Lcom/android/server/net/NetworkStatsService;->setUidForeground"
                    }
                },
                "NetworkManagementService": {
                    "getNetworkStatsTethering": "Lcom/android/server/NetworkManagementService;->getNetworkStatsTethering",
                    "addIdleTimer": "Lcom/android/server/NetworkManagementService;->addIdleTimer",
                    "addInterfaceToLocalNetwork": "Lcom/android/server/NetworkManagementService;->addInterfaceToLocalNetwork",
                    "addInterfaceToNetwork": "Lcom/android/server/NetworkManagementService;->addInterfaceToNetwork",
                    "addLegacyRouteForNetId": "Lcom/android/server/NetworkManagementService;->addLegacyRouteForNetId",
                    "addRoute": "Lcom/android/server/NetworkManagementService;->addRoute",
                    "addSecondaryRoute": "Lcom/android/server/NetworkManagementService;->addSecondaryRoute",
                    "addVpnUidRanges": "Lcom/android/server/NetworkManagementService;->addVpnUidRanges",
                    "allowProtect": "Lcom/android/server/NetworkManagementService;->allowProtect",
                    "attachPppd": "Lcom/android/server/NetworkManagementService;->attachPppd",
                    "clearDefaultNetId": "Lcom/android/server/NetworkManagementService;->clearDefaultNetId",
                    "clearDnsInterfaceForPid": "Lcom/android/server/NetworkManagementService;->clearDnsInterfaceForPid",
                    "clearDnsInterfaceForUidRange": "Lcom/android/server/NetworkManagementService;->clearDnsInterfaceForUidRange",
                    "clearDnsInterfaceMaps": "Lcom/android/server/NetworkManagementService;->clearDnsInterfaceMaps",
                    "clearHostExemption": "Lcom/android/server/NetworkManagementService;->clearHostExemption",
                    "clearInterfaceAddresses": "Lcom/android/server/NetworkManagementService;->clearInterfaceAddresses",
                    "clearMarkedForwarding": "Lcom/android/server/NetworkManagementService;->clearMarkedForwarding",
                    "clearMarkedForwardingRoute": "Lcom/android/server/NetworkManagementService;->clearMarkedForwardingRoute",
                    "clearPermission": "Lcom/android/server/NetworkManagementService;->clearPermission",
                    "clearUidRangeRoute": "Lcom/android/server/NetworkManagementService;->clearUidRangeRoute",
                    "createPhysicalNetwork": "Lcom/android/server/NetworkManagementService;->createPhysicalNetwork",
                    "createVirtualNetwork": "Lcom/android/server/NetworkManagementService;->createVirtualNetwork",
                    "denyProtect": "Lcom/android/server/NetworkManagementService;->denyProtect",
                    "detachPppd": "Lcom/android/server/NetworkManagementService;->detachPppd",
                    "disableIpv6": "Lcom/android/server/NetworkManagementService;->disableIpv6",
                    "disableNat": "Lcom/android/server/NetworkManagementService;->disableNat",
                    "enableIpv6": "Lcom/android/server/NetworkManagementService;->enableIpv6",
                    "enableNat": "Lcom/android/server/NetworkManagementService;->enableNat",
                    "flushDefaultDnsCache": "Lcom/android/server/NetworkManagementService;->flushDefaultDnsCache",
                    "flushInterfaceDnsCache": "Lcom/android/server/NetworkManagementService;->flushInterfaceDnsCache",
                    "flushNetworkDnsCache": "Lcom/android/server/NetworkManagementService;->flushNetworkDnsCache",
                    "getDnsForwarders": "Lcom/android/server/NetworkManagementService;->getDnsForwarders",
                    "getInterfaceConfig": "Lcom/android/server/NetworkManagementService;->getInterfaceConfig",
                    "getInterfaceRxThrottle": "Lcom/android/server/NetworkManagementService;->getInterfaceRxThrottle",
                    "getInterfaceTxThrottle": "Lcom/android/server/NetworkManagementService;->getInterfaceTxThrottle",
                    "getIpForwardingEnabled": "Lcom/android/server/NetworkManagementService;->getIpForwardingEnabled",
                    "getMarkForProtect": "Lcom/android/server/NetworkManagementService;->getMarkForProtect",
                    "getMarkForUid": "Lcom/android/server/NetworkManagementService;->getMarkForUid",
                    "getNetworkStatsDetail": "Lcom/android/server/NetworkManagementService;->getNetworkStatsDetail",
                    "getNetworkStatsSummaryDev": "Lcom/android/server/NetworkManagementService;->getNetworkStatsSummaryDev",
                    "getNetworkStatsSummaryXt": "Lcom/android/server/NetworkManagementService;->getNetworkStatsSummaryXt",
                    "getNetworkStatsUidDetail": "Lcom/android/server/NetworkManagementService;->getNetworkStatsUidDetail",
                    "getRoutes": "Lcom/android/server/NetworkManagementService;->getRoutes",
                    "isBandwidthControlEnabled": "Lcom/android/server/NetworkManagementService;->isBandwidthControlEnabled",
                    "isClatdStarted": "Lcom/android/server/NetworkManagementService;->isClatdStarted",
                    "isTetheringStarted": "Lcom/android/server/NetworkManagementService;->isTetheringStarted",
                    "listInterfaces": "Lcom/android/server/NetworkManagementService;->listInterfaces",
                    "listTetheredInterfaces": "Lcom/android/server/NetworkManagementService;->listTetheredInterfaces",
                    "listTtys": "Lcom/android/server/NetworkManagementService;->listTtys",
                    "registerObserver": "Lcom/android/server/NetworkManagementService;->registerObserver",
                    "removeIdleTimer": "Lcom/android/server/NetworkManagementService;->removeIdleTimer",
                    "removeInterfaceAlert": "Lcom/android/server/NetworkManagementService;->removeInterfaceAlert",
                    "removeInterfaceFromLocalNetwork": "Lcom/android/server/NetworkManagementService;->removeInterfaceFromLocalNetwork",
                    "removeInterfaceFromNetwork": "Lcom/android/server/NetworkManagementService;->removeInterfaceFromNetwork",
                    "removeInterfaceQuota": "Lcom/android/server/NetworkManagementService;->removeInterfaceQuota",
                    "removeNetwork": "Lcom/android/server/NetworkManagementService;->removeNetwork",
                    "removeRoute": "Lcom/android/server/NetworkManagementService;->removeRoute",
                    "removeRoutesFromLocalNetwork": "Lcom/android/server/NetworkManagementService;->removeRoutesFromLocalNetwork",
                    "removeSecondaryRoute": "Lcom/android/server/NetworkManagementService;->removeSecondaryRoute",
                    "removeVpnUidRanges": "Lcom/android/server/NetworkManagementService;->removeVpnUidRanges",
                    "setAccessPoint": "Lcom/android/server/NetworkManagementService;->setAccessPoint",
                    "setDefaultInterfaceForDns": "Lcom/android/server/NetworkManagementService;->setDefaultInterfaceForDns",
                    "setDefaultNetId": "Lcom/android/server/NetworkManagementService;->setDefaultNetId",
                    "setDnsConfigurationForNetwork": "Lcom/android/server/NetworkManagementService;->setDnsConfigurationForNetwork",
                    "setDnsForwarders": "Lcom/android/server/NetworkManagementService;->setDnsForwarders",
                    "setDnsInterfaceForPid": "Lcom/android/server/NetworkManagementService;->setDnsInterfaceForPid",
                    "setDnsInterfaceForUidRange": "Lcom/android/server/NetworkManagementService;->setDnsInterfaceForUidRange",
                    "setDnsServersForInterface": "Lcom/android/server/NetworkManagementService;->setDnsServersForInterface",
                    "setDnsServersForNetwork": "Lcom/android/server/NetworkManagementService;->setDnsServersForNetwork",
                    "setGlobalAlert": "Lcom/android/server/NetworkManagementService;->setGlobalAlert",
                    "setHostExemption": "Lcom/android/server/NetworkManagementService;->setHostExemption",
                    "setInterfaceAlert": "Lcom/android/server/NetworkManagementService;->setInterfaceAlert",
                    "setInterfaceConfig": "Lcom/android/server/NetworkManagementService;->setInterfaceConfig",
                    "setInterfaceDown": "Lcom/android/server/NetworkManagementService;->setInterfaceDown",
                    "setInterfaceIpv6NdOffload": "Lcom/android/server/NetworkManagementService;->setInterfaceIpv6NdOffload",
                    "setInterfaceIpv6PrivacyExtensions": "Lcom/android/server/NetworkManagementService;->setInterfaceIpv6PrivacyExtensions",
                    "setInterfaceQuota": "Lcom/android/server/NetworkManagementService;->setInterfaceQuota",
                    "setInterfaceThrottle": "Lcom/android/server/NetworkManagementService;->setInterfaceThrottle",
                    "setInterfaceUp": "Lcom/android/server/NetworkManagementService;->setInterfaceUp",
                    "setIpForwardingEnabled": "Lcom/android/server/NetworkManagementService;->setIpForwardingEnabled",
                    "setMarkedForwarding": "Lcom/android/server/NetworkManagementService;->setMarkedForwarding",
                    "setMarkedForwardingRoute": "Lcom/android/server/NetworkManagementService;->setMarkedForwardingRoute",
                    "setMtu": "Lcom/android/server/NetworkManagementService;->setMtu",
                    "setNetworkPermission": "Lcom/android/server/NetworkManagementService;->setNetworkPermission",
                    "setPermission": "Lcom/android/server/NetworkManagementService;->setPermission",
                    "setUidCleartextNetworkPolicy": "Lcom/android/server/NetworkManagementService;->setUidCleartextNetworkPolicy",
                    "setUidMeteredNetworkBlacklist": "Lcom/android/server/NetworkManagementService;->setUidMeteredNetworkBlacklist",
                    "setUidMeteredNetworkWhitelist": "Lcom/android/server/NetworkManagementService;->setUidMeteredNetworkWhitelist",
                    "setUidNetworkRules": "Lcom/android/server/NetworkManagementService;->setUidNetworkRules",
                    "setUidRangeRoute": "Lcom/android/server/NetworkManagementService;->setUidRangeRoute",
                    "shutdown": "Lcom/android/server/NetworkManagementService;->shutdown",
                    "startAccessPoint": "Lcom/android/server/NetworkManagementService;->startAccessPoint",
                    "startClatd": "Lcom/android/server/NetworkManagementService;->startClatd",
                    "startInterfaceForwarding": "Lcom/android/server/NetworkManagementService;->startInterfaceForwarding",
                    "startReverseTethering": "Lcom/android/server/NetworkManagementService;->startReverseTethering",
                    "startTethering": "Lcom/android/server/NetworkManagementService;->startTethering",
                    "stopAccessPoint": "Lcom/android/server/NetworkManagementService;->stopAccessPoint",
                    "stopClatd": "Lcom/android/server/NetworkManagementService;->stopClatd",
                    "stopInterfaceForwarding": "Lcom/android/server/NetworkManagementService;->stopInterfaceForwarding",
                    "stopReverseTethering": "Lcom/android/server/NetworkManagementService;->stopReverseTethering",
                    "stopTethering": "Lcom/android/server/NetworkManagementService;->stopTethering",
                    "tetherInterface": "Lcom/android/server/NetworkManagementService;->tetherInterface",
                    "unregisterObserver": "Lcom/android/server/NetworkManagementService;->unregisterObserver",
                    "untetherInterface": "Lcom/android/server/NetworkManagementService;->untetherInterface",
                    "wifiFirmwareReload": "Lcom/android/server/NetworkManagementService;->wifiFirmwareReload"
                },
                "NetworkTimeUpdateService$3": {
                    "onReceive": "Lcom/android/server/NetworkTimeUpdateService$3;->onReceive"
                },
                "NetworkTimeUpdateService$SettingsObserver": {
                    "observe": "Lcom/android/server/NetworkTimeUpdateService$SettingsObserver;->observe"
                },
                "NetworkTimeUpdateService": {
                    "systemReady": "Lcom/android/server/NetworkTimeUpdateService;->systemReady"
                },
                "NotificationManagerService$SettingsObserver": {
                    "observe": "Lcom/android/server/NotificationManagerService$SettingsObserver;->observe"
                },
                "NotificationManagerService": {
                    "onTransact": "Lcom/android/server/NotificationManagerService;->onTransact",
                    "enqueueNotificationInternal": "Lcom/android/server/NotificationManagerService;->enqueueNotificationInternal",
                    "enqueueNotification": "Lcom/android/server/NotificationManagerService;->enqueueNotification",
                    "enqueueNotificationWithTag": "Lcom/android/server/NotificationManagerService;->enqueueNotificationWithTag",
                    "<init>": "Lcom/android/server/NotificationManagerService;-><init>",
                    "getActiveNotifications": "Lcom/android/server/NotificationManagerService;->getActiveNotifications",
                    "getHistoricalNotifications": "Lcom/android/server/NotificationManagerService;->getHistoricalNotifications"
                },
                "NsdService$NsdStateMachine$DefaultState": {
                    "enter": "Lcom/android/server/NsdService$NsdStateMachine$DefaultState;->enter",
                    "exit": "Lcom/android/server/NsdService$NsdStateMachine$DefaultState;->exit"
                },
                "NsdService$NsdStateMachine$DisabledState": {
                    "enter": "Lcom/android/server/NsdService$NsdStateMachine$DisabledState;->enter",
                    "exit": "Lcom/android/server/NsdService$NsdStateMachine$DisabledState;->exit"
                },
                "NsdService$NsdStateMachine$EnabledState": {
                    "enter": "Lcom/android/server/NsdService$NsdStateMachine$EnabledState;->enter"
                },
                "NsdService$NsdStateMachine": {
                    "<init>": "Lcom/android/server/NsdService$NsdStateMachine;-><init>",
                    "registerForNsdSetting": "Lcom/android/server/NsdService$NsdStateMachine;->registerForNsdSetting"
                },
                "NsdService": {
                    "getMessenger": "Lcom/android/server/NsdService;->getMessenger",
                    "onTransact": "Lcom/android/server/NsdService;->onTransact",
                    "create": "Lcom/android/server/NsdService;->create",
                    "<init>": "Lcom/android/server/NsdService;-><init>",
                    "sendNsdStateChangeBroadcast": "Lcom/android/server/NsdService;->sendNsdStateChangeBroadcast",
                    "setEnabled": "Lcom/android/server/NsdService;->setEnabled"
                },
                "pm": {
                    "PackageManagerService$10": {
                        "run": "Lcom/android/server/pm/PackageManagerService$10;->run"
                    },
                    "PackageManagerService$5": {
                        "run": "Lcom/android/server/pm/PackageManagerService$5;->run"
                    },
                    "PackageManagerService$7": {
                        "run": "Lcom/android/server/pm/PackageManagerService$7;->run"
                    },
                    "PackageManagerService$ActivityIntentResolver": {
                        "newArray": "Lcom/android/server/pm/PackageManagerService$ActivityIntentResolver;->newArray"
                    },
                    "PackageManagerService$AppDirObserver": {
                        "onEvent": "Lcom/android/server/pm/PackageManagerService$AppDirObserver;->onEvent"
                    },
                    "PackageManagerService": {
                        "getReceiverInfo": "Lcom/android/server/pm/PackageManagerService;->getReceiverInfo",
                        "main": "Lcom/android/server/pm/PackageManagerService;->main",
                        "scanPackageLI": "Lcom/android/server/pm/PackageManagerService;->scanPackageLI",
                        "deletePackageLI": "Lcom/android/server/pm/PackageManagerService;->deletePackageLI",
                        "deleteSystemPackageLI": "Lcom/android/server/pm/PackageManagerService;->deleteSystemPackageLI",
                        "onTransact": "Lcom/android/server/pm/PackageManagerService;->onTransact",
                        "setInstallLocation": "Lcom/android/server/pm/PackageManagerService;->setInstallLocation",
                        "deletePackageX": "Lcom/android/server/pm/PackageManagerService;->deletePackageX",
                        "getPackageGids": "Lcom/android/server/pm/PackageManagerService;->getPackageGids",
                        "freeStorageAndNotify": "Lcom/android/server/pm/PackageManagerService;->freeStorageAndNotify",
                        "freeStorage": "Lcom/android/server/pm/PackageManagerService;->freeStorage",
                        "getPackageSizeInfo": "Lcom/android/server/pm/PackageManagerService;->getPackageSizeInfo",
                        "<init>": "Lcom/android/server/pm/PackageManagerService;-><init>",
                        "installNewPackageLI": "Lcom/android/server/pm/PackageManagerService;->installNewPackageLI",
                        "installPackageLI": "Lcom/android/server/pm/PackageManagerService;->installPackageLI",
                        "killApplication": "Lcom/android/server/pm/PackageManagerService;->killApplication",
                        "loadMediaPackages": "Lcom/android/server/pm/PackageManagerService;->loadMediaPackages",
                        "replaceNonSystemPackageLI": "Lcom/android/server/pm/PackageManagerService;->replaceNonSystemPackageLI",
                        "replacePackageLI": "Lcom/android/server/pm/PackageManagerService;->replacePackageLI",
                        "replaceSystemPackageLI": "Lcom/android/server/pm/PackageManagerService;->replaceSystemPackageLI",
                        "scanAvailableAsecs": "Lcom/android/server/pm/PackageManagerService;->scanAvailableAsecs",
                        "scanDirLI": "Lcom/android/server/pm/PackageManagerService;->scanDirLI",
                        "unloadMediaPackages": "Lcom/android/server/pm/PackageManagerService;->unloadMediaPackages",
                        "updateExternalMediaStatusInner": "Lcom/android/server/pm/PackageManagerService;->updateExternalMediaStatusInner",
                        "addCrossProfileIntentFilter": "Lcom/android/server/pm/PackageManagerService;->addCrossProfileIntentFilter",
                        "addOnPermissionsChangeListener": "Lcom/android/server/pm/PackageManagerService;->addOnPermissionsChangeListener",
                        "addPreferredActivity": "Lcom/android/server/pm/PackageManagerService;->addPreferredActivity",
                        "canForwardTo": "Lcom/android/server/pm/PackageManagerService;->canForwardTo",
                        "clearApplicationUserData": "Lcom/android/server/pm/PackageManagerService;->clearApplicationUserData",
                        "clearCrossProfileIntentFilters": "Lcom/android/server/pm/PackageManagerService;->clearCrossProfileIntentFilters",
                        "clearPackagePreferredActivities": "Lcom/android/server/pm/PackageManagerService;->clearPackagePreferredActivities",
                        "deleteApplicationCacheFiles": "Lcom/android/server/pm/PackageManagerService;->deleteApplicationCacheFiles",
                        "deleteApplicationCacheFilesAsUser": "Lcom/android/server/pm/PackageManagerService;->deleteApplicationCacheFilesAsUser",
                        "deletePackage": "Lcom/android/server/pm/PackageManagerService;->deletePackage",
                        "deletePackageAsUser": "Lcom/android/server/pm/PackageManagerService;->deletePackageAsUser",
                        "extendVerificationTimeout": "Lcom/android/server/pm/PackageManagerService;->extendVerificationTimeout",
                        "flushPackageRestrictionsAsUser": "Lcom/android/server/pm/PackageManagerService;->flushPackageRestrictionsAsUser",
                        "getActivityInfo": "Lcom/android/server/pm/PackageManagerService;->getActivityInfo",
                        "getApplicationBlockedSettingAsUser": "Lcom/android/server/pm/PackageManagerService;->getApplicationBlockedSettingAsUser",
                        "getApplicationEnabledSetting": "Lcom/android/server/pm/PackageManagerService;->getApplicationEnabledSetting",
                        "getApplicationHiddenSettingAsUser": "Lcom/android/server/pm/PackageManagerService;->getApplicationHiddenSettingAsUser",
                        "getApplicationInfo": "Lcom/android/server/pm/PackageManagerService;->getApplicationInfo",
                        "getComponentEnabledSetting": "Lcom/android/server/pm/PackageManagerService;->getComponentEnabledSetting",
                        "getHomeActivities": "Lcom/android/server/pm/PackageManagerService;->getHomeActivities",
                        "getInstalledPackages": "Lcom/android/server/pm/PackageManagerService;->getInstalledPackages",
                        "getLastChosenActivity": "Lcom/android/server/pm/PackageManagerService;->getLastChosenActivity",
                        "getMoveStatus": "Lcom/android/server/pm/PackageManagerService;->getMoveStatus",
                        "getPackageInfo": "Lcom/android/server/pm/PackageManagerService;->getPackageInfo",
                        "getPackageUid": "Lcom/android/server/pm/PackageManagerService;->getPackageUid",
                        "getPermissionFlags": "Lcom/android/server/pm/PackageManagerService;->getPermissionFlags",
                        "getProviderInfo": "Lcom/android/server/pm/PackageManagerService;->getProviderInfo",
                        "getServiceInfo": "Lcom/android/server/pm/PackageManagerService;->getServiceInfo",
                        "getVerifierDeviceIdentity": "Lcom/android/server/pm/PackageManagerService;->getVerifierDeviceIdentity",
                        "grantPermission": "Lcom/android/server/pm/PackageManagerService;->grantPermission",
                        "grantRuntimePermission": "Lcom/android/server/pm/PackageManagerService;->grantRuntimePermission",
                        "installExistingPackage": "Lcom/android/server/pm/PackageManagerService;->installExistingPackage",
                        "installExistingPackageAsUser": "Lcom/android/server/pm/PackageManagerService;->installExistingPackageAsUser",
                        "installPackage": "Lcom/android/server/pm/PackageManagerService;->installPackage",
                        "installPackageAsUser": "Lcom/android/server/pm/PackageManagerService;->installPackageAsUser",
                        "installPackageWithVerification": "Lcom/android/server/pm/PackageManagerService;->installPackageWithVerification",
                        "installPackageWithVerificationAndEncryption": "Lcom/android/server/pm/PackageManagerService;->installPackageWithVerificationAndEncryption",
                        "isEphemeralApplication": "Lcom/android/server/pm/PackageManagerService;->isEphemeralApplication",
                        "isPackageAvailable": "Lcom/android/server/pm/PackageManagerService;->isPackageAvailable",
                        "isPackageSuspendedForUser": "Lcom/android/server/pm/PackageManagerService;->isPackageSuspendedForUser",
                        "isPermissionRevokedByPolicy": "Lcom/android/server/pm/PackageManagerService;->isPermissionRevokedByPolicy",
                        "movePackage": "Lcom/android/server/pm/PackageManagerService;->movePackage",
                        "movePrimaryStorage": "Lcom/android/server/pm/PackageManagerService;->movePrimaryStorage",
                        "queryIntentActivities": "Lcom/android/server/pm/PackageManagerService;->queryIntentActivities",
                        "queryIntentActivityOptions": "Lcom/android/server/pm/PackageManagerService;->queryIntentActivityOptions",
                        "queryIntentContentProviders": "Lcom/android/server/pm/PackageManagerService;->queryIntentContentProviders",
                        "queryIntentReceivers": "Lcom/android/server/pm/PackageManagerService;->queryIntentReceivers",
                        "queryIntentServices": "Lcom/android/server/pm/PackageManagerService;->queryIntentServices",
                        "registerMoveCallback": "Lcom/android/server/pm/PackageManagerService;->registerMoveCallback",
                        "replacePreferredActivity": "Lcom/android/server/pm/PackageManagerService;->replacePreferredActivity",
                        "resetApplicationPreferences": "Lcom/android/server/pm/PackageManagerService;->resetApplicationPreferences",
                        "resetPreferredActivities": "Lcom/android/server/pm/PackageManagerService;->resetPreferredActivities",
                        "resetRuntimePermissions": "Lcom/android/server/pm/PackageManagerService;->resetRuntimePermissions",
                        "resolveIntent": "Lcom/android/server/pm/PackageManagerService;->resolveIntent",
                        "resolveService": "Lcom/android/server/pm/PackageManagerService;->resolveService",
                        "revokePermission": "Lcom/android/server/pm/PackageManagerService;->revokePermission",
                        "revokeRuntimePermission": "Lcom/android/server/pm/PackageManagerService;->revokeRuntimePermission",
                        "setApplicationBlockedSettingAsUser": "Lcom/android/server/pm/PackageManagerService;->setApplicationBlockedSettingAsUser",
                        "setApplicationEnabledSetting": "Lcom/android/server/pm/PackageManagerService;->setApplicationEnabledSetting",
                        "setApplicationHiddenSettingAsUser": "Lcom/android/server/pm/PackageManagerService;->setApplicationHiddenSettingAsUser",
                        "setBlockUninstallForUser": "Lcom/android/server/pm/PackageManagerService;->setBlockUninstallForUser",
                        "setComponentEnabledSetting": "Lcom/android/server/pm/PackageManagerService;->setComponentEnabledSetting",
                        "setDefaultBrowserPackageName": "Lcom/android/server/pm/PackageManagerService;->setDefaultBrowserPackageName",
                        "setHomeActivity": "Lcom/android/server/pm/PackageManagerService;->setHomeActivity",
                        "setLastChosenActivity": "Lcom/android/server/pm/PackageManagerService;->setLastChosenActivity",
                        "setPackagesSuspendedAsUser": "Lcom/android/server/pm/PackageManagerService;->setPackagesSuspendedAsUser",
                        "setPackageStoppedState": "Lcom/android/server/pm/PackageManagerService;->setPackageStoppedState",
                        "setPermissionEnforced": "Lcom/android/server/pm/PackageManagerService;->setPermissionEnforced",
                        "shouldShowRequestPermissionRationale": "Lcom/android/server/pm/PackageManagerService;->shouldShowRequestPermissionRationale",
                        "systemReady": "Lcom/android/server/pm/PackageManagerService;->systemReady",
                        "unregisterMoveCallback": "Lcom/android/server/pm/PackageManagerService;->unregisterMoveCallback",
                        "updateExternalMediaStatus": "Lcom/android/server/pm/PackageManagerService;->updateExternalMediaStatus",
                        "updateIntentVerificationStatus": "Lcom/android/server/pm/PackageManagerService;->updateIntentVerificationStatus",
                        "updatePermissionFlags": "Lcom/android/server/pm/PackageManagerService;->updatePermissionFlags",
                        "updatePermissionFlagsForAllApps": "Lcom/android/server/pm/PackageManagerService;->updatePermissionFlagsForAllApps",
                        "verifyIntentFilter": "Lcom/android/server/pm/PackageManagerService;->verifyIntentFilter",
                        "verifyPendingInstall": "Lcom/android/server/pm/PackageManagerService;->verifyPendingInstall"
                    },
                    "ShutdownThread$1": {
                        "onClick": "Lcom/android/server/pm/ShutdownThread$1;->onClick"
                    },
                    "ShutdownThread$5": {
                        "run": "Lcom/android/server/pm/ShutdownThread$5;->run"
                    },
                    "ShutdownThread": {
                        "beginShutdownSequence": "Lcom/android/server/pm/ShutdownThread;->beginShutdownSequence",
                        "reboot": "Lcom/android/server/pm/ShutdownThread;->reboot",
                        "rebootOrShutdown": "Lcom/android/server/pm/ShutdownThread;->rebootOrShutdown",
                        "rebootSafeMode": "Lcom/android/server/pm/ShutdownThread;->rebootSafeMode",
                        "run": "Lcom/android/server/pm/ShutdownThread;->run",
                        "shutdown": "Lcom/android/server/pm/ShutdownThread;->shutdown",
                        "shutdownInner": "Lcom/android/server/pm/ShutdownThread;->shutdownInner"
                    },
                    "PackageInstallerService": {
                        "createSession": "Lcom/android/server/pm/PackageInstallerService;->createSession",
                        "getAllSessions": "Lcom/android/server/pm/PackageInstallerService;->getAllSessions",
                        "getMySessions": "Lcom/android/server/pm/PackageInstallerService;->getMySessions",
                        "registerCallback": "Lcom/android/server/pm/PackageInstallerService;->registerCallback",
                        "setPermissionsResult": "Lcom/android/server/pm/PackageInstallerService;->setPermissionsResult",
                        "uninstall": "Lcom/android/server/pm/PackageInstallerService;->uninstall"
                    },
                    "ShortcutService": {
                        "onApplicationActive": "Lcom/android/server/pm/ShortcutService;->onApplicationActive"
                    }
                },
                "PowerManagerService$10": {
                    "run": "Lcom/android/server/PowerManagerService$10;->run"
                },
                "PowerManagerService$4": {
                    "run": "Lcom/android/server/PowerManagerService$4;->run"
                },
                "PowerManagerService": {
                    "onTransact": "Lcom/android/server/PowerManagerService;->onTransact",
                    "acquireWakeLock": "Lcom/android/server/PowerManagerService;->acquireWakeLock",
                    "releaseWakeLock": "Lcom/android/server/PowerManagerService;->releaseWakeLock",
                    "setStayOnSetting": "Lcom/android/server/PowerManagerService;->setStayOnSetting",
                    "clearUserActivityTimeout": "Lcom/android/server/PowerManagerService;->clearUserActivityTimeout",
                    "crash": "Lcom/android/server/PowerManagerService;->crash",
                    "goToSleep": "Lcom/android/server/PowerManagerService;->goToSleep",
                    "goToSleepWithReason": "Lcom/android/server/PowerManagerService;->goToSleepWithReason",
                    "preventScreenOn": "Lcom/android/server/PowerManagerService;->preventScreenOn",
                    "reboot": "Lcom/android/server/PowerManagerService;->reboot",
                    "setAttentionLight": "Lcom/android/server/PowerManagerService;->setAttentionLight",
                    "setAutoBrightnessAdjustment": "Lcom/android/server/PowerManagerService;->setAutoBrightnessAdjustment",
                    "setBacklightBrightness": "Lcom/android/server/PowerManagerService;->setBacklightBrightness",
                    "setMaximumScreenOffTimeount": "Lcom/android/server/PowerManagerService;->setMaximumScreenOffTimeount",
                    "setPokeLock": "Lcom/android/server/PowerManagerService;->setPokeLock",
                    "updateWakeLockWorkSource": "Lcom/android/server/PowerManagerService;->updateWakeLockWorkSource",
                    "userActivity": "Lcom/android/server/PowerManagerService;->userActivity",
                    "userActivityWithForce": "Lcom/android/server/PowerManagerService;->userActivityWithForce"
                },
                "ProcessMap": {
                    "get": "Lcom/android/server/ProcessMap;->get"
                },
                "RecognitionManagerService$MyPackageMonitor": {
                    "onHandleForceStop": "Lcom/android/server/RecognitionManagerService$MyPackageMonitor;->onHandleForceStop",
                    "onPackageRemoved": "Lcom/android/server/RecognitionManagerService$MyPackageMonitor;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/RecognitionManagerService$MyPackageMonitor;->onReceive",
                    "onSomePackagesChanged": "Lcom/android/server/RecognitionManagerService$MyPackageMonitor;->onSomePackagesChanged"
                },
                "RecognitionManagerService": {
                    "setCurRecognizer": "Lcom/android/server/RecognitionManagerService;->setCurRecognizer",
                    "systemReady": "Lcom/android/server/RecognitionManagerService;->systemReady"
                },
                "SamplingProfilerService": {
                    "<init>": "Lcom/android/server/SamplingProfilerService;-><init>",
                    "registerSettingObserver": "Lcom/android/server/SamplingProfilerService;->registerSettingObserver"
                },
                "SerialService": {
                    "openSerialPort": "Lcom/android/server/SerialService;->openSerialPort",
                    "onTransact": "Lcom/android/server/SerialService;->onTransact",
                    "getSerialPorts": "Lcom/android/server/SerialService;->getSerialPorts"
                },
                "ServerThread$1": {
                    "run": "Lcom/android/server/ServerThread$1;->run"
                },
                "ServerThread": {
                    "run": "Lcom/android/server/ServerThread;->run"
                },
                "ShutdownActivity$1": {
                    "run": "Lcom/android/server/ShutdownActivity$1;->run"
                },
                "sip": {
                    "SipService$AutoRegistrationProcess": {
                        "notCurrentSession": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->notCurrentSession",
                        "onError": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onError",
                        "onRegistering": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onRegistering",
                        "onRegistrationDone": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onRegistrationDone",
                        "onRegistrationFailed": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onRegistrationFailed",
                        "onRegistrationTimeout": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onRegistrationTimeout",
                        "onResponse": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->onResponse",
                        "run": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->run",
                        "start": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->start",
                        "stop": "Lcom/android/server/sip/SipService$AutoRegistrationProcess;->stop"
                    },
                    "SipService$ConnectivityReceiver$1": {
                        "run": "Lcom/android/server/sip/SipService$ConnectivityReceiver$1;->run"
                    },
                    "SipService$ConnectivityReceiver": {
                        "onReceive": "Lcom/android/server/sip/SipService$ConnectivityReceiver;->onReceive"
                    },
                    "SipService$IntervalMeasurementProcess": {
                        "onResponse": "Lcom/android/server/sip/SipService$IntervalMeasurementProcess;->onResponse",
                        "stop": "Lcom/android/server/sip/SipService$IntervalMeasurementProcess;->stop"
                    },
                    "SipService$MyExecutor": {
                        "executeInternal": "Lcom/android/server/sip/SipService$MyExecutor;->executeInternal",
                        "execute": "Lcom/android/server/sip/SipService$MyExecutor;->execute"
                    },
                    "SipService$SipSessionGroupExt": {
                        "close": "Lcom/android/server/sip/SipService$SipSessionGroupExt;->close",
                        "onConnectivityChanged": "Lcom/android/server/sip/SipService$SipSessionGroupExt;->onConnectivityChanged",
                        "openToReceiveCalls": "Lcom/android/server/sip/SipService$SipSessionGroupExt;->openToReceiveCalls"
                    },
                    "SipService": {
                        "createSession": "Lcom/android/server/sip/SipService;->createSession",
                        "getPendingSession": "Lcom/android/server/sip/SipService;->getPendingSession",
                        "getListOfProfiles": "Lcom/android/server/sip/SipService;->getListOfProfiles",
                        "isOpened": "Lcom/android/server/sip/SipService;->isOpened",
                        "isRegistered": "Lcom/android/server/sip/SipService;->isRegistered",
                        "onTransact": "Lcom/android/server/sip/SipService;->onTransact",
                        "close": "Lcom/android/server/sip/SipService;->close",
                        "notifyProfileRemoved": "Lcom/android/server/sip/SipService;->notifyProfileRemoved",
                        "onConnectivityChanged": "Lcom/android/server/sip/SipService;->onConnectivityChanged",
                        "open3": "Lcom/android/server/sip/SipService;->open3",
                        "open": "Lcom/android/server/sip/SipService;->open",
                        "restartPortMappingLifetimeMeasurement": "Lcom/android/server/sip/SipService;->restartPortMappingLifetimeMeasurement",
                        "setRegistrationListener": "Lcom/android/server/sip/SipService;->setRegistrationListener",
                        "stopPortMappingMeasurement": "Lcom/android/server/sip/SipService;->stopPortMappingMeasurement",
                        "unregisterReceivers": "Lcom/android/server/sip/SipService;->unregisterReceivers",
                        "updateWakeLocks": "Lcom/android/server/sip/SipService;->updateWakeLocks"
                    },
                    "SipSessionGroup$KeepAliveProcessCallbackProxy$1": {
                        "run": "Lcom/android/server/sip/SipSessionGroup$KeepAliveProcessCallbackProxy$1;->run"
                    },
                    "SipSessionGroup$KeepAliveProcessCallbackProxy$2": {
                        "run": "Lcom/android/server/sip/SipSessionGroup$KeepAliveProcessCallbackProxy$2;->run"
                    },
                    "SipSessionGroup$KeepAliveProcessCallback": {
                        "onError": "Lcom/android/server/sip/SipSessionGroup$KeepAliveProcessCallback;->onError",
                        "onResponse": "Lcom/android/server/sip/SipSessionGroup$KeepAliveProcessCallback;->onResponse"
                    },
                    "SipSessionGroup$SipSessionCallReceiverImpl": {
                        "processCommand": "Lcom/android/server/sip/SipSessionGroup$SipSessionCallReceiverImpl;->processCommand"
                    },
                    "SipSessionGroup$SipSessionImpl$1": {
                        "run": "Lcom/android/server/sip/SipSessionGroup$SipSessionImpl$1;->run"
                    },
                    "SipSessionGroup$SipSessionImpl$KeepAliveProcess": {
                        "process": "Lcom/android/server/sip/SipSessionGroup$SipSessionImpl$KeepAliveProcess;->process",
                        "onError": "Lcom/android/server/sip/SipSessionGroup$SipSessionImpl$KeepAliveProcess;->onError"
                    },
                    "SipSessionGroup$SipSessionImpl": {
                        "process": "Lcom/android/server/sip/SipSessionGroup$SipSessionImpl;->process",
                        "processCommand": "Lcom/android/server/sip/SipSessionGroup$SipSessionImpl;->processCommand"
                    },
                    "SipSessionGroup": {
                        "processDialogTerminated": "Lcom/android/server/sip/SipSessionGroup;->processDialogTerminated",
                        "processIOException": "Lcom/android/server/sip/SipSessionGroup;->processIOException",
                        "process": "Lcom/android/server/sip/SipSessionGroup;->process",
                        "processRequest": "Lcom/android/server/sip/SipSessionGroup;->processRequest",
                        "processResponse": "Lcom/android/server/sip/SipSessionGroup;->processResponse",
                        "processTimeout": "Lcom/android/server/sip/SipSessionGroup;->processTimeout",
                        "processTransactionTerminated": "Lcom/android/server/sip/SipSessionGroup;->processTransactionTerminated"
                    },
                    "SipWakeLock": {
                        "acquire": "Lcom/android/server/sip/SipWakeLock;->acquire",
                        "release": "Lcom/android/server/sip/SipWakeLock;->release",
                        "reset": "Lcom/android/server/sip/SipWakeLock;->reset"
                    }
                },
                "StatusBarManagerService$7": {
                    "onReceive": "Lcom/android/server/StatusBarManagerService$7;->onReceive"
                },
                "StatusBarManagerService": {
                    "onTransact": "Lcom/android/server/StatusBarManagerService;->onTransact",
                    "collapse": "Lcom/android/server/StatusBarManagerService;->collapse",
                    "enforceExpandStatusBar": "Lcom/android/server/StatusBarManagerService;->enforceExpandStatusBar",
                    "expand": "Lcom/android/server/StatusBarManagerService;->expand",
                    "collapsePanels": "Lcom/android/server/StatusBarManagerService;->collapsePanels",
                    "disable": "Lcom/android/server/StatusBarManagerService;->disable",
                    "expandNotificationsPanel": "Lcom/android/server/StatusBarManagerService;->expandNotificationsPanel",
                    "expandSettingsPanel": "Lcom/android/server/StatusBarManagerService;->expandSettingsPanel",
                    "onClearAllNotifications": "Lcom/android/server/StatusBarManagerService;->onClearAllNotifications",
                    "onNotificationClear": "Lcom/android/server/StatusBarManagerService;->onNotificationClear",
                    "onNotificationClick": "Lcom/android/server/StatusBarManagerService;->onNotificationClick",
                    "onNotificationError": "Lcom/android/server/StatusBarManagerService;->onNotificationError",
                    "onPanelRevealed": "Lcom/android/server/StatusBarManagerService;->onPanelRevealed",
                    "registerStatusBar": "Lcom/android/server/StatusBarManagerService;->registerStatusBar",
                    "removeIcon": "Lcom/android/server/StatusBarManagerService;->removeIcon",
                    "setIcon": "Lcom/android/server/StatusBarManagerService;->setIcon",
                    "setIconVisibility": "Lcom/android/server/StatusBarManagerService;->setIconVisibility",
                    "setImeWindowStatus": "Lcom/android/server/StatusBarManagerService;->setImeWindowStatus",
                    "setSystemUiVisibility": "Lcom/android/server/StatusBarManagerService;->setSystemUiVisibility",
                    "topAppWindowChanged": "Lcom/android/server/StatusBarManagerService;->topAppWindowChanged"
                },
                "TelephonyRegistry": {
                    "onTransact": "Lcom/android/server/TelephonyRegistry;->onTransact",
                    "broadcastDataConnectionFailed": "Lcom/android/server/TelephonyRegistry;->broadcastDataConnectionFailed",
                    "broadcastDataConnectionStateChanged": "Lcom/android/server/TelephonyRegistry;->broadcastDataConnectionStateChanged",
                    "broadcastServiceStateChanged": "Lcom/android/server/TelephonyRegistry;->broadcastServiceStateChanged",
                    "broadcastSignalStrengthChanged": "Lcom/android/server/TelephonyRegistry;->broadcastSignalStrengthChanged",
                    "checkListenerPermission": "Lcom/android/server/TelephonyRegistry;->checkListenerPermission",
                    "listen": "Lcom/android/server/TelephonyRegistry;->listen",
                    "notifyDataConnectionFailed": "Lcom/android/server/TelephonyRegistry;->notifyDataConnectionFailed",
                    "notifyDataConnection": "Lcom/android/server/TelephonyRegistry;->notifyDataConnection",
                    "notifyServiceState": "Lcom/android/server/TelephonyRegistry;->notifyServiceState",
                    "notifySignalStrength": "Lcom/android/server/TelephonyRegistry;->notifySignalStrength",
                    "addOnSubscriptionsChangedListener": "Lcom/android/server/TelephonyRegistry;->addOnSubscriptionsChangedListener",
                    "listenForSubscriber": "Lcom/android/server/TelephonyRegistry;->listenForSubscriber",
                    "notifyCallForwardingChanged": "Lcom/android/server/TelephonyRegistry;->notifyCallForwardingChanged",
                    "notifyCallForwardingChangedForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyCallForwardingChangedForSubscriber",
                    "notifyCallState": "Lcom/android/server/TelephonyRegistry;->notifyCallState",
                    "notifyCallStateForPhoneId": "Lcom/android/server/TelephonyRegistry;->notifyCallStateForPhoneId",
                    "notifyCallStateForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyCallStateForSubscriber",
                    "notifyCarrierNetworkChange": "Lcom/android/server/TelephonyRegistry;->notifyCarrierNetworkChange",
                    "notifyCellInfo": "Lcom/android/server/TelephonyRegistry;->notifyCellInfo",
                    "notifyCellInfoForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyCellInfoForSubscriber",
                    "notifyCellLocation": "Lcom/android/server/TelephonyRegistry;->notifyCellLocation",
                    "notifyCellLocationForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyCellLocationForSubscriber",
                    "notifyDataActivity": "Lcom/android/server/TelephonyRegistry;->notifyDataActivity",
                    "notifyDataActivityForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyDataActivityForSubscriber",
                    "notifyDataConnectionFailedForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyDataConnectionFailedForSubscriber",
                    "notifyDataConnectionForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyDataConnectionForSubscriber",
                    "notifyDataConnectionRealTimeInfo": "Lcom/android/server/TelephonyRegistry;->notifyDataConnectionRealTimeInfo",
                    "notifyDisconnectCause": "Lcom/android/server/TelephonyRegistry;->notifyDisconnectCause",
                    "notifyMessageWaitingChanged": "Lcom/android/server/TelephonyRegistry;->notifyMessageWaitingChanged",
                    "notifyMessageWaitingChangedForPhoneId": "Lcom/android/server/TelephonyRegistry;->notifyMessageWaitingChangedForPhoneId",
                    "notifyOemHookRawEventForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifyOemHookRawEventForSubscriber",
                    "notifyOtaspChanged": "Lcom/android/server/TelephonyRegistry;->notifyOtaspChanged",
                    "notifyPreciseCallState": "Lcom/android/server/TelephonyRegistry;->notifyPreciseCallState",
                    "notifyPreciseDataConnectionFailed": "Lcom/android/server/TelephonyRegistry;->notifyPreciseDataConnectionFailed",
                    "notifyServiceStateForPhoneId": "Lcom/android/server/TelephonyRegistry;->notifyServiceStateForPhoneId",
                    "notifySignalStrengthForPhoneId": "Lcom/android/server/TelephonyRegistry;->notifySignalStrengthForPhoneId",
                    "notifySignalStrengthForSubscriber": "Lcom/android/server/TelephonyRegistry;->notifySignalStrengthForSubscriber",
                    "notifyVoLteServiceStateChanged": "Lcom/android/server/TelephonyRegistry;->notifyVoLteServiceStateChanged"
                },
                "TextServicesManagerService$TextServicesMonitor": {
                    "onHandleForceStop": "Lcom/android/server/TextServicesManagerService$TextServicesMonitor;->onHandleForceStop",
                    "onPackageRemoved": "Lcom/android/server/TextServicesManagerService$TextServicesMonitor;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/TextServicesManagerService$TextServicesMonitor;->onReceive"
                },
                "ThrottleService$DataRecorder": {
                    "setNextPeriod": "Lcom/android/server/ThrottleService$DataRecorder;->setNextPeriod",
                    "getDataFile": "Lcom/android/server/ThrottleService$DataRecorder;->getDataFile",
                    "addData": "Lcom/android/server/ThrottleService$DataRecorder;->addData",
                    "checkForSubscriberId": "Lcom/android/server/ThrottleService$DataRecorder;->checkForSubscriberId",
                    "<init>": "Lcom/android/server/ThrottleService$DataRecorder;-><init>",
                    "record": "Lcom/android/server/ThrottleService$DataRecorder;->record",
                    "retrieve": "Lcom/android/server/ThrottleService$DataRecorder;->retrieve"
                },
                "ThrottleService$MyHandler": {
                    "checkThrottleAndPostNotification": "Lcom/android/server/ThrottleService$MyHandler;->checkThrottleAndPostNotification",
                    "clearThrottleAndNotification": "Lcom/android/server/ThrottleService$MyHandler;->clearThrottleAndNotification",
                    "onPolicyChanged": "Lcom/android/server/ThrottleService$MyHandler;->onPolicyChanged",
                    "onPollAlarm": "Lcom/android/server/ThrottleService$MyHandler;->onPollAlarm",
                    "onRebootRecovery": "Lcom/android/server/ThrottleService$MyHandler;->onRebootRecovery",
                    "onResetAlarm": "Lcom/android/server/ThrottleService$MyHandler;->onResetAlarm",
                    "postNotification": "Lcom/android/server/ThrottleService$MyHandler;->postNotification"
                },
                "ThrottleService$SettingsObserver": {
                    "register": "Lcom/android/server/ThrottleService$SettingsObserver;->register"
                },
                "ThrottleService": {
                    "onTransact": "Lcom/android/server/ThrottleService;->onTransact",
                    "getCliffLevel": "Lcom/android/server/ThrottleService;->getCliffLevel",
                    "getThrottle": "Lcom/android/server/ThrottleService;->getThrottle",
                    "getHelpUri": "Lcom/android/server/ThrottleService;->getHelpUri",
                    "getByteCount": "Lcom/android/server/ThrottleService;->getByteCount",
                    "getCliffThreshold": "Lcom/android/server/ThrottleService;->getCliffThreshold",
                    "getPeriodStartTime": "Lcom/android/server/ThrottleService;->getPeriodStartTime",
                    "getResetTime": "Lcom/android/server/ThrottleService;->getResetTime",
                    "dump": "Lcom/android/server/ThrottleService;->dump",
                    "enforceAccessPermission": "Lcom/android/server/ThrottleService;->enforceAccessPermission",
                    "shutdown": "Lcom/android/server/ThrottleService;->shutdown",
                    "systemReady": "Lcom/android/server/ThrottleService;->systemReady"
                },
                "UiModeManagerService$1": {
                    "onReceive": "Lcom/android/server/UiModeManagerService$1;->onReceive"
                },
                "UiModeManagerService$8": {
                    "retrieveLocation": "Lcom/android/server/UiModeManagerService$8;->retrieveLocation"
                },
                "UiModeManagerService": {
                    "adjustStatusBarCarModeLocked": "Lcom/android/server/UiModeManagerService;->adjustStatusBarCarModeLocked",
                    "systemReady": "Lcom/android/server/UiModeManagerService;->systemReady",
                    "updateConfigurationLocked": "Lcom/android/server/UiModeManagerService;->updateConfigurationLocked"
                },
                "usb": {
                    "UsbDeviceManager$1": {
                        "onUEvent": "Lcom/android/server/usb/UsbDeviceManager$1;->onUEvent"
                    },
                    "UsbDeviceManager$UsbHandler": {
                        "<init>": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;-><init>",
                        "setAdbEnabled": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->setAdbEnabled",
                        "updateAdbNotification": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateAdbNotification",
                        "updateAudioSourceFunction": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateAudioSourceFunction",
                        "updateState": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateState",
                        "updateUsbNotification": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateUsbNotification",
                        "updateUsbState": "Lcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateUsbState"
                    },
                    "UsbDeviceManager": {
                        "<init>": "Lcom/android/server/usb/UsbDeviceManager;-><init>",
                        "systemReady": "Lcom/android/server/usb/UsbDeviceManager;->systemReady"
                    },
                    "UsbService": {
                        "<init>": "Lcom/android/server/usb/UsbService;-><init>",
                        "systemReady": "Lcom/android/server/usb/UsbService;->systemReady",
                        "allowUsbDebugging": "Lcom/android/server/usb/UsbService;->allowUsbDebugging",
                        "clearDefaults": "Lcom/android/server/usb/UsbService;->clearDefaults",
                        "clearUsbDebuggingKeys": "Lcom/android/server/usb/UsbService;->clearUsbDebuggingKeys",
                        "denyUsbDebugging": "Lcom/android/server/usb/UsbService;->denyUsbDebugging",
                        "getPorts": "Lcom/android/server/usb/UsbService;->getPorts",
                        "getPortStatus": "Lcom/android/server/usb/UsbService;->getPortStatus",
                        "grantAccessoryPermission": "Lcom/android/server/usb/UsbService;->grantAccessoryPermission",
                        "grantDevicePermission": "Lcom/android/server/usb/UsbService;->grantDevicePermission",
                        "hasDefaults": "Lcom/android/server/usb/UsbService;->hasDefaults",
                        "isFunctionEnabled": "Lcom/android/server/usb/UsbService;->isFunctionEnabled",
                        "setAccessoryPackage": "Lcom/android/server/usb/UsbService;->setAccessoryPackage",
                        "setCurrentFunction": "Lcom/android/server/usb/UsbService;->setCurrentFunction",
                        "setDevicePackage": "Lcom/android/server/usb/UsbService;->setDevicePackage",
                        "setMassStorageBackingFile": "Lcom/android/server/usb/UsbService;->setMassStorageBackingFile",
                        "setPortRoles": "Lcom/android/server/usb/UsbService;->setPortRoles",
                        "setUsbDataUnlocked": "Lcom/android/server/usb/UsbService;->setUsbDataUnlocked"
                    },
                    "UsbSettingsManager$MyPackageMonitor": {
                        "onHandleForceStop": "Lcom/android/server/usb/UsbSettingsManager$MyPackageMonitor;->onHandleForceStop",
                        "onReceive": "Lcom/android/server/usb/UsbSettingsManager$MyPackageMonitor;->onReceive",
                        "onSomePackagesChanged": "Lcom/android/server/usb/UsbSettingsManager$MyPackageMonitor;->onSomePackagesChanged"
                    }
                },
                "VibratorService$1": {
                    "onChange": "Lcom/android/server/VibratorService$1;->onChange"
                },
                "VibratorService$2": {
                    "run": "Lcom/android/server/VibratorService$2;->run"
                },
                "VibratorService$3": {
                    "onReceive": "Lcom/android/server/VibratorService$3;->onReceive"
                },
                "VibratorService$VibrateThread": {
                    "<init>": "Lcom/android/server/VibratorService$VibrateThread;-><init>",
                    "run": "Lcom/android/server/VibratorService$VibrateThread;->run"
                },
                "VibratorService$Vibration": {
                    "binderDied": "Lcom/android/server/VibratorService$Vibration;->binderDied"
                },
                "VibratorService": {
                    "onTransact": "Lcom/android/server/VibratorService;->onTransact",
                    "cancelVibrate": "Lcom/android/server/VibratorService;->cancelVibrate",
                    "doCancelVibrateLocked": "Lcom/android/server/VibratorService;->doCancelVibrateLocked",
                    "doVibratorOff": "Lcom/android/server/VibratorService;->doVibratorOff",
                    "doVibratorOn": "Lcom/android/server/VibratorService;->doVibratorOn",
                    "onInputDeviceAdded": "Lcom/android/server/VibratorService;->onInputDeviceAdded",
                    "onInputDeviceChanged": "Lcom/android/server/VibratorService;->onInputDeviceChanged",
                    "onInputDeviceRemoved": "Lcom/android/server/VibratorService;->onInputDeviceRemoved",
                    "startNextVibrationLocked": "Lcom/android/server/VibratorService;->startNextVibrationLocked",
                    "startVibrationLocked": "Lcom/android/server/VibratorService;->startVibrationLocked",
                    "systemReady": "Lcom/android/server/VibratorService;->systemReady",
                    "updateInputDeviceVibrators": "Lcom/android/server/VibratorService;->updateInputDeviceVibrators",
                    "vibrate": "Lcom/android/server/VibratorService;->vibrate",
                    "vibratePattern": "Lcom/android/server/VibratorService;->vibratePattern"
                },
                "WallpaperManagerService$MyPackageMonitor": {
                    "onPackageRemoved": "Lcom/android/server/WallpaperManagerService$MyPackageMonitor;->onPackageRemoved",
                    "onReceive": "Lcom/android/server/WallpaperManagerService$MyPackageMonitor;->onReceive"
                },
                "WallpaperManagerService": {
                    "setWallpaper": "Lcom/android/server/WallpaperManagerService;->setWallpaper",
                    "onTransact": "Lcom/android/server/WallpaperManagerService;->onTransact",
                    "clearWallpaper": "Lcom/android/server/WallpaperManagerService;->clearWallpaper",
                    "setDimensionHints": "Lcom/android/server/WallpaperManagerService;->setDimensionHints",
                    "setWallpaperComponent": "Lcom/android/server/WallpaperManagerService;->setWallpaperComponent"
                },
                "WifiService$1": {
                    "onReceive": "Lcom/android/server/WifiService$1;->onReceive"
                },
                "WifiService$2": {
                    "onReceive": "Lcom/android/server/WifiService$2;->onReceive"
                },
                "WifiService$NotificationEnabledSettingObserver": {
                    "onChange": "Lcom/android/server/WifiService$NotificationEnabledSettingObserver;->onChange",
                    "register": "Lcom/android/server/WifiService$NotificationEnabledSettingObserver;->register"
                },
                "WifiService": {
                    "getDhcpInfo": "Lcom/android/server/WifiService;->getDhcpInfo",
                    "getWifiApConfiguration": "Lcom/android/server/WifiService;->getWifiApConfiguration",
                    "getConnectionInfo": "Lcom/android/server/WifiService;->getConnectionInfo",
                    "getWifiServiceMessenger": "Lcom/android/server/WifiService;->getWifiServiceMessenger",
                    "getWifiStateMachineMessenger": "Lcom/android/server/WifiService;->getWifiStateMachineMessenger",
                    "acquireWifiLock": "Lcom/android/server/WifiService;->acquireWifiLock",
                    "disableNetwork": "Lcom/android/server/WifiService;->disableNetwork",
                    "enableNetwork": "Lcom/android/server/WifiService;->enableNetwork",
                    "isMulticastEnabled": "Lcom/android/server/WifiService;->isMulticastEnabled",
                    "onTransact": "Lcom/android/server/WifiService;->onTransact",
                    "pingSupplicant": "Lcom/android/server/WifiService;->pingSupplicant",
                    "releaseWifiLock": "Lcom/android/server/WifiService;->releaseWifiLock",
                    "removeNetwork": "Lcom/android/server/WifiService;->removeNetwork",
                    "saveConfiguration": "Lcom/android/server/WifiService;->saveConfiguration",
                    "setWifiEnabled": "Lcom/android/server/WifiService;->setWifiEnabled",
                    "testAndClearWifiSavedState": "Lcom/android/server/WifiService;->testAndClearWifiSavedState",
                    "addOrUpdateNetwork": "Lcom/android/server/WifiService;->addOrUpdateNetwork",
                    "getFrequencyBand": "Lcom/android/server/WifiService;->getFrequencyBand",
                    "getPersistedWifiState": "Lcom/android/server/WifiService;->getPersistedWifiState",
                    "getWifiApEnabledState": "Lcom/android/server/WifiService;->getWifiApEnabledState",
                    "getWifiEnabledState": "Lcom/android/server/WifiService;->getWifiEnabledState",
                    "getConfigFile": "Lcom/android/server/WifiService;->getConfigFile",
                    "getConfiguredNetworks": "Lcom/android/server/WifiService;->getConfiguredNetworks",
                    "getScanResults": "Lcom/android/server/WifiService;->getScanResults",
                    "acquireMulticastLock": "Lcom/android/server/WifiService;->acquireMulticastLock",
                    "addToBlacklist": "Lcom/android/server/WifiService;->addToBlacklist",
                    "checkAndSetNotification": "Lcom/android/server/WifiService;->checkAndSetNotification",
                    "checkAndStartWifi": "Lcom/android/server/WifiService;->checkAndStartWifi",
                    "clearBlacklist": "Lcom/android/server/WifiService;->clearBlacklist",
                    "disconnect": "Lcom/android/server/WifiService;->disconnect",
                    "enforceAccessPermission": "Lcom/android/server/WifiService;->enforceAccessPermission",
                    "enforceChangePermission": "Lcom/android/server/WifiService;->enforceChangePermission",
                    "enforceMulticastChangePermission": "Lcom/android/server/WifiService;->enforceMulticastChangePermission",
                    "handleAirplaneModeToggled": "Lcom/android/server/WifiService;->handleAirplaneModeToggled",
                    "handleWifiToggled": "Lcom/android/server/WifiService;->handleWifiToggled",
                    "<init>": "Lcom/android/server/WifiService;-><init>",
                    "initializeMulticastFiltering": "Lcom/android/server/WifiService;->initializeMulticastFiltering",
                    "persistWifiState": "Lcom/android/server/WifiService;->persistWifiState",
                    "reassociate": "Lcom/android/server/WifiService;->reassociate",
                    "reconnect": "Lcom/android/server/WifiService;->reconnect",
                    "releaseMulticastLock": "Lcom/android/server/WifiService;->releaseMulticastLock",
                    "resetNotification": "Lcom/android/server/WifiService;->resetNotification",
                    "setCountryCode": "Lcom/android/server/WifiService;->setCountryCode",
                    "setFrequencyBand": "Lcom/android/server/WifiService;->setFrequencyBand",
                    "setNotificationVisible": "Lcom/android/server/WifiService;->setNotificationVisible",
                    "setWifiApConfiguration": "Lcom/android/server/WifiService;->setWifiApConfiguration",
                    "setWifiApEnabled": "Lcom/android/server/WifiService;->setWifiApEnabled",
                    "startScan": "Lcom/android/server/WifiService;->startScan",
                    "startWifi": "Lcom/android/server/WifiService;->startWifi",
                    "stopWifi": "Lcom/android/server/WifiService;->stopWifi",
                    "captivePortalCheckComplete": "Lcom/android/server/WifiService;->captivePortalCheckComplete",
                    "updateWifiLockWorkSource": "Lcom/android/server/WifiService;->updateWifiLockWorkSource"
                },
                "WiredAccessoryObserver$BootCompletedReceiver": {
                    "onReceive": "Lcom/android/server/WiredAccessoryObserver$BootCompletedReceiver;->onReceive"
                },
                "WiredAccessoryObserver": {
                    "init": "Lcom/android/server/WiredAccessoryObserver;->init",
                    "<init>": "Lcom/android/server/WiredAccessoryObserver;-><init>",
                    "onUEvent": "Lcom/android/server/WiredAccessoryObserver;->onUEvent",
                    "setDevicesState": "Lcom/android/server/WiredAccessoryObserver;->setDevicesState",
                    "setDeviceState": "Lcom/android/server/WiredAccessoryObserver;->setDeviceState",
                    "update": "Lcom/android/server/WiredAccessoryObserver;->update",
                    "updateState": "Lcom/android/server/WiredAccessoryObserver;->updateState"
                },
                "wm": {
                    "DragState": {
                        "notifyDropLw": "Lcom/android/server/wm/DragState;->notifyDropLw",
                        "endDragLw": "Lcom/android/server/wm/DragState;->endDragLw",
                        "unregister": "Lcom/android/server/wm/DragState;->unregister"
                    },
                    "InputMonitor": {
                        "dispatchUnhandledKey": "Lcom/android/server/wm/InputMonitor;->dispatchUnhandledKey",
                        "interceptKeyBeforeQueueing": "Lcom/android/server/wm/InputMonitor;->interceptKeyBeforeQueueing",
                        "interceptMotionBeforeQueueingWhenScreenOff": "Lcom/android/server/wm/InputMonitor;->interceptMotionBeforeQueueingWhenScreenOff",
                        "interceptKeyBeforeDispatching": "Lcom/android/server/wm/InputMonitor;->interceptKeyBeforeDispatching",
                        "notifyANR": "Lcom/android/server/wm/InputMonitor;->notifyANR",
                        "notifyLidSwitchChanged": "Lcom/android/server/wm/InputMonitor;->notifyLidSwitchChanged"
                    },
                    "Session": {
                        "prepareDrag": "Lcom/android/server/wm/Session;->prepareDrag",
                        "onTransact": "Lcom/android/server/wm/Session;->onTransact",
                        "performDrag": "Lcom/android/server/wm/Session;->performDrag",
                        "add": "Lcom/android/server/wm/Session;->add",
                        "addWithoutInputChannel": "Lcom/android/server/wm/Session;->addWithoutInputChannel"
                    },
                    "WindowAnimator": {
                        "animate": "Lcom/android/server/wm/WindowAnimator;->animate",
                        "performAnimationsLocked": "Lcom/android/server/wm/WindowAnimator;->performAnimationsLocked",
                        "testTokenMayBeDrawnLocked": "Lcom/android/server/wm/WindowAnimator;->testTokenMayBeDrawnLocked"
                    },
                    "WindowManagerService$1": {
                        "acquired": "Lcom/android/server/wm/WindowManagerService$1;->acquired",
                        "released": "Lcom/android/server/wm/WindowManagerService$1;->released"
                    },
                    "WindowManagerService$2": {
                        "onReceive": "Lcom/android/server/wm/WindowManagerService$2;->onReceive"
                    },
                    "WindowManagerService$AnimationRunnable": {
                        "run": "Lcom/android/server/wm/WindowManagerService$AnimationRunnable;->run"
                    },
                    "WindowManagerService$DragInputEventReceiver": {
                        "onInputEvent": "Lcom/android/server/wm/WindowManagerService$DragInputEventReceiver;->onInputEvent"
                    },
                    "WindowManagerService$PolicyThread": {
                        "run": "Lcom/android/server/wm/WindowManagerService$PolicyThread;->run"
                    },
                    "WindowManagerService$WMThread": {
                        "run": "Lcom/android/server/wm/WindowManagerService$WMThread;->run"
                    },
                    "WindowManagerService": {
                        "computeNewConfiguration": "Lcom/android/server/wm/WindowManagerService;->computeNewConfiguration",
                        "updateOrientationFromAppTokensLocked": "Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked",
                        "prepareDragSurface": "Lcom/android/server/wm/WindowManagerService;->prepareDragSurface",
                        "detectSafeMode": "Lcom/android/server/wm/WindowManagerService;->detectSafeMode",
                        "onTransact": "Lcom/android/server/wm/WindowManagerService;->onTransact",
                        "setTokenVisibilityLocked": "Lcom/android/server/wm/WindowManagerService;->setTokenVisibilityLocked",
                        "updateRotationUncheckedLocked": "Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked",
                        "main": "Lcom/android/server/wm/WindowManagerService;->main",
                        "addWindow": "Lcom/android/server/wm/WindowManagerService;->addWindow",
                        "handleAppTransitionReadyLocked": "Lcom/android/server/wm/WindowManagerService;->handleAppTransitionReadyLocked",
                        "bulkSetParameters": "Lcom/android/server/wm/WindowManagerService;->bulkSetParameters",
                        "clearForcedDisplaySize": "Lcom/android/server/wm/WindowManagerService;->clearForcedDisplaySize",
                        "disableKeyguard": "Lcom/android/server/wm/WindowManagerService;->disableKeyguard",
                        "dismissKeyguard": "Lcom/android/server/wm/WindowManagerService;->dismissKeyguard",
                        "displayReady": "Lcom/android/server/wm/WindowManagerService;->displayReady",
                        "exitKeyguardSecurely": "Lcom/android/server/wm/WindowManagerService;->exitKeyguardSecurely",
                        "freezeRotation": "Lcom/android/server/wm/WindowManagerService;->freezeRotation",
                        "<init>": "Lcom/android/server/wm/WindowManagerService;-><init>",
                        "makeWindowFreezingScreenIfNeededLocked": "Lcom/android/server/wm/WindowManagerService;->makeWindowFreezingScreenIfNeededLocked",
                        "moveAppWindowsLocked": "Lcom/android/server/wm/WindowManagerService;->moveAppWindowsLocked",
                        "performLayoutAndPlaceSurfacesLocked": "Lcom/android/server/wm/WindowManagerService;->performLayoutAndPlaceSurfacesLocked",
                        "performLayoutAndPlaceSurfacesLockedInner": "Lcom/android/server/wm/WindowManagerService;->performLayoutAndPlaceSurfacesLockedInner",
                        "prepareAppTransition": "Lcom/android/server/wm/WindowManagerService;->prepareAppTransition",
                        "readForcedDisplaySizeLocked": "Lcom/android/server/wm/WindowManagerService;->readForcedDisplaySizeLocked",
                        "rebootSafeMode": "Lcom/android/server/wm/WindowManagerService;->rebootSafeMode",
                        "reenableKeyguard": "Lcom/android/server/wm/WindowManagerService;->reenableKeyguard",
                        "reevaluateStatusBarVisibility": "Lcom/android/server/wm/WindowManagerService;->reevaluateStatusBarVisibility",
                        "removeWindowInnerLocked": "Lcom/android/server/wm/WindowManagerService;->removeWindowInnerLocked",
                        "requestTraversalLocked": "Lcom/android/server/wm/WindowManagerService;->requestTraversalLocked",
                        "resumeRotationLocked": "Lcom/android/server/wm/WindowManagerService;->resumeRotationLocked",
                        "sendNewConfiguration": "Lcom/android/server/wm/WindowManagerService;->sendNewConfiguration",
                        "setForcedDisplaySize": "Lcom/android/server/wm/WindowManagerService;->setForcedDisplaySize",
                        "setForcedDisplaySizeLocked": "Lcom/android/server/wm/WindowManagerService;->setForcedDisplaySizeLocked",
                        "setHoldScreenLocked": "Lcom/android/server/wm/WindowManagerService;->setHoldScreenLocked",
                        "setNewConfiguration": "Lcom/android/server/wm/WindowManagerService;->setNewConfiguration",
                        "shutdown": "Lcom/android/server/wm/WindowManagerService;->shutdown",
                        "startAppFreezingScreenLocked": "Lcom/android/server/wm/WindowManagerService;->startAppFreezingScreenLocked",
                        "startFreezingDisplayLocked": "Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked",
                        "stopFreezingDisplayLocked": "Lcom/android/server/wm/WindowManagerService;->stopFreezingDisplayLocked",
                        "systemReady": "Lcom/android/server/wm/WindowManagerService;->systemReady",
                        "thawRotation": "Lcom/android/server/wm/WindowManagerService;->thawRotation",
                        "unsetAppFreezingScreenLocked": "Lcom/android/server/wm/WindowManagerService;->unsetAppFreezingScreenLocked",
                        "updateResizingWindows": "Lcom/android/server/wm/WindowManagerService;->updateResizingWindows",
                        "addAppToken": "Lcom/android/server/wm/WindowManagerService;->addAppToken",
                        "addDisplayContentChangeListener": "Lcom/android/server/wm/WindowManagerService;->addDisplayContentChangeListener",
                        "addWindowToken": "Lcom/android/server/wm/WindowManagerService;->addWindowToken",
                        "clearForcedDisplayDensity": "Lcom/android/server/wm/WindowManagerService;->clearForcedDisplayDensity",
                        "clearForcedDisplayDensityForUser": "Lcom/android/server/wm/WindowManagerService;->clearForcedDisplayDensityForUser",
                        "clearWindowContentFrameStats": "Lcom/android/server/wm/WindowManagerService;->clearWindowContentFrameStats",
                        "executeAppTransition": "Lcom/android/server/wm/WindowManagerService;->executeAppTransition",
                        "getCompatibleMagnificationSpecForWindow": "Lcom/android/server/wm/WindowManagerService;->getCompatibleMagnificationSpecForWindow",
                        "getFocusedWindowToken": "Lcom/android/server/wm/WindowManagerService;->getFocusedWindowToken",
                        "getVisibleWindowsForDisplay": "Lcom/android/server/wm/WindowManagerService;->getVisibleWindowsForDisplay",
                        "getWindowCompatibilityScale": "Lcom/android/server/wm/WindowManagerService;->getWindowCompatibilityScale",
                        "getWindowContentFrameStats": "Lcom/android/server/wm/WindowManagerService;->getWindowContentFrameStats",
                        "getWindowFrame": "Lcom/android/server/wm/WindowManagerService;->getWindowFrame",
                        "getWindowInfo": "Lcom/android/server/wm/WindowManagerService;->getWindowInfo",
                        "isViewServerRunning": "Lcom/android/server/wm/WindowManagerService;->isViewServerRunning",
                        "keyguardGoingAway": "Lcom/android/server/wm/WindowManagerService;->keyguardGoingAway",
                        "lockNow": "Lcom/android/server/wm/WindowManagerService;->lockNow",
                        "magnifyDisplay": "Lcom/android/server/wm/WindowManagerService;->magnifyDisplay",
                        "moveAppToken": "Lcom/android/server/wm/WindowManagerService;->moveAppToken",
                        "moveAppTokensToBottom": "Lcom/android/server/wm/WindowManagerService;->moveAppTokensToBottom",
                        "moveAppTokensToTop": "Lcom/android/server/wm/WindowManagerService;->moveAppTokensToTop",
                        "notifyAppResumed": "Lcom/android/server/wm/WindowManagerService;->notifyAppResumed",
                        "notifyAppStopped": "Lcom/android/server/wm/WindowManagerService;->notifyAppStopped",
                        "pauseKeyDispatching": "Lcom/android/server/wm/WindowManagerService;->pauseKeyDispatching",
                        "registerDockedStackListener": "Lcom/android/server/wm/WindowManagerService;->registerDockedStackListener",
                        "registerShortcutKey": "Lcom/android/server/wm/WindowManagerService;->registerShortcutKey",
                        "removeAppToken": "Lcom/android/server/wm/WindowManagerService;->removeAppToken",
                        "removeDisplayContentChangeListener": "Lcom/android/server/wm/WindowManagerService;->removeDisplayContentChangeListener",
                        "removeWindowToken": "Lcom/android/server/wm/WindowManagerService;->removeWindowToken",
                        "requestAssistScreenshot": "Lcom/android/server/wm/WindowManagerService;->requestAssistScreenshot",
                        "resumeKeyDispatching": "Lcom/android/server/wm/WindowManagerService;->resumeKeyDispatching",
                        "screenshotApplications": "Lcom/android/server/wm/WindowManagerService;->screenshotApplications",
                        "screenshotWallpaper": "Lcom/android/server/wm/WindowManagerService;->screenshotWallpaper",
                        "setAnimationScale": "Lcom/android/server/wm/WindowManagerService;->setAnimationScale",
                        "setAnimationScales": "Lcom/android/server/wm/WindowManagerService;->setAnimationScales",
                        "setAppGroupId": "Lcom/android/server/wm/WindowManagerService;->setAppGroupId",
                        "setAppOrientation": "Lcom/android/server/wm/WindowManagerService;->setAppOrientation",
                        "setAppStartingWindow": "Lcom/android/server/wm/WindowManagerService;->setAppStartingWindow",
                        "setAppTask": "Lcom/android/server/wm/WindowManagerService;->setAppTask",
                        "setAppVisibility": "Lcom/android/server/wm/WindowManagerService;->setAppVisibility",
                        "setAppWillBeHidden": "Lcom/android/server/wm/WindowManagerService;->setAppWillBeHidden",
                        "setEventDispatching": "Lcom/android/server/wm/WindowManagerService;->setEventDispatching",
                        "setFocusedApp": "Lcom/android/server/wm/WindowManagerService;->setFocusedApp",
                        "setForcedDisplayDensity": "Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensity",
                        "setForcedDisplayDensityForUser": "Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensityForUser",
                        "setForcedDisplayScalingMode": "Lcom/android/server/wm/WindowManagerService;->setForcedDisplayScalingMode",
                        "setInputFilter": "Lcom/android/server/wm/WindowManagerService;->setInputFilter",
                        "setMagnificationCallbacks": "Lcom/android/server/wm/WindowManagerService;->setMagnificationCallbacks",
                        "setMagnificationSpec": "Lcom/android/server/wm/WindowManagerService;->setMagnificationSpec",
                        "setOverscan": "Lcom/android/server/wm/WindowManagerService;->setOverscan",
                        "setRecentsVisibility": "Lcom/android/server/wm/WindowManagerService;->setRecentsVisibility",
                        "setTvPipVisibility": "Lcom/android/server/wm/WindowManagerService;->setTvPipVisibility",
                        "showAssistant": "Lcom/android/server/wm/WindowManagerService;->showAssistant",
                        "startAppFreezingScreen": "Lcom/android/server/wm/WindowManagerService;->startAppFreezingScreen",
                        "startFreezingScreen": "Lcom/android/server/wm/WindowManagerService;->startFreezingScreen",
                        "startViewServer": "Lcom/android/server/wm/WindowManagerService;->startViewServer",
                        "statusBarVisibilityChanged": "Lcom/android/server/wm/WindowManagerService;->statusBarVisibilityChanged",
                        "stopAppFreezingScreen": "Lcom/android/server/wm/WindowManagerService;->stopAppFreezingScreen",
                        "stopFreezingScreen": "Lcom/android/server/wm/WindowManagerService;->stopFreezingScreen",
                        "stopViewServer": "Lcom/android/server/wm/WindowManagerService;->stopViewServer",
                        "updateOrientationFromAppTokens": "Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokens"
                    },
                    "WindowStateAnimator": {
                        "createSurfaceLocked": "Lcom/android/server/wm/WindowStateAnimator;->createSurfaceLocked"
                    },
                    "InputManager": {
                        "getInputDevice": "Lcom/android/server/wm/InputManager;->getInputDevice",
                        "getKeyCodeState": "Lcom/android/server/wm/InputManager;->getKeyCodeState",
                        "getScanCodeState": "Lcom/android/server/wm/InputManager;->getScanCodeState",
                        "getSwitchState": "Lcom/android/server/wm/InputManager;->getSwitchState",
                        "getInputDeviceIds": "Lcom/android/server/wm/InputManager;->getInputDeviceIds",
                        "getInputConfiguration": "Lcom/android/server/wm/InputManager;->getInputConfiguration"
                    }
                },
                "InputManager": {
                    "getInputDevice": "Lcom/android/server/InputManager;->getInputDevice",
                    "getKeyCodeState": "Lcom/android/server/InputManager;->getKeyCodeState",
                    "getScanCodeState": "Lcom/android/server/InputManager;->getScanCodeState",
                    "getSwitchState": "Lcom/android/server/InputManager;->getSwitchState",
                    "getInputDeviceIds": "Lcom/android/server/InputManager;->getInputDeviceIds",
                    "getInputConfiguration": "Lcom/android/server/InputManager;->getInputConfiguration"
                },
                "accounts": {
                    "AccountManagerService": {
                        "addAccount": "Lcom/android/server/accounts/AccountManagerService;->addAccount",
                        "addAccountAsUser": "Lcom/android/server/accounts/AccountManagerService;->addAccountAsUser",
                        "addAccountExplicitly": "Lcom/android/server/accounts/AccountManagerService;->addAccountExplicitly",
                        "addSharedAccountsFromParentUser": "Lcom/android/server/accounts/AccountManagerService;->addSharedAccountsFromParentUser",
                        "clearPassword": "Lcom/android/server/accounts/AccountManagerService;->clearPassword",
                        "confirmCredentialsAsUser": "Lcom/android/server/accounts/AccountManagerService;->confirmCredentialsAsUser",
                        "copyAccountToUser": "Lcom/android/server/accounts/AccountManagerService;->copyAccountToUser",
                        "editProperties": "Lcom/android/server/accounts/AccountManagerService;->editProperties",
                        "finishSessionAsUser": "Lcom/android/server/accounts/AccountManagerService;->finishSessionAsUser",
                        "getAccounts": "Lcom/android/server/accounts/AccountManagerService;->getAccounts",
                        "getAccountsAsUser": "Lcom/android/server/accounts/AccountManagerService;->getAccountsAsUser",
                        "getAccountsByFeatures": "Lcom/android/server/accounts/AccountManagerService;->getAccountsByFeatures",
                        "getAccountsByTypeForPackage": "Lcom/android/server/accounts/AccountManagerService;->getAccountsByTypeForPackage",
                        "getAccountsForPackage": "Lcom/android/server/accounts/AccountManagerService;->getAccountsForPackage",
                        "getAuthenticatorTypes": "Lcom/android/server/accounts/AccountManagerService;->getAuthenticatorTypes",
                        "getAuthToken": "Lcom/android/server/accounts/AccountManagerService;->getAuthToken",
                        "getPassword": "Lcom/android/server/accounts/AccountManagerService;->getPassword",
                        "getUserData": "Lcom/android/server/accounts/AccountManagerService;->getUserData",
                        "hasFeatures": "Lcom/android/server/accounts/AccountManagerService;->hasFeatures",
                        "invalidateAuthToken": "Lcom/android/server/accounts/AccountManagerService;->invalidateAuthToken",
                        "peekAuthToken": "Lcom/android/server/accounts/AccountManagerService;->peekAuthToken",
                        "removeAccount": "Lcom/android/server/accounts/AccountManagerService;->removeAccount",
                        "removeAccountAsUser": "Lcom/android/server/accounts/AccountManagerService;->removeAccountAsUser",
                        "removeAccountExplicitly": "Lcom/android/server/accounts/AccountManagerService;->removeAccountExplicitly",
                        "renameAccount": "Lcom/android/server/accounts/AccountManagerService;->renameAccount",
                        "setAuthToken": "Lcom/android/server/accounts/AccountManagerService;->setAuthToken",
                        "setPassword": "Lcom/android/server/accounts/AccountManagerService;->setPassword",
                        "setUserData": "Lcom/android/server/accounts/AccountManagerService;->setUserData",
                        "updateCredentials": "Lcom/android/server/accounts/AccountManagerService;->updateCredentials"
                    }
                },
                "AppOpsService": {
                    "checkAudioOperation": "Lcom/android/server/AppOpsService;->checkAudioOperation",
                    "checkOperation": "Lcom/android/server/AppOpsService;->checkOperation",
                    "finishOperation": "Lcom/android/server/AppOpsService;->finishOperation",
                    "getOpsForPackage": "Lcom/android/server/AppOpsService;->getOpsForPackage",
                    "getPackagesForOps": "Lcom/android/server/AppOpsService;->getPackagesForOps",
                    "noteOperation": "Lcom/android/server/AppOpsService;->noteOperation",
                    "resetAllModes": "Lcom/android/server/AppOpsService;->resetAllModes",
                    "setAudioRestriction": "Lcom/android/server/AppOpsService;->setAudioRestriction",
                    "setMode": "Lcom/android/server/AppOpsService;->setMode",
                    "setUidMode": "Lcom/android/server/AppOpsService;->setUidMode",
                    "setUserRestriction": "Lcom/android/server/AppOpsService;->setUserRestriction",
                    "startOperation": "Lcom/android/server/AppOpsService;->startOperation"
                },
                "appwidget": {
                    "AppWidgetServiceImpl": {
                        "bindAppWidgetId": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->bindAppWidgetId",
                        "bindRemoteViewsService": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->bindRemoteViewsService",
                        "createAppWidgetConfigIntentSender": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->createAppWidgetConfigIntentSender",
                        "deleteAppWidgetId": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->deleteAppWidgetId",
                        "getAppWidgetInfo": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetInfo",
                        "getAppWidgetOptions": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetOptions",
                        "getAppWidgetViews": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetViews",
                        "hasBindAppWidgetPermission": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->hasBindAppWidgetPermission",
                        "notifyAppWidgetViewDataChanged": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->notifyAppWidgetViewDataChanged",
                        "partiallyUpdateAppWidgetIds": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->partiallyUpdateAppWidgetIds",
                        "setBindAppWidgetPermission": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->setBindAppWidgetPermission",
                        "unbindRemoteViewsService": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->unbindRemoteViewsService",
                        "updateAppWidgetIds": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetIds",
                        "updateAppWidgetOptions": "Lcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetOptions"
                    }
                },
                "audio": {
                    "AudioService": {
                        "disableSafeMediaVolume": "Lcom/android/server/audio/AudioService;->disableSafeMediaVolume",
                        "forceRemoteSubmixFullVolume": "Lcom/android/server/audio/AudioService;->forceRemoteSubmixFullVolume",
                        "notifyVolumeControllerVisible": "Lcom/android/server/audio/AudioService;->notifyVolumeControllerVisible",
                        "registerAudioPolicy": "Lcom/android/server/audio/AudioService;->registerAudioPolicy",
                        "registerRemoteControlDisplay": "Lcom/android/server/audio/AudioService;->registerRemoteControlDisplay",
                        "registerRemoteController": "Lcom/android/server/audio/AudioService;->registerRemoteController",
                        "requestAudioFocus": "Lcom/android/server/audio/AudioService;->requestAudioFocus",
                        "setBluetoothScoOn": "Lcom/android/server/audio/AudioService;->setBluetoothScoOn",
                        "setFocusPropertiesForPolicy": "Lcom/android/server/audio/AudioService;->setFocusPropertiesForPolicy",
                        "setMasterMute": "Lcom/android/server/audio/AudioService;->setMasterMute",
                        "setMicrophoneMute": "Lcom/android/server/audio/AudioService;->setMicrophoneMute",
                        "setMode": "Lcom/android/server/audio/AudioService;->setMode",
                        "setRemoteStreamVolume": "Lcom/android/server/audio/AudioService;->setRemoteStreamVolume",
                        "setRingerModeInternal": "Lcom/android/server/audio/AudioService;->setRingerModeInternal",
                        "setRingtonePlayer": "Lcom/android/server/audio/AudioService;->setRingtonePlayer",
                        "setSpeakerphoneOn": "Lcom/android/server/audio/AudioService;->setSpeakerphoneOn",
                        "setVolumeController": "Lcom/android/server/audio/AudioService;->setVolumeController",
                        "setVolumePolicy": "Lcom/android/server/audio/AudioService;->setVolumePolicy",
                        "startBluetoothSco": "Lcom/android/server/audio/AudioService;->startBluetoothSco",
                        "startBluetoothScoVirtualCall": "Lcom/android/server/audio/AudioService;->startBluetoothScoVirtualCall",
                        "stopBluetoothSco": "Lcom/android/server/audio/AudioService;->stopBluetoothSco"
                    }
                },
                "backup": {
                    "BackupManagerService$ActiveRestoreSession": {
                        "getAvailableRestoreSets": "Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->getAvailableRestoreSets",
                        "restoreAll": "Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restoreAll",
                        "restorePackage": "Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restorePackage",
                        "restoreSome": "Lcom/android/server/backup/BackupManagerService$ActiveRestoreSession;->restoreSome"
                    },
                    "BackupManagerService": {
                        "acknowledgeFullBackupOrRestore": "Lcom/android/server/backup/BackupManagerService;->acknowledgeFullBackupOrRestore",
                        "backupNow": "Lcom/android/server/backup/BackupManagerService;->backupNow",
                        "beginRestoreSession": "Lcom/android/server/backup/BackupManagerService;->beginRestoreSession",
                        "clearBackupData": "Lcom/android/server/backup/BackupManagerService;->clearBackupData",
                        "dataChanged": "Lcom/android/server/backup/BackupManagerService;->dataChanged",
                        "fullBackup": "Lcom/android/server/backup/BackupManagerService;->fullBackup",
                        "fullRestore": "Lcom/android/server/backup/BackupManagerService;->fullRestore",
                        "fullTransportBackup": "Lcom/android/server/backup/BackupManagerService;->fullTransportBackup",
                        "getConfigurationIntent": "Lcom/android/server/backup/BackupManagerService;->getConfigurationIntent",
                        "getCurrentTransport": "Lcom/android/server/backup/BackupManagerService;->getCurrentTransport",
                        "getDataManagementIntent": "Lcom/android/server/backup/BackupManagerService;->getDataManagementIntent",
                        "getDataManagementLabel": "Lcom/android/server/backup/BackupManagerService;->getDataManagementLabel",
                        "getDestinationString": "Lcom/android/server/backup/BackupManagerService;->getDestinationString",
                        "hasBackupPassword": "Lcom/android/server/backup/BackupManagerService;->hasBackupPassword",
                        "isBackupEnabled": "Lcom/android/server/backup/BackupManagerService;->isBackupEnabled",
                        "listAllTransports": "Lcom/android/server/backup/BackupManagerService;->listAllTransports",
                        "selectBackupTransport": "Lcom/android/server/backup/BackupManagerService;->selectBackupTransport",
                        "setAutoRestore": "Lcom/android/server/backup/BackupManagerService;->setAutoRestore",
                        "setBackupEnabled": "Lcom/android/server/backup/BackupManagerService;->setBackupEnabled",
                        "setBackupPassword": "Lcom/android/server/backup/BackupManagerService;->setBackupPassword",
                        "setBackupProvisioned": "Lcom/android/server/backup/BackupManagerService;->setBackupProvisioned"
                    },
                    "Trampoline": {
                        "acknowledgeFullBackupOrRestore": "Lcom/android/server/backup/Trampoline;->acknowledgeFullBackupOrRestore",
                        "backupNow": "Lcom/android/server/backup/Trampoline;->backupNow",
                        "beginRestoreSession": "Lcom/android/server/backup/Trampoline;->beginRestoreSession",
                        "clearBackupData": "Lcom/android/server/backup/Trampoline;->clearBackupData",
                        "dataChanged": "Lcom/android/server/backup/Trampoline;->dataChanged",
                        "fullBackup": "Lcom/android/server/backup/Trampoline;->fullBackup",
                        "fullRestore": "Lcom/android/server/backup/Trampoline;->fullRestore",
                        "fullTransportBackup": "Lcom/android/server/backup/Trampoline;->fullTransportBackup",
                        "getAvailableRestoreToken": "Lcom/android/server/backup/Trampoline;->getAvailableRestoreToken",
                        "getConfigurationIntent": "Lcom/android/server/backup/Trampoline;->getConfigurationIntent",
                        "getCurrentTransport": "Lcom/android/server/backup/Trampoline;->getCurrentTransport",
                        "getDataManagementIntent": "Lcom/android/server/backup/Trampoline;->getDataManagementIntent",
                        "getDataManagementLabel": "Lcom/android/server/backup/Trampoline;->getDataManagementLabel",
                        "getDestinationString": "Lcom/android/server/backup/Trampoline;->getDestinationString",
                        "hasBackupPassword": "Lcom/android/server/backup/Trampoline;->hasBackupPassword",
                        "isAppEligibleForBackup": "Lcom/android/server/backup/Trampoline;->isAppEligibleForBackup",
                        "isBackupEnabled": "Lcom/android/server/backup/Trampoline;->isBackupEnabled",
                        "listAllTransports": "Lcom/android/server/backup/Trampoline;->listAllTransports",
                        "requestBackup": "Lcom/android/server/backup/Trampoline;->requestBackup",
                        "restoreAtInstall": "Lcom/android/server/backup/Trampoline;->restoreAtInstall",
                        "selectBackupTransport": "Lcom/android/server/backup/Trampoline;->selectBackupTransport",
                        "setAutoRestore": "Lcom/android/server/backup/Trampoline;->setAutoRestore",
                        "setBackupEnabled": "Lcom/android/server/backup/Trampoline;->setBackupEnabled",
                        "setBackupPassword": "Lcom/android/server/backup/Trampoline;->setBackupPassword",
                        "setBackupProvisioned": "Lcom/android/server/backup/Trampoline;->setBackupProvisioned"
                    }
                },
                "BackupManagerService$ActiveRestoreSession": {
                    "getAvailableRestoreSets": "Lcom/android/server/BackupManagerService$ActiveRestoreSession;->getAvailableRestoreSets",
                    "restoreAll": "Lcom/android/server/BackupManagerService$ActiveRestoreSession;->restoreAll",
                    "restorePackage": "Lcom/android/server/BackupManagerService$ActiveRestoreSession;->restorePackage",
                    "restoreSome": "Lcom/android/server/BackupManagerService$ActiveRestoreSession;->restoreSome"
                },
                "BluetoothManagerService": {
                    "disable": "Lcom/android/server/BluetoothManagerService;->disable",
                    "enable": "Lcom/android/server/BluetoothManagerService;->enable",
                    "enableNoAutoConnect": "Lcom/android/server/BluetoothManagerService;->enableNoAutoConnect",
                    "getAddress": "Lcom/android/server/BluetoothManagerService;->getAddress",
                    "getName": "Lcom/android/server/BluetoothManagerService;->getName",
                    "registerStateChangeCallback": "Lcom/android/server/BluetoothManagerService;->registerStateChangeCallback",
                    "unregisterAdapter": "Lcom/android/server/BluetoothManagerService;->unregisterAdapter",
                    "unregisterStateChangeCallback": "Lcom/android/server/BluetoothManagerService;->unregisterStateChangeCallback"
                },
                "ConsumerIrService": {
                    "getCarrierFrequencies": "Lcom/android/server/ConsumerIrService;->getCarrierFrequencies",
                    "transmit": "Lcom/android/server/ConsumerIrService;->transmit"
                },
                "content": {
                    "ContentService": {
                        "addPeriodicSync": "Lcom/android/server/content/ContentService;->addPeriodicSync",
                        "cancelSync": "Lcom/android/server/content/ContentService;->cancelSync",
                        "cancelSyncAsUser": "Lcom/android/server/content/ContentService;->cancelSyncAsUser",
                        "getCache": "Lcom/android/server/content/ContentService;->getCache",
                        "getCurrentSyncs": "Lcom/android/server/content/ContentService;->getCurrentSyncs",
                        "getCurrentSyncsAsUser": "Lcom/android/server/content/ContentService;->getCurrentSyncsAsUser",
                        "getIsSyncable": "Lcom/android/server/content/ContentService;->getIsSyncable",
                        "getIsSyncableAsUser": "Lcom/android/server/content/ContentService;->getIsSyncableAsUser",
                        "getMasterSyncAutomatically": "Lcom/android/server/content/ContentService;->getMasterSyncAutomatically",
                        "getMasterSyncAutomaticallyAsUser": "Lcom/android/server/content/ContentService;->getMasterSyncAutomaticallyAsUser",
                        "getPeriodicSyncs": "Lcom/android/server/content/ContentService;->getPeriodicSyncs",
                        "getSyncAdapterPackagesForAuthorityAsUser": "Lcom/android/server/content/ContentService;->getSyncAdapterPackagesForAuthorityAsUser",
                        "getSyncAdapterTypes": "Lcom/android/server/content/ContentService;->getSyncAdapterTypes",
                        "getSyncAdapterTypesAsUser": "Lcom/android/server/content/ContentService;->getSyncAdapterTypesAsUser",
                        "getSyncAutomatically": "Lcom/android/server/content/ContentService;->getSyncAutomatically",
                        "getSyncAutomaticallyAsUser": "Lcom/android/server/content/ContentService;->getSyncAutomaticallyAsUser",
                        "getSyncStatus": "Lcom/android/server/content/ContentService;->getSyncStatus",
                        "getSyncStatusAsUser": "Lcom/android/server/content/ContentService;->getSyncStatusAsUser",
                        "isSyncActive": "Lcom/android/server/content/ContentService;->isSyncActive",
                        "isSyncPending": "Lcom/android/server/content/ContentService;->isSyncPending",
                        "isSyncPendingAsUser": "Lcom/android/server/content/ContentService;->isSyncPendingAsUser",
                        "putCache": "Lcom/android/server/content/ContentService;->putCache",
                        "registerContentObserver": "Lcom/android/server/content/ContentService;->registerContentObserver",
                        "removePeriodicSync": "Lcom/android/server/content/ContentService;->removePeriodicSync",
                        "setIsSyncable": "Lcom/android/server/content/ContentService;->setIsSyncable",
                        "setMasterSyncAutomatically": "Lcom/android/server/content/ContentService;->setMasterSyncAutomatically",
                        "setMasterSyncAutomaticallyAsUser": "Lcom/android/server/content/ContentService;->setMasterSyncAutomaticallyAsUser",
                        "setSyncAutomatically": "Lcom/android/server/content/ContentService;->setSyncAutomatically",
                        "setSyncAutomaticallyAsUser": "Lcom/android/server/content/ContentService;->setSyncAutomaticallyAsUser",
                        "sync": "Lcom/android/server/content/ContentService;->sync",
                        "syncAsUser": "Lcom/android/server/content/ContentService;->syncAsUser"
                    }
                },
                "DeviceIdleController$BinderService": {
                    "addPowerSaveTempWhitelistApp": "Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistApp",
                    "addPowerSaveTempWhitelistAppForMms": "Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForMms",
                    "addPowerSaveTempWhitelistAppForSms": "Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForSms",
                    "addPowerSaveWhitelistApp": "Lcom/android/server/DeviceIdleController$BinderService;->addPowerSaveWhitelistApp",
                    "exitIdle": "Lcom/android/server/DeviceIdleController$BinderService;->exitIdle",
                    "removePowerSaveWhitelistApp": "Lcom/android/server/DeviceIdleController$BinderService;->removePowerSaveWhitelistApp"
                },
                "devicepolicy": {
                    "DevicePolicyManagerService": {
                        "addCrossProfileIntentFilter": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addCrossProfileIntentFilter",
                        "addCrossProfileWidgetProvider": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addCrossProfileWidgetProvider",
                        "addPersistentPreferredActivity": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->addPersistentPreferredActivity",
                        "approveCaCert": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->approveCaCert",
                        "choosePrivateKeyAlias": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->choosePrivateKeyAlias",
                        "clearCrossProfileIntentFilters": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearCrossProfileIntentFilters",
                        "clearDeviceInitializer": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearDeviceInitializer",
                        "clearDeviceOwner": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearDeviceOwner",
                        "clearPackagePersistentPreferredActivities": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearPackagePersistentPreferredActivities",
                        "clearProfileOwner": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->clearProfileOwner",
                        "createAndInitializeUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->createAndInitializeUser",
                        "createAndManageUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->createAndManageUser",
                        "createUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->createUser",
                        "enableSystemApp": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enableSystemApp",
                        "enableSystemAppWithIntent": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enableSystemAppWithIntent",
                        "enforceCanManageCaCerts": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceCanManageCaCerts",
                        "forceRemoveActiveAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->forceRemoveActiveAdmin",
                        "getAccountTypesWithManagementDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAccountTypesWithManagementDisabled",
                        "getAccountTypesWithManagementDisabledAsUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAccountTypesWithManagementDisabledAsUser",
                        "getActiveAdmins": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdmins",
                        "getAlwaysOnVpnPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAlwaysOnVpnPackage",
                        "getApplicationRestrictions": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getApplicationRestrictions",
                        "getApplicationRestrictionsManagingPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getApplicationRestrictionsManagingPackage",
                        "getAutoTimeRequired": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getAutoTimeRequired",
                        "getBluetoothContactSharingDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getBluetoothContactSharingDisabled",
                        "getBluetoothContactSharingDisabledForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getBluetoothContactSharingDisabledForUser",
                        "getCameraDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCameraDisabled",
                        "getCertInstallerPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCertInstallerPackage",
                        "getCrossProfileCallerIdDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileCallerIdDisabled",
                        "getCrossProfileCallerIdDisabledForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileCallerIdDisabledForUser",
                        "getCrossProfileContactsSearchDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileContactsSearchDisabled",
                        "getCrossProfileContactsSearchDisabledForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileContactsSearchDisabledForUser",
                        "getCrossProfileWidgetProviders": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileWidgetProviders",
                        "getCurrentFailedPasswordAttempts": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getCurrentFailedPasswordAttempts",
                        "getDeviceOwnerComponent": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerComponent",
                        "getDeviceOwnerName": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerName",
                        "getDeviceOwnerUserId": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerUserId",
                        "getDoNotAskCredentialsOnBoot": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getDoNotAskCredentialsOnBoot",
                        "getForceEphemeralUsers": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getForceEphemeralUsers",
                        "getGlobalProxyAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getGlobalProxyAdmin",
                        "getKeepUninstalledPackages": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getKeepUninstalledPackages",
                        "getKeyguardDisabledFeatures": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getKeyguardDisabledFeatures",
                        "getLockTaskPackages": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLockTaskPackages",
                        "getLongSupportMessage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLongSupportMessage",
                        "getLongSupportMessageForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getLongSupportMessageForUser",
                        "getMaximumFailedPasswordsForWipe": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumFailedPasswordsForWipe",
                        "getMaximumTimeToLock": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLock",
                        "getMaximumTimeToLockForUserAndProfiles": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLockForUserAndProfiles",
                        "getOrganizationColor": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationColor",
                        "getOrganizationColorForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationColorForUser",
                        "getOrganizationName": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationName",
                        "getOrganizationNameForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationNameForUser",
                        "getPasswordExpiration": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpiration",
                        "getPasswordExpirationTimeout": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpirationTimeout",
                        "getPasswordHistoryLength": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordHistoryLength",
                        "getPasswordMinimumLength": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLength",
                        "getPasswordMinimumLetters": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLetters",
                        "getPasswordMinimumLowerCase": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumLowerCase",
                        "getPasswordMinimumNonLetter": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumNonLetter",
                        "getPasswordMinimumNumeric": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumNumeric",
                        "getPasswordMinimumSymbols": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumSymbols",
                        "getPasswordMinimumUpperCase": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordMinimumUpperCase",
                        "getPasswordQuality": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordQuality",
                        "getPermissionGrantState": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermissionGrantState",
                        "getPermissionPolicy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermissionPolicy",
                        "getPermittedAccessibilityServices": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedAccessibilityServices",
                        "getPermittedAccessibilityServicesForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedAccessibilityServicesForUser",
                        "getPermittedInputMethods": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedInputMethods",
                        "getPermittedInputMethodsForCurrentUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermittedInputMethodsForCurrentUser",
                        "getProfileOwnerName": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileOwnerName",
                        "getProfileWithMinimumFailedPasswordsForWipe": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileWithMinimumFailedPasswordsForWipe",
                        "getRemoveWarning": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRemoveWarning",
                        "getRequiredStrongAuthTimeout": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRequiredStrongAuthTimeout",
                        "getRestrictionsProvider": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getRestrictionsProvider",
                        "getScreenCaptureDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getScreenCaptureDisabled",
                        "getShortSupportMessage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getShortSupportMessage",
                        "getShortSupportMessageForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getShortSupportMessageForUser",
                        "getStorageEncryption": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getStorageEncryption",
                        "getStorageEncryptionStatus": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getStorageEncryptionStatus",
                        "getTrustAgentConfiguration": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getTrustAgentConfiguration",
                        "getTrustAgentFeaturesEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getTrustAgentFeaturesEnabled",
                        "getUserProvisioningState": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserProvisioningState",
                        "getUserRestrictions": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserRestrictions",
                        "getWifiMacAddress": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->getWifiMacAddress",
                        "hasGrantedPolicy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->hasGrantedPolicy",
                        "hasUserSetupCompleted": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->hasUserSetupCompleted",
                        "installCaCert": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->installCaCert",
                        "installKeyPair": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->installKeyPair",
                        "isAccessibilityServicePermittedByAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAccessibilityServicePermittedByAdmin",
                        "isActivePasswordSufficient": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isActivePasswordSufficient",
                        "isAdminActive": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAdminActive",
                        "isAffiliatedUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isAffiliatedUser",
                        "isApplicationHidden": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isApplicationHidden",
                        "isBackupServiceEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isBackupServiceEnabled",
                        "isCaCertApproved": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isCaCertApproved",
                        "isCallerApplicationRestrictionsManagingPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isCallerApplicationRestrictionsManagingPackage",
                        "isDeviceProvisioningConfigApplied": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isDeviceProvisioningConfigApplied",
                        "isInputMethodPermittedByAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isInputMethodPermittedByAdmin",
                        "isLockTaskPermitted": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isLockTaskPermitted",
                        "isManagedProfile": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isManagedProfile",
                        "isMasterVolumeMuted": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isMasterVolumeMuted",
                        "isPackageSuspended": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isPackageSuspended",
                        "isProfileActivePasswordSufficientForParent": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isProfileActivePasswordSufficientForParent",
                        "isProvisioningAllowed": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isProvisioningAllowed",
                        "isRemovingAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isRemovingAdmin",
                        "isSecurityLoggingEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isSecurityLoggingEnabled",
                        "isSystemOnlyUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isSystemOnlyUser",
                        "isUninstallBlocked": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallBlocked",
                        "isUninstallInQueue": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallInQueue",
                        "lockNow": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->lockNow",
                        "notifyLockTaskModeChanged": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->notifyLockTaskModeChanged",
                        "notifyPendingSystemUpdate": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->notifyPendingSystemUpdate",
                        "packageHasActiveAdmins": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->packageHasActiveAdmins",
                        "reboot": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reboot",
                        "removeActiveAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeActiveAdmin",
                        "removeCrossProfileWidgetProvider": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeCrossProfileWidgetProvider",
                        "removeKeyPair": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeKeyPair",
                        "removeUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->removeUser",
                        "reportFailedFingerprintAttempt": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedFingerprintAttempt",
                        "reportFailedPasswordAttempt": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedPasswordAttempt",
                        "reportKeyguardDismissed": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardDismissed",
                        "reportKeyguardSecured": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardSecured",
                        "reportSuccessfulFingerprintAttempt": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulFingerprintAttempt",
                        "reportSuccessfulPasswordAttempt": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulPasswordAttempt",
                        "requestBugreport": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->requestBugreport",
                        "resetPassword": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->resetPassword",
                        "retrievePreRebootSecurityLogs": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->retrievePreRebootSecurityLogs",
                        "retrieveSecurityLogs": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->retrieveSecurityLogs",
                        "setAccountManagementDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAccountManagementDisabled",
                        "setActiveAdmin": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setActiveAdmin",
                        "setActivePasswordState": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setActivePasswordState",
                        "setAffiliationIds": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAffiliationIds",
                        "setAlwaysOnVpnPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAlwaysOnVpnPackage",
                        "setApplicationHidden": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationHidden",
                        "setApplicationRestrictions": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationRestrictions",
                        "setApplicationRestrictionsManagingPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setApplicationRestrictionsManagingPackage",
                        "setAutoTimeRequired": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setAutoTimeRequired",
                        "setBackupServiceEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setBackupServiceEnabled",
                        "setBluetoothContactSharingDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setBluetoothContactSharingDisabled",
                        "setCameraDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCameraDisabled",
                        "setCertInstallerPackage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCertInstallerPackage",
                        "setCrossProfileCallerIdDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCrossProfileCallerIdDisabled",
                        "setCrossProfileContactsSearchDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setCrossProfileContactsSearchDisabled",
                        "setDeviceInitializer": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceInitializer",
                        "setDeviceOwner": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceOwner",
                        "setDeviceOwnerLockScreenInfo": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceOwnerLockScreenInfo",
                        "setDeviceProvisioningConfigApplied": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceProvisioningConfigApplied",
                        "setForceEphemeralUsers": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setForceEphemeralUsers",
                        "setGlobalProxy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setGlobalProxy",
                        "setGlobalSetting": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setGlobalSetting",
                        "setKeepUninstalledPackages": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeepUninstalledPackages",
                        "setKeyguardDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeyguardDisabled",
                        "setKeyguardDisabledFeatures": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeyguardDisabledFeatures",
                        "setLockTaskPackages": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setLockTaskPackages",
                        "setLongSupportMessage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setLongSupportMessage",
                        "setMasterVolumeMuted": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMasterVolumeMuted",
                        "setMaximumFailedPasswordsForWipe": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumFailedPasswordsForWipe",
                        "setMaximumTimeToLock": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumTimeToLock",
                        "setOrganizationColor": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationColor",
                        "setOrganizationColorForUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationColorForUser",
                        "setOrganizationName": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setOrganizationName",
                        "setPackagesSuspended": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPackagesSuspended",
                        "setPasswordExpirationTimeout": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordExpirationTimeout",
                        "setPasswordHistoryLength": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordHistoryLength",
                        "setPasswordMinimumLength": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLength",
                        "setPasswordMinimumLetters": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLetters",
                        "setPasswordMinimumLowerCase": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLowerCase",
                        "setPasswordMinimumNonLetter": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumNonLetter",
                        "setPasswordMinimumNumeric": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumNumeric",
                        "setPasswordMinimumSymbols": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumSymbols",
                        "setPasswordMinimumUpperCase": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumUpperCase",
                        "setPasswordQuality": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordQuality",
                        "setPermissionGrantState": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermissionGrantState",
                        "setPermissionPolicy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermissionPolicy",
                        "setPermittedAccessibilityServices": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermittedAccessibilityServices",
                        "setPermittedInputMethods": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setPermittedInputMethods",
                        "setProfileEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileEnabled",
                        "setProfileName": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileName",
                        "setProfileOwner": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setProfileOwner",
                        "setRecommendedGlobalProxy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRecommendedGlobalProxy",
                        "setRequiredStrongAuthTimeout": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRequiredStrongAuthTimeout",
                        "setRestrictionsProvider": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setRestrictionsProvider",
                        "setScreenCaptureDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setScreenCaptureDisabled",
                        "setSecureSetting": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSecureSetting",
                        "setSecurityLoggingEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSecurityLoggingEnabled",
                        "setShortSupportMessage": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setShortSupportMessage",
                        "setStatusBarDisabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setStatusBarDisabled",
                        "setStorageEncryption": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setStorageEncryption",
                        "setSystemUpdatePolicy": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setSystemUpdatePolicy",
                        "setTrustAgentConfiguration": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setTrustAgentConfiguration",
                        "setTrustAgentFeaturesEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setTrustAgentFeaturesEnabled",
                        "setUninstallBlocked": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUninstallBlocked",
                        "setUserEnabled": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserEnabled",
                        "setUserIcon": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserIcon",
                        "setUserProvisioningState": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserProvisioningState",
                        "setUserRestriction": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->setUserRestriction",
                        "switchUser": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->switchUser",
                        "uninstallCaCert": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->uninstallCaCert",
                        "uninstallCaCerts": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->uninstallCaCerts",
                        "uninstallPackageWithActiveAdmins": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->uninstallPackageWithActiveAdmins",
                        "wipeData": "Lcom/android/server/devicepolicy/DevicePolicyManagerService;->wipeData"
                    }
                },
                "display": {
                    "DisplayManagerService$BinderService": {
                        "connectWifiDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->connectWifiDisplay",
                        "createVirtualDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->createVirtualDisplay",
                        "forgetWifiDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->forgetWifiDisplay",
                        "pauseWifiDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->pauseWifiDisplay",
                        "renameWifiDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->renameWifiDisplay",
                        "requestColorMode": "Lcom/android/server/display/DisplayManagerService$BinderService;->requestColorMode",
                        "requestColorTransform": "Lcom/android/server/display/DisplayManagerService$BinderService;->requestColorTransform",
                        "resumeWifiDisplay": "Lcom/android/server/display/DisplayManagerService$BinderService;->resumeWifiDisplay",
                        "startWifiDisplayScan": "Lcom/android/server/display/DisplayManagerService$BinderService;->startWifiDisplayScan",
                        "stopWifiDisplayScan": "Lcom/android/server/display/DisplayManagerService$BinderService;->stopWifiDisplayScan"
                    },
                    "DisplayManagerService": {
                        "connectWifiDisplay": "Lcom/android/server/display/DisplayManagerService;->connectWifiDisplay",
                        "createVirtualDisplay": "Lcom/android/server/display/DisplayManagerService;->createVirtualDisplay",
                        "forgetWifiDisplay": "Lcom/android/server/display/DisplayManagerService;->forgetWifiDisplay",
                        "pauseWifiDisplay": "Lcom/android/server/display/DisplayManagerService;->pauseWifiDisplay",
                        "renameWifiDisplay": "Lcom/android/server/display/DisplayManagerService;->renameWifiDisplay",
                        "resumeWifiDisplay": "Lcom/android/server/display/DisplayManagerService;->resumeWifiDisplay",
                        "startWifiDisplayScan": "Lcom/android/server/display/DisplayManagerService;->startWifiDisplayScan",
                        "stopWifiDisplayScan": "Lcom/android/server/display/DisplayManagerService;->stopWifiDisplayScan"
                    }
                },
                "dreams": {
                    "DreamManagerService$BinderService": {
                        "awaken": "Lcom/android/server/dreams/DreamManagerService$BinderService;->awaken",
                        "dream": "Lcom/android/server/dreams/DreamManagerService$BinderService;->dream",
                        "getDefaultDreamComponent": "Lcom/android/server/dreams/DreamManagerService$BinderService;->getDefaultDreamComponent",
                        "getDreamComponents": "Lcom/android/server/dreams/DreamManagerService$BinderService;->getDreamComponents",
                        "isDreaming": "Lcom/android/server/dreams/DreamManagerService$BinderService;->isDreaming",
                        "setDreamComponents": "Lcom/android/server/dreams/DreamManagerService$BinderService;->setDreamComponents",
                        "testDream": "Lcom/android/server/dreams/DreamManagerService$BinderService;->testDream"
                    },
                    "DreamManagerService": {
                        "awaken": "Lcom/android/server/dreams/DreamManagerService;->awaken",
                        "dream": "Lcom/android/server/dreams/DreamManagerService;->dream",
                        "getDefaultDreamComponent": "Lcom/android/server/dreams/DreamManagerService;->getDefaultDreamComponent",
                        "getDreamComponents": "Lcom/android/server/dreams/DreamManagerService;->getDreamComponents",
                        "isDreaming": "Lcom/android/server/dreams/DreamManagerService;->isDreaming",
                        "setDreamComponents": "Lcom/android/server/dreams/DreamManagerService;->setDreamComponents",
                        "testDream": "Lcom/android/server/dreams/DreamManagerService;->testDream"
                    }
                },
                "DropBoxManagerService": {
                    "getNextEntry": "Lcom/android/server/DropBoxManagerService;->getNextEntry"
                },
                "ethernet": {
                    "EthernetServiceImpl": {
                        "addListener": "Lcom/android/server/ethernet/EthernetServiceImpl;->addListener",
                        "getConfiguration": "Lcom/android/server/ethernet/EthernetServiceImpl;->getConfiguration",
                        "isAvailable": "Lcom/android/server/ethernet/EthernetServiceImpl;->isAvailable",
                        "removeListener": "Lcom/android/server/ethernet/EthernetServiceImpl;->removeListener",
                        "setConfiguration": "Lcom/android/server/ethernet/EthernetServiceImpl;->setConfiguration"
                    }
                },
                "fingerprint": {
                    "FingerprintService$FingerprintServiceWrapper": {
                        "authenticate": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->authenticate",
                        "cancelAuthentication": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->cancelAuthentication",
                        "cancelEnrollment": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->cancelEnrollment",
                        "enroll": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->enroll",
                        "getEnrolledFingerprints": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->getEnrolledFingerprints",
                        "hasEnrolledFingerprints": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->hasEnrolledFingerprints",
                        "isHardwareDetected": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->isHardwareDetected",
                        "postEnroll": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->postEnroll",
                        "preEnroll": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->preEnroll",
                        "remove": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->remove",
                        "rename": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->rename",
                        "resetTimeout": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->resetTimeout",
                        "setActiveUser": "Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper;->setActiveUser"
                    }
                },
                "hdmi": {
                    "HdmiControlService$BinderService": {
                        "addDeviceEventListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->addDeviceEventListener",
                        "addHdmiMhlVendorCommandListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->addHdmiMhlVendorCommandListener",
                        "addHotplugEventListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->addHotplugEventListener",
                        "addSystemAudioModeChangeListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->addSystemAudioModeChangeListener",
                        "addVendorCommandListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->addVendorCommandListener",
                        "canChangeSystemAudioMode": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->canChangeSystemAudioMode",
                        "clearTimerRecording": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->clearTimerRecording",
                        "deviceSelect": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->deviceSelect",
                        "getActiveSource": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getActiveSource",
                        "getDeviceList": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getDeviceList",
                        "getInputDevices": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getInputDevices",
                        "getPortInfo": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getPortInfo",
                        "getSupportedTypes": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getSupportedTypes",
                        "getSystemAudioMode": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->getSystemAudioMode",
                        "oneTouchPlay": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->oneTouchPlay",
                        "portSelect": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->portSelect",
                        "queryDisplayStatus": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->queryDisplayStatus",
                        "removeHotplugEventListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->removeHotplugEventListener",
                        "removeSystemAudioModeChangeListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->removeSystemAudioModeChangeListener",
                        "sendKeyEvent": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendKeyEvent",
                        "sendMhlVendorCommand": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendMhlVendorCommand",
                        "sendStandby": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendStandby",
                        "sendVendorCommand": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->sendVendorCommand",
                        "setArcMode": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setArcMode",
                        "setHdmiRecordListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setHdmiRecordListener",
                        "setInputChangeListener": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setInputChangeListener",
                        "setProhibitMode": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setProhibitMode",
                        "setSystemAudioMode": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioMode",
                        "setSystemAudioMute": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioMute",
                        "setSystemAudioVolume": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->setSystemAudioVolume",
                        "startOneTouchRecord": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->startOneTouchRecord",
                        "startTimerRecording": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->startTimerRecording",
                        "stopOneTouchRecord": "Lcom/android/server/hdmi/HdmiControlService$BinderService;->stopOneTouchRecord"
                    }
                },
                "job": {
                    "JobSchedulerService$JobSchedulerStub": {
                        "schedule": "Lcom/android/server/job/JobSchedulerService$JobSchedulerStub;->schedule",
                        "scheduleAsPackage": "Lcom/android/server/job/JobSchedulerService$JobSchedulerStub;->scheduleAsPackage"
                    }
                },
                "LockSettingsService": {
                    "checkPassword": "Lcom/android/server/LockSettingsService;->checkPassword",
                    "checkPattern": "Lcom/android/server/LockSettingsService;->checkPattern",
                    "checkVoldPassword": "Lcom/android/server/LockSettingsService;->checkVoldPassword",
                    "getBoolean": "Lcom/android/server/LockSettingsService;->getBoolean",
                    "getLong": "Lcom/android/server/LockSettingsService;->getLong",
                    "getSeparateProfileChallengeEnabled": "Lcom/android/server/LockSettingsService;->getSeparateProfileChallengeEnabled",
                    "getString": "Lcom/android/server/LockSettingsService;->getString",
                    "getStrongAuthForUser": "Lcom/android/server/LockSettingsService;->getStrongAuthForUser",
                    "registerStrongAuthTracker": "Lcom/android/server/LockSettingsService;->registerStrongAuthTracker",
                    "removeUser": "Lcom/android/server/LockSettingsService;->removeUser",
                    "requireStrongAuth": "Lcom/android/server/LockSettingsService;->requireStrongAuth",
                    "resetKeyStore": "Lcom/android/server/LockSettingsService;->resetKeyStore",
                    "setBoolean": "Lcom/android/server/LockSettingsService;->setBoolean",
                    "setLockPassword": "Lcom/android/server/LockSettingsService;->setLockPassword",
                    "setLockPattern": "Lcom/android/server/LockSettingsService;->setLockPattern",
                    "setLong": "Lcom/android/server/LockSettingsService;->setLong",
                    "setSeparateProfileChallengeEnabled": "Lcom/android/server/LockSettingsService;->setSeparateProfileChallengeEnabled",
                    "setString": "Lcom/android/server/LockSettingsService;->setString",
                    "systemReady": "Lcom/android/server/LockSettingsService;->systemReady",
                    "unregisterStrongAuthTracker": "Lcom/android/server/LockSettingsService;->unregisterStrongAuthTracker",
                    "userPresent": "Lcom/android/server/LockSettingsService;->userPresent",
                    "verifyPassword": "Lcom/android/server/LockSettingsService;->verifyPassword",
                    "verifyPattern": "Lcom/android/server/LockSettingsService;->verifyPattern",
                    "verifyTiedProfileChallenge": "Lcom/android/server/LockSettingsService;->verifyTiedProfileChallenge"
                },
                "media": {
                    "MediaRouterService": {
                        "registerClientAsUser": "Lcom/android/server/media/MediaRouterService;->registerClientAsUser"
                    },
                    "MediaSessionRecord$SessionStub": {
                        "setFlags": "Lcom/android/server/media/MediaSessionRecord$SessionStub;->setFlags"
                    },
                    "projection": {
                        "MediaProjectionManagerService$BinderService": {
                            "addCallback": "Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->addCallback",
                            "createProjection": "Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->createProjection",
                            "getActiveProjectionInfo": "Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->getActiveProjectionInfo",
                            "removeCallback": "Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->removeCallback",
                            "stopActiveProjection": "Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->stopActiveProjection"
                        }
                    }
                },
                "MmsServiceBroker$BinderService": {
                    "addMultimediaMessageDraft": "Lcom/android/server/MmsServiceBroker$BinderService;->addMultimediaMessageDraft",
                    "addTextMessageDraft": "Lcom/android/server/MmsServiceBroker$BinderService;->addTextMessageDraft",
                    "archiveStoredConversation": "Lcom/android/server/MmsServiceBroker$BinderService;->archiveStoredConversation",
                    "deleteStoredConversation": "Lcom/android/server/MmsServiceBroker$BinderService;->deleteStoredConversation",
                    "deleteStoredMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->deleteStoredMessage",
                    "downloadMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->downloadMessage",
                    "importMultimediaMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->importMultimediaMessage",
                    "importTextMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->importTextMessage",
                    "sendMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->sendMessage",
                    "sendStoredMessage": "Lcom/android/server/MmsServiceBroker$BinderService;->sendStoredMessage",
                    "setAutoPersisting": "Lcom/android/server/MmsServiceBroker$BinderService;->setAutoPersisting",
                    "updateStoredMessageStatus": "Lcom/android/server/MmsServiceBroker$BinderService;->updateStoredMessageStatus"
                },
                "NetworkScoreService": {
                    "clearScores": "Lcom/android/server/NetworkScoreService;->clearScores",
                    "disableScoring": "Lcom/android/server/NetworkScoreService;->disableScoring",
                    "registerNetworkScoreCache": "Lcom/android/server/NetworkScoreService;->registerNetworkScoreCache",
                    "setActiveScorer": "Lcom/android/server/NetworkScoreService;->setActiveScorer",
                    "updateScores": "Lcom/android/server/NetworkScoreService;->updateScores"
                },
                "power": {
                    "PowerManagerService$BinderService": {
                        "acquireWakeLock": "Lcom/android/server/power/PowerManagerService$BinderService;->acquireWakeLock",
                        "acquireWakeLockWithUid": "Lcom/android/server/power/PowerManagerService$BinderService;->acquireWakeLockWithUid",
                        "boostScreenBrightness": "Lcom/android/server/power/PowerManagerService$BinderService;->boostScreenBrightness",
                        "crash": "Lcom/android/server/power/PowerManagerService$BinderService;->crash",
                        "goToSleep": "Lcom/android/server/power/PowerManagerService$BinderService;->goToSleep",
                        "nap": "Lcom/android/server/power/PowerManagerService$BinderService;->nap",
                        "powerHint": "Lcom/android/server/power/PowerManagerService$BinderService;->powerHint",
                        "reboot": "Lcom/android/server/power/PowerManagerService$BinderService;->reboot",
                        "rebootSafeMode": "Lcom/android/server/power/PowerManagerService$BinderService;->rebootSafeMode",
                        "releaseWakeLock": "Lcom/android/server/power/PowerManagerService$BinderService;->releaseWakeLock",
                        "setAttentionLight": "Lcom/android/server/power/PowerManagerService$BinderService;->setAttentionLight",
                        "setPowerSaveMode": "Lcom/android/server/power/PowerManagerService$BinderService;->setPowerSaveMode",
                        "setStayOnSetting": "Lcom/android/server/power/PowerManagerService$BinderService;->setStayOnSetting",
                        "setTemporaryScreenAutoBrightnessAdjustmentSettingOverride": "Lcom/android/server/power/PowerManagerService$BinderService;->setTemporaryScreenAutoBrightnessAdjustmentSettingOverride",
                        "setTemporaryScreenBrightnessSettingOverride": "Lcom/android/server/power/PowerManagerService$BinderService;->setTemporaryScreenBrightnessSettingOverride",
                        "shutdown": "Lcom/android/server/power/PowerManagerService$BinderService;->shutdown",
                        "updateWakeLockUids": "Lcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockUids",
                        "updateWakeLockWorkSource": "Lcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockWorkSource",
                        "userActivity": "Lcom/android/server/power/PowerManagerService$BinderService;->userActivity",
                        "wakeUp": "Lcom/android/server/power/PowerManagerService$BinderService;->wakeUp"
                    },
                    "PowerManagerService": {
                        "acquireWakeLock": "Lcom/android/server/power/PowerManagerService;->acquireWakeLock",
                        "acquireWakeLockWithUid": "Lcom/android/server/power/PowerManagerService;->acquireWakeLockWithUid",
                        "crash": "Lcom/android/server/power/PowerManagerService;->crash",
                        "goToSleep": "Lcom/android/server/power/PowerManagerService;->goToSleep",
                        "nap": "Lcom/android/server/power/PowerManagerService;->nap",
                        "reboot": "Lcom/android/server/power/PowerManagerService;->reboot",
                        "releaseWakeLock": "Lcom/android/server/power/PowerManagerService;->releaseWakeLock",
                        "setAttentionLight": "Lcom/android/server/power/PowerManagerService;->setAttentionLight",
                        "setStayOnSetting": "Lcom/android/server/power/PowerManagerService;->setStayOnSetting",
                        "setTemporaryScreenAutoBrightnessAdjustmentSettingOverride": "Lcom/android/server/power/PowerManagerService;->setTemporaryScreenAutoBrightnessAdjustmentSettingOverride",
                        "setTemporaryScreenBrightnessSettingOverride": "Lcom/android/server/power/PowerManagerService;->setTemporaryScreenBrightnessSettingOverride",
                        "shutdown": "Lcom/android/server/power/PowerManagerService;->shutdown",
                        "updateWakeLockUids": "Lcom/android/server/power/PowerManagerService;->updateWakeLockUids",
                        "updateWakeLockWorkSource": "Lcom/android/server/power/PowerManagerService;->updateWakeLockWorkSource",
                        "userActivity": "Lcom/android/server/power/PowerManagerService;->userActivity",
                        "wakeUp": "Lcom/android/server/power/PowerManagerService;->wakeUp"
                    }
                },
                "print": {
                    "PrintManagerService$PrintManagerImpl": {
                        "addPrintJobStateChangeListener": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->addPrintJobStateChangeListener",
                        "cancelPrintJob": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->cancelPrintJob",
                        "getPrintJobInfo": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->getPrintJobInfo",
                        "getPrintJobInfos": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->getPrintJobInfos",
                        "print": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->print",
                        "restartPrintJob": "Lcom/android/server/print/PrintManagerService$PrintManagerImpl;->restartPrintJob"
                    },
                    "PrintManagerService": {
                        "addPrintJobStateChangeListener": "Lcom/android/server/print/PrintManagerService;->addPrintJobStateChangeListener",
                        "cancelPrintJob": "Lcom/android/server/print/PrintManagerService;->cancelPrintJob",
                        "createPrinterDiscoverySession": "Lcom/android/server/print/PrintManagerService;->createPrinterDiscoverySession",
                        "destroyPrinterDiscoverySession": "Lcom/android/server/print/PrintManagerService;->destroyPrinterDiscoverySession",
                        "getEnabledPrintServices": "Lcom/android/server/print/PrintManagerService;->getEnabledPrintServices",
                        "getInstalledPrintServices": "Lcom/android/server/print/PrintManagerService;->getInstalledPrintServices",
                        "getPrintJobInfo": "Lcom/android/server/print/PrintManagerService;->getPrintJobInfo",
                        "getPrintJobInfos": "Lcom/android/server/print/PrintManagerService;->getPrintJobInfos",
                        "print": "Lcom/android/server/print/PrintManagerService;->print",
                        "removePrintJobStateChangeListener": "Lcom/android/server/print/PrintManagerService;->removePrintJobStateChangeListener",
                        "restartPrintJob": "Lcom/android/server/print/PrintManagerService;->restartPrintJob",
                        "startPrinterDiscovery": "Lcom/android/server/print/PrintManagerService;->startPrinterDiscovery",
                        "startPrinterStateTracking": "Lcom/android/server/print/PrintManagerService;->startPrinterStateTracking",
                        "stopPrinterDiscovery": "Lcom/android/server/print/PrintManagerService;->stopPrinterDiscovery",
                        "stopPrinterStateTracking": "Lcom/android/server/print/PrintManagerService;->stopPrinterStateTracking",
                        "validatePrinters": "Lcom/android/server/print/PrintManagerService;->validatePrinters"
                    }
                },
                "RecoverySystemService$BinderService": {
                    "clearBcb": "Lcom/android/server/RecoverySystemService$BinderService;->clearBcb",
                    "rebootRecoveryWithCommand": "Lcom/android/server/RecoverySystemService$BinderService;->rebootRecoveryWithCommand",
                    "setupBcb": "Lcom/android/server/RecoverySystemService$BinderService;->setupBcb",
                    "uncrypt": "Lcom/android/server/RecoverySystemService$BinderService;->uncrypt"
                },
                "soundtrigger": {
                    "SoundTriggerService$SoundTriggerServiceStub": {
                        "deleteSoundModel": "Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->deleteSoundModel",
                        "getSoundModel": "Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->getSoundModel",
                        "startRecognition": "Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->startRecognition",
                        "stopRecognition": "Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->stopRecognition",
                        "updateSoundModel": "Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->updateSoundModel"
                    }
                },
                "statusbar": {
                    "StatusBarManagerService": {
                        "addTile": "Lcom/android/server/statusbar/StatusBarManagerService;->addTile",
                        "clearNotificationEffects": "Lcom/android/server/statusbar/StatusBarManagerService;->clearNotificationEffects",
                        "clickTile": "Lcom/android/server/statusbar/StatusBarManagerService;->clickTile",
                        "collapsePanels": "Lcom/android/server/statusbar/StatusBarManagerService;->collapsePanels",
                        "disable": "Lcom/android/server/statusbar/StatusBarManagerService;->disable",
                        "disable2": "Lcom/android/server/statusbar/StatusBarManagerService;->disable2",
                        "disable2ForUser": "Lcom/android/server/statusbar/StatusBarManagerService;->disable2ForUser",
                        "disableForUser": "Lcom/android/server/statusbar/StatusBarManagerService;->disableForUser",
                        "expandNotificationsPanel": "Lcom/android/server/statusbar/StatusBarManagerService;->expandNotificationsPanel",
                        "expandSettingsPanel": "Lcom/android/server/statusbar/StatusBarManagerService;->expandSettingsPanel",
                        "handleSystemNavigationKey": "Lcom/android/server/statusbar/StatusBarManagerService;->handleSystemNavigationKey",
                        "onClearAllNotifications": "Lcom/android/server/statusbar/StatusBarManagerService;->onClearAllNotifications",
                        "onNotificationActionClick": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationActionClick",
                        "onNotificationClear": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationClear",
                        "onNotificationClick": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationClick",
                        "onNotificationError": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationError",
                        "onNotificationExpansionChanged": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationExpansionChanged",
                        "onNotificationVisibilityChanged": "Lcom/android/server/statusbar/StatusBarManagerService;->onNotificationVisibilityChanged",
                        "onPanelHidden": "Lcom/android/server/statusbar/StatusBarManagerService;->onPanelHidden",
                        "onPanelRevealed": "Lcom/android/server/statusbar/StatusBarManagerService;->onPanelRevealed",
                        "registerStatusBar": "Lcom/android/server/statusbar/StatusBarManagerService;->registerStatusBar",
                        "removeIcon": "Lcom/android/server/statusbar/StatusBarManagerService;->removeIcon",
                        "remTile": "Lcom/android/server/statusbar/StatusBarManagerService;->remTile",
                        "setIcon": "Lcom/android/server/statusbar/StatusBarManagerService;->setIcon",
                        "setIconVisibility": "Lcom/android/server/statusbar/StatusBarManagerService;->setIconVisibility",
                        "setImeWindowStatus": "Lcom/android/server/statusbar/StatusBarManagerService;->setImeWindowStatus",
                        "setSystemUiVisibility": "Lcom/android/server/statusbar/StatusBarManagerService;->setSystemUiVisibility",
                        "topAppWindowChanged": "Lcom/android/server/statusbar/StatusBarManagerService;->topAppWindowChanged"
                    }
                },
                "telecom": {
                    "TelecomService$TelecomServiceImpl": {
                        "acceptRingingCall": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->acceptRingingCall",
                        "cancelMissedCallsNotification": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->cancelMissedCallsNotification",
                        "clearAccounts": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->clearAccounts",
                        "endCall": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->endCall",
                        "getAdnUriForPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getAdnUriForPhoneAccount",
                        "getCallCapablePhoneAccounts": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getCallCapablePhoneAccounts",
                        "getCurrentTtyMode": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getCurrentTtyMode",
                        "getDefaultOutgoingPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getDefaultOutgoingPhoneAccount",
                        "getLine1Number": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getLine1Number",
                        "getPhoneAccountsSupportingScheme": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getPhoneAccountsSupportingScheme",
                        "getSimCallManagers": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->getSimCallManagers",
                        "handlePinMmi": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->handlePinMmi",
                        "handlePinMmiForPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->handlePinMmiForPhoneAccount",
                        "hasVoiceMailNumber": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->hasVoiceMailNumber",
                        "isInCall": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->isInCall",
                        "isRinging": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->isRinging",
                        "isTtySupported": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->isTtySupported",
                        "isVoiceMailNumber": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->isVoiceMailNumber",
                        "registerPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->registerPhoneAccount",
                        "setSimCallManager": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->setSimCallManager",
                        "setUserSelectedOutgoingPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->setUserSelectedOutgoingPhoneAccount",
                        "showInCallScreen": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->showInCallScreen",
                        "silenceRinger": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->silenceRinger",
                        "unregisterPhoneAccount": "Lcom/android/server/telecom/TelecomService$TelecomServiceImpl;->unregisterPhoneAccount"
                    },
                    "TelecomServiceImpl": {
                        "acceptRingingCall": "Lcom/android/server/telecom/TelecomServiceImpl;->acceptRingingCall",
                        "cancelMissedCallsNotification": "Lcom/android/server/telecom/TelecomServiceImpl;->cancelMissedCallsNotification",
                        "clearAccounts": "Lcom/android/server/telecom/TelecomServiceImpl;->clearAccounts",
                        "endCall": "Lcom/android/server/telecom/TelecomServiceImpl;->endCall",
                        "getCurrentTtyMode": "Lcom/android/server/telecom/TelecomServiceImpl;->getCurrentTtyMode",
                        "handlePinMmi": "Lcom/android/server/telecom/TelecomServiceImpl;->handlePinMmi",
                        "isInCall": "Lcom/android/server/telecom/TelecomServiceImpl;->isInCall",
                        "isRinging": "Lcom/android/server/telecom/TelecomServiceImpl;->isRinging",
                        "isTtySupported": "Lcom/android/server/telecom/TelecomServiceImpl;->isTtySupported",
                        "registerPhoneAccount": "Lcom/android/server/telecom/TelecomServiceImpl;->registerPhoneAccount",
                        "setSimCallManager": "Lcom/android/server/telecom/TelecomServiceImpl;->setSimCallManager",
                        "setUserSelectedOutgoingPhoneAccount": "Lcom/android/server/telecom/TelecomServiceImpl;->setUserSelectedOutgoingPhoneAccount",
                        "showInCallScreen": "Lcom/android/server/telecom/TelecomServiceImpl;->showInCallScreen",
                        "silenceRinger": "Lcom/android/server/telecom/TelecomServiceImpl;->silenceRinger",
                        "unregisterPhoneAccount": "Lcom/android/server/telecom/TelecomServiceImpl;->unregisterPhoneAccount"
                    }
                },
                "TextServicesManagerService": {
                    "setCurrentSpellChecker": "Lcom/android/server/TextServicesManagerService;->setCurrentSpellChecker",
                    "setCurrentSpellCheckerSubtype": "Lcom/android/server/TextServicesManagerService;->setCurrentSpellCheckerSubtype",
                    "setSpellCheckerEnabled": "Lcom/android/server/TextServicesManagerService;->setSpellCheckerEnabled"
                },
                "tv": {
                    "TvInputManagerService$BinderService": {
                        "acquireTvInputHardware": "Lcom/android/server/tv/TvInputManagerService$BinderService;->acquireTvInputHardware",
                        "addBlockedRating": "Lcom/android/server/tv/TvInputManagerService$BinderService;->addBlockedRating",
                        "captureFrame": "Lcom/android/server/tv/TvInputManagerService$BinderService;->captureFrame",
                        "getAvailableTvStreamConfigList": "Lcom/android/server/tv/TvInputManagerService$BinderService;->getAvailableTvStreamConfigList",
                        "getDvbDeviceList": "Lcom/android/server/tv/TvInputManagerService$BinderService;->getDvbDeviceList",
                        "getHardwareList": "Lcom/android/server/tv/TvInputManagerService$BinderService;->getHardwareList",
                        "openDvbDevice": "Lcom/android/server/tv/TvInputManagerService$BinderService;->openDvbDevice",
                        "releaseTvInputHardware": "Lcom/android/server/tv/TvInputManagerService$BinderService;->releaseTvInputHardware",
                        "removeBlockedRating": "Lcom/android/server/tv/TvInputManagerService$BinderService;->removeBlockedRating",
                        "setParentalControlsEnabled": "Lcom/android/server/tv/TvInputManagerService$BinderService;->setParentalControlsEnabled",
                        "unblockContent": "Lcom/android/server/tv/TvInputManagerService$BinderService;->unblockContent"
                    },
                    "TvInputManagerService$ServiceCallback": {
                        "addHardwareInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHardwareInput",
                        "addHardwareTvInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHardwareTvInput",
                        "addHdmiInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHdmiInput",
                        "addHdmiTvInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->addHdmiTvInput",
                        "removeHardwareInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->removeHardwareInput",
                        "removeTvInput": "Lcom/android/server/tv/TvInputManagerService$ServiceCallback;->removeTvInput"
                    }
                },
                "UpdateLockService": {
                    "acquireUpdateLock": "Lcom/android/server/UpdateLockService;->acquireUpdateLock",
                    "releaseUpdateLock": "Lcom/android/server/UpdateLockService;->releaseUpdateLock"
                },
                "usage": {
                    "UsageStatsService$BinderService": {
                        "onCarrierPrivilegedAppsChanged": "Lcom/android/server/usage/UsageStatsService$BinderService;->onCarrierPrivilegedAppsChanged",
                        "queryConfigurationStats": "Lcom/android/server/usage/UsageStatsService$BinderService;->queryConfigurationStats",
                        "queryEvents": "Lcom/android/server/usage/UsageStatsService$BinderService;->queryEvents",
                        "queryUsageStats": "Lcom/android/server/usage/UsageStatsService$BinderService;->queryUsageStats",
                        "setAppInactive": "Lcom/android/server/usage/UsageStatsService$BinderService;->setAppInactive"
                    }
                },
                "voiceinteraction": {
                    "VoiceInteractionManagerService$VoiceInteractionManagerServiceStub": {
                        "activeServiceSupportsAssist": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->activeServiceSupportsAssist",
                        "activeServiceSupportsLaunchFromKeyguard": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->activeServiceSupportsLaunchFromKeyguard",
                        "deleteKeyphraseSoundModel": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->deleteKeyphraseSoundModel",
                        "getActiveServiceComponentName": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getActiveServiceComponentName",
                        "getKeyphraseSoundModel": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getKeyphraseSoundModel",
                        "hideCurrentSession": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->hideCurrentSession",
                        "isSessionRunning": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->isSessionRunning",
                        "launchVoiceAssistFromKeyguard": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->launchVoiceAssistFromKeyguard",
                        "onLockscreenShown": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onLockscreenShown",
                        "registerVoiceInteractionSessionListener": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->registerVoiceInteractionSessionListener",
                        "showSessionForActiveService": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->showSessionForActiveService",
                        "updateKeyphraseSoundModel": "Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->updateKeyphraseSoundModel"
                    }
                },
                "wallpaper": {
                    "WallpaperManagerService": {
                        "clearWallpaper": "Lcom/android/server/wallpaper/WallpaperManagerService;->clearWallpaper",
                        "setDimensionHints": "Lcom/android/server/wallpaper/WallpaperManagerService;->setDimensionHints",
                        "setDisplayPadding": "Lcom/android/server/wallpaper/WallpaperManagerService;->setDisplayPadding",
                        "setLockWallpaperCallback": "Lcom/android/server/wallpaper/WallpaperManagerService;->setLockWallpaperCallback",
                        "setWallpaper": "Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaper",
                        "setWallpaperComponent": "Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaperComponent",
                        "setWallpaperComponentChecked": "Lcom/android/server/wallpaper/WallpaperManagerService;->setWallpaperComponentChecked"
                    }
                },
                "webkit": {
                    "WebViewUpdateService$BinderService": {
                        "changeProviderAndSetting": "Lcom/android/server/webkit/WebViewUpdateService$BinderService;->changeProviderAndSetting",
                        "enableFallbackLogic": "Lcom/android/server/webkit/WebViewUpdateService$BinderService;->enableFallbackLogic"
                    }
                },
                "wifi": {
                    "p2p": {
                        "WifiP2pServiceImpl": {
                            "getMessenger": "Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->getMessenger",
                            "getP2pStateMachineMessenger": "Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->getP2pStateMachineMessenger",
                            "setMiracastMode": "Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;->setMiracastMode"
                        }
                    },
                    "WifiService": {
                        "acquireMulticastLock": "Lcom/android/server/wifi/WifiService;->acquireMulticastLock",
                        "acquireWifiLock": "Lcom/android/server/wifi/WifiService;->acquireWifiLock",
                        "addOrUpdateNetwork": "Lcom/android/server/wifi/WifiService;->addOrUpdateNetwork",
                        "addToBlacklist": "Lcom/android/server/wifi/WifiService;->addToBlacklist",
                        "captivePortalCheckComplete": "Lcom/android/server/wifi/WifiService;->captivePortalCheckComplete",
                        "clearBlacklist": "Lcom/android/server/wifi/WifiService;->clearBlacklist",
                        "disableNetwork": "Lcom/android/server/wifi/WifiService;->disableNetwork",
                        "disconnect": "Lcom/android/server/wifi/WifiService;->disconnect",
                        "enableNetwork": "Lcom/android/server/wifi/WifiService;->enableNetwork",
                        "getBatchedScanResults": "Lcom/android/server/wifi/WifiService;->getBatchedScanResults",
                        "getConfigFile": "Lcom/android/server/wifi/WifiService;->getConfigFile",
                        "getConfiguredNetworks": "Lcom/android/server/wifi/WifiService;->getConfiguredNetworks",
                        "getConnectionInfo": "Lcom/android/server/wifi/WifiService;->getConnectionInfo",
                        "getDhcpInfo": "Lcom/android/server/wifi/WifiService;->getDhcpInfo",
                        "getFrequencyBand": "Lcom/android/server/wifi/WifiService;->getFrequencyBand",
                        "getScanResults": "Lcom/android/server/wifi/WifiService;->getScanResults",
                        "getWifiApConfiguration": "Lcom/android/server/wifi/WifiService;->getWifiApConfiguration",
                        "getWifiApEnabledState": "Lcom/android/server/wifi/WifiService;->getWifiApEnabledState",
                        "getWifiEnabledState": "Lcom/android/server/wifi/WifiService;->getWifiEnabledState",
                        "getWifiServiceMessenger": "Lcom/android/server/wifi/WifiService;->getWifiServiceMessenger",
                        "getWifiStateMachineMessenger": "Lcom/android/server/wifi/WifiService;->getWifiStateMachineMessenger",
                        "initializeMulticastFiltering": "Lcom/android/server/wifi/WifiService;->initializeMulticastFiltering",
                        "isMulticastEnabled": "Lcom/android/server/wifi/WifiService;->isMulticastEnabled",
                        "isScanAlwaysAvailable": "Lcom/android/server/wifi/WifiService;->isScanAlwaysAvailable",
                        "pingSupplicant": "Lcom/android/server/wifi/WifiService;->pingSupplicant",
                        "pollBatchedScan": "Lcom/android/server/wifi/WifiService;->pollBatchedScan",
                        "reassociate": "Lcom/android/server/wifi/WifiService;->reassociate",
                        "reconnect": "Lcom/android/server/wifi/WifiService;->reconnect",
                        "releaseMulticastLock": "Lcom/android/server/wifi/WifiService;->releaseMulticastLock",
                        "releaseWifiLock": "Lcom/android/server/wifi/WifiService;->releaseWifiLock",
                        "removeNetwork": "Lcom/android/server/wifi/WifiService;->removeNetwork",
                        "requestBatchedScan": "Lcom/android/server/wifi/WifiService;->requestBatchedScan",
                        "saveConfiguration": "Lcom/android/server/wifi/WifiService;->saveConfiguration",
                        "setCountryCode": "Lcom/android/server/wifi/WifiService;->setCountryCode",
                        "setFrequencyBand": "Lcom/android/server/wifi/WifiService;->setFrequencyBand",
                        "setWifiApConfiguration": "Lcom/android/server/wifi/WifiService;->setWifiApConfiguration",
                        "setWifiApEnabled": "Lcom/android/server/wifi/WifiService;->setWifiApEnabled",
                        "setWifiEnabled": "Lcom/android/server/wifi/WifiService;->setWifiEnabled",
                        "startScan": "Lcom/android/server/wifi/WifiService;->startScan",
                        "startWifi": "Lcom/android/server/wifi/WifiService;->startWifi",
                        "stopBatchedScan": "Lcom/android/server/wifi/WifiService;->stopBatchedScan",
                        "stopWifi": "Lcom/android/server/wifi/WifiService;->stopWifi",
                        "updateWifiLockWorkSource": "Lcom/android/server/wifi/WifiService;->updateWifiLockWorkSource"
                    },
                    "WifiServiceImpl": {
                        "acquireMulticastLock": "Lcom/android/server/wifi/WifiServiceImpl;->acquireMulticastLock",
                        "acquireWifiLock": "Lcom/android/server/wifi/WifiServiceImpl;->acquireWifiLock",
                        "addOrUpdateNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->addOrUpdateNetwork",
                        "addToBlacklist": "Lcom/android/server/wifi/WifiServiceImpl;->addToBlacklist",
                        "clearBlacklist": "Lcom/android/server/wifi/WifiServiceImpl;->clearBlacklist",
                        "disableEphemeralNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->disableEphemeralNetwork",
                        "disableNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->disableNetwork",
                        "disconnect": "Lcom/android/server/wifi/WifiServiceImpl;->disconnect",
                        "enableAggressiveHandover": "Lcom/android/server/wifi/WifiServiceImpl;->enableAggressiveHandover",
                        "enableNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->enableNetwork",
                        "enableVerboseLogging": "Lcom/android/server/wifi/WifiServiceImpl;->enableVerboseLogging",
                        "enableWifiConnectivityManager": "Lcom/android/server/wifi/WifiServiceImpl;->enableWifiConnectivityManager",
                        "factoryReset": "Lcom/android/server/wifi/WifiServiceImpl;->factoryReset",
                        "getAggressiveHandover": "Lcom/android/server/wifi/WifiServiceImpl;->getAggressiveHandover",
                        "getAllowScansWithTraffic": "Lcom/android/server/wifi/WifiServiceImpl;->getAllowScansWithTraffic",
                        "getBatchedScanResults": "Lcom/android/server/wifi/WifiServiceImpl;->getBatchedScanResults",
                        "getChannelList": "Lcom/android/server/wifi/WifiServiceImpl;->getChannelList",
                        "getConfigFile": "Lcom/android/server/wifi/WifiServiceImpl;->getConfigFile",
                        "getConfiguredNetworks": "Lcom/android/server/wifi/WifiServiceImpl;->getConfiguredNetworks",
                        "getConnectionInfo": "Lcom/android/server/wifi/WifiServiceImpl;->getConnectionInfo",
                        "getConnectionStatistics": "Lcom/android/server/wifi/WifiServiceImpl;->getConnectionStatistics",
                        "getCountryCode": "Lcom/android/server/wifi/WifiServiceImpl;->getCountryCode",
                        "getCurrentNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->getCurrentNetwork",
                        "getDhcpInfo": "Lcom/android/server/wifi/WifiServiceImpl;->getDhcpInfo",
                        "getEnableAutoJoinWhenAssociated": "Lcom/android/server/wifi/WifiServiceImpl;->getEnableAutoJoinWhenAssociated",
                        "getFrequencyBand": "Lcom/android/server/wifi/WifiServiceImpl;->getFrequencyBand",
                        "getMatchingWifiConfig": "Lcom/android/server/wifi/WifiServiceImpl;->getMatchingWifiConfig",
                        "getPrivilegedConfiguredNetworks": "Lcom/android/server/wifi/WifiServiceImpl;->getPrivilegedConfiguredNetworks",
                        "getScanResults": "Lcom/android/server/wifi/WifiServiceImpl;->getScanResults",
                        "getSupportedFeatures": "Lcom/android/server/wifi/WifiServiceImpl;->getSupportedFeatures",
                        "getVerboseLoggingLevel": "Lcom/android/server/wifi/WifiServiceImpl;->getVerboseLoggingLevel",
                        "getWifiApConfiguration": "Lcom/android/server/wifi/WifiServiceImpl;->getWifiApConfiguration",
                        "getWifiApEnabledState": "Lcom/android/server/wifi/WifiServiceImpl;->getWifiApEnabledState",
                        "getWifiEnabledState": "Lcom/android/server/wifi/WifiServiceImpl;->getWifiEnabledState",
                        "getWifiServiceMessenger": "Lcom/android/server/wifi/WifiServiceImpl;->getWifiServiceMessenger",
                        "getWpsNfcConfigurationToken": "Lcom/android/server/wifi/WifiServiceImpl;->getWpsNfcConfigurationToken",
                        "initializeMulticastFiltering": "Lcom/android/server/wifi/WifiServiceImpl;->initializeMulticastFiltering",
                        "isMulticastEnabled": "Lcom/android/server/wifi/WifiServiceImpl;->isMulticastEnabled",
                        "isScanAlwaysAvailable": "Lcom/android/server/wifi/WifiServiceImpl;->isScanAlwaysAvailable",
                        "pingSupplicant": "Lcom/android/server/wifi/WifiServiceImpl;->pingSupplicant",
                        "pollBatchedScan": "Lcom/android/server/wifi/WifiServiceImpl;->pollBatchedScan",
                        "reassociate": "Lcom/android/server/wifi/WifiServiceImpl;->reassociate",
                        "reconnect": "Lcom/android/server/wifi/WifiServiceImpl;->reconnect",
                        "releaseMulticastLock": "Lcom/android/server/wifi/WifiServiceImpl;->releaseMulticastLock",
                        "releaseWifiLock": "Lcom/android/server/wifi/WifiServiceImpl;->releaseWifiLock",
                        "removeNetwork": "Lcom/android/server/wifi/WifiServiceImpl;->removeNetwork",
                        "reportActivityInfo": "Lcom/android/server/wifi/WifiServiceImpl;->reportActivityInfo",
                        "requestActivityInfo": "Lcom/android/server/wifi/WifiServiceImpl;->requestActivityInfo",
                        "requestBatchedScan": "Lcom/android/server/wifi/WifiServiceImpl;->requestBatchedScan",
                        "saveConfiguration": "Lcom/android/server/wifi/WifiServiceImpl;->saveConfiguration",
                        "setAllowScansWithTraffic": "Lcom/android/server/wifi/WifiServiceImpl;->setAllowScansWithTraffic",
                        "setCountryCode": "Lcom/android/server/wifi/WifiServiceImpl;->setCountryCode",
                        "setEnableAutoJoinWhenAssociated": "Lcom/android/server/wifi/WifiServiceImpl;->setEnableAutoJoinWhenAssociated",
                        "setFrequencyBand": "Lcom/android/server/wifi/WifiServiceImpl;->setFrequencyBand",
                        "setWifiApConfiguration": "Lcom/android/server/wifi/WifiServiceImpl;->setWifiApConfiguration",
                        "setWifiApEnabled": "Lcom/android/server/wifi/WifiServiceImpl;->setWifiApEnabled",
                        "setWifiEnabled": "Lcom/android/server/wifi/WifiServiceImpl;->setWifiEnabled",
                        "startLocationRestrictedScan": "Lcom/android/server/wifi/WifiServiceImpl;->startLocationRestrictedScan",
                        "startScan": "Lcom/android/server/wifi/WifiServiceImpl;->startScan",
                        "startWifi": "Lcom/android/server/wifi/WifiServiceImpl;->startWifi",
                        "stopBatchedScan": "Lcom/android/server/wifi/WifiServiceImpl;->stopBatchedScan",
                        "stopWifi": "Lcom/android/server/wifi/WifiServiceImpl;->stopWifi",
                        "updateWifiLockWorkSource": "Lcom/android/server/wifi/WifiServiceImpl;->updateWifiLockWorkSource"
                    }
                }
            },
            "settings": {
                "AccessibilityEnableScriptInjectionPreference": {
                    "onClick": "Lcom/android/settings/AccessibilityEnableScriptInjectionPreference;->onClick",
                    "onDialogClosed": "Lcom/android/settings/AccessibilityEnableScriptInjectionPreference;->onDialogClosed",
                    "setSystemSetting": "Lcom/android/settings/AccessibilityEnableScriptInjectionPreference;->setSystemSetting"
                },
                "AccessibilitySettings$SettingsPackageMonitor": {
                    "onHandleForceStop": "Lcom/android/settings/AccessibilitySettings$SettingsPackageMonitor;->onHandleForceStop",
                    "onReceive": "Lcom/android/settings/AccessibilitySettings$SettingsPackageMonitor;->onReceive",
                    "onSomePackagesChanged": "Lcom/android/settings/AccessibilitySettings$SettingsPackageMonitor;->onSomePackagesChanged"
                },
                "AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$2": {
                    "onBeforeCheckedChanged": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$2;->onBeforeCheckedChanged"
                },
                "AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment": {
                    "onActivityCreated": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment;->onActivityCreated",
                    "onClick": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment;->onClick",
                    "onCreate": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment;->onCreateOptionsMenu",
                    "onPreferenceToggled": "Lcom/android/settings/AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment;->onPreferenceToggled"
                },
                "AccessibilitySettings$ToggleSwitch$OnBeforeCheckedChangeListener": {
                    "onBeforeCheckedChanged": "Lcom/android/settings/AccessibilitySettings$ToggleSwitch$OnBeforeCheckedChangeListener;->onBeforeCheckedChanged"
                },
                "AccessibilitySettings$ToggleSwitch": {
                    "setChecked": "Lcom/android/settings/AccessibilitySettings$ToggleSwitch;->setChecked"
                },
                "AccessibilitySettings": {
                    "onPreferenceChange": "Lcom/android/settings/AccessibilitySettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/AccessibilitySettings;->onPreferenceTreeClick",
                    "handleLockScreenRotationPreferenceClick": "Lcom/android/settings/AccessibilitySettings;->handleLockScreenRotationPreferenceClick",
                    "handleToggleLargeTextPreferenceClick": "Lcom/android/settings/AccessibilitySettings;->handleToggleLargeTextPreferenceClick",
                    "handleTogglePowerButtonEndsCallPreferenceClick": "Lcom/android/settings/AccessibilitySettings;->handleTogglePowerButtonEndsCallPreferenceClick",
                    "handleToggleSpeakPasswordPreferenceClick": "Lcom/android/settings/AccessibilitySettings;->handleToggleSpeakPasswordPreferenceClick",
                    "onActivityCreated": "Lcom/android/settings/AccessibilitySettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/AccessibilitySettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/AccessibilitySettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/AccessibilitySettings;->onPause",
                    "onResume": "Lcom/android/settings/AccessibilitySettings;->onResume"
                },
                "accounts": {
                    "AccountPreferenceBase$1$1": {
                        "run": "Lcom/android/settings/accounts/AccountPreferenceBase$1$1;->run"
                    },
                    "AccountPreferenceBase": {
                        "onOptionsItemSelected": "Lcom/android/settings/accounts/AccountPreferenceBase;->onOptionsItemSelected",
                        "onAccountsUpdated": "Lcom/android/settings/accounts/AccountPreferenceBase;->onAccountsUpdated",
                        "onActivityCreated": "Lcom/android/settings/accounts/AccountPreferenceBase;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/accounts/AccountPreferenceBase;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/accounts/AccountPreferenceBase;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/accounts/AccountPreferenceBase;->onPause",
                        "onPrepareOptionsMenu": "Lcom/android/settings/accounts/AccountPreferenceBase;->onPrepareOptionsMenu",
                        "onResume": "Lcom/android/settings/accounts/AccountPreferenceBase;->onResume",
                        "onStart": "Lcom/android/settings/accounts/AccountPreferenceBase;->onStart",
                        "onSyncStateUpdated": "Lcom/android/settings/accounts/AccountPreferenceBase;->onSyncStateUpdated"
                    },
                    "AccountSyncSettings$1": {
                        "onClick": "Lcom/android/settings/accounts/AccountSyncSettings$1;->onClick"
                    },
                    "AccountSyncSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/accounts/AccountSyncSettings;->onOptionsItemSelected",
                        "onPreferenceTreeClick": "Lcom/android/settings/accounts/AccountSyncSettings;->onPreferenceTreeClick",
                        "onAccountsUpdated": "Lcom/android/settings/accounts/AccountSyncSettings;->onAccountsUpdated",
                        "onActivityCreated": "Lcom/android/settings/accounts/AccountSyncSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/accounts/AccountSyncSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/accounts/AccountSyncSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/accounts/AccountSyncSettings;->onPause",
                        "onPrepareOptionsMenu": "Lcom/android/settings/accounts/AccountSyncSettings;->onPrepareOptionsMenu",
                        "onResume": "Lcom/android/settings/accounts/AccountSyncSettings;->onResume",
                        "onSyncStateUpdated": "Lcom/android/settings/accounts/AccountSyncSettings;->onSyncStateUpdated",
                        "setFeedsState": "Lcom/android/settings/accounts/AccountSyncSettings;->setFeedsState",
                        "updateAccountCheckboxes": "Lcom/android/settings/accounts/AccountSyncSettings;->updateAccountCheckboxes"
                    },
                    "AddAccountSettings": {
                        "addAccount": "Lcom/android/settings/accounts/AddAccountSettings;->addAccount",
                        "onActivityResult": "Lcom/android/settings/accounts/AddAccountSettings;->onActivityResult"
                    },
                    "AuthenticatorHelper": {
                        "onAccountsUpdated": "Lcom/android/settings/accounts/AuthenticatorHelper;->onAccountsUpdated"
                    },
                    "ManageAccountsSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/accounts/ManageAccountsSettings;->onOptionsItemSelected",
                        "onAccountsUpdated": "Lcom/android/settings/accounts/ManageAccountsSettings;->onAccountsUpdated",
                        "onActivityCreated": "Lcom/android/settings/accounts/ManageAccountsSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/accounts/ManageAccountsSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/accounts/ManageAccountsSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/accounts/ManageAccountsSettings;->onPause",
                        "onPrepareOptionsMenu": "Lcom/android/settings/accounts/ManageAccountsSettings;->onPrepareOptionsMenu",
                        "onResume": "Lcom/android/settings/accounts/ManageAccountsSettings;->onResume",
                        "onStart": "Lcom/android/settings/accounts/ManageAccountsSettings;->onStart",
                        "onSyncStateUpdated": "Lcom/android/settings/accounts/ManageAccountsSettings;->onSyncStateUpdated",
                        "requestOrCancelSyncForAccounts": "Lcom/android/settings/accounts/ManageAccountsSettings;->requestOrCancelSyncForAccounts"
                    },
                    "SyncSettings$1": {
                        "onPreferenceChange": "Lcom/android/settings/accounts/SyncSettings$1;->onPreferenceChange"
                    },
                    "SyncSettings": {
                        "onAccountsUpdated": "Lcom/android/settings/accounts/SyncSettings;->onAccountsUpdated",
                        "onActivityCreated": "Lcom/android/settings/accounts/SyncSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/accounts/SyncSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/accounts/SyncSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/accounts/SyncSettings;->onPause",
                        "onResume": "Lcom/android/settings/accounts/SyncSettings;->onResume",
                        "onStart": "Lcom/android/settings/accounts/SyncSettings;->onStart",
                        "onSyncStateUpdated": "Lcom/android/settings/accounts/SyncSettings;->onSyncStateUpdated"
                    }
                },
                "ActivityPicker": {
                    "onCreate": "Lcom/android/settings/ActivityPicker;->onCreate"
                },
                "AirplaneModeEnabler": {
                    "onPreferenceChange": "Lcom/android/settings/AirplaneModeEnabler;->onPreferenceChange",
                    "resume": "Lcom/android/settings/AirplaneModeEnabler;->resume",
                    "setAirplaneModeInECM": "Lcom/android/settings/AirplaneModeEnabler;->setAirplaneModeInECM",
                    "setAirplaneModeOn": "Lcom/android/settings/AirplaneModeEnabler;->setAirplaneModeOn"
                },
                "AllowBindAppWidgetActivity": {
                    "onCreate": "Lcom/android/settings/AllowBindAppWidgetActivity;->onCreate"
                },
                "ApplicationSettings$1": {
                    "onPreferenceChange": "Lcom/android/settings/ApplicationSettings$1;->onPreferenceChange"
                },
                "ApplicationSettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/ApplicationSettings;->onPreferenceTreeClick",
                    "handleUpdateAppInstallLocation": "Lcom/android/settings/ApplicationSettings;->handleUpdateAppInstallLocation",
                    "onActivityCreated": "Lcom/android/settings/ApplicationSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/ApplicationSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/ApplicationSettings;->onCreateOptionsMenu",
                    "setAdvancedSettingsEnabled": "Lcom/android/settings/ApplicationSettings;->setAdvancedSettingsEnabled"
                },
                "applications": {
                    "RunningServiceDetails$ActiveDetail": {
                        "onClick": "Lcom/android/settings/applications/RunningServiceDetails$ActiveDetail;->onClick"
                    }
                },
                "AppWidgetPickActivity": {
                    "onCreate": "Lcom/android/settings/AppWidgetPickActivity;->onCreate"
                },
                "BandMode$1": {
                    "onItemClick": "Lcom/android/settings/BandMode$1;->onItemClick"
                },
                "BandMode": {
                    "loadBandList": "Lcom/android/settings/BandMode;->loadBandList",
                    "onCreate": "Lcom/android/settings/BandMode;->onCreate"
                },
                "bluetooth": {
                    "A2dpProfile": {
                        "connect": "Lcom/android/settings/bluetooth/A2dpProfile;->connect",
                        "disconnect": "Lcom/android/settings/bluetooth/A2dpProfile;->disconnect",
                        "isA2dpPlaying": "Lcom/android/settings/bluetooth/A2dpProfile;->isA2dpPlaying",
                        "isPreferred": "Lcom/android/settings/bluetooth/A2dpProfile;->isPreferred",
                        "getConnectionStatus": "Lcom/android/settings/bluetooth/A2dpProfile;->getConnectionStatus",
                        "getPreferred": "Lcom/android/settings/bluetooth/A2dpProfile;->getPreferred",
                        "getSummaryResourceForDevice": "Lcom/android/settings/bluetooth/A2dpProfile;->getSummaryResourceForDevice",
                        "getConnectedDevices": "Lcom/android/settings/bluetooth/A2dpProfile;->getConnectedDevices",
                        "setPreferred": "Lcom/android/settings/bluetooth/A2dpProfile;->setPreferred"
                    },
                    "BluetoothCallback": {
                        "onBluetoothStateChanged": "Lcom/android/settings/bluetooth/BluetoothCallback;->onBluetoothStateChanged",
                        "onDeviceAdded": "Lcom/android/settings/bluetooth/BluetoothCallback;->onDeviceAdded"
                    },
                    "BluetoothDeviceFilter$AudioFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$AudioFilter;->matches"
                    },
                    "BluetoothDeviceFilter$BondedDeviceFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$BondedDeviceFilter;->matches"
                    },
                    "BluetoothDeviceFilter$ClassUuidFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$ClassUuidFilter;->matches"
                    },
                    "BluetoothDeviceFilter$Filter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$Filter;->matches"
                    },
                    "BluetoothDeviceFilter$NapFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$NapFilter;->matches"
                    },
                    "BluetoothDeviceFilter$PanuFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$PanuFilter;->matches"
                    },
                    "BluetoothDeviceFilter$TransferFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$TransferFilter;->matches"
                    },
                    "BluetoothDeviceFilter$UnbondedDeviceFilter": {
                        "matches": "Lcom/android/settings/bluetooth/BluetoothDeviceFilter$UnbondedDeviceFilter;->matches"
                    },
                    "BluetoothDevicePreference$1": {
                        "onClick": "Lcom/android/settings/bluetooth/BluetoothDevicePreference$1;->onClick"
                    },
                    "BluetoothDevicePreference": {
                        "compareTo": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->compareTo",
                        "getConnectionSummary": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->getConnectionSummary",
                        "<init>": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;-><init>",
                        "onBindView": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->onBindView",
                        "onClicked": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->onClicked",
                        "onDeviceAttributesChanged": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->onDeviceAttributesChanged",
                        "pair": "Lcom/android/settings/bluetooth/BluetoothDevicePreference;->pair"
                    },
                    "BluetoothDiscoverableEnabler$1": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler$1;->onReceive"
                    },
                    "BluetoothDiscoverableEnabler$2": {
                        "run": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler$2;->run"
                    },
                    "BluetoothDiscoverableEnabler": {
                        "onPreferenceClick": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->onPreferenceClick",
                        "handleModeChanged": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->handleModeChanged",
                        "resume": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->resume",
                        "setDiscoverableTimeout": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->setDiscoverableTimeout",
                        "setEnabled": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->setEnabled",
                        "setNumberOfPairedDevices": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->setNumberOfPairedDevices",
                        "updateCountdownSummary": "Lcom/android/settings/bluetooth/BluetoothDiscoverableEnabler;->updateCountdownSummary"
                    },
                    "BluetoothEnabler": {
                        "<init>": "Lcom/android/settings/bluetooth/BluetoothEnabler;-><init>",
                        "onCheckedChanged": "Lcom/android/settings/bluetooth/BluetoothEnabler;->onCheckedChanged",
                        "resume": "Lcom/android/settings/bluetooth/BluetoothEnabler;->resume",
                        "setSwitch": "Lcom/android/settings/bluetooth/BluetoothEnabler;->setSwitch"
                    },
                    "BluetoothEventManager$1": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$1;->onReceive"
                    },
                    "BluetoothEventManager$AdapterStateChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$AdapterStateChangedHandler;->onReceive"
                    },
                    "BluetoothEventManager$BondStateChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$BondStateChangedHandler;->onReceive",
                        "showUnbondMessage": "Lcom/android/settings/bluetooth/BluetoothEventManager$BondStateChangedHandler;->showUnbondMessage"
                    },
                    "BluetoothEventManager$ClassChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$ClassChangedHandler;->onReceive"
                    },
                    "BluetoothEventManager$DeviceDisappearedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$DeviceDisappearedHandler;->onReceive"
                    },
                    "BluetoothEventManager$DeviceFoundHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$DeviceFoundHandler;->onReceive"
                    },
                    "BluetoothEventManager$DockEventHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$DockEventHandler;->onReceive"
                    },
                    "BluetoothEventManager$Handler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$Handler;->onReceive"
                    },
                    "BluetoothEventManager$NameChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$NameChangedHandler;->onReceive"
                    },
                    "BluetoothEventManager$PairingCancelHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$PairingCancelHandler;->onReceive"
                    },
                    "BluetoothEventManager$ScanningStateChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$ScanningStateChangedHandler;->onReceive"
                    },
                    "BluetoothEventManager$UuidChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothEventManager$UuidChangedHandler;->onReceive"
                    },
                    "BluetoothEventManager": {
                        "readPairedDevices": "Lcom/android/settings/bluetooth/BluetoothEventManager;->readPairedDevices",
                        "dispatchDeviceAdded": "Lcom/android/settings/bluetooth/BluetoothEventManager;->dispatchDeviceAdded"
                    },
                    "BluetoothNameDialogFragment$1": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment$1;->onReceive"
                    },
                    "BluetoothNameDialogFragment$2": {
                        "onClick": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment$2;->onClick"
                    },
                    "BluetoothNameDialogFragment$3": {
                        "onEditorAction": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment$3;->onEditorAction"
                    },
                    "BluetoothNameDialogFragment": {
                        "onCreateDialog": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;->onCreateDialog",
                        "<init>": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;-><init>",
                        "setDeviceName": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;->setDeviceName",
                        "updateDeviceName": "Lcom/android/settings/bluetooth/BluetoothNameDialogFragment;->updateDeviceName"
                    },
                    "BluetoothPairingDialog": {
                        "createView": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->createView",
                        "onKeyDown": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->onKeyDown",
                        "createConfirmationDialog": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->createConfirmationDialog",
                        "createConsentDialog": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->createConsentDialog",
                        "createDisplayPasskeyOrPinDialog": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->createDisplayPasskeyOrPinDialog",
                        "createUserEntryDialog": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->createUserEntryDialog",
                        "onCancel": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->onCancel",
                        "onClick": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->onClick",
                        "onCreate": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->onCreate",
                        "onPair": "Lcom/android/settings/bluetooth/BluetoothPairingDialog;->onPair"
                    },
                    "BluetoothPairingRequest": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothPairingRequest;->onReceive"
                    },
                    "BluetoothPermissionActivity": {
                        "createConnectionDialogView": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->createConnectionDialogView",
                        "createPhonebookDialogView": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->createPhonebookDialogView",
                        "createConnectionDisplayText": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->createConnectionDisplayText",
                        "createPhonebookDisplayText": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->createPhonebookDisplayText",
                        "onClick": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->onClick",
                        "onCreate": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->onCreate",
                        "onNegative": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->onNegative",
                        "onPositive": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->onPositive",
                        "savePhonebookPermissionChoice": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->savePhonebookPermissionChoice",
                        "showConnectionDialog": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->showConnectionDialog",
                        "showPhonebookDialog": "Lcom/android/settings/bluetooth/BluetoothPermissionActivity;->showPhonebookDialog"
                    },
                    "BluetoothPermissionRequest": {
                        "checkUserChoice": "Lcom/android/settings/bluetooth/BluetoothPermissionRequest;->checkUserChoice",
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothPermissionRequest;->onReceive"
                    },
                    "BluetoothSettings$1": {
                        "onReceive": "Lcom/android/settings/bluetooth/BluetoothSettings$1;->onReceive",
                        "updateDeviceName": "Lcom/android/settings/bluetooth/BluetoothSettings$1;->updateDeviceName"
                    },
                    "BluetoothSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/bluetooth/BluetoothSettings;->onOptionsItemSelected",
                        "onPreferenceTreeClick": "Lcom/android/settings/bluetooth/BluetoothSettings;->onPreferenceTreeClick",
                        "addCachedDevices": "Lcom/android/settings/bluetooth/BluetoothSettings;->addCachedDevices",
                        "addDeviceCategory": "Lcom/android/settings/bluetooth/BluetoothSettings;->addDeviceCategory",
                        "addPreferencesForActivity": "Lcom/android/settings/bluetooth/BluetoothSettings;->addPreferencesForActivity",
                        "createDevicePreference": "Lcom/android/settings/bluetooth/BluetoothSettings;->createDevicePreference",
                        "initDevicePreference": "Lcom/android/settings/bluetooth/BluetoothSettings;->initDevicePreference",
                        "onActivityCreated": "Lcom/android/settings/bluetooth/BluetoothSettings;->onActivityCreated",
                        "onBluetoothStateChanged": "Lcom/android/settings/bluetooth/BluetoothSettings;->onBluetoothStateChanged",
                        "onCreate": "Lcom/android/settings/bluetooth/BluetoothSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/bluetooth/BluetoothSettings;->onCreateOptionsMenu",
                        "onDeviceAdded": "Lcom/android/settings/bluetooth/BluetoothSettings;->onDeviceAdded",
                        "onDeviceBondStateChanged": "Lcom/android/settings/bluetooth/BluetoothSettings;->onDeviceBondStateChanged",
                        "onDevicePreferenceClick": "Lcom/android/settings/bluetooth/BluetoothSettings;->onDevicePreferenceClick",
                        "onPause": "Lcom/android/settings/bluetooth/BluetoothSettings;->onPause",
                        "onResume": "Lcom/android/settings/bluetooth/BluetoothSettings;->onResume",
                        "removeAllDevices": "Lcom/android/settings/bluetooth/BluetoothSettings;->removeAllDevices",
                        "startScanning": "Lcom/android/settings/bluetooth/BluetoothSettings;->startScanning",
                        "updateContent": "Lcom/android/settings/bluetooth/BluetoothSettings;->updateContent"
                    },
                    "BluetoothVisibilityTimeoutFragment": {
                        "<init>": "Lcom/android/settings/bluetooth/BluetoothVisibilityTimeoutFragment;-><init>",
                        "onClick": "Lcom/android/settings/bluetooth/BluetoothVisibilityTimeoutFragment;->onClick"
                    },
                    "CachedBluetoothDevice$Callback": {
                        "onDeviceAttributesChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDevice$Callback;->onDeviceAttributesChanged"
                    },
                    "CachedBluetoothDevice": {
                        "ensurePaired": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->ensurePaired",
                        "isBusy": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->isBusy",
                        "isConnected": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->isConnected",
                        "isConnectedProfile": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->isConnectedProfile",
                        "startPairing": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->startPairing",
                        "updateProfiles": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->updateProfiles",
                        "compareTo": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->compareTo",
                        "getBondState": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->getBondState",
                        "getProfileConnectionState": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->getProfileConnectionState",
                        "connectAutoConnectableProfiles": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->connectAutoConnectableProfiles",
                        "connect": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->connect",
                        "connectInt": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->connectInt",
                        "connectProfile": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->connectProfile",
                        "connectWithoutResettingTimer": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->connectWithoutResettingTimer",
                        "disconnect": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->disconnect",
                        "dispatchAttributesChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->dispatchAttributesChanged",
                        "fetchBtClass": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->fetchBtClass",
                        "fetchName": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->fetchName",
                        "fillData": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->fillData",
                        "<init>": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;-><init>",
                        "onBondingDockConnect": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->onBondingDockConnect",
                        "onBondingStateChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->onBondingStateChanged",
                        "onUuidChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->onUuidChanged",
                        "refresh": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->refresh",
                        "refreshBtClass": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->refreshBtClass",
                        "refreshName": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->refreshName",
                        "setBtClass": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->setBtClass",
                        "setName": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->setName",
                        "setRssi": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->setRssi",
                        "setVisible": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->setVisible",
                        "unpair": "Lcom/android/settings/bluetooth/CachedBluetoothDevice;->unpair"
                    },
                    "CachedBluetoothDeviceManager": {
                        "onDeviceDisappeared": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->onDeviceDisappeared",
                        "addDevice": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->addDevice",
                        "getName": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->getName",
                        "onBtClassChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->onBtClassChanged",
                        "onDeviceNameUpdated": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->onDeviceNameUpdated",
                        "onScanningStateChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->onScanningStateChanged",
                        "onUuidChanged": "Lcom/android/settings/bluetooth/CachedBluetoothDeviceManager;->onUuidChanged"
                    },
                    "DeviceListPreferenceFragment": {
                        "onPreferenceTreeClick": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onPreferenceTreeClick",
                        "addCachedDevices": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->addCachedDevices",
                        "addPreferencesForActivity": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->addPreferencesForActivity",
                        "createDevicePreference": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->createDevicePreference",
                        "initDevicePreference": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->initDevicePreference",
                        "onActivityCreated": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onActivityCreated",
                        "onBluetoothStateChanged": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onBluetoothStateChanged",
                        "onCreate": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onCreateOptionsMenu",
                        "onDeviceAdded": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onDeviceAdded",
                        "onDevicePreferenceClick": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onDevicePreferenceClick",
                        "onPause": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onPause",
                        "onResume": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->onResume",
                        "removeAllDevices": "Lcom/android/settings/bluetooth/DeviceListPreferenceFragment;->removeAllDevices"
                    },
                    "DevicePickerFragment": {
                        "onPreferenceTreeClick": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onPreferenceTreeClick",
                        "addCachedDevices": "Lcom/android/settings/bluetooth/DevicePickerFragment;->addCachedDevices",
                        "createDevicePreference": "Lcom/android/settings/bluetooth/DevicePickerFragment;->createDevicePreference",
                        "initDevicePreference": "Lcom/android/settings/bluetooth/DevicePickerFragment;->initDevicePreference",
                        "onActivityCreated": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onActivityCreated",
                        "onBluetoothStateChanged": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onBluetoothStateChanged",
                        "onCreate": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onCreateOptionsMenu",
                        "onDeviceAdded": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onDeviceAdded",
                        "onDevicePreferenceClick": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onDevicePreferenceClick",
                        "onPause": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onPause",
                        "onResume": "Lcom/android/settings/bluetooth/DevicePickerFragment;->onResume",
                        "removeAllDevices": "Lcom/android/settings/bluetooth/DevicePickerFragment;->removeAllDevices"
                    },
                    "DeviceProfilesSettings$1": {
                        "onClick": "Lcom/android/settings/bluetooth/DeviceProfilesSettings$1;->onClick"
                    },
                    "DeviceProfilesSettings": {
                        "createProfilePreference": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->createProfilePreference",
                        "getAutoConnect": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->getAutoConnect",
                        "onPreferenceChange": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onPreferenceChange",
                        "onPreferenceTreeClick": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onPreferenceTreeClick",
                        "addPreferencesForProfiles": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->addPreferencesForProfiles",
                        "onActivityCreated": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onCreateOptionsMenu",
                        "onDeviceAttributesChanged": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onDeviceAttributesChanged",
                        "onPause": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onPause",
                        "onProfileClicked": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onProfileClicked",
                        "onResume": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->onResume",
                        "refresh": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->refresh",
                        "refreshProfilePreference": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->refreshProfilePreference",
                        "refreshProfiles": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->refreshProfiles",
                        "unpairDevice": "Lcom/android/settings/bluetooth/DeviceProfilesSettings;->unpairDevice"
                    },
                    "DockEventReceiver": {
                        "beginStartingService": "Lcom/android/settings/bluetooth/DockEventReceiver;->beginStartingService",
                        "finishStartingService": "Lcom/android/settings/bluetooth/DockEventReceiver;->finishStartingService",
                        "onReceive": "Lcom/android/settings/bluetooth/DockEventReceiver;->onReceive"
                    },
                    "DockService$1": {
                        "run": "Lcom/android/settings/bluetooth/DockService$1;->run"
                    },
                    "DockService$4": {
                        "onDismiss": "Lcom/android/settings/bluetooth/DockService$4;->onDismiss"
                    },
                    "DockService$5": {
                        "onClick": "Lcom/android/settings/bluetooth/DockService$5;->onClick"
                    },
                    "DockService": {
                        "hasOtherConnectedDevices": "Lcom/android/settings/bluetooth/DockService;->hasOtherConnectedDevices",
                        "msgTypeDisableBluetooth": "Lcom/android/settings/bluetooth/DockService;->msgTypeDisableBluetooth",
                        "msgTypeDocked": "Lcom/android/settings/bluetooth/DockService;->msgTypeDocked",
                        "msgTypeUndockedPermanent": "Lcom/android/settings/bluetooth/DockService;->msgTypeUndockedPermanent",
                        "getCachedBluetoothDevice": "Lcom/android/settings/bluetooth/DockService;->getCachedBluetoothDevice",
                        "onStartCommand": "Lcom/android/settings/bluetooth/DockService;->onStartCommand",
                        "initBtSettings": "Lcom/android/settings/bluetooth/DockService;->initBtSettings",
                        "applyBtSettings": "Lcom/android/settings/bluetooth/DockService;->applyBtSettings",
                        "connectIfEnabled": "Lcom/android/settings/bluetooth/DockService;->connectIfEnabled",
                        "createDialog": "Lcom/android/settings/bluetooth/DockService;->createDialog",
                        "handleBluetoothStateOn": "Lcom/android/settings/bluetooth/DockService;->handleBluetoothStateOn",
                        "handleBtStateChange": "Lcom/android/settings/bluetooth/DockService;->handleBtStateChange",
                        "handleDocked": "Lcom/android/settings/bluetooth/DockService;->handleDocked",
                        "handleUndocked": "Lcom/android/settings/bluetooth/DockService;->handleUndocked",
                        "handleUnexpectedDisconnect": "Lcom/android/settings/bluetooth/DockService;->handleUnexpectedDisconnect",
                        "onCreate": "Lcom/android/settings/bluetooth/DockService;->onCreate",
                        "processMessage": "Lcom/android/settings/bluetooth/DockService;->processMessage"
                    },
                    "HeadsetProfile$HeadsetServiceListener": {
                        "onServiceConnected": "Lcom/android/settings/bluetooth/HeadsetProfile$HeadsetServiceListener;->onServiceConnected"
                    },
                    "HeadsetProfile": {
                        "connect": "Lcom/android/settings/bluetooth/HeadsetProfile;->connect",
                        "disconnect": "Lcom/android/settings/bluetooth/HeadsetProfile;->disconnect",
                        "isPreferred": "Lcom/android/settings/bluetooth/HeadsetProfile;->isPreferred",
                        "getConnectionStatus": "Lcom/android/settings/bluetooth/HeadsetProfile;->getConnectionStatus",
                        "getPreferred": "Lcom/android/settings/bluetooth/HeadsetProfile;->getPreferred",
                        "getSummaryResourceForDevice": "Lcom/android/settings/bluetooth/HeadsetProfile;->getSummaryResourceForDevice",
                        "setPreferred": "Lcom/android/settings/bluetooth/HeadsetProfile;->setPreferred"
                    },
                    "HidProfile": {
                        "connect": "Lcom/android/settings/bluetooth/HidProfile;->connect",
                        "disconnect": "Lcom/android/settings/bluetooth/HidProfile;->disconnect",
                        "isPreferred": "Lcom/android/settings/bluetooth/HidProfile;->isPreferred",
                        "getConnectionStatus": "Lcom/android/settings/bluetooth/HidProfile;->getConnectionStatus",
                        "getPreferred": "Lcom/android/settings/bluetooth/HidProfile;->getPreferred",
                        "getSummaryResourceForDevice": "Lcom/android/settings/bluetooth/HidProfile;->getSummaryResourceForDevice",
                        "setPreferred": "Lcom/android/settings/bluetooth/HidProfile;->setPreferred"
                    },
                    "LocalBluetoothAdapter": {
                        "getUuids": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getUuids",
                        "disable": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->disable",
                        "enable": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->enable",
                        "isDiscovering": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->isDiscovering",
                        "isEnabled": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->isEnabled",
                        "setScanMode": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->setScanMode",
                        "syncBluetoothState": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->syncBluetoothState",
                        "getBluetoothState": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getBluetoothState",
                        "getScanMode": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getScanMode",
                        "getState": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getState",
                        "getName": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getName",
                        "getBondedDevices": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->getBondedDevices",
                        "cancelDiscovery": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->cancelDiscovery",
                        "setBluetoothEnabled": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->setBluetoothEnabled",
                        "setBluetoothStateInt": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->setBluetoothStateInt",
                        "setDiscoverableTimeout": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->setDiscoverableTimeout",
                        "setName": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->setName",
                        "startScanning": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->startScanning",
                        "stopScanning": "Lcom/android/settings/bluetooth/LocalBluetoothAdapter;->stopScanning"
                    },
                    "LocalBluetoothManager": {
                        "getInstance": "Lcom/android/settings/bluetooth/LocalBluetoothManager;->getInstance",
                        "<init>": "Lcom/android/settings/bluetooth/LocalBluetoothManager;-><init>"
                    },
                    "LocalBluetoothPreferences": {
                        "shouldShowDialogInForeground": "Lcom/android/settings/bluetooth/LocalBluetoothPreferences;->shouldShowDialogInForeground"
                    },
                    "LocalBluetoothProfile": {
                        "connect": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->connect",
                        "disconnect": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->disconnect",
                        "isPreferred": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->isPreferred",
                        "getConnectionStatus": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->getConnectionStatus",
                        "getPreferred": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->getPreferred",
                        "getSummaryResourceForDevice": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->getSummaryResourceForDevice",
                        "setPreferred": "Lcom/android/settings/bluetooth/LocalBluetoothProfile;->setPreferred"
                    },
                    "LocalBluetoothProfileManager$PanStateChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/LocalBluetoothProfileManager$PanStateChangedHandler;->onReceive"
                    },
                    "LocalBluetoothProfileManager$StateChangedHandler": {
                        "onReceive": "Lcom/android/settings/bluetooth/LocalBluetoothProfileManager$StateChangedHandler;->onReceive"
                    },
                    "LocalBluetoothProfileManager": {
                        "<init>": "Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;-><init>",
                        "setBluetoothStateOn": "Lcom/android/settings/bluetooth/LocalBluetoothProfileManager;->setBluetoothStateOn"
                    },
                    "PanProfile": {
                        "connect": "Lcom/android/settings/bluetooth/PanProfile;->connect",
                        "disconnect": "Lcom/android/settings/bluetooth/PanProfile;->disconnect",
                        "getConnectionStatus": "Lcom/android/settings/bluetooth/PanProfile;->getConnectionStatus",
                        "getSummaryResourceForDevice": "Lcom/android/settings/bluetooth/PanProfile;->getSummaryResourceForDevice"
                    },
                    "RequestPermissionActivity$1": {
                        "onReceive": "Lcom/android/settings/bluetooth/RequestPermissionActivity$1;->onReceive"
                    },
                    "RequestPermissionActivity": {
                        "parseIntent": "Lcom/android/settings/bluetooth/RequestPermissionActivity;->parseIntent",
                        "createDialog": "Lcom/android/settings/bluetooth/RequestPermissionActivity;->createDialog",
                        "onClick": "Lcom/android/settings/bluetooth/RequestPermissionActivity;->onClick",
                        "onCreate": "Lcom/android/settings/bluetooth/RequestPermissionActivity;->onCreate",
                        "proceedAndFinish": "Lcom/android/settings/bluetooth/RequestPermissionActivity;->proceedAndFinish"
                    },
                    "RequestPermissionHelperActivity": {
                        "parseIntent": "Lcom/android/settings/bluetooth/RequestPermissionHelperActivity;->parseIntent",
                        "onClick": "Lcom/android/settings/bluetooth/RequestPermissionHelperActivity;->onClick",
                        "onCreate": "Lcom/android/settings/bluetooth/RequestPermissionHelperActivity;->onCreate"
                    },
                    "Utils": {
                        "showConnectingError": "Lcom/android/settings/bluetooth/Utils;->showConnectingError",
                        "showError": "Lcom/android/settings/bluetooth/Utils;->showError"
                    }
                },
                "BrightnessPreference": {
                    "onSaveInstanceState": "Lcom/android/settings/BrightnessPreference;->onSaveInstanceState",
                    "onCheckedChanged": "Lcom/android/settings/BrightnessPreference;->onCheckedChanged",
                    "onDialogClosed": "Lcom/android/settings/BrightnessPreference;->onDialogClosed",
                    "onProgressChanged": "Lcom/android/settings/BrightnessPreference;->onProgressChanged",
                    "onRestoreInstanceState": "Lcom/android/settings/BrightnessPreference;->onRestoreInstanceState",
                    "restoreOldState": "Lcom/android/settings/BrightnessPreference;->restoreOldState",
                    "setBrightness": "Lcom/android/settings/BrightnessPreference;->setBrightness",
                    "setMode": "Lcom/android/settings/BrightnessPreference;->setMode",
                    "showDialog": "Lcom/android/settings/BrightnessPreference;->showDialog"
                },
                "ChooseLockGeneric$ChooseLockGenericFragment": {
                    "onActivityCreated": "Lcom/android/settings/ChooseLockGeneric$ChooseLockGenericFragment;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/ChooseLockGeneric$ChooseLockGenericFragment;->onActivityResult",
                    "onCreate": "Lcom/android/settings/ChooseLockGeneric$ChooseLockGenericFragment;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/ChooseLockGeneric$ChooseLockGenericFragment;->onCreateOptionsMenu"
                },
                "ChooseLockPassword$ChooseLockPasswordFragment": {
                    "onCreateView": "Lcom/android/settings/ChooseLockPassword$ChooseLockPasswordFragment;->onCreateView"
                },
                "ConfirmLockPassword$ConfirmLockPasswordFragment": {
                    "onCreateView": "Lcom/android/settings/ConfirmLockPassword$ConfirmLockPasswordFragment;->onCreateView"
                },
                "CryptKeeper$ValidationTask": {
                    "onPostExecute": "Lcom/android/settings/CryptKeeper$ValidationTask;->onPostExecute"
                },
                "CryptKeeper": {
                    "encryptionProgressInit": "Lcom/android/settings/CryptKeeper;->encryptionProgressInit",
                    "onCreate": "Lcom/android/settings/CryptKeeper;->onCreate",
                    "onDestroy": "Lcom/android/settings/CryptKeeper;->onDestroy",
                    "onStart": "Lcom/android/settings/CryptKeeper;->onStart",
                    "passwordEntryInit": "Lcom/android/settings/CryptKeeper;->passwordEntryInit",
                    "setAirplaneModeIfNecessary": "Lcom/android/settings/CryptKeeper;->setAirplaneModeIfNecessary",
                    "setupUi": "Lcom/android/settings/CryptKeeper;->setupUi"
                },
                "DataUsageSummary$10": {
                    "onLoadFinished": "Lcom/android/settings/DataUsageSummary$10;->onLoadFinished"
                },
                "DataUsageSummary$12": {
                    "onLimitChanged": "Lcom/android/settings/DataUsageSummary$12;->onLimitChanged",
                    "onWarningChanged": "Lcom/android/settings/DataUsageSummary$12;->onWarningChanged"
                },
                "DataUsageSummary$1": {
                    "onPostExecute": "Lcom/android/settings/DataUsageSummary$1;->onPostExecute"
                },
                "DataUsageSummary$3": {
                    "onTabChanged": "Lcom/android/settings/DataUsageSummary$3;->onTabChanged"
                },
                "DataUsageSummary$4": {
                    "onCheckedChanged": "Lcom/android/settings/DataUsageSummary$4;->onCheckedChanged"
                },
                "DataUsageSummary$5": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$5;->onClick"
                },
                "DataUsageSummary$8": {
                    "onItemClick": "Lcom/android/settings/DataUsageSummary$8;->onItemClick"
                },
                "DataUsageSummary$AppDetailsFragment": {
                    "onStart": "Lcom/android/settings/DataUsageSummary$AppDetailsFragment;->onStart",
                    "onStop": "Lcom/android/settings/DataUsageSummary$AppDetailsFragment;->onStop"
                },
                "DataUsageSummary$ConfirmAutoSyncChangeFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$ConfirmAutoSyncChangeFragment$1;->onClick"
                },
                "DataUsageSummary$ConfirmDataDisableFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$ConfirmDataDisableFragment$1;->onClick"
                },
                "DataUsageSummary$ConfirmDataRoamingFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$ConfirmDataRoamingFragment$1;->onClick"
                },
                "DataUsageSummary$ConfirmLimitFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$ConfirmLimitFragment$1;->onClick"
                },
                "DataUsageSummary$ConfirmRestrictFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$ConfirmRestrictFragment$1;->onClick"
                },
                "DataUsageSummary$CycleEditorFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$CycleEditorFragment$1;->onClick"
                },
                "DataUsageSummary$DataUsageAdapter": {
                    "getView": "Lcom/android/settings/DataUsageSummary$DataUsageAdapter;->getView"
                },
                "DataUsageSummary$LimitEditorFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$LimitEditorFragment$1;->onClick"
                },
                "DataUsageSummary$UidDetailTask": {
                    "doInBackground": "Lcom/android/settings/DataUsageSummary$UidDetailTask;->doInBackground",
                    "bindView": "Lcom/android/settings/DataUsageSummary$UidDetailTask;->bindView"
                },
                "DataUsageSummary$WarningEditorFragment$1": {
                    "onClick": "Lcom/android/settings/DataUsageSummary$WarningEditorFragment$1;->onClick"
                },
                "DataUsageSummary": {
                    "hasEthernet": "Lcom/android/settings/DataUsageSummary;->hasEthernet",
                    "hasLimitedNetworks": "Lcom/android/settings/DataUsageSummary;->hasLimitedNetworks",
                    "hasReadyMobileRadio": "Lcom/android/settings/DataUsageSummary;->hasReadyMobileRadio",
                    "hasWifiRadio": "Lcom/android/settings/DataUsageSummary;->hasWifiRadio",
                    "isMobileDataEnabled": "Lcom/android/settings/DataUsageSummary;->isMobileDataEnabled",
                    "isMobilePolicySplit": "Lcom/android/settings/DataUsageSummary;->isMobilePolicySplit",
                    "onOptionsItemSelected": "Lcom/android/settings/DataUsageSummary;->onOptionsItemSelected",
                    "buildLimitedNetworksString": "Lcom/android/settings/DataUsageSummary;->buildLimitedNetworksString",
                    "getActiveSubscriberId": "Lcom/android/settings/DataUsageSummary;->getActiveSubscriberId",
                    "buildLimitedNetworksList": "Lcom/android/settings/DataUsageSummary;->buildLimitedNetworksList",
                    "onCreate": "Lcom/android/settings/DataUsageSummary;->onCreate",
                    "onPrepareOptionsMenu": "Lcom/android/settings/DataUsageSummary;->onPrepareOptionsMenu",
                    "onResume": "Lcom/android/settings/DataUsageSummary;->onResume",
                    "setDataRoaming": "Lcom/android/settings/DataUsageSummary;->setDataRoaming",
                    "setMobileDataEnabled": "Lcom/android/settings/DataUsageSummary;->setMobileDataEnabled",
                    "setMobilePolicySplit": "Lcom/android/settings/DataUsageSummary;->setMobilePolicySplit",
                    "setPolicyLimitBytes": "Lcom/android/settings/DataUsageSummary;->setPolicyLimitBytes",
                    "setPolicyWarningBytes": "Lcom/android/settings/DataUsageSummary;->setPolicyWarningBytes",
                    "setRestrictBackground": "Lcom/android/settings/DataUsageSummary;->setRestrictBackground",
                    "updateAppDetail": "Lcom/android/settings/DataUsageSummary;->updateAppDetail",
                    "updateBody": "Lcom/android/settings/DataUsageSummary;->updateBody",
                    "updatePolicy": "Lcom/android/settings/DataUsageSummary;->updatePolicy",
                    "updateTabs": "Lcom/android/settings/DataUsageSummary;->updateTabs"
                },
                "DateTimeSettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/DateTimeSettings;->onPreferenceTreeClick",
                    "initUI": "Lcom/android/settings/DateTimeSettings;->initUI",
                    "onActivityCreated": "Lcom/android/settings/DateTimeSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/DateTimeSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/DateTimeSettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/DateTimeSettings;->onPause",
                    "onResume": "Lcom/android/settings/DateTimeSettings;->onResume",
                    "onSharedPreferenceChanged": "Lcom/android/settings/DateTimeSettings;->onSharedPreferenceChanged",
                    "set24Hour": "Lcom/android/settings/DateTimeSettings;->set24Hour"
                },
                "DateTimeSettingsSetupWizard": {
                    "onCheckedChanged": "Lcom/android/settings/DateTimeSettingsSetupWizard;->onCheckedChanged",
                    "onClick": "Lcom/android/settings/DateTimeSettingsSetupWizard;->onClick",
                    "onItemClick": "Lcom/android/settings/DateTimeSettingsSetupWizard;->onItemClick"
                },
                "DefaultRingtonePreference": {
                    "onSaveRingtone": "Lcom/android/settings/DefaultRingtonePreference;->onSaveRingtone"
                },
                "DevelopmentSettings$ConfirmEnforceFragment$1": {
                    "onClick": "Lcom/android/settings/DevelopmentSettings$ConfirmEnforceFragment$1;->onClick"
                },
                "DevelopmentSettings$ConfirmEnforceFragment$2": {
                    "onClick": "Lcom/android/settings/DevelopmentSettings$ConfirmEnforceFragment$2;->onClick"
                },
                "DevelopmentSettings": {
                    "isPermissionEnforced": "Lcom/android/settings/DevelopmentSettings;->isPermissionEnforced",
                    "onPreferenceChange": "Lcom/android/settings/DevelopmentSettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/DevelopmentSettings;->onPreferenceTreeClick",
                    "onActivityResult": "Lcom/android/settings/DevelopmentSettings;->onActivityResult",
                    "onCheckedChanged": "Lcom/android/settings/DevelopmentSettings;->onCheckedChanged",
                    "onClick": "Lcom/android/settings/DevelopmentSettings;->onClick",
                    "onResume": "Lcom/android/settings/DevelopmentSettings;->onResume",
                    "resetDangerousOptions": "Lcom/android/settings/DevelopmentSettings;->resetDangerousOptions",
                    "resetDebuggerOptions": "Lcom/android/settings/DevelopmentSettings;->resetDebuggerOptions",
                    "setPermissionEnforced": "Lcom/android/settings/DevelopmentSettings;->setPermissionEnforced",
                    "setPrefsEnabledState": "Lcom/android/settings/DevelopmentSettings;->setPrefsEnabledState",
                    "updateAllOptions": "Lcom/android/settings/DevelopmentSettings;->updateAllOptions",
                    "writeAppProcessLimitOptions": "Lcom/android/settings/DevelopmentSettings;->writeAppProcessLimitOptions",
                    "writeCpuUsageOptions": "Lcom/android/settings/DevelopmentSettings;->writeCpuUsageOptions",
                    "writeDebuggerOptions": "Lcom/android/settings/DevelopmentSettings;->writeDebuggerOptions",
                    "writeImmediatelyDestroyActivitiesOptions": "Lcom/android/settings/DevelopmentSettings;->writeImmediatelyDestroyActivitiesOptions",
                    "writePointerLocationOptions": "Lcom/android/settings/DevelopmentSettings;->writePointerLocationOptions",
                    "writeShowAllANRsOptions": "Lcom/android/settings/DevelopmentSettings;->writeShowAllANRsOptions",
                    "writeShowTouchesOptions": "Lcom/android/settings/DevelopmentSettings;->writeShowTouchesOptions"
                },
                "deviceinfo": {
                    "Memory$3": {
                        "onClick": "Lcom/android/settings/deviceinfo/Memory$3;->onClick"
                    },
                    "Memory": {
                        "hasAppsAccessingStorage": "Lcom/android/settings/deviceinfo/Memory;->hasAppsAccessingStorage",
                        "onOptionsItemSelected": "Lcom/android/settings/deviceinfo/Memory;->onOptionsItemSelected",
                        "onPreferenceTreeClick": "Lcom/android/settings/deviceinfo/Memory;->onPreferenceTreeClick",
                        "doUnmount": "Lcom/android/settings/deviceinfo/Memory;->doUnmount",
                        "mount": "Lcom/android/settings/deviceinfo/Memory;->mount",
                        "onActivityCreated": "Lcom/android/settings/deviceinfo/Memory;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/deviceinfo/Memory;->onCreate",
                        "onPause": "Lcom/android/settings/deviceinfo/Memory;->onPause",
                        "onResume": "Lcom/android/settings/deviceinfo/Memory;->onResume",
                        "unmount": "Lcom/android/settings/deviceinfo/Memory;->unmount"
                    },
                    "Status": {
                        "onCreate": "Lcom/android/settings/deviceinfo/Status;->onCreate",
                        "onPause": "Lcom/android/settings/deviceinfo/Status;->onPause",
                        "onResume": "Lcom/android/settings/deviceinfo/Status;->onResume",
                        "setBtStatus": "Lcom/android/settings/deviceinfo/Status;->setBtStatus",
                        "setIpAddressStatus": "Lcom/android/settings/deviceinfo/Status;->setIpAddressStatus",
                        "setWifiStatus": "Lcom/android/settings/deviceinfo/Status;->setWifiStatus",
                        "setWimaxStatus": "Lcom/android/settings/deviceinfo/Status;->setWimaxStatus"
                    },
                    "UsbSettings": {
                        "onActivityCreated": "Lcom/android/settings/deviceinfo/UsbSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/deviceinfo/UsbSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/deviceinfo/UsbSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/deviceinfo/UsbSettings;->onPause",
                        "onResume": "Lcom/android/settings/deviceinfo/UsbSettings;->onResume"
                    }
                },
                "DeviceInfoSettings": {
                    "onActivityCreated": "Lcom/android/settings/DeviceInfoSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/DeviceInfoSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/DeviceInfoSettings;->onCreateOptionsMenu"
                },
                "DisplaySettings": {
                    "onPreferenceChange": "Lcom/android/settings/DisplaySettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/DisplaySettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/DisplaySettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/DisplaySettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/DisplaySettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/DisplaySettings;->onPause",
                    "onResume": "Lcom/android/settings/DisplaySettings;->onResume",
                    "writeFontSizePreference": "Lcom/android/settings/DisplaySettings;->writeFontSizePreference"
                },
                "Display": {
                    "onClick": "Lcom/android/settings/Display;->onClick"
                },
                "DockSettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/DockSettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/DockSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/DockSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/DockSettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/DockSettings;->onPause",
                    "onResume": "Lcom/android/settings/DockSettings;->onResume"
                },
                "DreamComponentPreference$2": {
                    "onClick": "Lcom/android/settings/DreamComponentPreference$2;->onClick"
                },
                "DreamSettings$Enabler": {
                    "onCheckedChanged": "Lcom/android/settings/DreamSettings$Enabler;->onCheckedChanged"
                },
                "DreamSettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/DreamSettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/DreamSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/DreamSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/DreamSettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/DreamSettings;->onPause",
                    "onResume": "Lcom/android/settings/DreamSettings;->onResume",
                    "setScreenSaverEnabled": "Lcom/android/settings/DreamSettings;->setScreenSaverEnabled"
                },
                "EditPinPreference$OnPinEnteredListener": {
                    "onPinEntered": "Lcom/android/settings/EditPinPreference$OnPinEnteredListener;->onPinEntered"
                },
                "fuelgauge": {
                    "BatteryHistoryChart": {
                        "setStats": "Lcom/android/settings/fuelgauge/BatteryHistoryChart;->setStats"
                    },
                    "BatteryHistoryDetail": {
                        "onCreateView": "Lcom/android/settings/fuelgauge/BatteryHistoryDetail;->onCreateView"
                    },
                    "BatteryHistoryPreference": {
                        "onBindView": "Lcom/android/settings/fuelgauge/BatteryHistoryPreference;->onBindView"
                    },
                    "PowerUsageSummary": {
                        "onOptionsItemSelected": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->onOptionsItemSelected",
                        "onPreferenceTreeClick": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->onPreferenceTreeClick",
                        "addBluetoothUsage": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->addBluetoothUsage",
                        "load": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->load",
                        "onResume": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->onResume",
                        "processMiscUsage": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->processMiscUsage",
                        "refreshStats": "Lcom/android/settings/fuelgauge/PowerUsageSummary;->refreshStats"
                    }
                },
                "IccLockSettings": {
                    "onPinEntered": "Lcom/android/settings/IccLockSettings;->onPinEntered",
                    "tryChangeIccLockState": "Lcom/android/settings/IccLockSettings;->tryChangeIccLockState",
                    "tryChangePin": "Lcom/android/settings/IccLockSettings;->tryChangePin"
                },
                "inputmethod": {
                    "InputMethodAndLanguageSettings$SettingsObserver": {
                        "<init>": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings$SettingsObserver;-><init>"
                    },
                    "InputMethodAndLanguageSettings": {
                        "onPreferenceTreeClick": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onPreferenceTreeClick",
                        "onActivityCreated": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onActivityCreated",
                        "onActivityResult": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onActivityResult",
                        "onCreate": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onPause",
                        "onResume": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->onResume",
                        "saveInputMethodSelectorVisibility": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->saveInputMethodSelectorVisibility",
                        "updateUserDictionaryPreference": "Lcom/android/settings/inputmethod/InputMethodAndLanguageSettings;->updateUserDictionaryPreference"
                    },
                    "InputMethodAndSubtypeEnabler": {
                        "onPreferenceTreeClick": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onPreferenceTreeClick",
                        "onActivityCreated": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onPause",
                        "onResume": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->onResume",
                        "setSubtypeAutoSelectionEnabled": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->setSubtypeAutoSelectionEnabled",
                        "updateAutoSelectionCB": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeEnabler;->updateAutoSelectionCB"
                    },
                    "InputMethodAndSubtypeUtil": {
                        "putSelectedInputMethodSubtype": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeUtil;->putSelectedInputMethodSubtype",
                        "saveInputMethodSubtypeList": "Lcom/android/settings/inputmethod/InputMethodAndSubtypeUtil;->saveInputMethodSubtypeList"
                    },
                    "InputMethodPreference$1": {
                        "onClick": "Lcom/android/settings/inputmethod/InputMethodPreference$1;->onClick"
                    },
                    "InputMethodPreference$6": {
                        "onClick": "Lcom/android/settings/inputmethod/InputMethodPreference$6;->onClick"
                    },
                    "InputMethodPreference": {
                        "saveImeSettings": "Lcom/android/settings/inputmethod/InputMethodPreference;->saveImeSettings",
                        "setChecked": "Lcom/android/settings/inputmethod/InputMethodPreference;->setChecked"
                    },
                    "KeyboardLayoutPickerFragment": {
                        "onActivityCreated": "Lcom/android/settings/inputmethod/KeyboardLayoutPickerFragment;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/inputmethod/KeyboardLayoutPickerFragment;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/inputmethod/KeyboardLayoutPickerFragment;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/inputmethod/KeyboardLayoutPickerFragment;->onPause",
                        "onResume": "Lcom/android/settings/inputmethod/KeyboardLayoutPickerFragment;->onResume"
                    },
                    "SpellCheckersSettings": {
                        "onActivityCreated": "Lcom/android/settings/inputmethod/SpellCheckersSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/inputmethod/SpellCheckersSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/inputmethod/SpellCheckersSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/inputmethod/SpellCheckersSettings;->onPause",
                        "onResume": "Lcom/android/settings/inputmethod/SpellCheckersSettings;->onResume"
                    },
                    "UserDictionaryAddWordActivity": {
                        "onClickConfirm": "Lcom/android/settings/inputmethod/UserDictionaryAddWordActivity;->onClickConfirm"
                    },
                    "UserDictionaryAddWordContents": {
                        "hasWord": "Lcom/android/settings/inputmethod/UserDictionaryAddWordContents;->hasWord",
                        "getLocalesList": "Lcom/android/settings/inputmethod/UserDictionaryAddWordContents;->getLocalesList",
                        "apply": "Lcom/android/settings/inputmethod/UserDictionaryAddWordContents;->apply",
                        "delete": "Lcom/android/settings/inputmethod/UserDictionaryAddWordContents;->delete"
                    },
                    "UserDictionaryAddWordFragment": {
                        "onOptionsItemSelected": "Lcom/android/settings/inputmethod/UserDictionaryAddWordFragment;->onOptionsItemSelected",
                        "onPause": "Lcom/android/settings/inputmethod/UserDictionaryAddWordFragment;->onPause",
                        "onResume": "Lcom/android/settings/inputmethod/UserDictionaryAddWordFragment;->onResume",
                        "updateSpinner": "Lcom/android/settings/inputmethod/UserDictionaryAddWordFragment;->updateSpinner"
                    },
                    "UserDictionaryList": {
                        "getUserDictionaryLocalesSet": "Lcom/android/settings/inputmethod/UserDictionaryList;->getUserDictionaryLocalesSet",
                        "createUserDictSettings": "Lcom/android/settings/inputmethod/UserDictionaryList;->createUserDictSettings",
                        "onActivityCreated": "Lcom/android/settings/inputmethod/UserDictionaryList;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/inputmethod/UserDictionaryList;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/inputmethod/UserDictionaryList;->onCreateOptionsMenu",
                        "onResume": "Lcom/android/settings/inputmethod/UserDictionaryList;->onResume"
                    },
                    "UserDictionaryLocalePicker": {
                        "onListItemClick": "Lcom/android/settings/inputmethod/UserDictionaryLocalePicker;->onListItemClick",
                        "updateLocale": "Lcom/android/settings/inputmethod/UserDictionaryLocalePicker;->updateLocale"
                    }
                },
                "LocalePicker": {
                    "onListItemClick": "Lcom/android/settings/LocalePicker;->onListItemClick",
                    "onLocaleSelected": "Lcom/android/settings/LocalePicker;->onLocaleSelected",
                    "updateLocale": "Lcom/android/settings/LocalePicker;->updateLocale"
                },
                "LocationSettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/LocationSettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/LocationSettings;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/LocationSettings;->onActivityResult",
                    "onCreate": "Lcom/android/settings/LocationSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/LocationSettings;->onCreateOptionsMenu",
                    "onResume": "Lcom/android/settings/LocationSettings;->onResume",
                    "onStart": "Lcom/android/settings/LocationSettings;->onStart"
                },
                "MasterClear": {
                    "onCreateView": "Lcom/android/settings/MasterClear;->onCreateView",
                    "establishInitialState": "Lcom/android/settings/MasterClear;->establishInitialState",
                    "loadAccountList": "Lcom/android/settings/MasterClear;->loadAccountList",
                    "onActivityResult": "Lcom/android/settings/MasterClear;->onActivityResult"
                },
                "net": {
                    "DataUsageMeteredSettings": {
                        "buildMobilePref": "Lcom/android/settings/net/DataUsageMeteredSettings;->buildMobilePref",
                        "onActivityCreated": "Lcom/android/settings/net/DataUsageMeteredSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/net/DataUsageMeteredSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/net/DataUsageMeteredSettings;->onCreateOptionsMenu",
                        "updateNetworks": "Lcom/android/settings/net/DataUsageMeteredSettings;->updateNetworks"
                    },
                    "NetworkPolicyEditor$1": {
                        "doInBackground": "Lcom/android/settings/net/NetworkPolicyEditor$1;->doInBackground"
                    },
                    "NetworkPolicyEditor": {
                        "read": "Lcom/android/settings/net/NetworkPolicyEditor;->read",
                        "write": "Lcom/android/settings/net/NetworkPolicyEditor;->write"
                    },
                    "UidDetailProvider": {
                        "buildUidDetail": "Lcom/android/settings/net/UidDetailProvider;->buildUidDetail",
                        "getUidDetail": "Lcom/android/settings/net/UidDetailProvider;->getUidDetail"
                    }
                },
                "nfc": {
                    "AndroidBeam": {
                        "onCheckedChanged": "Lcom/android/settings/nfc/AndroidBeam;->onCheckedChanged"
                    }
                },
                "NsdEnabler": {
                    "onPreferenceChange": "Lcom/android/settings/NsdEnabler;->onPreferenceChange"
                },
                "OwnerInfoSettings$1": {
                    "onCheckedChanged": "Lcom/android/settings/OwnerInfoSettings$1;->onCheckedChanged"
                },
                "OwnerInfoSettings": {
                    "onPause": "Lcom/android/settings/OwnerInfoSettings;->onPause",
                    "saveToDb": "Lcom/android/settings/OwnerInfoSettings;->saveToDb"
                },
                "PointerSpeedPreference": {
                    "onDialogClosed": "Lcom/android/settings/PointerSpeedPreference;->onDialogClosed",
                    "showDialog": "Lcom/android/settings/PointerSpeedPreference;->showDialog"
                },
                "PrivacySettings": {
                    "onPreferenceTreeClick": "Lcom/android/settings/PrivacySettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/PrivacySettings;->onActivityCreated",
                    "onClick": "Lcom/android/settings/PrivacySettings;->onClick",
                    "onCreate": "Lcom/android/settings/PrivacySettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/PrivacySettings;->onCreateOptionsMenu",
                    "onResume": "Lcom/android/settings/PrivacySettings;->onResume",
                    "setBackupEnabled": "Lcom/android/settings/PrivacySettings;->setBackupEnabled"
                },
                "ProxySelector$1": {
                    "onClick": "Lcom/android/settings/ProxySelector$1;->onClick"
                },
                "ProxySelector": {
                    "saveToDb": "Lcom/android/settings/ProxySelector;->saveToDb"
                },
                "quicklaunch": {
                    "QuickLaunchSettings": {
                        "clearShortcut": "Lcom/android/settings/quicklaunch/QuickLaunchSettings;->clearShortcut",
                        "onActivityResult": "Lcom/android/settings/quicklaunch/QuickLaunchSettings;->onActivityResult",
                        "onClick": "Lcom/android/settings/quicklaunch/QuickLaunchSettings;->onClick",
                        "updateShortcut": "Lcom/android/settings/quicklaunch/QuickLaunchSettings;->updateShortcut"
                    }
                },
                "RadioInfo$12": {
                    "onMenuItemClick": "Lcom/android/settings/RadioInfo$12;->onMenuItemClick"
                },
                "RadioInfo$20": {
                    "onClick": "Lcom/android/settings/RadioInfo$20;->onClick"
                },
                "RadioInfo$21": {
                    "onClick": "Lcom/android/settings/RadioInfo$21;->onClick"
                },
                "RadioInfo$22": {
                    "onItemSelected": "Lcom/android/settings/RadioInfo$22;->onItemSelected"
                },
                "RadioInfo": {
                    "onCreate": "Lcom/android/settings/RadioInfo;->onCreate",
                    "onPause": "Lcom/android/settings/RadioInfo;->onPause",
                    "onResume": "Lcom/android/settings/RadioInfo;->onResume",
                    "refreshSmsc": "Lcom/android/settings/RadioInfo;->refreshSmsc"
                },
                "RingerVolumePreference": {
                    "cleanup": "Lcom/android/settings/RingerVolumePreference;->cleanup",
                    "onActivityStop": "Lcom/android/settings/RingerVolumePreference;->onActivityStop",
                    "onBindDialogView": "Lcom/android/settings/RingerVolumePreference;->onBindDialogView",
                    "onDialogClosed": "Lcom/android/settings/RingerVolumePreference;->onDialogClosed",
                    "onSampleStarting": "Lcom/android/settings/RingerVolumePreference;->onSampleStarting"
                },
                "SecuritySettings": {
                    "onPreferenceChange": "Lcom/android/settings/SecuritySettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/SecuritySettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/SecuritySettings;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/SecuritySettings;->onActivityResult",
                    "onClick": "Lcom/android/settings/SecuritySettings;->onClick",
                    "onCreate": "Lcom/android/settings/SecuritySettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/SecuritySettings;->onCreateOptionsMenu",
                    "onResume": "Lcom/android/settings/SecuritySettings;->onResume",
                    "setNonMarketAppsAllowed": "Lcom/android/settings/SecuritySettings;->setNonMarketAppsAllowed"
                },
                "Settings$AccessibilitySettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$AccessibilitySettingsActivity;->updateHeaderList"
                },
                "Settings$AccountSyncSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$AccountSyncSettingsActivity;->updateHeaderList"
                },
                "Settings$AccountSyncSettingsInAddAccountActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$AccountSyncSettingsInAddAccountActivity;->updateHeaderList"
                },
                "Settings$AdvancedWifiSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$AdvancedWifiSettingsActivity;->updateHeaderList"
                },
                "Settings$AndroidBeamSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$AndroidBeamSettingsActivity;->updateHeaderList"
                },
                "Settings$ApplicationSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$ApplicationSettingsActivity;->updateHeaderList"
                },
                "Settings$BluetoothSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$BluetoothSettingsActivity;->updateHeaderList"
                },
                "Settings$CryptKeeperSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$CryptKeeperSettingsActivity;->updateHeaderList"
                },
                "Settings$DataUsageSummaryActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DataUsageSummaryActivity;->updateHeaderList"
                },
                "Settings$DateTimeSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DateTimeSettingsActivity;->updateHeaderList"
                },
                "Settings$DevelopmentSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DevelopmentSettingsActivity;->updateHeaderList"
                },
                "Settings$DeviceAdminSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DeviceAdminSettingsActivity;->updateHeaderList"
                },
                "Settings$DeviceInfoSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DeviceInfoSettingsActivity;->updateHeaderList"
                },
                "Settings$DisplaySettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DisplaySettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DisplaySettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DisplaySettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DisplaySettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DisplaySettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DisplaySettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DisplaySettingsActivity;->updateHeaderList"
                },
                "Settings$DockSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$DockSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$DockSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$DockSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$DockSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$DockSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$DockSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$DockSettingsActivity;->updateHeaderList"
                },
                "Settings$HeaderAdapter": {
                    "getView": "Lcom/android/settings/Settings$HeaderAdapter;->getView",
                    "<init>": "Lcom/android/settings/Settings$HeaderAdapter;-><init>",
                    "resume": "Lcom/android/settings/Settings$HeaderAdapter;->resume"
                },
                "Settings$InputMethodAndLanguageSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$InputMethodAndLanguageSettingsActivity;->updateHeaderList"
                },
                "Settings$InputMethodAndSubtypeEnablerActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$InputMethodAndSubtypeEnablerActivity;->updateHeaderList"
                },
                "Settings$KeyboardLayoutPickerActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$KeyboardLayoutPickerActivity;->updateHeaderList"
                },
                "Settings$LocalePickerActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$LocalePickerActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$LocalePickerActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$LocalePickerActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$LocalePickerActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$LocalePickerActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$LocalePickerActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$LocalePickerActivity;->updateHeaderList"
                },
                "Settings$LocationSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$LocationSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$LocationSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$LocationSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$LocationSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$LocationSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$LocationSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$LocationSettingsActivity;->updateHeaderList"
                },
                "Settings$ManageAccountsSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$ManageAccountsSettingsActivity;->updateHeaderList"
                },
                "Settings$ManageApplicationsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$ManageApplicationsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$ManageApplicationsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$ManageApplicationsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$ManageApplicationsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$ManageApplicationsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$ManageApplicationsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$ManageApplicationsActivity;->updateHeaderList"
                },
                "Settings$PowerUsageSummaryActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$PowerUsageSummaryActivity;->updateHeaderList"
                },
                "Settings$PrivacySettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$PrivacySettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$PrivacySettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$PrivacySettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$PrivacySettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$PrivacySettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$PrivacySettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$PrivacySettingsActivity;->updateHeaderList"
                },
                "Settings$RunningServicesActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$RunningServicesActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$RunningServicesActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$RunningServicesActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$RunningServicesActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$RunningServicesActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$RunningServicesActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$RunningServicesActivity;->updateHeaderList"
                },
                "Settings$SecuritySettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$SecuritySettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$SecuritySettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$SecuritySettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$SecuritySettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$SecuritySettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$SecuritySettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$SecuritySettingsActivity;->updateHeaderList"
                },
                "Settings$SoundSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$SoundSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$SoundSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$SoundSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$SoundSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$SoundSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$SoundSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$SoundSettingsActivity;->updateHeaderList"
                },
                "Settings$SpellCheckersSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$SpellCheckersSettingsActivity;->updateHeaderList"
                },
                "Settings$StorageSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$StorageSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$StorageSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$StorageSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$StorageSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$StorageSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$StorageSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$StorageSettingsActivity;->updateHeaderList"
                },
                "Settings$StorageUseActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$StorageUseActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$StorageUseActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$StorageUseActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$StorageUseActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$StorageUseActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$StorageUseActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$StorageUseActivity;->updateHeaderList"
                },
                "Settings$TetherSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$TetherSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$TetherSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$TetherSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$TetherSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$TetherSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$TetherSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$TetherSettingsActivity;->updateHeaderList"
                },
                "Settings$TextToSpeechSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$TextToSpeechSettingsActivity;->updateHeaderList"
                },
                "Settings$UserDictionarySettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$UserDictionarySettingsActivity;->updateHeaderList"
                },
                "Settings$VpnSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$VpnSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$VpnSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$VpnSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$VpnSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$VpnSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$VpnSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$VpnSettingsActivity;->updateHeaderList"
                },
                "Settings$WifiP2pSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$WifiP2pSettingsActivity;->updateHeaderList"
                },
                "Settings$WifiSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$WifiSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$WifiSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$WifiSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$WifiSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$WifiSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$WifiSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$WifiSettingsActivity;->updateHeaderList"
                },
                "Settings$WirelessSettingsActivity": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings$WirelessSettingsActivity;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings$WirelessSettingsActivity;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings$WirelessSettingsActivity;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings$WirelessSettingsActivity;->onCreate",
                    "onResume": "Lcom/android/settings/Settings$WirelessSettingsActivity;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings$WirelessSettingsActivity;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings$WirelessSettingsActivity;->updateHeaderList"
                },
                "Settings": {
                    "insertAccountsHeaders": "Lcom/android/settings/Settings;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/Settings;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/Settings;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/Settings;->onCreate",
                    "onResume": "Lcom/android/settings/Settings;->onResume",
                    "setListAdapter": "Lcom/android/settings/Settings;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/Settings;->updateHeaderList"
                },
                "SettingsLicenseActivity": {
                    "onCreate": "Lcom/android/settings/SettingsLicenseActivity;->onCreate"
                },
                "SettingsPreferenceFragment": {
                    "onOptionsItemSelected": "Lcom/android/settings/SettingsPreferenceFragment;->onOptionsItemSelected",
                    "onActivityCreated": "Lcom/android/settings/SettingsPreferenceFragment;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/SettingsPreferenceFragment;->onActivityResult",
                    "onCreate": "Lcom/android/settings/SettingsPreferenceFragment;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/SettingsPreferenceFragment;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/SettingsPreferenceFragment;->onPause",
                    "onPrepareOptionsMenu": "Lcom/android/settings/SettingsPreferenceFragment;->onPrepareOptionsMenu",
                    "onResume": "Lcom/android/settings/SettingsPreferenceFragment;->onResume",
                    "onStart": "Lcom/android/settings/SettingsPreferenceFragment;->onStart"
                },
                "SettingsSafetyLegalActivity": {
                    "onCreate": "Lcom/android/settings/SettingsSafetyLegalActivity;->onCreate"
                },
                "SoundSettings": {
                    "onPreferenceChange": "Lcom/android/settings/SoundSettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/SoundSettings;->onPreferenceTreeClick",
                    "onActivityCreated": "Lcom/android/settings/SoundSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/SoundSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/SoundSettings;->onCreateOptionsMenu",
                    "onResume": "Lcom/android/settings/SoundSettings;->onResume"
                },
                "SubSettings": {
                    "insertAccountsHeaders": "Lcom/android/settings/SubSettings;->insertAccountsHeaders",
                    "onAccountsUpdated": "Lcom/android/settings/SubSettings;->onAccountsUpdated",
                    "onBuildHeaders": "Lcom/android/settings/SubSettings;->onBuildHeaders",
                    "onCreate": "Lcom/android/settings/SubSettings;->onCreate",
                    "onResume": "Lcom/android/settings/SubSettings;->onResume",
                    "setListAdapter": "Lcom/android/settings/SubSettings;->setListAdapter",
                    "updateHeaderList": "Lcom/android/settings/SubSettings;->updateHeaderList"
                },
                "TetherSettings$TetherChangeReceiver": {
                    "onReceive": "Lcom/android/settings/TetherSettings$TetherChangeReceiver;->onReceive"
                },
                "TetherSettings": {
                    "onPreferenceChange": "Lcom/android/settings/TetherSettings;->onPreferenceChange",
                    "onPreferenceTreeClick": "Lcom/android/settings/TetherSettings;->onPreferenceTreeClick",
                    "initWifiTethering": "Lcom/android/settings/TetherSettings;->initWifiTethering",
                    "onActivityCreated": "Lcom/android/settings/TetherSettings;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/TetherSettings;->onActivityResult",
                    "onClick": "Lcom/android/settings/TetherSettings;->onClick",
                    "onCreate": "Lcom/android/settings/TetherSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/TetherSettings;->onCreateOptionsMenu",
                    "onStart": "Lcom/android/settings/TetherSettings;->onStart",
                    "setUsbTethering": "Lcom/android/settings/TetherSettings;->setUsbTethering",
                    "startProvisioningIfNecessary": "Lcom/android/settings/TetherSettings;->startProvisioningIfNecessary",
                    "startTethering": "Lcom/android/settings/TetherSettings;->startTethering",
                    "updateBluetoothState": "Lcom/android/settings/TetherSettings;->updateBluetoothState",
                    "updateState": "Lcom/android/settings/TetherSettings;->updateState",
                    "updateUsbState": "Lcom/android/settings/TetherSettings;->updateUsbState"
                },
                "tts": {
                    "TextToSpeechSettings": {
                        "onPreferenceChange": "Lcom/android/settings/tts/TextToSpeechSettings;->onPreferenceChange",
                        "onActivityCreated": "Lcom/android/settings/tts/TextToSpeechSettings;->onActivityCreated",
                        "onActivityResult": "Lcom/android/settings/tts/TextToSpeechSettings;->onActivityResult",
                        "onCreate": "Lcom/android/settings/tts/TextToSpeechSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/tts/TextToSpeechSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/tts/TextToSpeechSettings;->onPause",
                        "onVoiceDataIntegrityCheckDone": "Lcom/android/settings/tts/TextToSpeechSettings;->onVoiceDataIntegrityCheckDone"
                    },
                    "TtsEngineSettingsFragment$1$1": {
                        "run": "Lcom/android/settings/tts/TtsEngineSettingsFragment$1$1;->run"
                    },
                    "TtsEngineSettingsFragment": {
                        "onPreferenceChange": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->onPreferenceChange",
                        "onActivityCreated": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->onCreateOptionsMenu",
                        "updateDefaultLocalePref": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->updateDefaultLocalePref",
                        "updateLanguageTo": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->updateLanguageTo",
                        "updateVoiceDetails": "Lcom/android/settings/tts/TtsEngineSettingsFragment;->updateVoiceDetails"
                    }
                },
                "UserDictionarySettings": {
                    "createCursor": "Lcom/android/settings/UserDictionarySettings;->createCursor",
                    "deleteWord": "Lcom/android/settings/UserDictionarySettings;->deleteWord",
                    "onActivityCreated": "Lcom/android/settings/UserDictionarySettings;->onActivityCreated"
                },
                "users": {
                    "UserDetailsSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/users/UserDetailsSettings;->onOptionsItemSelected",
                        "onActivityCreated": "Lcom/android/settings/users/UserDetailsSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/users/UserDetailsSettings;->onCreate",
                        "onResume": "Lcom/android/settings/users/UserDetailsSettings;->onResume"
                    },
                    "UserSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/users/UserSettings;->onOptionsItemSelected",
                        "onActivityCreated": "Lcom/android/settings/users/UserSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/users/UserSettings;->onCreate",
                        "onResume": "Lcom/android/settings/users/UserSettings;->onResume"
                    }
                },
                "Utils": {
                    "isWifiOnly": "Lcom/android/settings/Utils;->isWifiOnly",
                    "getTetheringLabel": "Lcom/android/settings/Utils;->getTetheringLabel",
                    "getDefaultIpAddresses": "Lcom/android/settings/Utils;->getDefaultIpAddresses",
                    "getWifiIpAddresses": "Lcom/android/settings/Utils;->getWifiIpAddresses"
                },
                "VoiceInputOutputSettings": {
                    "onPreferenceChange": "Lcom/android/settings/VoiceInputOutputSettings;->onPreferenceChange"
                },
                "vpn2": {
                    "VpnSettings": {
                        "getDefaultNetwork": "Lcom/android/settings/vpn2/VpnSettings;->getDefaultNetwork",
                        "connect": "Lcom/android/settings/vpn2/VpnSettings;->connect",
                        "onActivityCreated": "Lcom/android/settings/vpn2/VpnSettings;->onActivityCreated",
                        "onClick": "Lcom/android/settings/vpn2/VpnSettings;->onClick",
                        "onCreate": "Lcom/android/settings/vpn2/VpnSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/vpn2/VpnSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/vpn2/VpnSettings;->onPause",
                        "onResume": "Lcom/android/settings/vpn2/VpnSettings;->onResume"
                    }
                },
                "WallpaperTypeSettings": {
                    "onActivityCreated": "Lcom/android/settings/WallpaperTypeSettings;->onActivityCreated",
                    "onCreate": "Lcom/android/settings/WallpaperTypeSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/WallpaperTypeSettings;->onCreateOptionsMenu"
                },
                "widget": {
                    "ChartDataUsageView$3": {
                        "onSweep": "Lcom/android/settings/widget/ChartDataUsageView$3;->onSweep"
                    },
                    "ChartDataUsageView$DataUsageChartListener": {
                        "onLimitChanged": "Lcom/android/settings/widget/ChartDataUsageView$DataUsageChartListener;->onLimitChanged",
                        "onWarningChanged": "Lcom/android/settings/widget/ChartDataUsageView$DataUsageChartListener;->onWarningChanged"
                    },
                    "ChartSweepView$OnSweepListener": {
                        "onSweep": "Lcom/android/settings/widget/ChartSweepView$OnSweepListener;->onSweep"
                    },
                    "ChartSweepView": {
                        "onTouchEvent": "Lcom/android/settings/widget/ChartSweepView;->onTouchEvent",
                        "dispatchOnSweep": "Lcom/android/settings/widget/ChartSweepView;->dispatchOnSweep"
                    },
                    "SettingsAppWidgetProvider$BluetoothStateTracker$1": {
                        "doInBackground": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker$1;->doInBackground"
                    },
                    "SettingsAppWidgetProvider$BluetoothStateTracker": {
                        "getActualState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->getActualState",
                        "getTriState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->getTriState",
                        "onActualStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->onActualStateChange",
                        "setCurrentState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->setCurrentState",
                        "setImageViewResources": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->setImageViewResources",
                        "toggleState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$BluetoothStateTracker;->toggleState"
                    },
                    "SettingsAppWidgetProvider$GpsStateTracker$1": {
                        "doInBackground": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker$1;->doInBackground",
                        "onPostExecute": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker$1;->onPostExecute"
                    },
                    "SettingsAppWidgetProvider$GpsStateTracker": {
                        "getTriState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker;->getTriState",
                        "onActualStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker;->onActualStateChange",
                        "setCurrentState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker;->setCurrentState",
                        "setImageViewResources": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker;->setImageViewResources",
                        "toggleState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$GpsStateTracker;->toggleState"
                    },
                    "SettingsAppWidgetProvider$SettingsObserver": {
                        "onChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SettingsObserver;->onChange",
                        "startObserving": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SettingsObserver;->startObserving"
                    },
                    "SettingsAppWidgetProvider$StateTracker": {
                        "getActualState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->getActualState",
                        "getTriState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->getTriState",
                        "onActualStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->onActualStateChange",
                        "requestStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->requestStateChange",
                        "setCurrentState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->setCurrentState",
                        "setImageViewResources": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->setImageViewResources",
                        "toggleState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$StateTracker;->toggleState"
                    },
                    "SettingsAppWidgetProvider$SyncStateTracker$1": {
                        "doInBackground": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker$1;->doInBackground",
                        "onPostExecute": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker$1;->onPostExecute"
                    },
                    "SettingsAppWidgetProvider$SyncStateTracker": {
                        "getActualState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->getActualState",
                        "getTriState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->getTriState",
                        "onActualStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->onActualStateChange",
                        "requestStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->requestStateChange",
                        "setCurrentState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->setCurrentState",
                        "setImageViewResources": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->setImageViewResources",
                        "toggleState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$SyncStateTracker;->toggleState"
                    },
                    "SettingsAppWidgetProvider$WifiStateTracker$1": {
                        "doInBackground": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker$1;->doInBackground"
                    },
                    "SettingsAppWidgetProvider$WifiStateTracker": {
                        "getActualState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->getActualState",
                        "getTriState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->getTriState",
                        "onActualStateChange": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->onActualStateChange",
                        "setCurrentState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->setCurrentState",
                        "setImageViewResources": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->setImageViewResources",
                        "toggleState": "Lcom/android/settings/widget/SettingsAppWidgetProvider$WifiStateTracker;->toggleState"
                    },
                    "SettingsAppWidgetProvider": {
                        "buildUpdate": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->buildUpdate",
                        "checkObserver": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->checkObserver",
                        "onEnabled": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->onEnabled",
                        "onReceive": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->onReceive",
                        "onUpdate": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->onUpdate",
                        "toggleBrightness": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->toggleBrightness",
                        "updateButtons": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->updateButtons",
                        "updateWidget": "Lcom/android/settings/widget/SettingsAppWidgetProvider;->updateWidget"
                    }
                },
                "wifi": {
                    "AdvancedWifiSettings": {
                        "onPreferenceChange": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onPreferenceChange",
                        "onPreferenceTreeClick": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onPreferenceTreeClick",
                        "initPreferences": "Lcom/android/settings/wifi/AdvancedWifiSettings;->initPreferences",
                        "onActivityCreated": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onActivityCreated",
                        "onCreate": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onCreateOptionsMenu",
                        "onResume": "Lcom/android/settings/wifi/AdvancedWifiSettings;->onResume",
                        "refreshWifiInfo": "Lcom/android/settings/wifi/AdvancedWifiSettings;->refreshWifiInfo",
                        "updateSleepPolicySummary": "Lcom/android/settings/wifi/AdvancedWifiSettings;->updateSleepPolicySummary"
                    },
                    "p2p": {
                        "WifiP2pSettings": {
                            "onOptionsItemSelected": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onOptionsItemSelected",
                            "onActivityCreated": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onActivityCreated",
                            "onCreate": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onCreate",
                            "onCreateOptionsMenu": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onCreateOptionsMenu",
                            "onPause": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onPause",
                            "onResume": "Lcom/android/settings/wifi/p2p/WifiP2pSettings;->onResume"
                        }
                    },
                    "WifiApEnabler$1": {
                        "onReceive": "Lcom/android/settings/wifi/WifiApEnabler$1;->onReceive"
                    },
                    "WifiApEnabler": {
                        "<init>": "Lcom/android/settings/wifi/WifiApEnabler;-><init>",
                        "setSoftapEnabled": "Lcom/android/settings/wifi/WifiApEnabler;->setSoftapEnabled",
                        "updateTetherState": "Lcom/android/settings/wifi/WifiApEnabler;->updateTetherState"
                    },
                    "WifiAPITest$1": {
                        "onClick": "Lcom/android/settings/wifi/WifiAPITest$1;->onClick"
                    },
                    "WifiAPITest$3": {
                        "onClick": "Lcom/android/settings/wifi/WifiAPITest$3;->onClick"
                    },
                    "WifiAPITest": {
                        "onPreferenceClick": "Lcom/android/settings/wifi/WifiAPITest;->onPreferenceClick"
                    },
                    "WifiConfigInfo": {
                        "onResume": "Lcom/android/settings/wifi/WifiConfigInfo;->onResume"
                    },
                    "WifiEnabler": {
                        "onCheckedChanged": "Lcom/android/settings/wifi/WifiEnabler;->onCheckedChanged",
                        "setSwitch": "Lcom/android/settings/wifi/WifiEnabler;->setSwitch"
                    },
                    "WifiSettings$1": {
                        "onReceive": "Lcom/android/settings/wifi/WifiSettings$1;->onReceive"
                    },
                    "WifiSettings$2": {
                        "onClick": "Lcom/android/settings/wifi/WifiSettings$2;->onClick"
                    },
                    "WifiSettings$3": {
                        "onClick": "Lcom/android/settings/wifi/WifiSettings$3;->onClick"
                    },
                    "WifiSettings": {
                        "onOptionsItemSelected": "Lcom/android/settings/wifi/WifiSettings;->onOptionsItemSelected",
                        "getAccessPointsCount": "Lcom/android/settings/wifi/WifiSettings;->getAccessPointsCount",
                        "constructAccessPoints": "Lcom/android/settings/wifi/WifiSettings;->constructAccessPoints",
                        "forget": "Lcom/android/settings/wifi/WifiSettings;->forget",
                        "handleEvent": "Lcom/android/settings/wifi/WifiSettings;->handleEvent",
                        "onActivityCreated": "Lcom/android/settings/wifi/WifiSettings;->onActivityCreated",
                        "onClick": "Lcom/android/settings/wifi/WifiSettings;->onClick",
                        "onCreate": "Lcom/android/settings/wifi/WifiSettings;->onCreate",
                        "onCreateOptionsMenu": "Lcom/android/settings/wifi/WifiSettings;->onCreateOptionsMenu",
                        "onPause": "Lcom/android/settings/wifi/WifiSettings;->onPause",
                        "onResume": "Lcom/android/settings/wifi/WifiSettings;->onResume",
                        "pauseWifiScan": "Lcom/android/settings/wifi/WifiSettings;->pauseWifiScan",
                        "refreshAccessPoints": "Lcom/android/settings/wifi/WifiSettings;->refreshAccessPoints",
                        "resumeWifiScan": "Lcom/android/settings/wifi/WifiSettings;->resumeWifiScan",
                        "submit": "Lcom/android/settings/wifi/WifiSettings;->submit",
                        "updateAccessPoints": "Lcom/android/settings/wifi/WifiSettings;->updateAccessPoints",
                        "updateConnectionState": "Lcom/android/settings/wifi/WifiSettings;->updateConnectionState"
                    },
                    "WifiSettingsForSetupWizardXL": {
                        "onBackButtonPressed": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->onBackButtonPressed",
                        "onClick": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->onClick",
                        "onConnectButtonPressed": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->onConnectButtonPressed",
                        "onCreate": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->onCreate",
                        "refreshAccessPoints": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->refreshAccessPoints",
                        "showConfigUi": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->showConfigUi",
                        "showDisconnectedState": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->showDisconnectedState",
                        "updateConnectionState": "Lcom/android/settings/wifi/WifiSettingsForSetupWizardXL;->updateConnectionState"
                    },
                    "WifiStatusTest$1": {
                        "onReceive": "Lcom/android/settings/wifi/WifiStatusTest$1;->onReceive"
                    },
                    "WifiStatusTest$3": {
                        "onClick": "Lcom/android/settings/wifi/WifiStatusTest$3;->onClick"
                    },
                    "WifiStatusTest": {
                        "handleNetworkStateChanged": "Lcom/android/settings/wifi/WifiStatusTest;->handleNetworkStateChanged",
                        "handleScanResultsAvailable": "Lcom/android/settings/wifi/WifiStatusTest;->handleScanResultsAvailable"
                    },
                    "WpsDialog$1": {
                        "onReceive": "Lcom/android/settings/wifi/WpsDialog$1;->onReceive"
                    },
                    "WpsDialog": {
                        "handleEvent": "Lcom/android/settings/wifi/WpsDialog;->handleEvent",
                        "onCreate": "Lcom/android/settings/wifi/WpsDialog;->onCreate"
                    }
                },
                "WirelessSettings": {
                    "onActivityCreated": "Lcom/android/settings/WirelessSettings;->onActivityCreated",
                    "onActivityResult": "Lcom/android/settings/WirelessSettings;->onActivityResult",
                    "onCreate": "Lcom/android/settings/WirelessSettings;->onCreate",
                    "onCreateOptionsMenu": "Lcom/android/settings/WirelessSettings;->onCreateOptionsMenu",
                    "onPause": "Lcom/android/settings/WirelessSettings;->onPause",
                    "onResume": "Lcom/android/settings/WirelessSettings;->onResume"
                },
                "ZonePicker": {
                    "onListItemClick": "Lcom/android/settings/ZonePicker;->onListItemClick"
                },
                "search": {
                    "SettingsSearchIndexablesProvider": "Lcom/android/settings/search;->SettingsSearchIndexablesProvider"
                }
            },
            "soundrecorder": {
                "Recorder$OnStateChangedListener": {
                    "onStateChanged": "Lcom/android/soundrecorder/Recorder$OnStateChangedListener;->onStateChanged"
                },
                "Recorder": {
                    "onError": "Lcom/android/soundrecorder/Recorder;->onError",
                    "clear": "Lcom/android/soundrecorder/Recorder;->clear",
                    "delete": "Lcom/android/soundrecorder/Recorder;->delete",
                    "onCompletion": "Lcom/android/soundrecorder/Recorder;->onCompletion",
                    "restoreState": "Lcom/android/soundrecorder/Recorder;->restoreState",
                    "setState": "Lcom/android/soundrecorder/Recorder;->setState",
                    "signalStateChanged": "Lcom/android/soundrecorder/Recorder;->signalStateChanged",
                    "startPlayback": "Lcom/android/soundrecorder/Recorder;->startPlayback",
                    "startRecording": "Lcom/android/soundrecorder/Recorder;->startRecording",
                    "stop": "Lcom/android/soundrecorder/Recorder;->stop",
                    "stopPlayback": "Lcom/android/soundrecorder/Recorder;->stopPlayback",
                    "stopRecording": "Lcom/android/soundrecorder/Recorder;->stopRecording"
                },
                "SoundRecorder$1": {
                    "run": "Lcom/android/soundrecorder/SoundRecorder$1;->run"
                },
                "SoundRecorder$2": {
                    "onReceive": "Lcom/android/soundrecorder/SoundRecorder$2;->onReceive"
                },
                "SoundRecorder": {
                    "onKeyDown": "Lcom/android/soundrecorder/SoundRecorder;->onKeyDown",
                    "onClick": "Lcom/android/soundrecorder/SoundRecorder;->onClick",
                    "onConfigurationChanged": "Lcom/android/soundrecorder/SoundRecorder;->onConfigurationChanged",
                    "onCreate": "Lcom/android/soundrecorder/SoundRecorder;->onCreate",
                    "onPause": "Lcom/android/soundrecorder/SoundRecorder;->onPause",
                    "onStateChanged": "Lcom/android/soundrecorder/SoundRecorder;->onStateChanged",
                    "onStop": "Lcom/android/soundrecorder/SoundRecorder;->onStop",
                    "updateTimeRemaining": "Lcom/android/soundrecorder/SoundRecorder;->updateTimeRemaining",
                    "updateTimerView": "Lcom/android/soundrecorder/SoundRecorder;->updateTimerView",
                    "updateUi": "Lcom/android/soundrecorder/SoundRecorder;->updateUi"
                },
                "VUMeter": {
                    "<init>": "Lcom/android/soundrecorder/VUMeter;-><init>"
                }
            },
            "systemui": {
                "ImageWallpaper$DrawableEngine$WallpaperObserver": {
                    "onReceive": "Lcom/android/systemui/ImageWallpaper$DrawableEngine$WallpaperObserver;->onReceive"
                },
                "ImageWallpaper$DrawableEngine": {
                    "drawFrameLocked": "Lcom/android/systemui/ImageWallpaper$DrawableEngine;->drawFrameLocked",
                    "onOffsetsChanged": "Lcom/android/systemui/ImageWallpaper$DrawableEngine;->onOffsetsChanged",
                    "onSurfaceChanged": "Lcom/android/systemui/ImageWallpaper$DrawableEngine;->onSurfaceChanged",
                    "onVisibilityChanged": "Lcom/android/systemui/ImageWallpaper$DrawableEngine;->onVisibilityChanged",
                    "updateWallpaperLocked": "Lcom/android/systemui/ImageWallpaper$DrawableEngine;->updateWallpaperLocked"
                },
                "media": {
                    "NotificationPlayer$CmdThread": {
                        "run": "Lcom/android/systemui/media/NotificationPlayer$CmdThread;->run"
                    },
                    "NotificationPlayer$CreationAndCompletionThread": {
                        "run": "Lcom/android/systemui/media/NotificationPlayer$CreationAndCompletionThread;->run"
                    },
                    "NotificationPlayer": {
                        "acquireWakeLock": "Lcom/android/systemui/media/NotificationPlayer;->acquireWakeLock",
                        "enqueueLocked": "Lcom/android/systemui/media/NotificationPlayer;->enqueueLocked",
                        "play": "Lcom/android/systemui/media/NotificationPlayer;->play",
                        "releaseWakeLock": "Lcom/android/systemui/media/NotificationPlayer;->releaseWakeLock",
                        "startSound": "Lcom/android/systemui/media/NotificationPlayer;->startSound",
                        "stop": "Lcom/android/systemui/media/NotificationPlayer;->stop"
                    },
                    "RingtonePlayer$1": {
                        "onTransact": "Lcom/android/systemui/media/RingtonePlayer$1;->onTransact",
                        "play": "Lcom/android/systemui/media/RingtonePlayer$1;->play",
                        "playAsync": "Lcom/android/systemui/media/RingtonePlayer$1;->playAsync",
                        "stop": "Lcom/android/systemui/media/RingtonePlayer$1;->stop",
                        "stopAsync": "Lcom/android/systemui/media/RingtonePlayer$1;->stopAsync"
                    },
                    "RingtonePlayer$Client": {
                        "binderDied": "Lcom/android/systemui/media/RingtonePlayer$Client;->binderDied",
                        "<init>": "Lcom/android/systemui/media/RingtonePlayer$Client;-><init>"
                    },
                    "RingtonePlayer": {
                        "onConfigurationChanged": "Lcom/android/systemui/media/RingtonePlayer;->onConfigurationChanged"
                    }
                },
                "power": {
                    "PowerUI$1": {
                        "onReceive": "Lcom/android/systemui/power/PowerUI$1;->onReceive"
                    },
                    "PowerUI": {
                        "onConfigurationChanged": "Lcom/android/systemui/power/PowerUI;->onConfigurationChanged",
                        "playLowBatterySound": "Lcom/android/systemui/power/PowerUI;->playLowBatterySound"
                    }
                },
                "recent": {
                    "RecentsCallback": {
                        "dismiss": "Lcom/android/systemui/recent/RecentsCallback;->dismiss",
                        "handleOnClick": "Lcom/android/systemui/recent/RecentsCallback;->handleOnClick",
                        "handleSwipe": "Lcom/android/systemui/recent/RecentsCallback;->handleSwipe"
                    },
                    "RecentsHorizontalScrollView$2": {
                        "onClick": "Lcom/android/systemui/recent/RecentsHorizontalScrollView$2;->onClick"
                    },
                    "RecentsHorizontalScrollView$3": {
                        "onClick": "Lcom/android/systemui/recent/RecentsHorizontalScrollView$3;->onClick"
                    },
                    "RecentsHorizontalScrollView": {
                        "getVerticalFadingEdgeLength": "Lcom/android/systemui/recent/RecentsHorizontalScrollView;->getVerticalFadingEdgeLength",
                        "onChildDismissed": "Lcom/android/systemui/recent/RecentsHorizontalScrollView;->onChildDismissed"
                    },
                    "RecentsPanelView$3": {
                        "onMenuItemClick": "Lcom/android/systemui/recent/RecentsPanelView$3;->onMenuItemClick"
                    },
                    "RecentsPanelView": {
                        "dismiss": "Lcom/android/systemui/recent/RecentsPanelView;->dismiss",
                        "handleOnClick": "Lcom/android/systemui/recent/RecentsPanelView;->handleOnClick",
                        "handleSwipe": "Lcom/android/systemui/recent/RecentsPanelView;->handleSwipe",
                        "hide": "Lcom/android/systemui/recent/RecentsPanelView;->hide",
                        "onItemClick": "Lcom/android/systemui/recent/RecentsPanelView;->onItemClick",
                        "onTaskThumbnailLoaded": "Lcom/android/systemui/recent/RecentsPanelView;->onTaskThumbnailLoaded"
                    },
                    "RecentsVerticalScrollView$2": {
                        "onClick": "Lcom/android/systemui/recent/RecentsVerticalScrollView$2;->onClick"
                    },
                    "RecentsVerticalScrollView$3": {
                        "onClick": "Lcom/android/systemui/recent/RecentsVerticalScrollView$3;->onClick"
                    },
                    "RecentsVerticalScrollView": {
                        "onChildDismissed": "Lcom/android/systemui/recent/RecentsVerticalScrollView;->onChildDismissed"
                    },
                    "RecentTasksLoader$1": {
                        "doInBackground": "Lcom/android/systemui/recent/RecentTasksLoader$1;->doInBackground"
                    }
                },
                "screenshot": {
                    "GlobalScreenshot$2": {
                        "onAnimationEnd": "Lcom/android/systemui/screenshot/GlobalScreenshot$2;->onAnimationEnd"
                    },
                    "GlobalScreenshot": {
                        "notifyScreenshotError": "Lcom/android/systemui/screenshot/GlobalScreenshot;->notifyScreenshotError",
                        "saveScreenshotInWorkerThread": "Lcom/android/systemui/screenshot/GlobalScreenshot;->saveScreenshotInWorkerThread",
                        "takeScreenshot": "Lcom/android/systemui/screenshot/GlobalScreenshot;->takeScreenshot"
                    },
                    "SaveImageInBackgroundTask": {
                        "doInBackground": "Lcom/android/systemui/screenshot/SaveImageInBackgroundTask;->doInBackground",
                        "<init>": "Lcom/android/systemui/screenshot/SaveImageInBackgroundTask;-><init>",
                        "onPostExecute": "Lcom/android/systemui/screenshot/SaveImageInBackgroundTask;->onPostExecute"
                    }
                },
                "SearchPanelView$1": {
                    "run": "Lcom/android/systemui/SearchPanelView$1;->run"
                },
                "SearchPanelView$GlowPadTriggerListener": {
                    "onGrabbedStateChange": "Lcom/android/systemui/SearchPanelView$GlowPadTriggerListener;->onGrabbedStateChange",
                    "onTrigger": "Lcom/android/systemui/SearchPanelView$GlowPadTriggerListener;->onTrigger"
                },
                "SearchPanelView": {
                    "hide": "Lcom/android/systemui/SearchPanelView;->hide",
                    "show": "Lcom/android/systemui/SearchPanelView;->show",
                    "startAssistActivity": "Lcom/android/systemui/SearchPanelView;->startAssistActivity",
                    "vibrate": "Lcom/android/systemui/SearchPanelView;->vibrate"
                },
                "statusbar": {
                    "BaseStatusBar$2": {
                        "onClickHandler": "Lcom/android/systemui/statusbar/BaseStatusBar$2;->onClickHandler"
                    },
                    "BaseStatusBar$4$1": {
                        "onMenuItemClick": "Lcom/android/systemui/statusbar/BaseStatusBar$4$1;->onMenuItemClick"
                    },
                    "BaseStatusBar$NotificationClicker": {
                        "onClick": "Lcom/android/systemui/statusbar/BaseStatusBar$NotificationClicker;->onClick"
                    },
                    "BaseStatusBar": {
                        "addNotificationViews": "Lcom/android/systemui/statusbar/BaseStatusBar;->addNotificationViews",
                        "addNotification": "Lcom/android/systemui/statusbar/BaseStatusBar;->addNotification",
                        "animateCollapse": "Lcom/android/systemui/statusbar/BaseStatusBar;->animateCollapse",
                        "createAndAddWindows": "Lcom/android/systemui/statusbar/BaseStatusBar;->createAndAddWindows",
                        "disable": "Lcom/android/systemui/statusbar/BaseStatusBar;->disable",
                        "handleNotificationError": "Lcom/android/systemui/statusbar/BaseStatusBar;->handleNotificationError",
                        "hideSearchPanel": "Lcom/android/systemui/statusbar/BaseStatusBar;->hideSearchPanel",
                        "onConfigurationChanged": "Lcom/android/systemui/statusbar/BaseStatusBar;->onConfigurationChanged",
                        "removeNotification": "Lcom/android/systemui/statusbar/BaseStatusBar;->removeNotification",
                        "setSystemUiVisibility": "Lcom/android/systemui/statusbar/BaseStatusBar;->setSystemUiVisibility",
                        "showSearchPanel": "Lcom/android/systemui/statusbar/BaseStatusBar;->showSearchPanel",
                        "start": "Lcom/android/systemui/statusbar/BaseStatusBar;->start",
                        "topAppWindowChanged": "Lcom/android/systemui/statusbar/BaseStatusBar;->topAppWindowChanged",
                        "updateNotification": "Lcom/android/systemui/statusbar/BaseStatusBar;->updateNotification",
                        "updateSearchPanel": "Lcom/android/systemui/statusbar/BaseStatusBar;->updateSearchPanel"
                    },
                    "CommandQueue$Callbacks": {
                        "addNotification": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->addNotification",
                        "animateCollapse": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->animateCollapse",
                        "disable": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->disable",
                        "hideSearchPanel": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->hideSearchPanel",
                        "removeNotification": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->removeNotification",
                        "setSystemUiVisibility": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->setSystemUiVisibility",
                        "showSearchPanel": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->showSearchPanel",
                        "topAppWindowChanged": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->topAppWindowChanged",
                        "updateNotification": "Lcom/android/systemui/statusbar/CommandQueue$Callbacks;->updateNotification"
                    },
                    "DelegateViewHelper": {
                        "onInterceptTouchEvent": "Lcom/android/systemui/statusbar/DelegateViewHelper;->onInterceptTouchEvent"
                    },
                    "phone": {
                        "CloseDragHandle": {
                            "onInterceptTouchEvent": "Lcom/android/systemui/statusbar/phone/CloseDragHandle;->onInterceptTouchEvent",
                            "onTouchEvent": "Lcom/android/systemui/statusbar/phone/CloseDragHandle;->onTouchEvent"
                        },
                        "NavigationBarView": {
                            "onInterceptTouchEvent": "Lcom/android/systemui/statusbar/phone/NavigationBarView;->onInterceptTouchEvent",
                            "onTouchEvent": "Lcom/android/systemui/statusbar/phone/NavigationBarView;->onTouchEvent"
                        },
                        "PhoneStatusBar$19$1$3": {
                            "run": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$19$1$3;->run"
                        },
                        "PhoneStatusBar$19": {
                            "onClick": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$19;->onClick"
                        },
                        "PhoneStatusBar$20": {
                            "onClick": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$20;->onClick"
                        },
                        "PhoneStatusBar$21": {
                            "onReceive": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$21;->onReceive"
                        },
                        "PhoneStatusBar$22": {
                            "run": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$22;->run"
                        },
                        "PhoneStatusBar$23": {
                            "run": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$23;->run"
                        },
                        "PhoneStatusBar$5": {
                            "onTouch": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$5;->onTouch"
                        },
                        "PhoneStatusBar$9": {
                            "run": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$9;->run"
                        },
                        "PhoneStatusBar$ExpandedDialog": {
                            "dispatchKeyEvent": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$ExpandedDialog;->dispatchKeyEvent"
                        },
                        "PhoneStatusBar$NotificationClicker": {
                            "onClick": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar$NotificationClicker;->onClick"
                        },
                        "PhoneStatusBar": {
                            "interceptTouchEvent": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->interceptTouchEvent",
                            "makeStatusBarView": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->makeStatusBarView",
                            "addNotificationViews": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->addNotificationViews",
                            "addNavigationBar": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->addNavigationBar",
                            "addNotification": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->addNotification",
                            "addStatusBarWindow": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->addStatusBarWindow",
                            "animateCollapse": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->animateCollapse",
                            "createAndAddWindows": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->createAndAddWindows",
                            "disable": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->disable",
                            "handleNotificationError": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->handleNotificationError",
                            "hideSearchPanel": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->hideSearchPanel",
                            "performDisableActions": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->performDisableActions",
                            "prepareNavigationBarView": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->prepareNavigationBarView",
                            "removeNotification": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->removeNotification",
                            "repositionNavigationBar": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->repositionNavigationBar",
                            "setLightsOn": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->setLightsOn",
                            "setSystemUiVisibility": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->setSystemUiVisibility",
                            "showSearchPanel": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->showSearchPanel",
                            "start": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->start",
                            "topAppWindowChanged": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->topAppWindowChanged",
                            "updateNotification": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->updateNotification",
                            "updateSearchPanel": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->updateSearchPanel",
                            "vibrate": "Lcom/android/systemui/statusbar/phone/PhoneStatusBar;->vibrate"
                        },
                        "PhoneStatusBarPolicy": {
                            "<init>": "Lcom/android/systemui/statusbar/phone/PhoneStatusBarPolicy;-><init>"
                        },
                        "PhoneStatusBarView": {
                            "onInterceptTouchEvent": "Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;->onInterceptTouchEvent",
                            "onTouchEvent": "Lcom/android/systemui/statusbar/phone/PhoneStatusBarView;->onTouchEvent"
                        },
                        "StatusBarWindowView": {
                            "dispatchKeyEvent": "Lcom/android/systemui/statusbar/phone/StatusBarWindowView;->dispatchKeyEvent"
                        }
                    },
                    "policy": {
                        "AirplaneModeController$1": {
                            "run": "Lcom/android/systemui/statusbar/policy/AirplaneModeController$1;->run"
                        },
                        "AutoRotateController": {
                            "<init>": "Lcom/android/systemui/statusbar/policy/AutoRotateController;-><init>",
                            "onCheckedChanged": "Lcom/android/systemui/statusbar/policy/AutoRotateController;->onCheckedChanged"
                        },
                        "BluetoothController": {
                            "<init>": "Lcom/android/systemui/statusbar/policy/BluetoothController;-><init>"
                        },
                        "BrightnessController$1": {
                            "run": "Lcom/android/systemui/statusbar/policy/BrightnessController$1;->run"
                        },
                        "BrightnessController": {
                            "onChanged": "Lcom/android/systemui/statusbar/policy/BrightnessController;->onChanged",
                            "setMode": "Lcom/android/systemui/statusbar/policy/BrightnessController;->setMode"
                        },
                        "LocationController": {
                            "onReceive": "Lcom/android/systemui/statusbar/policy/LocationController;->onReceive"
                        },
                        "NetworkController": {
                            "huntForSsid": "Lcom/android/systemui/statusbar/policy/NetworkController;->huntForSsid",
                            "<init>": "Lcom/android/systemui/statusbar/policy/NetworkController;-><init>",
                            "onReceive": "Lcom/android/systemui/statusbar/policy/NetworkController;->onReceive",
                            "updateConnectivity": "Lcom/android/systemui/statusbar/policy/NetworkController;->updateConnectivity",
                            "updateWifiState": "Lcom/android/systemui/statusbar/policy/NetworkController;->updateWifiState"
                        },
                        "ToggleSlider$Listener": {
                            "onChanged": "Lcom/android/systemui/statusbar/policy/ToggleSlider$Listener;->onChanged"
                        },
                        "ToggleSlider": {
                            "onCheckedChanged": "Lcom/android/systemui/statusbar/policy/ToggleSlider;->onCheckedChanged",
                            "onProgressChanged": "Lcom/android/systemui/statusbar/policy/ToggleSlider;->onProgressChanged",
                            "onStartTrackingTouch": "Lcom/android/systemui/statusbar/policy/ToggleSlider;->onStartTrackingTouch",
                            "onStopTrackingTouch": "Lcom/android/systemui/statusbar/policy/ToggleSlider;->onStopTrackingTouch"
                        }
                    },
                    "RotationToggle": {
                        "onAttachedToWindow": "Lcom/android/systemui/statusbar/RotationToggle;->onAttachedToWindow"
                    },
                    "tablet": {
                        "SettingsView": {
                            "onClick": "Lcom/android/systemui/statusbar/tablet/SettingsView;->onClick",
                            "onClickNetwork": "Lcom/android/systemui/statusbar/tablet/SettingsView;->onClickNetwork",
                            "onClickSettings": "Lcom/android/systemui/statusbar/tablet/SettingsView;->onClickSettings",
                            "onFinishInflate": "Lcom/android/systemui/statusbar/tablet/SettingsView;->onFinishInflate"
                        },
                        "TabletStatusBar$1": {
                            "run": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar$1;->run"
                        },
                        "TabletStatusBar": {
                            "makeStatusBarView": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->makeStatusBarView",
                            "addNotificationViews": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->addNotificationViews",
                            "addNotification": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->addNotification",
                            "addPanelWindows": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->addPanelWindows",
                            "addStatusBarWindow": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->addStatusBarWindow",
                            "createAndAddWindows": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->createAndAddWindows",
                            "handleNotificationError": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->handleNotificationError",
                            "hideSearchPanel": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->hideSearchPanel",
                            "onConfigurationChanged": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->onConfigurationChanged",
                            "showSearchPanel": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->showSearchPanel",
                            "start": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->start",
                            "updateNotification": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->updateNotification",
                            "updateSearchPanel": "Lcom/android/systemui/statusbar/tablet/TabletStatusBar;->updateSearchPanel"
                        },
                        "TabletStatusBarView": {
                            "onInterceptTouchEvent": "Lcom/android/systemui/statusbar/tablet/TabletStatusBarView;->onInterceptTouchEvent",
                            "onTouchEvent": "Lcom/android/systemui/statusbar/tablet/TabletStatusBarView;->onTouchEvent"
                        }
                    }
                },
                "SwipeHelper$2": {
                    "onAnimationEnd": "Lcom/android/systemui/SwipeHelper$2;->onAnimationEnd"
                },
                "SwipeHelper$Callback": {
                    "onChildDismissed": "Lcom/android/systemui/SwipeHelper$Callback;->onChildDismissed"
                },
                "SystemUIService": {
                    "onConfigurationChanged": "Lcom/android/systemui/SystemUIService;->onConfigurationChanged",
                    "onCreate": "Lcom/android/systemui/SystemUIService;->onCreate"
                },
                "SystemUI": {
                    "onConfigurationChanged": "Lcom/android/systemui/SystemUI;->onConfigurationChanged",
                    "start": "Lcom/android/systemui/SystemUI;->start"
                },
                "usb": {
                    "StorageNotification$1": {
                        "run": "Lcom/android/systemui/usb/StorageNotification$1;->run"
                    },
                    "StorageNotification$2": {
                        "run": "Lcom/android/systemui/usb/StorageNotification$2;->run"
                    },
                    "StorageNotification": {
                        "onStorageStateChangedAsync": "Lcom/android/systemui/usb/StorageNotification;->onStorageStateChangedAsync",
                        "onUsbMassStorageConnectionChangedAsync": "Lcom/android/systemui/usb/StorageNotification;->onUsbMassStorageConnectionChangedAsync",
                        "setMediaStorageNotification": "Lcom/android/systemui/usb/StorageNotification;->setMediaStorageNotification",
                        "setUsbStorageNotification": "Lcom/android/systemui/usb/StorageNotification;->setUsbStorageNotification",
                        "updateUsbMassStorageNotification": "Lcom/android/systemui/usb/StorageNotification;->updateUsbMassStorageNotification"
                    },
                    "UsbAccessoryUriActivity": {
                        "onCreate": "Lcom/android/systemui/usb/UsbAccessoryUriActivity;->onCreate"
                    },
                    "UsbConfirmActivity": {
                        "onCreate": "Lcom/android/systemui/usb/UsbConfirmActivity;->onCreate"
                    },
                    "UsbPermissionActivity": {
                        "onCreate": "Lcom/android/systemui/usb/UsbPermissionActivity;->onCreate"
                    },
                    "UsbResolverActivity": {
                        "onCreate": "Lcom/android/systemui/usb/UsbResolverActivity;->onCreate",
                        "onStop": "Lcom/android/systemui/usb/UsbResolverActivity;->onStop"
                    },
                    "UsbStorageActivity$8": {
                        "run": "Lcom/android/systemui/usb/UsbStorageActivity$8;->run"
                    },
                    "UsbStorageActivity$9": {
                        "run": "Lcom/android/systemui/usb/UsbStorageActivity$9;->run"
                    },
                    "UsbStorageActivity": {
                        "checkStorageUsersAsync": "Lcom/android/systemui/usb/UsbStorageActivity;->checkStorageUsersAsync"
                    }
                }
            },
            "uiautomator": {
                "core": {
                    "InteractionController": {
                        "freezeRotation": "Lcom/android/uiautomator/core/InteractionController;->freezeRotation",
                        "setRotationLeft": "Lcom/android/uiautomator/core/InteractionController;->setRotationLeft",
                        "setRotationNatural": "Lcom/android/uiautomator/core/InteractionController;->setRotationNatural",
                        "setRotationRight": "Lcom/android/uiautomator/core/InteractionController;->setRotationRight",
                        "unfreezeRotation": "Lcom/android/uiautomator/core/InteractionController;->unfreezeRotation"
                    },
                    "UiAutomatorBridge": {
                        "disconnect": "Lcom/android/uiautomator/core/UiAutomatorBridge;->disconnect"
                    },
                    "UiDevice": {
                        "isInWatcherContext": "Lcom/android/uiautomator/core/UiDevice;->isInWatcherContext",
                        "freezeRotation": "Lcom/android/uiautomator/core/UiDevice;->freezeRotation",
                        "setRotationLeft": "Lcom/android/uiautomator/core/UiDevice;->setRotationLeft",
                        "setRotationNatural": "Lcom/android/uiautomator/core/UiDevice;->setRotationNatural",
                        "setRotationRight": "Lcom/android/uiautomator/core/UiDevice;->setRotationRight",
                        "unfreezeRotation": "Lcom/android/uiautomator/core/UiDevice;->unfreezeRotation"
                    }
                }
            },
            "vcard": {
                "VCardComposer": {
                    "init": "Lcom/android/vcard/VCardComposer;->init",
                    "initWithRawContactsEntityUri": "Lcom/android/vcard/VCardComposer;->initWithRawContactsEntityUri"
                },
                "VCardEntry$AndroidCustomData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$AndroidCustomData;->constructInsertOperation"
                },
                "VCardEntry$AnniversaryData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$AnniversaryData;->constructInsertOperation"
                },
                "VCardEntry$BirthdayData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$BirthdayData;->constructInsertOperation"
                },
                "VCardEntry$EmailData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$EmailData;->constructInsertOperation"
                },
                "VCardEntry$EntryElementIterator": {
                    "onElement": "Lcom/android/vcard/VCardEntry$EntryElementIterator;->onElement"
                },
                "VCardEntry$EntryElement": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$EntryElement;->constructInsertOperation"
                },
                "VCardEntry$ImData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$ImData;->constructInsertOperation"
                },
                "VCardEntry$InsertOperationConstrutor": {
                    "onElement": "Lcom/android/vcard/VCardEntry$InsertOperationConstrutor;->onElement"
                },
                "VCardEntry$NameData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$NameData;->constructInsertOperation"
                },
                "VCardEntry$NicknameData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$NicknameData;->constructInsertOperation"
                },
                "VCardEntry$NoteData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$NoteData;->constructInsertOperation"
                },
                "VCardEntry$OrganizationData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$OrganizationData;->constructInsertOperation"
                },
                "VCardEntry$PhoneData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$PhoneData;->constructInsertOperation"
                },
                "VCardEntry$PhotoData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$PhotoData;->constructInsertOperation"
                },
                "VCardEntry$PostalData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$PostalData;->constructInsertOperation"
                },
                "VCardEntry$SipData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$SipData;->constructInsertOperation"
                },
                "VCardEntry$WebsiteData": {
                    "constructInsertOperation": "Lcom/android/vcard/VCardEntry$WebsiteData;->constructInsertOperation"
                },
                "VCardEntry": {
                    "isIgnorable": "Lcom/android/vcard/VCardEntry;->isIgnorable",
                    "toString": "Lcom/android/vcard/VCardEntry;->toString",
                    "constructInsertOperations": "Lcom/android/vcard/VCardEntry;->constructInsertOperations",
                    "iterateAllData": "Lcom/android/vcard/VCardEntry;->iterateAllData",
                    "iterateOneList": "Lcom/android/vcard/VCardEntry;->iterateOneList"
                },
                "VCardEntryCommitter": {
                    "onEntryCreated": "Lcom/android/vcard/VCardEntryCommitter;->onEntryCreated"
                },
                "VCardEntryConstructor": {
                    "onEntryEnded": "Lcom/android/vcard/VCardEntryConstructor;->onEntryEnded"
                },
                "VCardEntryHandler": {
                    "onEntryCreated": "Lcom/android/vcard/VCardEntryHandler;->onEntryCreated"
                },
                "VCardInterpreter": {
                    "onEntryEnded": "Lcom/android/vcard/VCardInterpreter;->onEntryEnded"
                },
                "VCardParserImpl_V21": {
                    "parseItem": "Lcom/android/vcard/VCardParserImpl_V21;->parseItem",
                    "parseOneVCard": "Lcom/android/vcard/VCardParserImpl_V21;->parseOneVCard",
                    "handleNest": "Lcom/android/vcard/VCardParserImpl_V21;->handleNest",
                    "parseItems": "Lcom/android/vcard/VCardParserImpl_V21;->parseItems",
                    "parse": "Lcom/android/vcard/VCardParserImpl_V21;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParserImpl_V21;->parseOne"
                },
                "VCardParserImpl_V30": {
                    "parseItem": "Lcom/android/vcard/VCardParserImpl_V30;->parseItem",
                    "parseOneVCard": "Lcom/android/vcard/VCardParserImpl_V30;->parseOneVCard",
                    "handleNest": "Lcom/android/vcard/VCardParserImpl_V30;->handleNest",
                    "parseItems": "Lcom/android/vcard/VCardParserImpl_V30;->parseItems",
                    "parse": "Lcom/android/vcard/VCardParserImpl_V30;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParserImpl_V30;->parseOne"
                },
                "VCardParserImpl_V40": {
                    "parseItem": "Lcom/android/vcard/VCardParserImpl_V40;->parseItem",
                    "parseOneVCard": "Lcom/android/vcard/VCardParserImpl_V40;->parseOneVCard",
                    "handleNest": "Lcom/android/vcard/VCardParserImpl_V40;->handleNest",
                    "parseItems": "Lcom/android/vcard/VCardParserImpl_V40;->parseItems",
                    "parse": "Lcom/android/vcard/VCardParserImpl_V40;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParserImpl_V40;->parseOne"
                },
                "VCardParser_V21": {
                    "parse": "Lcom/android/vcard/VCardParser_V21;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParser_V21;->parseOne"
                },
                "VCardParser_V30": {
                    "parse": "Lcom/android/vcard/VCardParser_V30;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParser_V30;->parseOne"
                },
                "VCardParser_V40": {
                    "parse": "Lcom/android/vcard/VCardParser_V40;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParser_V40;->parseOne"
                },
                "VCardParser": {
                    "parse": "Lcom/android/vcard/VCardParser;->parse",
                    "parseOne": "Lcom/android/vcard/VCardParser;->parseOne"
                },
                "VCardProperty": {
                    "getByteValue": "Lcom/android/vcard/VCardProperty;->getByteValue",
                    "getValueList": "Lcom/android/vcard/VCardProperty;->getValueList"
                }
            },
            "videoeditor": {
                "service": {
                    "MovieTransition": {
                        "getSlidingDirection": "Lcom/android/videoeditor/service/MovieTransition;->getSlidingDirection"
                    }
                },
                "VideoEditorActivity$23": {
                    "onStart": "Lcom/android/videoeditor/VideoEditorActivity$23;->onStart",
                    "onStop": "Lcom/android/videoeditor/VideoEditorActivity$23;->onStop"
                },
                "widgets": {
                    "ZoomControl": {
                        "setOnZoomChangeListener": "Lcom/android/videoeditor/widgets/ZoomControl;->setOnZoomChangeListener"
                    }
                }
            },
            "voicedialer": {
                "CommandRecognizerEngine": {
                    "onRecognitionSuccess": "Lcom/android/voicedialer/CommandRecognizerEngine;->onRecognitionSuccess",
                    "recognize": "Lcom/android/voicedialer/CommandRecognizerEngine;->recognize",
                    "setupGrammar": "Lcom/android/voicedialer/CommandRecognizerEngine;->setupGrammar"
                },
                "PhoneTypeChoiceRecognizerEngine": {
                    "recognize": "Lcom/android/voicedialer/PhoneTypeChoiceRecognizerEngine;->recognize"
                },
                "RecognizerClient": {
                    "onMicrophoneStart": "Lcom/android/voicedialer/RecognizerClient;->onMicrophoneStart"
                },
                "RecognizerEngine": {
                    "onRecognitionSuccess": "Lcom/android/voicedialer/RecognizerEngine;->onRecognitionSuccess",
                    "recognize": "Lcom/android/voicedialer/RecognizerEngine;->recognize",
                    "setupGrammar": "Lcom/android/voicedialer/RecognizerEngine;->setupGrammar"
                },
                "VoiceContact": {
                    "redialNumber": "Lcom/android/voicedialer/VoiceContact;->redialNumber",
                    "getVoiceContacts": "Lcom/android/voicedialer/VoiceContact;->getVoiceContacts"
                },
                "VoiceDialerActivity$1": {
                    "onServiceConnected": "Lcom/android/voicedialer/VoiceDialerActivity$1;->onServiceConnected"
                },
                "VoiceDialerActivity$2": {
                    "run": "Lcom/android/voicedialer/VoiceDialerActivity$2;->run"
                },
                "VoiceDialerActivity$3": {
                    "run": "Lcom/android/voicedialer/VoiceDialerActivity$3;->run"
                },
                "VoiceDialerActivity$4": {
                    "run": "Lcom/android/voicedialer/VoiceDialerActivity$4;->run"
                },
                "VoiceDialerActivity$CommandRecognizerClient$2": {
                    "run": "Lcom/android/voicedialer/VoiceDialerActivity$CommandRecognizerClient$2;->run"
                },
                "VoiceDialerActivity$CommandRecognizerClient": {
                    "onMicrophoneStart": "Lcom/android/voicedialer/VoiceDialerActivity$CommandRecognizerClient;->onMicrophoneStart"
                },
                "VoiceDialerActivity$ErrorRunnable": {
                    "run": "Lcom/android/voicedialer/VoiceDialerActivity$ErrorRunnable;->run"
                },
                "VoiceDialerActivity$VoiceDialerBroadcastReceiver": {
                    "onReceive": "Lcom/android/voicedialer/VoiceDialerActivity$VoiceDialerBroadcastReceiver;->onReceive"
                },
                "VoiceDialerActivity": {
                    "playSound": "Lcom/android/voicedialer/VoiceDialerActivity;->playSound",
                    "acquireWakeLock": "Lcom/android/voicedialer/VoiceDialerActivity;->acquireWakeLock",
                    "onCreate": "Lcom/android/voicedialer/VoiceDialerActivity;->onCreate",
                    "onDestroy": "Lcom/android/voicedialer/VoiceDialerActivity;->onDestroy",
                    "releaseWakeLock": "Lcom/android/voicedialer/VoiceDialerActivity;->releaseWakeLock",
                    "updateBluetoothParameters": "Lcom/android/voicedialer/VoiceDialerActivity;->updateBluetoothParameters"
                }
            },
            "vpndialogs": {
                "ConfirmDialog": {
                    "onCreate": "Lcom/android/vpndialogs/ConfirmDialog;->onCreate"
                },
                "ManageDialog": {
                    "onCreate": "Lcom/android/vpndialogs/ManageDialog;->onCreate",
                    "onPause": "Lcom/android/vpndialogs/ManageDialog;->onPause"
                }
            },
            "wallpaper": {
                "fall": {
                    "FallRS": {
                        "start": "Lcom/android/wallpaper/fall/FallRS;->start"
                    },
                    "FallView": {
                        "surfaceChanged": "Lcom/android/wallpaper/fall/FallView;->surfaceChanged"
                    }
                },
                "galaxy": {
                    "GalaxyRS": {
                        "start": "Lcom/android/wallpaper/galaxy/GalaxyRS;->start"
                    },
                    "GalaxyView": {
                        "surfaceChanged": "Lcom/android/wallpaper/galaxy/GalaxyView;->surfaceChanged"
                    }
                },
                "grass": {
                    "GrassRS$TimezoneTracker": {
                        "onReceive": "Lcom/android/wallpaper/grass/GrassRS$TimezoneTracker;->onReceive"
                    },
                    "GrassRS": {
                        "start": "Lcom/android/wallpaper/grass/GrassRS;->start",
                        "updateLocation": "Lcom/android/wallpaper/grass/GrassRS;->updateLocation"
                    },
                    "GrassView": {
                        "surfaceChanged": "Lcom/android/wallpaper/grass/GrassView;->surfaceChanged"
                    }
                },
                "nexus": {
                    "NexusRS": {
                        "start": "Lcom/android/wallpaper/nexus/NexusRS;->start"
                    }
                },
                "RenderScriptScene": {
                    "start": "Lcom/android/wallpaper/RenderScriptScene;->start"
                },
                "RenderScriptWallpaper$RenderScriptEngine": {
                    "onSurfaceChanged": "Lcom/android/wallpaper/RenderScriptWallpaper$RenderScriptEngine;->onSurfaceChanged",
                    "onVisibilityChanged": "Lcom/android/wallpaper/RenderScriptWallpaper$RenderScriptEngine;->onVisibilityChanged"
                },
                "walkaround": {
                    "WalkAroundWallpaper$WalkAroundEngine": {
                        "onSurfaceCreated": "Lcom/android/wallpaper/walkaround/WalkAroundWallpaper$WalkAroundEngine;->onSurfaceCreated",
                        "onVisibilityChanged": "Lcom/android/wallpaper/walkaround/WalkAroundWallpaper$WalkAroundEngine;->onVisibilityChanged"
                    },
                    "WalkAroundWallpaper": {
                        "startCamera": "Lcom/android/wallpaper/walkaround/WalkAroundWallpaper;->startCamera"
                    }
                }
            },
            "future": {
                "usb": {
                    "UsbManager": {
                        "getAccessory": "Lcom/android/future/usb/UsbManager;->getAccessory",
                        "getAccessoryList": "Lcom/android/future/usb/UsbManager;->getAccessoryList",
                        "getInstance": "Lcom/android/future/usb/UsbManager;->getInstance"
                    }
                }
            },
            "location": {
                "provider": {
                    "LocationProvider": {
                        "getInterface": "Lcom/android/location/provider/LocationProvider;->getInterface",
                        "getBinder": "Lcom/android/location/provider/LocationProvider;->getBinder"
                    }
                }
            },
            "car": {
                "CarRadioService": {
                    "setPreset": "Lcom/android/car/CarRadioService;->setPreset"
                },
                "ICarImpl": {
                    "getCarService": "Lcom/android/car/ICarImpl;->getCarService"
                },
                "pm": {
                    "CarPackageManagerService": {
                        "setAppBlockingPolicy": "Lcom/android/car/pm/CarPackageManagerService;->setAppBlockingPolicy"
                    }
                }
            },
            "cellbroadcastreceiver": {
                "CellBroadcastContentProvider": "Lcom/android/cellbroadcastreceiver;->CellBroadcastContentProvider",
                "CellBroadcastSearchIndexableProvider": "Lcom/android/cellbroadcastreceiver;->CellBroadcastSearchIndexableProvider"
            },
            "crashreportprovider": {
                "CrashReportProvider": "Lcom/android/crashreportprovider;->CrashReportProvider"
            },
            "externalstorage": {
                "ExternalStorageProvider": "Lcom/android/externalstorage;->ExternalStorageProvider"
            },
            "launcher3": {
                "LauncherProvider": "Lcom/android/launcher3;->LauncherProvider"
            },
            "mtp": {
                "MtpDocumentsProvider": "Lcom/android/mtp;->MtpDocumentsProvider"
            },
            "service": {
                "ims": {
                    "presence": {
                        "EABProvider": "Lcom/android/service/ims/presence;->EABProvider"
                    }
                }
            }
        },
        "coremedia": {
            "iso": {
                "Hex": {
                    "<init>": "Lcom/coremedia/iso/Hex;-><init>"
                }
            }
        },
        "google": {
            "android": {
                "apps": {
                    "lightcycle": {
                        "shaders": {
                            "TargetShader": {
                                "setAlpha": "Lcom/google/android/apps/lightcycle/shaders/TargetShader;->setAlpha"
                            }
                        }
                    }
                },
                "gles_jni": {
                    "EGLImpl": {
                        "eglCreatePixmapSurface": "Lcom/google/android/gles_jni/EGLImpl;->eglCreatePixmapSurface"
                    }
                },
                "mms": {
                    "pdu": {
                        "DeliveryInd": {
                            "getMessageId": "Lcom/google/android/mms/pdu/DeliveryInd;->getMessageId"
                        },
                        "PduPersister": {
                            "getPendingMessages": "Lcom/google/android/mms/pdu/PduPersister;->getPendingMessages",
                            "persist": "Lcom/google/android/mms/pdu/PduPersister;->persist",
                            "load": "Lcom/google/android/mms/pdu/PduPersister;->load",
                            "updateHeaders": "Lcom/google/android/mms/pdu/PduPersister;->updateHeaders"
                        },
                        "ReadRecInd": {
                            "getReadStatus": "Lcom/google/android/mms/pdu/ReadRecInd;->getReadStatus"
                        }
                    },
                    "util": {
                        "AbstractCache": {
                            "put": "Lcom/google/android/mms/util/AbstractCache;->put"
                        },
                        "PduCache": {
                            "normalizeKey": "Lcom/google/android/mms/util/PduCache;->normalizeKey",
                            "put": "Lcom/google/android/mms/util/PduCache;->put"
                        }
                    }
                },
                "maps": {
                    "MyLocationOverlay": {
                        "getLastFix": "Lcom/google/android/maps/MyLocationOverlay;->getLastFix",
                        "isCompassEnabled": "Lcom/google/android/maps/MyLocationOverlay;->isCompassEnabled",
                        "isMyLocationEnabled": "Lcom/google/android/maps/MyLocationOverlay;->isMyLocationEnabled",
                        "getMyLocation": "Lcom/google/android/maps/MyLocationOverlay;->getMyLocation",
                        "getOrientation": "Lcom/google/android/maps/MyLocationOverlay;->getOrientation"
                    }
                },
                "net": {
                    "GoogleHttpClient": {
                        "getGzipCapableUserAgent": "Lcom/google/android/net/GoogleHttpClient;->getGzipCapableUserAgent",
                        "getConnectionManager": "Lcom/google/android/net/GoogleHttpClient;->getConnectionManager",
                        "getParams": "Lcom/google/android/net/GoogleHttpClient;->getParams"
                    }
                }
            },
            "common": {
                "collect": {
                    "AbstractMultimap$WrappedCollection$WrappedIterator": {
                        "getDelegateIterator": "Lcom/google/common/collect/AbstractMultimap$WrappedCollection$WrappedIterator;->getDelegateIterator"
                    },
                    "BstInOrderPath": {
                        "<clinit>": "Lcom/google/common/collect/BstInOrderPath;-><clinit>"
                    },
                    "ForwardingMap": {
                        "get": "Lcom/google/common/collect/ForwardingMap;->get"
                    },
                    "MapMakerInternalMap$Segment": {
                        "tryExpireEntries": "Lcom/google/common/collect/MapMakerInternalMap$Segment;->tryExpireEntries"
                    },
                    "MapMakerInternalMap$SoftExpirableEvictableEntry": {
                        "getExpirationTime": "Lcom/google/common/collect/MapMakerInternalMap$SoftExpirableEvictableEntry;->getExpirationTime"
                    }
                },
                "io": {
                    "ByteStreams$4": {
                        "getInput": "Lcom/google/common/io/ByteStreams$4;->getInput"
                    },
                    "ByteStreams$5": {
                        "getInput": "Lcom/google/common/io/ByteStreams$5;->getInput"
                    },
                    "ByteStreams": {
                        "equal": "Lcom/google/common/io/ByteStreams;->equal",
                        "getDigest": "Lcom/google/common/io/ByteStreams;->getDigest",
                        "toByteArray": "Lcom/google/common/io/ByteStreams;->toByteArray",
                        "readBytes": "Lcom/google/common/io/ByteStreams;->readBytes",
                        "copy": "Lcom/google/common/io/ByteStreams;->copy",
                        "getChecksum": "Lcom/google/common/io/ByteStreams;->getChecksum",
                        "length": "Lcom/google/common/io/ByteStreams;->length"
                    },
                    "CharStreams$2": {
                        "getInput": "Lcom/google/common/io/CharStreams$2;->getInput"
                    },
                    "CharStreams$4": {
                        "getInput": "Lcom/google/common/io/CharStreams$4;->getInput"
                    },
                    "CharStreams": {
                        "readLines": "Lcom/google/common/io/CharStreams;->readLines",
                        "toStringBuilder": "Lcom/google/common/io/CharStreams;->toStringBuilder",
                        "readFirstLine": "Lcom/google/common/io/CharStreams;->readFirstLine",
                        "toString": "Lcom/google/common/io/CharStreams;->toString",
                        "copy": "Lcom/google/common/io/CharStreams;->copy"
                    },
                    "Files": {
                        "equal": "Lcom/google/common/io/Files;->equal",
                        "getDigest": "Lcom/google/common/io/Files;->getDigest",
                        "toByteArray": "Lcom/google/common/io/Files;->toByteArray",
                        "readBytes": "Lcom/google/common/io/Files;->readBytes",
                        "readLines": "Lcom/google/common/io/Files;->readLines",
                        "readFirstLine": "Lcom/google/common/io/Files;->readFirstLine",
                        "toString": "Lcom/google/common/io/Files;->toString",
                        "getChecksum": "Lcom/google/common/io/Files;->getChecksum",
                        "copy": "Lcom/google/common/io/Files;->copy",
                        "move": "Lcom/google/common/io/Files;->move"
                    },
                    "InputSupplier": {
                        "getInput": "Lcom/google/common/io/InputSupplier;->getInput"
                    },
                    "MultiInputStream": {
                        "read": "Lcom/google/common/io/MultiInputStream;->read",
                        "skip": "Lcom/google/common/io/MultiInputStream;->skip",
                        "advance": "Lcom/google/common/io/MultiInputStream;->advance",
                        "<init>": "Lcom/google/common/io/MultiInputStream;-><init>"
                    },
                    "MultiReader": {
                        "read": "Lcom/google/common/io/MultiReader;->read",
                        "skip": "Lcom/google/common/io/MultiReader;->skip",
                        "advance": "Lcom/google/common/io/MultiReader;->advance",
                        "<init>": "Lcom/google/common/io/MultiReader;-><init>"
                    },
                    "Resources$1": {
                        "getInput": "Lcom/google/common/io/Resources$1;->getInput"
                    },
                    "Resources": {
                        "toByteArray": "Lcom/google/common/io/Resources;->toByteArray",
                        "readLines": "Lcom/google/common/io/Resources;->readLines",
                        "toString": "Lcom/google/common/io/Resources;->toString",
                        "copy": "Lcom/google/common/io/Resources;->copy"
                    },
                    "android": {
                        "AndroidHttpClient": {
                            "getUngzippedContent": "Lcom/google/common/io/android/AndroidHttpClient;->getUngzippedContent",
                            "getMinGzipSize": "Lcom/google/common/io/android/AndroidHttpClient;->getMinGzipSize",
                            "getConnectionManager": "Lcom/google/common/io/android/AndroidHttpClient;->getConnectionManager",
                            "getCompressedEntity": "Lcom/google/common/io/android/AndroidHttpClient;->getCompressedEntity",
                            "getParams": "Lcom/google/common/io/android/AndroidHttpClient;->getParams"
                        },
                        "AndroidHttpConnectionFactory": {
                            "getClient": "Lcom/google/common/io/android/AndroidHttpConnectionFactory;->getClient",
                            "isNetworkAvailable": "Lcom/google/common/io/android/AndroidHttpConnectionFactory;->isNetworkAvailable"
                        },
                        "GoogleHttpClient": {
                            "getGzipCapableUserAgent": "Lcom/google/common/io/android/GoogleHttpClient;->getGzipCapableUserAgent",
                            "getConnectionManager": "Lcom/google/common/io/android/GoogleHttpClient;->getConnectionManager",
                            "getParams": "Lcom/google/common/io/android/GoogleHttpClient;->getParams"
                        }
                    }
                }
            }
        },
        "googlecode": {
            "mp4parser": {
                "authoring": {
                    "TrackMetaData": {
                        "getTimescale": "Lcom/googlecode/mp4parser/authoring/TrackMetaData;->getTimescale"
                    }
                }
            }
        },
        "ti": {
            "server": {
                "StubFmService": {
                    "resumeFm": "Lcom/ti/server/StubFmService;->resumeFm",
                    "rxChangeAudioTarget": "Lcom/ti/server/StubFmService;->rxChangeAudioTarget",
                    "rxChangeDigitalTargetConfiguration": "Lcom/ti/server/StubFmService;->rxChangeDigitalTargetConfiguration",
                    "rxCompleteScan_nb": "Lcom/ti/server/StubFmService;->rxCompleteScan_nb",
                    "rxDisable": "Lcom/ti/server/StubFmService;->rxDisable",
                    "rxDisableAudioRouting": "Lcom/ti/server/StubFmService;->rxDisableAudioRouting",
                    "rxDisableRds": "Lcom/ti/server/StubFmService;->rxDisableRds",
                    "rxDisableRds_nb": "Lcom/ti/server/StubFmService;->rxDisableRds_nb",
                    "rxEnable": "Lcom/ti/server/StubFmService;->rxEnable",
                    "rxEnableAudioRouting": "Lcom/ti/server/StubFmService;->rxEnableAudioRouting",
                    "rxEnableRds": "Lcom/ti/server/StubFmService;->rxEnableRds",
                    "rxEnableRds_nb": "Lcom/ti/server/StubFmService;->rxEnableRds_nb",
                    "rxGetBand": "Lcom/ti/server/StubFmService;->rxGetBand",
                    "rxGetBand_nb": "Lcom/ti/server/StubFmService;->rxGetBand_nb",
                    "rxGetChannelSpacing": "Lcom/ti/server/StubFmService;->rxGetChannelSpacing",
                    "rxGetChannelSpacing_nb": "Lcom/ti/server/StubFmService;->rxGetChannelSpacing_nb",
                    "rxGetCompleteScanProgress": "Lcom/ti/server/StubFmService;->rxGetCompleteScanProgress",
                    "rxGetCompleteScanProgress_nb": "Lcom/ti/server/StubFmService;->rxGetCompleteScanProgress_nb",
                    "rxGetDeEmphasisFilter": "Lcom/ti/server/StubFmService;->rxGetDeEmphasisFilter",
                    "rxGetDeEmphasisFilter_nb": "Lcom/ti/server/StubFmService;->rxGetDeEmphasisFilter_nb",
                    "rxGetFMState": "Lcom/ti/server/StubFmService;->rxGetFMState",
                    "rxGetFwVersion": "Lcom/ti/server/StubFmService;->rxGetFwVersion",
                    "rxGetMonoStereoMode": "Lcom/ti/server/StubFmService;->rxGetMonoStereoMode",
                    "rxGetMonoStereoMode_nb": "Lcom/ti/server/StubFmService;->rxGetMonoStereoMode_nb",
                    "rxGetMuteMode": "Lcom/ti/server/StubFmService;->rxGetMuteMode",
                    "rxGetMuteMode_nb": "Lcom/ti/server/StubFmService;->rxGetMuteMode_nb",
                    "rxGetRdsAfSwitchMode": "Lcom/ti/server/StubFmService;->rxGetRdsAfSwitchMode",
                    "rxGetRdsAfSwitchMode_nb": "Lcom/ti/server/StubFmService;->rxGetRdsAfSwitchMode_nb",
                    "rxGetRdsGroupMask": "Lcom/ti/server/StubFmService;->rxGetRdsGroupMask",
                    "rxGetRdsGroupMask_nb": "Lcom/ti/server/StubFmService;->rxGetRdsGroupMask_nb",
                    "rxGetRdsSystem": "Lcom/ti/server/StubFmService;->rxGetRdsSystem",
                    "rxGetRdsSystem_nb": "Lcom/ti/server/StubFmService;->rxGetRdsSystem_nb",
                    "rxGetRfDependentMuteMode": "Lcom/ti/server/StubFmService;->rxGetRfDependentMuteMode",
                    "rxGetRfDependentMuteMode_nb": "Lcom/ti/server/StubFmService;->rxGetRfDependentMuteMode_nb",
                    "rxGetRssi": "Lcom/ti/server/StubFmService;->rxGetRssi",
                    "rxGetRssi_nb": "Lcom/ti/server/StubFmService;->rxGetRssi_nb",
                    "rxGetRssiThreshold": "Lcom/ti/server/StubFmService;->rxGetRssiThreshold",
                    "rxGetRssiThreshold_nb": "Lcom/ti/server/StubFmService;->rxGetRssiThreshold_nb",
                    "rxGetTunedFrequency": "Lcom/ti/server/StubFmService;->rxGetTunedFrequency",
                    "rxGetTunedFrequency_nb": "Lcom/ti/server/StubFmService;->rxGetTunedFrequency_nb",
                    "rxGetVolume": "Lcom/ti/server/StubFmService;->rxGetVolume",
                    "rxGetVolume_nb": "Lcom/ti/server/StubFmService;->rxGetVolume_nb",
                    "rxIsEnabled": "Lcom/ti/server/StubFmService;->rxIsEnabled",
                    "rxIsFMPaused": "Lcom/ti/server/StubFmService;->rxIsFMPaused",
                    "rxIsValidChannel": "Lcom/ti/server/StubFmService;->rxIsValidChannel",
                    "rxSeek_nb": "Lcom/ti/server/StubFmService;->rxSeek_nb",
                    "rxSetBand": "Lcom/ti/server/StubFmService;->rxSetBand",
                    "rxSetBand_nb": "Lcom/ti/server/StubFmService;->rxSetBand_nb",
                    "rxSetChannelSpacing": "Lcom/ti/server/StubFmService;->rxSetChannelSpacing",
                    "rxSetChannelSpacing_nb": "Lcom/ti/server/StubFmService;->rxSetChannelSpacing_nb",
                    "rxSetDeEmphasisFilter": "Lcom/ti/server/StubFmService;->rxSetDeEmphasisFilter",
                    "rxSetDeEmphasisFilter_nb": "Lcom/ti/server/StubFmService;->rxSetDeEmphasisFilter_nb",
                    "rxSetMonoStereoMode": "Lcom/ti/server/StubFmService;->rxSetMonoStereoMode",
                    "rxSetMonoStereoMode_nb": "Lcom/ti/server/StubFmService;->rxSetMonoStereoMode_nb",
                    "rxSetMuteMode": "Lcom/ti/server/StubFmService;->rxSetMuteMode",
                    "rxSetMuteMode_nb": "Lcom/ti/server/StubFmService;->rxSetMuteMode_nb",
                    "rxSetRdsAfSwitchMode": "Lcom/ti/server/StubFmService;->rxSetRdsAfSwitchMode",
                    "rxSetRdsAfSwitchMode_nb": "Lcom/ti/server/StubFmService;->rxSetRdsAfSwitchMode_nb",
                    "rxSetRdsGroupMask": "Lcom/ti/server/StubFmService;->rxSetRdsGroupMask",
                    "rxSetRdsGroupMask_nb": "Lcom/ti/server/StubFmService;->rxSetRdsGroupMask_nb",
                    "rxSetRdsSystem": "Lcom/ti/server/StubFmService;->rxSetRdsSystem",
                    "rxSetRdsSystem_nb": "Lcom/ti/server/StubFmService;->rxSetRdsSystem_nb",
                    "rxSetRfDependentMuteMode": "Lcom/ti/server/StubFmService;->rxSetRfDependentMuteMode",
                    "rxSetRfDependentMuteMode_nb": "Lcom/ti/server/StubFmService;->rxSetRfDependentMuteMode_nb",
                    "rxSetRssiThreshold": "Lcom/ti/server/StubFmService;->rxSetRssiThreshold",
                    "rxSetRssiThreshold_nb": "Lcom/ti/server/StubFmService;->rxSetRssiThreshold_nb",
                    "rxSetVolume": "Lcom/ti/server/StubFmService;->rxSetVolume",
                    "rxStopCompleteScan": "Lcom/ti/server/StubFmService;->rxStopCompleteScan",
                    "rxStopCompleteScan_nb": "Lcom/ti/server/StubFmService;->rxStopCompleteScan_nb",
                    "rxStopSeek": "Lcom/ti/server/StubFmService;->rxStopSeek",
                    "rxStopSeek_nb": "Lcom/ti/server/StubFmService;->rxStopSeek_nb",
                    "rxTune_nb": "Lcom/ti/server/StubFmService;->rxTune_nb",
                    "txChangeAudioSource": "Lcom/ti/server/StubFmService;->txChangeAudioSource",
                    "txChangeDigitalSourceConfiguration": "Lcom/ti/server/StubFmService;->txChangeDigitalSourceConfiguration",
                    "txDisable": "Lcom/ti/server/StubFmService;->txDisable",
                    "txDisableRds": "Lcom/ti/server/StubFmService;->txDisableRds",
                    "txEnable": "Lcom/ti/server/StubFmService;->txEnable",
                    "txEnableRds": "Lcom/ti/server/StubFmService;->txEnableRds",
                    "txGetFMState": "Lcom/ti/server/StubFmService;->txGetFMState",
                    "txSetMonoStereoMode": "Lcom/ti/server/StubFmService;->txSetMonoStereoMode",
                    "txSetMuteMode": "Lcom/ti/server/StubFmService;->txSetMuteMode",
                    "txSetPowerLevel": "Lcom/ti/server/StubFmService;->txSetPowerLevel",
                    "txSetPreEmphasisFilter": "Lcom/ti/server/StubFmService;->txSetPreEmphasisFilter",
                    "txSetRdsAfCode": "Lcom/ti/server/StubFmService;->txSetRdsAfCode",
                    "txSetRdsECC": "Lcom/ti/server/StubFmService;->txSetRdsECC",
                    "txSetRdsMusicSpeechFlag": "Lcom/ti/server/StubFmService;->txSetRdsMusicSpeechFlag",
                    "txSetRdsPiCode": "Lcom/ti/server/StubFmService;->txSetRdsPiCode",
                    "txSetRdsPsDisplayMode": "Lcom/ti/server/StubFmService;->txSetRdsPsDisplayMode",
                    "txSetRdsPsScrollSpeed": "Lcom/ti/server/StubFmService;->txSetRdsPsScrollSpeed",
                    "txSetRdsPtyCode": "Lcom/ti/server/StubFmService;->txSetRdsPtyCode",
                    "txSetRdsTextPsMsg": "Lcom/ti/server/StubFmService;->txSetRdsTextPsMsg",
                    "txSetRdsTextRepertoire": "Lcom/ti/server/StubFmService;->txSetRdsTextRepertoire",
                    "txSetRdsTextRtMsg": "Lcom/ti/server/StubFmService;->txSetRdsTextRtMsg",
                    "txSetRdsTrafficCodes": "Lcom/ti/server/StubFmService;->txSetRdsTrafficCodes",
                    "txSetRdsTransmissionMode": "Lcom/ti/server/StubFmService;->txSetRdsTransmissionMode",
                    "txSetRdsTransmittedGroupsMask": "Lcom/ti/server/StubFmService;->txSetRdsTransmittedGroupsMask",
                    "txStartTransmission": "Lcom/ti/server/StubFmService;->txStartTransmission",
                    "txStopTransmission": "Lcom/ti/server/StubFmService;->txStopTransmission",
                    "txTune": "Lcom/ti/server/StubFmService;->txTune",
                    "txWriteRdsRawData": "Lcom/ti/server/StubFmService;->txWriteRdsRawData"
                }
            }
        }
    },
    "gov": {
        "nist": {
            "core": {
                "GenericObjectList": {
                    "getIndentation": "Lgov/nist/core/GenericObjectList;->getIndentation"
                }
            },
            "javax": {
                "sip": {
                    "header": {
                        "CallIdentifier": {
                            "equals": "Lgov/nist/javax/sip/header/CallIdentifier;->equals"
                        },
                        "Contact": {
                            "getQValue": "Lgov/nist/javax/sip/header/Contact;->getQValue"
                        }
                    },
                    "SipStackImpl": {
                        "getEnabledCipherSuites": "Lgov/nist/javax/sip/SipStackImpl;->getEnabledCipherSuites"
                    },
                    "stack": {
                        "SIPServerTransaction$TransactionTimer": {
                            "<init>": "Lgov/nist/javax/sip/stack/SIPServerTransaction$TransactionTimer;-><init>"
                        },
                        "SIPTransaction": {
                            "setOriginalRequest": "Lgov/nist/javax/sip/stack/SIPTransaction;->setOriginalRequest"
                        }
                    },
                    "clientauthutils": {
                        "AccountManager": {
                            "getCredentials": "Lgov/nist/javax/sip/clientauthutils/AccountManager;->getCredentials"
                        },
                        "SecureAccountManager": {
                            "getCredentialHash": "Lgov/nist/javax/sip/clientauthutils/SecureAccountManager;->getCredentialHash"
                        }
                    }
                }
            }
        }
    },
    "javax": {
        "crypto": {
            "CipherSpi": {
                "engineUpdate": "Ljavax/crypto/CipherSpi;->engineUpdate"
            },
            "KeyGenerator": {
                "generateKey": "Ljavax/crypto/KeyGenerator;->generateKey",
                "getInstance": "Ljavax/crypto/KeyGenerator;->getInstance",
                "init": "Ljavax/crypto/KeyGenerator;->init"
            },
            "Cipher": {
                "getInstance": "Ljavax/crypto/Cipher;->getInstance",
                "getBlockSize": "Ljavax/crypto/Cipher;->getBlockSize"
            },
            "EncryptedPrivateKeyInfo": {
                "getKeySpec": "Ljavax/crypto/EncryptedPrivateKeyInfo;->getKeySpec"
            },
            "SecretKeyFactory": {
                "generateSecret": "Ljavax/crypto/SecretKeyFactory;->generateSecret",
                "getInstance": "Ljavax/crypto/SecretKeyFactory;->getInstance"
            },
            "CipherOutputStream": {
                "write": "Ljavax/crypto/CipherOutputStream;->write",
                "flush": "Ljavax/crypto/CipherOutputStream;->flush",
                "close": "Ljavax/crypto/CipherOutputStream;->close"
            },
            "Mac": {
                "getAlgorithm": "Ljavax/crypto/Mac;->getAlgorithm"
            },
            "spec": {
                "$init": "Ljavax/crypto/spec;->$init"
            },
            "BadPaddingException": {
                "printStackTrace": "Ljavax/crypto/BadPaddingException;->printStackTrace"
            }
        },
        "security": {
            "cert": {
                "CertificateEncodingException": {
                    "<init>": "Ljavax/security/cert/CertificateEncodingException;-><init>"
                }
            }
        },
        "net": {
            "ssl": {
                "HttpsURLConnection": {
                    "getCipherSuite": "Ljavax/net/ssl/HttpsURLConnection;->getCipherSuite",
                    "getLocalPrincipal": "Ljavax/net/ssl/HttpsURLConnection;->getLocalPrincipal",
                    "getPeerPrincipal": "Ljavax/net/ssl/HttpsURLConnection;->getPeerPrincipal",
                    "getLocalCertificates": "Ljavax/net/ssl/HttpsURLConnection;->getLocalCertificates",
                    "getServerCertificates": "Ljavax/net/ssl/HttpsURLConnection;->getServerCertificates",
                    "getDefaultHostnameVerifier": "Ljavax/net/ssl/HttpsURLConnection;->getDefaultHostnameVerifier",
                    "getHostnameVerifier": "Ljavax/net/ssl/HttpsURLConnection;->getHostnameVerifier",
                    "getDefaultSSLSocketFactory": "Ljavax/net/ssl/HttpsURLConnection;->getDefaultSSLSocketFactory",
                    "getSSLSocketFactory": "Ljavax/net/ssl/HttpsURLConnection;->getSSLSocketFactory"
                },
                "setDefaultHostnameVerifier": "Ljavax/net/ssl;->setDefaultHostnameVerifier"
            }
        }
    },
    "junit": {
        "textui": {
            "ResultPrinter": {
                "elapsedTimeAsString": "Ljunit/textui/ResultPrinter;->elapsedTimeAsString"
            }
        }
    },
    "libcore": {
        "io": {
            "IoBridge": {
                "available": "Llibcore/io/IoBridge;->available"
            },
            "MemoryMappedFile": {
                "close": "Llibcore/io/MemoryMappedFile;->close"
            }
        },
        "net": {
            "UriCodec": {
                "encode": "Llibcore/net/UriCodec;->encode"
            }
        }
    },
    "org": {
        "apache": {
            "harmony": {
                "xml": {
                    "dom": {
                        "DocumentImpl": {
                            "createAttribute": "Lorg/apache/harmony/xml/dom/DocumentImpl;->createAttribute"
                        },
                        "InnerNodeImpl": {
                            "getElementsByTagName": "Lorg/apache/harmony/xml/dom/InnerNodeImpl;->getElementsByTagName"
                        }
                    }
                },
                "xnet": {
                    "provider": {
                        "jsse": {
                            "OpenSSLSessionImpl": {
                                "getPeerHost": "Lorg/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl;->getPeerHost"
                            },
                            "OpenSSLSocketImpl": {
                                "getEnabledProtocols": "Lorg/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl;->getEnabledProtocols"
                            },
                            "SSLInputStream": {
                                "readUint32": "Lorg/apache/harmony/xnet/provider/jsse/SSLInputStream;->readUint32"
                            },
                            "SSLSocketFactoryImpl": {
                                "getDefaultCipherSuites": "Lorg/apache/harmony/xnet/provider/jsse/SSLSocketFactoryImpl;->getDefaultCipherSuites"
                            }
                        }
                    }
                },
                "luni": {
                    "internal": {
                        "net": {
                            "www": {
                                "protocol": {
                                    "http": {
                                        "HttpConnection": {
                                            "isStale": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->isStale",
                                            "getInputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->getInputStream",
                                            "getOutputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->getOutputStream",
                                            "getSecureSocketIfConnected": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->getSecureSocketIfConnected",
                                            "getAddress": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->getAddress",
                                            "isEligibleForRecycling": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnection;->isEligibleForRecycling"
                                        },
                                        "HttpConnectionPool": {
                                            "get": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpConnectionPool;->get"
                                        },
                                        "HttpHeaders": {
                                            "get": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpHeaders;->get",
                                            "getKey": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpHeaders;->getKey",
                                            "getStatusLine": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpHeaders;->getStatusLine",
                                            "getValue": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpHeaders;->getValue"
                                        },
                                        "HttpURLConnectionImpl": {
                                            "getResponseCode": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getResponseCode",
                                            "getErrorStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getErrorStream",
                                            "getInputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getInputStream",
                                            "getOutputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getOutputStream",
                                            "getHeaderField": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getHeaderField",
                                            "getHeaderFieldKey": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getHeaderFieldKey",
                                            "getRequestProperty": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getRequestProperty",
                                            "getPermission": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getPermission",
                                            "java": {
                                                "util": {
                                                    "List<java": {
                                                        "lang": {
                                                            "String>>getHeaderFields": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl/java/util/List<java/lang;->String>>getHeaderFields",
                                                            "String>>getRequestProperties": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl/java/util/List<java/lang;->String>>getRequestProperties"
                                                        }
                                                    }
                                                }
                                            },
                                            "getConnectionForCaching": "Lorg/apache/harmony/luni/internal/net/www/protocol/http/HttpURLConnectionImpl;->getConnectionForCaching"
                                        }
                                    },
                                    "https": {
                                        "HttpsURLConnectionImpl": {
                                            "getAllowUserInteraction": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getAllowUserInteraction",
                                            "getDefaultUseCaches": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getDefaultUseCaches",
                                            "getDoInput": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getDoInput",
                                            "getDoOutput": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getDoOutput",
                                            "getInstanceFollowRedirects": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getInstanceFollowRedirects",
                                            "getUseCaches": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getUseCaches",
                                            "getConnectTimeout": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getConnectTimeout",
                                            "getContentLength": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getContentLength",
                                            "getHeaderFieldInt": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getHeaderFieldInt",
                                            "getReadTimeout": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getReadTimeout",
                                            "getResponseCode": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getResponseCode",
                                            "getErrorStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getErrorStream",
                                            "getInputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getInputStream",
                                            "getOutputStream": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getOutputStream",
                                            "getContent": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getContent",
                                            "getCipherSuite": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getCipherSuite",
                                            "getContentEncoding": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getContentEncoding",
                                            "getContentType": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getContentType",
                                            "getHeaderField": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getHeaderField",
                                            "getHeaderFieldKey": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getHeaderFieldKey",
                                            "getRequestMethod": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getRequestMethod",
                                            "getRequestProperty": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getRequestProperty",
                                            "getResponseMessage": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getResponseMessage",
                                            "getURL": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getURL",
                                            "getPermission": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getPermission",
                                            "getLocalPrincipal": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getLocalPrincipal",
                                            "getPeerPrincipal": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getPeerPrincipal",
                                            "getLocalCertificates": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getLocalCertificates",
                                            "getServerCertificates": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getServerCertificates",
                                            "java": {
                                                "util": {
                                                    "List<java": {
                                                        "lang": {
                                                            "String>>getHeaderFields": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl/java/util/List<java/lang;->String>>getHeaderFields",
                                                            "String>>getRequestProperties": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl/java/util/List<java/lang;->String>>getRequestProperties"
                                                        }
                                                    }
                                                }
                                            },
                                            "getDate": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getDate",
                                            "getExpiration": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getExpiration",
                                            "getHeaderFieldDate": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getHeaderFieldDate",
                                            "getIfModifiedSince": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getIfModifiedSince",
                                            "getLastModified": "Lorg/apache/harmony/luni/internal/net/www/protocol/https/HttpsURLConnectionImpl;->getLastModified"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "http": {
                "impl": {
                    "client": {
                        "DefaultHttpClient": {
                            "execute": "Lorg/apache/http/impl/client/DefaultHttpClient;->execute",
                            "<init>": "Lorg/apache/http/impl/client/DefaultHttpClient;-><init>"
                        },
                        "AbstractHttpClient": {
                            "getRequestInterceptorCount": "Lorg/apache/http/impl/client/AbstractHttpClient;->getRequestInterceptorCount",
                            "getResponseInterceptorCount": "Lorg/apache/http/impl/client/AbstractHttpClient;->getResponseInterceptorCount",
                            "getConnectionReuseStrategy": "Lorg/apache/http/impl/client/AbstractHttpClient;->getConnectionReuseStrategy",
                            "getRequestInterceptor": "Lorg/apache/http/impl/client/AbstractHttpClient;->getRequestInterceptor",
                            "getResponseInterceptor": "Lorg/apache/http/impl/client/AbstractHttpClient;->getResponseInterceptor",
                            "getAuthSchemes": "Lorg/apache/http/impl/client/AbstractHttpClient;->getAuthSchemes",
                            "getProxyAuthenticationHandler": "Lorg/apache/http/impl/client/AbstractHttpClient;->getProxyAuthenticationHandler",
                            "getTargetAuthenticationHandler": "Lorg/apache/http/impl/client/AbstractHttpClient;->getTargetAuthenticationHandler",
                            "getCookieStore": "Lorg/apache/http/impl/client/AbstractHttpClient;->getCookieStore",
                            "getCredentialsProvider": "Lorg/apache/http/impl/client/AbstractHttpClient;->getCredentialsProvider",
                            "getHttpRequestRetryHandler": "Lorg/apache/http/impl/client/AbstractHttpClient;->getHttpRequestRetryHandler",
                            "getRedirectHandler": "Lorg/apache/http/impl/client/AbstractHttpClient;->getRedirectHandler",
                            "getUserTokenHandler": "Lorg/apache/http/impl/client/AbstractHttpClient;->getUserTokenHandler",
                            "getConnectionManager": "Lorg/apache/http/impl/client/AbstractHttpClient;->getConnectionManager",
                            "getConnectionKeepAliveStrategy": "Lorg/apache/http/impl/client/AbstractHttpClient;->getConnectionKeepAliveStrategy",
                            "getRoutePlanner": "Lorg/apache/http/impl/client/AbstractHttpClient;->getRoutePlanner",
                            "getCookieSpecs": "Lorg/apache/http/impl/client/AbstractHttpClient;->getCookieSpecs",
                            "getParams": "Lorg/apache/http/impl/client/AbstractHttpClient;->getParams",
                            "getRequestExecutor": "Lorg/apache/http/impl/client/AbstractHttpClient;->getRequestExecutor",
                            "getHttpProcessor": "Lorg/apache/http/impl/client/AbstractHttpClient;->getHttpProcessor",
                            "execute": "Lorg/apache/http/impl/client/AbstractHttpClient;->execute"
                        },
                        "DefaultHttpRequestRetryHandler": {
                            "isRequestSentRetryEnabled": "Lorg/apache/http/impl/client/DefaultHttpRequestRetryHandler;->isRequestSentRetryEnabled",
                            "getRetryCount": "Lorg/apache/http/impl/client/DefaultHttpRequestRetryHandler;->getRetryCount"
                        }
                    },
                    "conn": {
                        "tsccm": {
                            "ThreadSafeClientConnManager": {
                                "getConnectionsInPool": "Lorg/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager;->getConnectionsInPool"
                            }
                        }
                    },
                    "AbstractHttpClientConnection": {
                        "isResponseAvailable": "Lorg/apache/http/impl/AbstractHttpClientConnection;->isResponseAvailable",
                        "isStale": "Lorg/apache/http/impl/AbstractHttpClientConnection;->isStale",
                        "getMetrics": "Lorg/apache/http/impl/AbstractHttpClientConnection;->getMetrics"
                    },
                    "AbstractHttpServerConnection": {
                        "isStale": "Lorg/apache/http/impl/AbstractHttpServerConnection;->isStale",
                        "getMetrics": "Lorg/apache/http/impl/AbstractHttpServerConnection;->getMetrics"
                    },
                    "HttpConnectionMetricsImpl": {
                        "getMetric": "Lorg/apache/http/impl/HttpConnectionMetricsImpl;->getMetric",
                        "getReceivedBytesCount": "Lorg/apache/http/impl/HttpConnectionMetricsImpl;->getReceivedBytesCount",
                        "getRequestCount": "Lorg/apache/http/impl/HttpConnectionMetricsImpl;->getRequestCount",
                        "getResponseCount": "Lorg/apache/http/impl/HttpConnectionMetricsImpl;->getResponseCount",
                        "getSentBytesCount": "Lorg/apache/http/impl/HttpConnectionMetricsImpl;->getSentBytesCount"
                    },
                    "SocketHttpClientConnection": {
                        "isOpen": "Lorg/apache/http/impl/SocketHttpClientConnection;->isOpen",
                        "getLocalPort": "Lorg/apache/http/impl/SocketHttpClientConnection;->getLocalPort",
                        "getRemotePort": "Lorg/apache/http/impl/SocketHttpClientConnection;->getRemotePort",
                        "getSocketTimeout": "Lorg/apache/http/impl/SocketHttpClientConnection;->getSocketTimeout",
                        "getLocalAddress": "Lorg/apache/http/impl/SocketHttpClientConnection;->getLocalAddress",
                        "getRemoteAddress": "Lorg/apache/http/impl/SocketHttpClientConnection;->getRemoteAddress",
                        "getSocket": "Lorg/apache/http/impl/SocketHttpClientConnection;->getSocket"
                    },
                    "SocketHttpServerConnection": {
                        "isOpen": "Lorg/apache/http/impl/SocketHttpServerConnection;->isOpen",
                        "getLocalPort": "Lorg/apache/http/impl/SocketHttpServerConnection;->getLocalPort",
                        "getRemotePort": "Lorg/apache/http/impl/SocketHttpServerConnection;->getRemotePort",
                        "getSocketTimeout": "Lorg/apache/http/impl/SocketHttpServerConnection;->getSocketTimeout",
                        "getLocalAddress": "Lorg/apache/http/impl/SocketHttpServerConnection;->getLocalAddress",
                        "getRemoteAddress": "Lorg/apache/http/impl/SocketHttpServerConnection;->getRemoteAddress",
                        "getSocket": "Lorg/apache/http/impl/SocketHttpServerConnection;->getSocket"
                    },
                    "io": {
                        "HttpTransportMetricsImpl": {
                            "getBytesTransferred": "Lorg/apache/http/impl/io/HttpTransportMetricsImpl;->getBytesTransferred"
                        }
                    }
                },
                "message": {
                    "BasicLineParser": {
                        "parseProtocolVersion": "Lorg/apache/http/message/BasicLineParser;->parseProtocolVersion"
                    },
                    "AbstractHttpMessage": {
                        "getFirstHeader": "Lorg/apache/http/message/AbstractHttpMessage;->getFirstHeader",
                        "getLastHeader": "Lorg/apache/http/message/AbstractHttpMessage;->getLastHeader",
                        "getAllHeaders": "Lorg/apache/http/message/AbstractHttpMessage;->getAllHeaders",
                        "getHeaders": "Lorg/apache/http/message/AbstractHttpMessage;->getHeaders",
                        "getParams": "Lorg/apache/http/message/AbstractHttpMessage;->getParams"
                    },
                    "BasicHttpEntityEnclosingRequest": {
                        "getEntity": "Lorg/apache/http/message/BasicHttpEntityEnclosingRequest;->getEntity"
                    },
                    "BasicHttpRequest": {
                        "getProtocolVersion": "Lorg/apache/http/message/BasicHttpRequest;->getProtocolVersion",
                        "getRequestLine": "Lorg/apache/http/message/BasicHttpRequest;->getRequestLine"
                    },
                    "BasicHttpResponse": {
                        "getLocale": "Lorg/apache/http/message/BasicHttpResponse;->getLocale",
                        "getEntity": "Lorg/apache/http/message/BasicHttpResponse;->getEntity",
                        "getProtocolVersion": "Lorg/apache/http/message/BasicHttpResponse;->getProtocolVersion",
                        "getStatusLine": "Lorg/apache/http/message/BasicHttpResponse;->getStatusLine",
                        "getReason": "Lorg/apache/http/message/BasicHttpResponse;->getReason"
                    },
                    "BasicNameValuePair": {
                        "<init>": "Lorg/apache/http/message/BasicNameValuePair;-><init>"
                    }
                },
                "protocol": {
                    "DefaultedHttpContext": {
                        "getAttribute": "Lorg/apache/http/protocol/DefaultedHttpContext;->getAttribute",
                        "getDefaults": "Lorg/apache/http/protocol/DefaultedHttpContext;->getDefaults"
                    },
                    "BasicHttpContext": {
                        "getAttribute": "Lorg/apache/http/protocol/BasicHttpContext;->getAttribute"
                    },
                    "BasicHttpProcessor": {
                        "getRequestInterceptorCount": "Lorg/apache/http/protocol/BasicHttpProcessor;->getRequestInterceptorCount",
                        "getResponseInterceptorCount": "Lorg/apache/http/protocol/BasicHttpProcessor;->getResponseInterceptorCount",
                        "getRequestInterceptor": "Lorg/apache/http/protocol/BasicHttpProcessor;->getRequestInterceptor",
                        "getResponseInterceptor": "Lorg/apache/http/protocol/BasicHttpProcessor;->getResponseInterceptor"
                    },
                    "HttpContext": {
                        "getAttribute": "Lorg/apache/http/protocol/HttpContext;->getAttribute"
                    },
                    "HttpDateGenerator": {
                        "getCurrentDate": "Lorg/apache/http/protocol/HttpDateGenerator;->getCurrentDate"
                    },
                    "HttpRequestInterceptorList": {
                        "getRequestInterceptorCount": "Lorg/apache/http/protocol/HttpRequestInterceptorList;->getRequestInterceptorCount",
                        "getRequestInterceptor": "Lorg/apache/http/protocol/HttpRequestInterceptorList;->getRequestInterceptor"
                    },
                    "HttpResponseInterceptorList": {
                        "getResponseInterceptorCount": "Lorg/apache/http/protocol/HttpResponseInterceptorList;->getResponseInterceptorCount",
                        "getResponseInterceptor": "Lorg/apache/http/protocol/HttpResponseInterceptorList;->getResponseInterceptor"
                    },
                    "HttpService": {
                        "getParams": "Lorg/apache/http/protocol/HttpService;->getParams"
                    },
                    "SyncBasicHttpContext": {
                        "getAttribute": "Lorg/apache/http/protocol/SyncBasicHttpContext;->getAttribute"
                    }
                },
                "HttpClientConnection": {
                    "isResponseAvailable": "Lorg/apache/http/HttpClientConnection;->isResponseAvailable"
                },
                "HttpConnection": {
                    "isOpen": "Lorg/apache/http/HttpConnection;->isOpen",
                    "isStale": "Lorg/apache/http/HttpConnection;->isStale",
                    "getSocketTimeout": "Lorg/apache/http/HttpConnection;->getSocketTimeout",
                    "getMetrics": "Lorg/apache/http/HttpConnection;->getMetrics"
                },
                "HttpConnectionMetrics": {
                    "getMetric": "Lorg/apache/http/HttpConnectionMetrics;->getMetric",
                    "getReceivedBytesCount": "Lorg/apache/http/HttpConnectionMetrics;->getReceivedBytesCount",
                    "getRequestCount": "Lorg/apache/http/HttpConnectionMetrics;->getRequestCount",
                    "getResponseCount": "Lorg/apache/http/HttpConnectionMetrics;->getResponseCount",
                    "getSentBytesCount": "Lorg/apache/http/HttpConnectionMetrics;->getSentBytesCount"
                },
                "HttpEntity": {
                    "isChunked": "Lorg/apache/http/HttpEntity;->isChunked",
                    "isRepeatable": "Lorg/apache/http/HttpEntity;->isRepeatable",
                    "isStreaming": "Lorg/apache/http/HttpEntity;->isStreaming",
                    "getContent": "Lorg/apache/http/HttpEntity;->getContent",
                    "getContentLength": "Lorg/apache/http/HttpEntity;->getContentLength",
                    "getContentEncoding": "Lorg/apache/http/HttpEntity;->getContentEncoding",
                    "getContentType": "Lorg/apache/http/HttpEntity;->getContentType"
                },
                "HttpEntityEnclosingRequest": {
                    "getEntity": "Lorg/apache/http/HttpEntityEnclosingRequest;->getEntity"
                },
                "HttpHost": {
                    "getPort": "Lorg/apache/http/HttpHost;->getPort",
                    "getHostName": "Lorg/apache/http/HttpHost;->getHostName",
                    "getSchemeName": "Lorg/apache/http/HttpHost;->getSchemeName"
                },
                "HttpInetConnection": {
                    "getLocalPort": "Lorg/apache/http/HttpInetConnection;->getLocalPort",
                    "getRemotePort": "Lorg/apache/http/HttpInetConnection;->getRemotePort",
                    "getLocalAddress": "Lorg/apache/http/HttpInetConnection;->getLocalAddress",
                    "getRemoteAddress": "Lorg/apache/http/HttpInetConnection;->getRemoteAddress"
                },
                "HttpMessage": {
                    "getFirstHeader": "Lorg/apache/http/HttpMessage;->getFirstHeader",
                    "getLastHeader": "Lorg/apache/http/HttpMessage;->getLastHeader",
                    "getAllHeaders": "Lorg/apache/http/HttpMessage;->getAllHeaders",
                    "getHeaders": "Lorg/apache/http/HttpMessage;->getHeaders",
                    "getProtocolVersion": "Lorg/apache/http/HttpMessage;->getProtocolVersion",
                    "getParams": "Lorg/apache/http/HttpMessage;->getParams"
                },
                "HttpRequest": {
                    "getRequestLine": "Lorg/apache/http/HttpRequest;->getRequestLine"
                },
                "HttpResponse": {
                    "getLocale": "Lorg/apache/http/HttpResponse;->getLocale",
                    "getEntity": "Lorg/apache/http/HttpResponse;->getEntity",
                    "getStatusLine": "Lorg/apache/http/HttpResponse;->getStatusLine"
                },
                "client": {
                    "HttpClient": {
                        "getConnectionManager": "Lorg/apache/http/client/HttpClient;->getConnectionManager",
                        "getParams": "Lorg/apache/http/client/HttpClient;->getParams",
                        "execute": "Lorg/apache/http/client/HttpClient;->execute"
                    },
                    "HttpResponseException": {
                        "getStatusCode": "Lorg/apache/http/client/HttpResponseException;->getStatusCode"
                    },
                    "methods": {
                        "HttpDelete": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpDelete;->getMethod"
                        },
                        "HttpEntityEnclosingRequestBase": {
                            "getEntity": "Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase;->getEntity"
                        },
                        "HttpGet": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpGet;->getMethod"
                        },
                        "HttpHead": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpHead;->getMethod"
                        },
                        "HttpOptions": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpOptions;->getMethod",
                            "getAllowedMethods": "Lorg/apache/http/client/methods/HttpOptions;->getAllowedMethods"
                        },
                        "HttpPost": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpPost;->getMethod"
                        },
                        "HttpPut": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpPut;->getMethod"
                        },
                        "HttpRequestBase": {
                            "isAborted": "Lorg/apache/http/client/methods/HttpRequestBase;->isAborted",
                            "getMethod": "Lorg/apache/http/client/methods/HttpRequestBase;->getMethod",
                            "getURI": "Lorg/apache/http/client/methods/HttpRequestBase;->getURI",
                            "getProtocolVersion": "Lorg/apache/http/client/methods/HttpRequestBase;->getProtocolVersion",
                            "getRequestLine": "Lorg/apache/http/client/methods/HttpRequestBase;->getRequestLine"
                        },
                        "HttpTrace": {
                            "getMethod": "Lorg/apache/http/client/methods/HttpTrace;->getMethod"
                        },
                        "HttpUriRequest": {
                            "isAborted": "Lorg/apache/http/client/methods/HttpUriRequest;->isAborted",
                            "getMethod": "Lorg/apache/http/client/methods/HttpUriRequest;->getMethod",
                            "getURI": "Lorg/apache/http/client/methods/HttpUriRequest;->getURI"
                        }
                    },
                    "params": {
                        "HttpClientParams": {
                            "isAuthenticating": "Lorg/apache/http/client/params/HttpClientParams;->isAuthenticating",
                            "isRedirecting": "Lorg/apache/http/client/params/HttpClientParams;->isRedirecting",
                            "getCookiePolicy": "Lorg/apache/http/client/params/HttpClientParams;->getCookiePolicy"
                        }
                    }
                },
                "conn": {
                    "HttpHostConnectException": {
                        "getHost": "Lorg/apache/http/conn/HttpHostConnectException;->getHost"
                    },
                    "routing": {
                        "HttpRoute": {
                            "isLayered": "Lorg/apache/http/conn/routing/HttpRoute;->isLayered",
                            "isSecure": "Lorg/apache/http/conn/routing/HttpRoute;->isSecure",
                            "isTunnelled": "Lorg/apache/http/conn/routing/HttpRoute;->isTunnelled",
                            "getHopCount": "Lorg/apache/http/conn/routing/HttpRoute;->getHopCount",
                            "getLocalAddress": "Lorg/apache/http/conn/routing/HttpRoute;->getLocalAddress",
                            "getHopTarget": "Lorg/apache/http/conn/routing/HttpRoute;->getHopTarget",
                            "getProxyHost": "Lorg/apache/http/conn/routing/HttpRoute;->getProxyHost",
                            "getTargetHost": "Lorg/apache/http/conn/routing/HttpRoute;->getTargetHost",
                            "getLayerType": "Lorg/apache/http/conn/routing/HttpRoute;->getLayerType",
                            "getTunnelType": "Lorg/apache/http/conn/routing/HttpRoute;->getTunnelType"
                        }
                    }
                },
                "entity": {
                    "AbstractHttpEntity": {
                        "isChunked": "Lorg/apache/http/entity/AbstractHttpEntity;->isChunked",
                        "getContentEncoding": "Lorg/apache/http/entity/AbstractHttpEntity;->getContentEncoding",
                        "getContentType": "Lorg/apache/http/entity/AbstractHttpEntity;->getContentType"
                    },
                    "BasicHttpEntity": {
                        "isRepeatable": "Lorg/apache/http/entity/BasicHttpEntity;->isRepeatable",
                        "isStreaming": "Lorg/apache/http/entity/BasicHttpEntity;->isStreaming",
                        "getContent": "Lorg/apache/http/entity/BasicHttpEntity;->getContent",
                        "getContentLength": "Lorg/apache/http/entity/BasicHttpEntity;->getContentLength"
                    },
                    "BufferedHttpEntity": {
                        "isChunked": "Lorg/apache/http/entity/BufferedHttpEntity;->isChunked",
                        "isRepeatable": "Lorg/apache/http/entity/BufferedHttpEntity;->isRepeatable",
                        "isStreaming": "Lorg/apache/http/entity/BufferedHttpEntity;->isStreaming",
                        "getContent": "Lorg/apache/http/entity/BufferedHttpEntity;->getContent",
                        "getContentLength": "Lorg/apache/http/entity/BufferedHttpEntity;->getContentLength"
                    },
                    "HttpEntityWrapper": {
                        "isChunked": "Lorg/apache/http/entity/HttpEntityWrapper;->isChunked",
                        "isRepeatable": "Lorg/apache/http/entity/HttpEntityWrapper;->isRepeatable",
                        "isStreaming": "Lorg/apache/http/entity/HttpEntityWrapper;->isStreaming",
                        "getContent": "Lorg/apache/http/entity/HttpEntityWrapper;->getContent",
                        "getContentLength": "Lorg/apache/http/entity/HttpEntityWrapper;->getContentLength",
                        "getContentEncoding": "Lorg/apache/http/entity/HttpEntityWrapper;->getContentEncoding",
                        "getContentType": "Lorg/apache/http/entity/HttpEntityWrapper;->getContentType"
                    }
                },
                "io": {
                    "HttpTransportMetrics": {
                        "getBytesTransferred": "Lorg/apache/http/io/HttpTransportMetrics;->getBytesTransferred"
                    }
                },
                "params": {
                    "AbstractHttpParams": {
                        "getBooleanParameter": "Lorg/apache/http/params/AbstractHttpParams;->getBooleanParameter",
                        "isParameterFalse": "Lorg/apache/http/params/AbstractHttpParams;->isParameterFalse",
                        "isParameterTrue": "Lorg/apache/http/params/AbstractHttpParams;->isParameterTrue",
                        "getDoubleParameter": "Lorg/apache/http/params/AbstractHttpParams;->getDoubleParameter",
                        "getIntParameter": "Lorg/apache/http/params/AbstractHttpParams;->getIntParameter",
                        "getLongParameter": "Lorg/apache/http/params/AbstractHttpParams;->getLongParameter"
                    },
                    "BasicHttpParams": {
                        "isParameterSet": "Lorg/apache/http/params/BasicHttpParams;->isParameterSet",
                        "isParameterSetLocally": "Lorg/apache/http/params/BasicHttpParams;->isParameterSetLocally",
                        "getParameter": "Lorg/apache/http/params/BasicHttpParams;->getParameter"
                    },
                    "DefaultedHttpParams": {
                        "getParameter": "Lorg/apache/http/params/DefaultedHttpParams;->getParameter",
                        "getDefaults": "Lorg/apache/http/params/DefaultedHttpParams;->getDefaults"
                    },
                    "HttpConnectionParams": {
                        "getTcpNoDelay": "Lorg/apache/http/params/HttpConnectionParams;->getTcpNoDelay",
                        "isStaleCheckingEnabled": "Lorg/apache/http/params/HttpConnectionParams;->isStaleCheckingEnabled",
                        "getConnectionTimeout": "Lorg/apache/http/params/HttpConnectionParams;->getConnectionTimeout",
                        "getLinger": "Lorg/apache/http/params/HttpConnectionParams;->getLinger",
                        "getSoTimeout": "Lorg/apache/http/params/HttpConnectionParams;->getSoTimeout",
                        "getSocketBufferSize": "Lorg/apache/http/params/HttpConnectionParams;->getSocketBufferSize"
                    },
                    "HttpParams": {
                        "getBooleanParameter": "Lorg/apache/http/params/HttpParams;->getBooleanParameter",
                        "isParameterFalse": "Lorg/apache/http/params/HttpParams;->isParameterFalse",
                        "isParameterTrue": "Lorg/apache/http/params/HttpParams;->isParameterTrue",
                        "getDoubleParameter": "Lorg/apache/http/params/HttpParams;->getDoubleParameter",
                        "getIntParameter": "Lorg/apache/http/params/HttpParams;->getIntParameter",
                        "getParameter": "Lorg/apache/http/params/HttpParams;->getParameter",
                        "getLongParameter": "Lorg/apache/http/params/HttpParams;->getLongParameter"
                    },
                    "HttpProtocolParams": {
                        "getContentCharset": "Lorg/apache/http/params/HttpProtocolParams;->getContentCharset",
                        "getHttpElementCharset": "Lorg/apache/http/params/HttpProtocolParams;->getHttpElementCharset",
                        "getUserAgent": "Lorg/apache/http/params/HttpProtocolParams;->getUserAgent",
                        "getVersion": "Lorg/apache/http/params/HttpProtocolParams;->getVersion"
                    }
                },
                "setStaleCheckingEnabled": "Lorg/apache/http;->setStaleCheckingEnabled",
                "printStackTrace": "Lorg/apache/http;->printStackTrace",
                "setIntParameter": "Lorg/apache/http;->setIntParameter",
                "util": {
                    "EntityUtils": {
                        "toString": "Lorg/apache/http/util/EntityUtils;->toString",
                        "toByteArray": "Lorg/apache/http/util/EntityUtils;->toByteArray",
                        "getContentCharSet": "Lorg/apache/http/util/EntityUtils;->getContentCharSet"
                    }
                }
            }
        },
        "w3c": {
            "dom": {
                "getElementsByTagName": "Lorg/w3c/dom;->getElementsByTagName"
            }
        },
        "xmlpull": {
            "v1": {
                "setFeature": "Lorg/xmlpull/v1;->setFeature",
                "text": "Lorg/xmlpull/v1;->text",
                "nextText": "Lorg/xmlpull/v1;->nextText"
            }
        }
    },
    "android_maps_conflict_avoidance": {
        "com": {
            "google": {
                "common": {
                    "io": {
                        "GoogleHttpConnection": {
                            "getResponseCode": "Landroid_maps_conflict_avoidance/com/google/common/io/GoogleHttpConnection;->getResponseCode",
                            "getContentType": "Landroid_maps_conflict_avoidance/com/google/common/io/GoogleHttpConnection;->getContentType",
                            "getLength": "Landroid_maps_conflict_avoidance/com/google/common/io/GoogleHttpConnection;->getLength"
                        },
                        "android": {
                            "AndroidHttpClient": {
                                "getConnectionManager": "Landroid_maps_conflict_avoidance/com/google/common/io/android/AndroidHttpClient;->getConnectionManager",
                                "getParams": "Landroid_maps_conflict_avoidance/com/google/common/io/android/AndroidHttpClient;->getParams"
                            },
                            "AndroidHttpConnectionFactory": {
                                "getClient": "Landroid_maps_conflict_avoidance/com/google/common/io/android/AndroidHttpConnectionFactory;->getClient"
                            },
                            "GoogleHttpClient": {
                                "getConnectionManager": "Landroid_maps_conflict_avoidance/com/google/common/io/android/GoogleHttpClient;->getConnectionManager",
                                "getParams": "Landroid_maps_conflict_avoidance/com/google/common/io/android/GoogleHttpClient;->getParams"
                            }
                        }
                    }
                }
            }
        }
    },
    "sun": {
        "net": {
            "www": {
                "protocol": {
                    "http": {
                        "HttpURLConnection": {
                            "connect": "Lsun/net/www/protocol/http/HttpURLConnection;->connect"
                        }
                    }
                }
            }
        }
    },
    "injections":{
        "AntiEmulator":{
            "testEvasionBehavior":"Linjections/AntiEmulator;->testEvasionBehavior"
        }
    }
}